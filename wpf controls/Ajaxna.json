{
  "ProjectName": "Ajaxna",
  "Title": "Ajaxna - C# .NET & Javascript API Framework for 3D Web Games without Plugins.",
  "Description": "Ajaxna is a javascript API enabling 3D games for the web, without using plugins.\n\nThis programming framework targets Visual Studio 2008, follows an XNA inspired API, is implemented as a C# ASP.NET control and is built around dynamic client class (lazy) loading and intellisense.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Ajaxna is a javascript API enabling 3D games for the web, without using plugins.<br /><br />This programming framework targets Visual Studio 2008, follows an XNA inspired API, is implemented as a C&#35; ASP.NET control and is built around dynamic client class &#40;lazy&#41; loading and intellisense.<br /><br /><b>Project Links</b>\n<ul><li><a href=\"https://ajaxna.codeplex.com/wikipage?title=Ajaxna%20News&referringTitle=Home\">Ajaxna News</a> - <i>Get all the latest info about <b>Ajaxna</b></i></li>\n<li><a href=\"https://ajaxna.codeplex.com/wikipage?title=Tutorials&referringTitle=Home\">Tutorials</a> - Updated Aug 09. <i>Get started right now with Ajaxna! Code your first <b>solid, lit, spinning 3D cube</b>  in a web page, without plugins, in no time.</i></li></ul>\n<br />\n<h1>Overview</h1>\rAjaxna development began in early 2006, by me, Kevin Robinson, as &quot;just another ajax framework&quot;, a move away from hidden frames and the like, as an effort to produce a collection of truly re-usable client classes that would help <b>me</b> do my job as a Web Developer. Conceptually it can most easily be compared to the Microsoft Ajax client libraries as it tackles many of the same issues such as an ability to create client classes using a classical Object Oriented nature, cross browser eventing and client serialization from and to json and xml. It was initially developed with no knowledge at all of &quot;Atlas&quot;, as it was originally known, but does bear many similarities.<br /><br />Unlike Atlas however, I made the decision early on to build the framework upon the notion of dynamic client class loading. I didn&#39;t want to have to load up tons of javascript code into a client browser, which might never be used. You can still do things this way if needed but there are many reasons not to. By default Ajaxna will load only a set of bootstrapper code/classes to enable it to function <b>if it is called</b>.<br /><br />As soon as that decision was made I realised that working with a framework like this made a &quot;Single Page Application&quot; a real possibility. And then the advantages of this style of Web Application Development began to show themselves, starting with the statefulness of such applications, the client code never had to deal with page refreshes or roundtrips and instead of being just there for &quot;effects&quot; actually could take over the Presentation Layer entirely. The coding style used is as close to C# as I dared get.<br /><br />Things then started to get more ambitious and templating was introduced to allow client classes (akin to ASP.NET Code behind) to load in an associated template (akin to ASP.NET .ascx). Any Dom controls of interest could then be parsed out and added as class members of the templated class (akin to what happens with ASP.NET User Controls).<br /><br />Just for fun, I  later added some drawing classes, and then classes for 3D rendering, with a similar API to Managed DirectX (MDX). Again, Ajaxna does not need to load in any class that is not used so I knew this kindof excess was not going to affect download performance of the framework as a whole.<br /><br />Professionally I then started using MS Ajax, not because it was the best or fastest or scaled well but because it was easily understood, very well supported, and allowed rapid development by a whole team.<br /><br />Ajaxna then focused more on the 3d stuff and I thought it would be fun to do to my MDX classes what Microsoft did to theirs, and so wrapped it in some XNA style classes to make development easier.<br /><br />Later on I converted it into a .NET Custom Web Control (AjaxnaControl) because I liked the idea of a single file I could reference and get all this functionality out of. This also made deployment easier. I could make use of the Designers in .NET to make things easier for a developer to set up and Visual Studio was definately what I was aiming at as Javascript Intellisense support was added in the 2008 version. This support is sometimes for free and sometimes you have to work for it. Much effort has been made to enable Ajaxna to get the best from this feature.<br /><br />\n<h2>Why is Ajaxna on Codeplex?</h2>\rAjaxna has gotten so large a project now and I believe has alot of potential, either for games or web applications or both, that I recognise I no longer have the time needed to develop it the way it could be developed. <br /><br />Due to the built in dynamic class loading, it would make alot of sense for collaboration between developers with specialist skills in certain areas. It&#39;s shown currently by having an XNA namespace but others areas could be added without affecting performance at all. A little like the .NET compact framework (and XNA) this framework delivers/can deliver alot of functionality and a very rich API, but unlike the microsoft offerings, users do not have to download anything but the bootstrap code and can run desktop like applications or even games right in the browser, all from a single page, if desired.<br /><br />Therefore, I offer this out to the community to assess, comment on, use and hopefully to embrace, develop and help to extend.<br />\n<h2>What is in the (pre) Alpha release</h2>\rJust the basics, the compiled DLL and the source code for Ajaxna. <br /><br />I intend to supply examples, code templates and tutorials in due course but for now I had to publish something else the project would be deleted from Codeplex. <br />\n<h2>Screenies and Info</h2>\r\nEarly version playable example: <a href=\"http://www.victory-road.co.uk/ajaxengine/examples/ajax_xna_performance_javascript_3d_rendering_test_game_battlezone_prototype_using_intellisense.html\">http://www.victory-road.co.uk/ajaxengine/examples/ajax_xna_performance_javascript_3d_rendering_test_game_battlezone_prototype_using_intellisense.html</a><br /><br /><i>Screenie A</i><br /><img src=\"/projects/Ajaxna/f61b4164-7f12-41b7-bff4-0cadaa81caa1\" alt=\"Ajaxna3.gif\" title=\"Ajaxna3.gif\" /><br /><a href=\"/projects/Ajaxna/0316a83e-d5e3-4d79-913c-3aabba9785c3\">Ajaxna3_Large.gif</a><br /><br />Screenie A shows:\n<ul><li>Use of the treeview control. The tree is reflecting the loaded classes and math classes such as Vector3 and Matrix are shown.</li>\n<li>An Ajaxna Game window rendering 3D geometry, a simple cube in this case.</li>\n<li>A debug console showing HTTP traffic due to dynamic client class loading (on demand).</li>\n<li>This example is in IE7</li></ul>\n<br /><i>Screenie B</i><br /><img src=\"/projects/Ajaxna/0cc65d88-9082-4230-8eb3-4a3b285aeb90\" alt=\"Ajaxna_intellisense.gif\" title=\"Ajaxna_intellisense.gif\" /><br /><br />Screenie B shows\n<ul><li>The Javascript intellisense (using VWD 2008) on an instance of the ajax.windows.Console class. </li>\n<li>The intellisense shows Events, Method, Properties and Classes properly represented.</li>\n<li>Registration of a client application with the Ajaxna framework.</li>\n<li>Dynamic class loading using the $new() method.</li>\n<li>Type casting using the static &quot;cast()&quot; method of all classes.</li>\n<li>How event handlers can be applied to DOM elements (the window in this case).</li></ul>\n<br /><i>Sceenie C</i><br /><img src=\"/projects/Ajaxna/2e22c4bc-e9a9-46d5-a1cd-dc947067910e\" alt=\"ajaxna_StarWars.gif\" title=\"ajaxna_StarWars.gif\" /><br /><br />Screenie C shows:\n<ul><li>A Vector 3D Star Wars game prototype written using Ajaxna rendering 30 polygons per render and running at 114 frames per second in (3420 lighted polygons per second).</li>\n<li>A Tie fighter flying past with the player HUD in the foreground.</li>\n<li>This example is in Google Chrome.</li></ul>\n<br /><i>Screenie D</i><br /><img src=\"/projects/Ajaxna/a8b5119f-477e-428b-b0ab-adca00b63a2c\" alt=\"Ajaxna_3DCollisions.gif\" title=\"Ajaxna_3DCollisions.gif\" /><br /><br />Screenie D shows:\n<ul><li>Use of built in classes to perform collision detection &amp; response for Ellipsoid to Mesh.</li>\n<li>The Mesh in this case is rotating and pushing the Ellipsoid (the box) out of the way.</li>\n<li>This example is in Firefox.</li></ul>\n<br /><i>Screenie E</i><br /><img src=\"/projects/Ajaxna/bd85759b-c144-4262-8468-53aa31f0055f\" alt=\"Ajaxna_Platformer.gif\" title=\"Ajaxna_Platformer.gif\" /><br /><br />Screenie E shows:\n<ul><li>A platform game prototype built using Ajaxna.</li>\n<li>The player (box) is standing on a rotating platform by making use of the collision classes mentioned above.</li>\n<li>Bone type scene graph hierarchies can be constructed, with nodes attached and detached. Here the player has been attached to the rotating platform (BRIDGE) as he collided with (jumped on) it and the platform&#39;s face Normal was within &quot;Standing on&quot; limits (pointing more or less upwards).</li>\n<li>This example is in Safari</li></ul>\n<br /><i>Screenie F</i><br /><img src=\"/projects/Ajaxna/0b262573-b23d-4046-b008-19a51b0613b1\" alt=\"Ajaxna_Raycaster.gif\" title=\"Ajaxna_Raycaster.gif\" /><br /><br />Screenie F shows:\n<ul><li>Use of an experimental set of Ray Casting classes (ajax.xna.Raycaster)</li>\n<li>Makes use of texture drawing from a source rectangle (ajax.geometry.shapes.Rectangle) to a destination rectangle, </li>\n<li>Sprite Z occlusion (barrel sprites are partially hidden by foreground raycast walls</li>\n<li>Sliding collision detection/response.</li>\n<li>This example is in Google Chrome, running at 70 frames per second+</li></ul>\n<br /><i>Screenie G</i><br /><img src=\"/projects/Ajaxna/501fb2e0-3400-4a6f-b2ca-35fbe203a55b\" alt=\"Ajaxna_Application.gif\" title=\"Ajaxna_Application.gif\" /><br /><br />Screenie G shows:\n<ul><li>Ajaxna in it&#39;s original use as a framework for scalable, stateful web application development</li>\n<li>We see an &quot;MDI&quot; type window containing child windows, a treeview, some menus, a context menu and a datagrid.</li>\n<li>Example used client side datasources to bind multiple controls to the same data (change in one place of the GUI...see the same change in another).</li>\n<li>This example is in IE6</li></ul>\n<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "Ajax,C#,game,XNA,3D,javascript,Framework,web,games,Performance,3D engine,classes,browser,.NET Controls,Client Library,Scalability,Dynamic loading,Ajaxna,ajax gamedev,",
  "LastEdited": "2009-08-17T08:45:46.953-07:00"
}