{
  "ProjectName": "CompositeExtensions",
  "Title": "Composite Extensions / Test Suite reference implementation",
  "Description": "This project provides a new reference implementation for the Composite WPF libraries.",
  "MovedLink": "https://github.com/jbe2277/waf",
  "HomeWiki": "<div class=\"wikidoc\"> \n<h1>New stable successor project:</h1>\r<h1><a href=\"https://github.com/jbe2277/waf\">Win Application Framework (WAF)</a></h1>\r \n<hr />\n \n<h1>Project Description</h1>\rThis project provides a new reference implementation for the Composite WPF libraries. During the development of this reference implementation I have extracted some useful classes into a new library called ‘Composite Extensions’.<br /><br /><img src=\"/projects/CompositeExtensions/8ef0290c-27fe-4f04-8e46-462dfdeb45c1\" alt=\"testsuite.png\" title=\"testsuite.png\" /><br /><br />The Test Suite reference implementation was originally developed for the Composite UI Application Block. You might already know this application from one of the Websites:\n<ul><li><a href=\"http://www.berchtel.com/archive/diplomathesis\">Diploma Thesis: Evaluation of Plug-In Architectures for a Test Suite</a></li>\n<li><a href=\"http://www.codeplex.com/cabext\">CodePlex: CAB Extension / Test Suite reference application</a></li>\n<li><a href=\"http://www.codeplex.com/scsfcontrib\">CodePlex: Smart Client Contrib</a></li></ul>\nI have ported this application to use WPF instead of Windows Forms and the <a href=\"http://msdn.microsoft.com/en-us/library/cc707819.aspx\">Composite Application Guidance for WPF</a> instead of the Composite UI Application Block. The migration work was very informative because it showed me that by using separated interfaces and dependency injection the time and effort for porting the application to a new application framework was really low. Quite another story was the migration from Windows Forms to WPF. It took me a lot more time to recreate the User Interface layer in WPF because I had to learn the new concepts of WPF first.<br />\n<h1>Highlights</h1>\r<h2>Composite Extensions library </h2>\rfor <a href=\"http://compositewpf.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=23450\">Composite Application Guidance - Feb 2009 release</a>\n<ul><li><b>IApplicationContainer</b> and <b>ApplicationContainer</b>: New <a href=\"http://msdn.microsoft.com/en-us/library/cc707875.aspx\">fa&#231;ade</a> that includes methods to register types at the container. This new container fa&#231;ade allows me to decouple the Test Suite from the Unity Framework.</li>\n<li><b>ApplicationInfo</b>: Provides Information about the running application (e.g. Product Name, Version Number).</li>\n<li><b>DelegateCommand</b>: Simplifies the <a href=\"http://msdn.microsoft.com/en-us/library/cc707894.aspx\">command</a> usage.</li>\n<li><b>ResourceService</b>: Includes helper methods to handle WPF resources. Furthermore, it provides an attached property to define shared resource dictionaries inside the View.</li>\n<li><b>WeakEventManagerBase</b>: Derive from this class to support new event types for the <a href=\"http://msdn.microsoft.com/en-us/library/aa970850.aspx\">WeakEvent pattern</a>.</li>\n<li><b>TypeManager</b>: Provides a method to retrieve the PropertyInfo through a type-safe lambda expression. This can be used to pass property names to the property changed notifications implementation.</li>\n<li><b>PresentationModel</b>, <b>IView</b> and <b>Model</b>: These classes support you to implement the <a href=\"http://martinfowler.com/eaaDev/PresentationModel.html\">PresentationModel pattern</a>.</li>\n<li><b>ToolBarTrayRegionAdapter</b>: An <a href=\"http://msdn.microsoft.com/en-us/library/cc707884.aspx\">adapter</a> for the RegionManager that allows a module to host new toolbars in the shell.</li></ul>\n<h2>Test Suite reference implementation</h2>\r<ul><li><b>Separated presentation</b> through <a href=\"http://martinfowler.com/eaaDev/PassiveScreen.html\">Presentation Model</a> (often referred as Model-View-ViewModel pattern).\n<ul><li>The Composite Extensions library contains the <i>PresentationModel</i> base class and the <i>IView</i> interface that helps to implement the Presentation Model pattern.</li>\n<li>Collaboration with the model is done through weak events. This ensures that no memory leaks occur. See: <i>RtfEditor.Module / RtfEditorPresentationModel.cs</i> or <i>Help.Module / HelpPresentationModel.cs</i> (here is a custom WeakEventManager used)</li>\n<li>Composition of views that uses a separate PresentationModel for every view. See: <i>TestDevice / FGenDevice.ControlView / Views</i>: <i>ConfigurationView.xaml</i> is used by <i>ConfigurationEditWindow.xaml</i> and <i>FunctionGenView.xaml</i></li></ul></li>\n<li><b>Document Management</b> (New, Open, Save and Close documents): The <i>Infrastructure.Module / Services / DocumentManager</i> and the <i>RtfEditor.Module</i> shows how document management could be handled in a composite application. The <i>DocumentManager</i> service handles document lifecycle tasks and keeps track of all registered document types. This service mediates between the user interface and the document. A module developer, who has to implement a new document type, does not have to care about things like configuring the OpenFileDialog component or enabling and disabling the save buttons.</li>\n<li><b>Enterprise Library example modules</b>: The three modules <i>LogViewer.Module</i>, <i>LogViewer.Demo</i> and <i>Message.Demo</i> are dedicated to show how the Logging Application Block and the Exception Application Block works.</li>\n<li><b>Modules deployment</b>: The Test Suite reference implementation provides every module a separate directory to avoid file naming or versioning conflicts between the modules. These directories are found under the directory <i>Modules</i>. The <i>Libraries</i> directory contains all the libraries used by the Test Suite and its modules (e.g. Enterprise Library). By using sub directories, the CLR has to be told where it is going to find the assemblies. The Shell adds the probing element in the application configuration file (<i>App.config</i>) to accomplish this. </li></ul>\n\n<h1>Documentation</h1>\rA description of the Test Suite reference implementation can be found in my <a href=\"http://www.berchtel.com/archive/diplomathesis/html/07-prototype.html\">diploma thesis</a>. But be aware that the diploma thesis describes the old Test Suite reference implementation which uses the Composite UI Application Block.<br />\n<h1>Discussions</h1>\r<ul><li><a href=\"https://compositeextensions.codeplex.com/discussions/53731\">Best Practices: How to implement INotifyPropertyChanged right?</a></li>\n<li><a href=\"https://compositeextensions.codeplex.com/discussions/42919\">Best Practices: How to handle shared resources in a modular application?</a></li>\n<li><a href=\"https://compositeextensions.codeplex.com/discussions/52910\">Best Practices: Localize a WPF application</a></li>\n<li><a href=\"https://compositeextensions.codeplex.com/discussions/52980\">Best Practices: How to implement ShortCut Keys with DelegateCommands</a></li>\n<li><a href=\"https://compositeextensions.codeplex.com/discussions/42893\">Best Practices: Should I create own assemblies for module interfaces?</a></li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET 3.5,WPF,CompositeWPF,.net 3.5 sp1,Composite,Composite UI,Presentation Model,Model-View-ViewModel,architecture,dependency injection,entlib,Enterprise Library,GUI,IOC,Guidance,Library,patterns,Plugin,xaml,Test Suite,WPF frameworks,",
  "LastEdited": "2017-10-22T10:55:13.907-07:00"
}