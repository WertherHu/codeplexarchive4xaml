{
  "ProjectName": "enhancedwebpart",
  "Title": "Enhanced WebPart",
  "Description": "Enhanced Webpart is a webpart with enhanced properties editor. It allows you display properties of most common types, and provides easy way to add custom controls to display your own types in webpart properties editor.\n\nEnhanced Webpart fully supports localization.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong></p>\r\n<p>Enhanced Webpart is a SharePoint&nbsp;webpart with enhanced properties editor. It allows you display and edit&nbsp;properties of most common types, and provides&nbsp;easy way to&nbsp;add&nbsp;custom controls to display your own&nbsp;types in webpart properties\r\n editor.</p>\r\n<p>Also, this project contains localization classes, which will help you localize your project.</p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>Elementary Example</strong></p>\r\n<pre><span style=\"font-family:Courier New; color:#000000; font-size:small\"><span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">class</span> <span style=\"color:#2b91af\">EnhancedWebPartTest</span> : <span style=\"color:#2b91af\">EnhancedWebPart</span>\r\n{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">Personalizable</span>(<span style=\"color:#2b91af\">PersonalizationScope</span>.Shared),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">EnhancedWebPartProperty</span>(<span style=\"color:#0000ff\">true</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebBrowsable</span>(<span style=\"color:#0000ff\">false</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebDisplayName</span>(<span style=\"color:#a31515\">&quot;Simple property&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">string</span> SimpleProperty { <span style=\"color:#0000ff\">get</span>; <span style=\"color:#0000ff\">set</span>; }\r\n\r\n}</span></pre>\r\n<p>So, what you need to do to&nbsp;extend your webpart, is to inherit your webpart class&nbsp;from EnhancedWebPart, and to&nbsp;mark appropriate properties with [EnhancedWebPartProperty(true)] attribute.</p>\r\n<p>Also, you need to set [WebBrowsable(false)] attribute to&nbsp;the properties, to prevent each property from displaying in standard webpart property&nbsp;editor.</p>\r\n<p>After deploying, you will see the property in &quot;Preferences&quot; editor part:</p>\r\n<p><img src=\"https://sites.google.com/site/omlinfiles/elementarySample.png\" alt=\"Elementary sample\" style=\"border:0\"></p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>More Complex Example</strong></p>\r\n<p>EnhancedWebPart contains several &quot;DisplayableClasses&quot;, which allow you to show&nbsp;different&nbsp;property types in WebPart Property Editor.</p>\r\n<p>You can&nbsp;use simple types, such as int, string and bool, or you can add your own, more complex,&nbsp;displayable classes.</p>\r\n<p>OOTB, EnhancedWebPart provides DisplayableSPUser class, which allows&nbsp;display SharePoint People Picker page&nbsp;for picking the SPUser object.</p>\r\n<p>Let's look at the code:</p>\r\n<pre><span style=\"font-family:Courier New; color:#000000; font-size:small\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">class</span> <span style=\"color:#2b91af\">EnhancedVisualWebPart</span> : <span style=\"color:#2b91af\">EnhancedWebPart</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">Personalizable</span>(<span style=\"color:#2b91af\">PersonalizationScope</span>.Shared),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">EnhancedWebPartProperty</span>(<span style=\"color:#0000ff\">true</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebBrowsable</span>(<span style=\"color:#0000ff\">false</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebDisplayName</span>(<span style=\"color:#a31515\">&quot;Text&quot;</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Category</span>(<span style=\"color:#a31515\">&quot;Preferences&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">string</span> Text { <span style=\"color:#0000ff\">get</span>; <span style=\"color:#0000ff\">set</span>; }\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">Personalizable</span>(<span style=\"color:#2b91af\">PersonalizationScope</span>.Shared),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">EnhancedWebPartProperty</span>(<span style=\"color:#0000ff\">true</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebBrowsable</span>(<span style=\"color:#0000ff\">false</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebDisplayName</span>(<span style=\"color:#a31515\">&quot;check this!&quot;</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Category</span>(<span style=\"color:#a31515\">&quot;Preferences&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">bool</span> CheckThis { <span style=\"color:#0000ff\">get</span>; <span style=\"color:#0000ff\">set</span>; }\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">Personalizable</span>(<span style=\"color:#2b91af\">PersonalizationScope</span>.Shared),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">EnhancedWebPartProperty</span>(<span style=\"color:#0000ff\">true</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebBrowsable</span>(<span style=\"color:#0000ff\">false</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebDisplayName</span>(<span style=\"color:#a31515\">&quot;SPUser sample property&quot;</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Category</span>(<span style=\"color:#a31515\">&quot;Preferences&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff\">public</span> <span style=\"color:#2b91af\">SPUser</span> SPUserSample { <span style=\"color:#0000ff\">get</span>; <span style=\"color:#0000ff\">set</span>; }\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>And here is the result:</p>\r\n<p><img src=\"https://sites.google.com/site/omlinfiles/manyproperties.jpg\" alt=\"\"></p>\r\n<p>People picker looks like this:</p>\r\n<p><img src=\"http://download.codeplex.com/download?ProjectName=enhancedwebpart&DownloadId=223464\" alt=\"People Picker\"></p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>Localization Example</strong></p>\r\n<p>You can use some localization classes from EnhancedWebPart.Localization namespace, for localizing attributes, such as property name and property description.</p>\r\n<p>Also, you can create localized drop down properties (SharePoint web part property&nbsp;mechanics does not allow this).</p>\r\n<p>Sample code:</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">Personalizable</span>(<span style=\"color:#2b91af\">PersonalizationScope</span>.Shared),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">EnhancedWebPartProperty</span>(<span style=\"color:#00f\">true</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebBrowsable</span>(<span style=\"color:#00f\">false</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">LocalizedWebDisplayName</span>(<span style=\"color:#a31515\">&quot;SimplePropertyName&quot;</span>, <span style=\"color:#a31515\">&quot;Resource1&quot;</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">LocalizedDescription</span>(<span style=\"color:#a31515\">&quot;SimplePropertyDescription&quot;</span>, <span style=\"color:#a31515\">&quot;Resource1&quot;</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Category</span>(<span style=\"color:#a31515\">&quot;Localization&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">int</span> SimpleProperty { <span style=\"color:#00f\">get</span>; <span style=\"color:#00f\">set</span>; }\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">Personalizable</span>(<span style=\"color:#2b91af\">PersonalizationScope</span>.Shared),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">EnhancedWebPartProperty</span>(<span style=\"color:#00f\">true</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebBrowsable</span>(<span style=\"color:#00f\">false</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">LocalizedWebDisplayName</span>(<span style=\"color:#a31515\">&quot;SimplePropertyName&quot;</span>, <span style=\"color:#a31515\">&quot;Resource1&quot;</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">LocalizedDescription</span>(<span style=\"color:#a31515\">&quot;SimplePropertyDescription&quot;</span>, <span style=\"color:#a31515\">&quot;Resource1&quot;</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Category</span>(<span style=\"color:#a31515\">&quot;Localization&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#2b91af\">DropDownEnum</span> DropDownProperty { <span style=\"color:#00f\">get</span>; <span style=\"color:#00f\">set</span>; }</span></pre>\r\n<p>&nbsp;DropDownEnum is simple&nbsp;localized enum:</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">enum</span> <span style=\"color:#2b91af\">DropDownEnum</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">LocalizedDescription</span>(<span style=\"color:#a31515\">&quot;DropDownPropertyValue0&quot;</span>, <span style=\"color:#a31515\">&quot;Resource1&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zero,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">LocalizedDescription</span>(<span style=\"color:#a31515\">&quot;DropDownPropertyValue1&quot;</span>, <span style=\"color:#a31515\">&quot;Resource1&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">LocalizedDescription</span>(<span style=\"color:#a31515\">&quot;DropDownPropertyValue2&quot;</span>, <span style=\"color:#a31515\">&quot;Resource1&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;two,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">LocalizedDescription</span>(<span style=\"color:#a31515\">&quot;DropDownPropertyValueMany&quot;</span>, <span style=\"color:#a31515\">&quot;Resource1&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;many\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>&nbsp;Here is the result:</p>\r\n<p><img src=\"http://download.codeplex.com/download?ProjectName=enhancedwebpart&DownloadId=223465\" alt=\"\"></p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>Create Custom Displayable Class</strong></p>\r\n<p>You can easily create your own displayable classes and&nbsp;plug them into your&nbsp;EnhancedWebPart descendent.</p>\r\n<p>For instance, consider you have Filter setting in your webpart. For filtering, you need to pick filter type and filter value.</p>\r\n<p>The filter type could be either Equals, or Contains. And the filter value is a simple string.</p>\r\n<p>So, you can create two properties for the web part, but they will look not very nice... Another way - is to create simple displayable class.</p>\r\n<p>First, let's create data class:</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">class</span> <span style=\"color:#2b91af\">FilterSetting</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#2b91af\">FilterType</span> Type;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">string</span> Value;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>&nbsp;FilterType enum contains only two values:</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">enum</span> <span style=\"color:#2b91af\">FilterType</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Contains,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Equals\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>&nbsp;Last, we should create the DisplayableFilterSetting class, and&nbsp;implement the IDisplayableClass interface:</p>\r\n<p><img src=\"http://download.codeplex.com/download?ProjectName=enhancedwebpart&DownloadId=223468\" alt=\"\"></p>\r\n<p>First method to implement is IsAppliableType. Here we need return true, if the property&nbsp;class is equal to&nbsp;our FilterSetting class:</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">bool</span> IsAppliable(<span style=\"color:#2b91af\">Type</span> propertyType)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">return</span> propertyType == <span style=\"color:#00f\">typeof</span>(<span style=\"color:#2b91af\">FilterSetting</span>);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>The next&nbsp;question you need to answer -&nbsp;IsControlInHeaderSection(). For most displayable classes&nbsp;this method&nbsp;should return false, and true only&nbsp;for checkbox-like controls, when property title is placed after the control.</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">bool</span> IsControlInHeaderSection()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">return</span> <span style=\"color:#00f\">false</span>;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>Now - the main method, which will create the custom control for our displayable class.</p>\r\n<p>In our case, we will add a Panel with DropDownList and TextBox.</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> System.Web.UI.<span style=\"color:#2b91af\">Control</span> CreateControl()\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Panel</span> panel = <span style=\"color:#00f\">new</span> <span style=\"color:#2b91af\">Panel</span>();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">DropDownList</span> ddl = <span style=\"color:#00f\">new</span> <span style=\"color:#2b91af\">DropDownList</span>();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ddl.Items.Add(<span style=\"color:#a31515\">&quot;Contains&quot;</span>);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ddl.Items.Add(<span style=\"color:#a31515\">&quot;Equals&quot;</span>);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;panel.Controls.Add(ddl);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">TextBox</span> txt = <span style=\"color:#00f\">new</span> <span style=\"color:#2b91af\">TextBox</span>();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;panel.Controls.Add(txt);\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">return</span> panel;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>Next we will implement two methods: one is filling the control with specified value; and the other is fetching the value from control.</p>\r\n<p>Control is the same as we created in&nbsp;previous method, so, in our case it is the Panel with two inner controls. And the value is the FilterSetting class&nbsp;instance.</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">void</span> SetControlValue(System.Web.UI.<span style=\"color:#2b91af\">Control</span> control, <span style=\"color:#00f\">object</span> <span style=\"color:#00f\">value</span>)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Panel</span> panel = (<span style=\"color:#2b91af\">Panel</span>)control;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">DropDownList</span> ddl = (<span style=\"color:#2b91af\">DropDownList</span>)panel.Controls[0];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">TextBox</span> txt = (<span style=\"color:#2b91af\">TextBox</span>)panel.Controls[1];\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">FilterSetting</span> filterSetting = (<span style=\"color:#2b91af\">FilterSetting</span>)<span style=\"color:#00f\">value</span>;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txt.Text = filterSetting.Value;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ddl.SelectedIndex = (<span style=\"color:#00f\">int</span>)filterSetting.Type;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#00f\">object</span> GetControlValue(System.Web.UI.<span style=\"color:#2b91af\">Control</span> control)\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Panel</span> panel = (<span style=\"color:#2b91af\">Panel</span>)control;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">DropDownList</span> ddl = (<span style=\"color:#2b91af\">DropDownList</span>)panel.Controls[0];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">TextBox</span> txt = (<span style=\"color:#2b91af\">TextBox</span>)panel.Controls[1];\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">FilterSetting</span> filterSetting = <span style=\"color:#00f\">new</span> <span style=\"color:#2b91af\">FilterSetting</span>();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterSetting.Type = (FilterType)ddl.SelectedIndex;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterSetting.Value = txt.Text;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">return</span> filterSetting;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>Easy, isn't it?</p>\r\n<p>For some <a href=\"http://mef.codeplex.com\">MEF</a> magic, we need mark our class with MEF Export attribute:\r\n<span style=\"font-family:Consolas\">[<span style=\"font-family:Consolas; color:#2b91af; font-size:x-small\"><span style=\"font-family:Consolas; color:#2b91af; font-size:x-small\"><span style=\"font-family:Consolas; color:#2b91af; font-size:x-small\">Export</span></span></span><span style=\"font-family:Consolas; font-size:x-small\"><span style=\"font-family:Consolas; font-size:x-small\">(</span></span><span style=\"font-family:Consolas; color:#0000ff; font-size:x-small\"><span style=\"font-family:Consolas; color:#0000ff; font-size:x-small\"><span style=\"font-family:Consolas; color:#0000ff; font-size:x-small\">typeof</span></span></span><span style=\"font-family:Consolas; font-size:x-small\"><span style=\"font-family:Consolas; font-size:x-small\">(</span></span><span style=\"font-family:Consolas; color:#2b91af; font-size:x-small\"><span style=\"font-family:Consolas; color:#2b91af; font-size:x-small\"><span style=\"font-family:Consolas; color:#2b91af; font-size:x-small\">IDisplayableClass</span></span></span><span style=\"font-family:Consolas; font-size:x-small\"><span style=\"font-family:Consolas; font-size:x-small\">))</span></span></span>].\r\n You will need reference MEF assembly to do this, you can grab it from the EnhancedWebPart project folder.</p>\r\n<p>Now, when the displayable class is ready, we can use FilterSetting&nbsp;property in our web part.</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color:#2b91af\">Personalizable</span>(<span style=\"color:#2b91af\">PersonalizationScope</span>.Shared),\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">EnhancedWebPartProperty</span>(<span style=\"color:#00f\">true</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebBrowsable</span>(<span style=\"color:#00f\">false</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">WebDisplayName</span>(<span style=\"color:#a31515\">&quot;Filter&quot;</span>),\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">Category</span>(<span style=\"color:#a31515\">&quot;Preferences&quot;</span>)]\r\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">public</span> <span style=\"color:#2b91af\">FilterSetting</span> Filter { <span style=\"color:#00f\">get</span>; <span style=\"color:#00f\">set</span>; }</span></pre>\r\n<p>If you want to place your displayable classes in separate assembly, you will need&nbsp;provide information about it&nbsp;to EnhancedWebPart. We can do this, overriding GetCompositionAssemblies() method:</p>\r\n<pre><span style=\"font-family:Courier New; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">protected</span> <span style=\"color:#00f\">override</span> <span style=\"color:#2b91af\">IEnumerable</span>&lt;<span style=\"color:#2b91af\">Assembly</span>&gt; GetCompositionAssemblies()\r\n&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#00f\">return</span> <span style=\"color:#00f\">new</span> <span style=\"color:#2b91af\">Assembly</span>[] { <span style=\"color:#2b91af\">Assembly</span>.GetAssembly(<span style=\"color:#00f\">typeof</span>(<span style=\"color:#2b91af\">DisplayableFilterSetting</span>)) };\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre>\r\n<p>Ok, now all is ready, and&nbsp;we can deploy our project!</p>\r\n<p><img src=\"http://download.codeplex.com/download?ProjectName=enhancedwebpart&DownloadId=223472\" alt=\"\"></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "sharepoint 2010,Sharepoint,WebPart,properties,toolset,dev,",
  "LastEdited": "2011-04-02T06:37:44.42-07:00"
}