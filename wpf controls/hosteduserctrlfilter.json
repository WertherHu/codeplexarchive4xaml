{
  "ProjectName": "hosteduserctrlfilter",
  "Title": "Hosted User Control Report Filter",
  "Description": "Microsoft offers a nice selection of out of the box filters for filtering dashboards, but they are somewhat limited when it comes to real-world use.  \n\nThe Hosted User Control Feature provides a way to easily create custom filters to avoid these limitations. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Microsoft offers a nice selection of out of the box filters for filtering dashboards, but they are somewhat limited when it comes to real-world use.  <br /><br />The Hosted User Control Feature provides a way to easily create custom filters to avoid these limitations. <br />\n<h1>SUMMARY</h1>\r\nHello and welcome to another edition of Developer’s Notes.  In this edition, we will be discussing Filtering Web Parts for use with the SQL Server Reporting Services Viewer control in MOSS.  These filters give users the ability to create dynamic dashboards of information that can be filtered based on business data.  Several options are available out of the box; however, these items do not fit many of the paradigms generally used by developers, such as populating data for drop down lists based on a web service or SQL call.  In addition, these filters do not offer any styling options to allow them to fit with the look and feel of the customer’s portal.<br />\n<h1>THE OUT OF THE BOX FILTERS</h1>\rAs mentioned in the summary, there are several out of the box filters that are available when you have the MOSS enterprise edition installed.  Note, these are ONLY available when you have the Office SharePoint Server 2007 Enterprise CAL or for Internet Site.  This is an important note, which we will discuss further in the custom filters section below.<br /><br /><b>Business Data Catalog Filter</b><br />This filter will provide a means to search a business data catalog for values in a typically “SharePoint” way, with a text box for input as well as an available search dialog.  <br /><br /><b>Choice Data Filter</b><br />This filter provides a sort of popup dialog that allows the user to pick a single value based off of a list of strings.  This is a fairly flexible setup, allowing the developer to enter in exactly what should be allowed for filtering.  The down side; however is that this is a manually entered list that obviously is not going to be able to adjust to changing business data.<br /><br /><b>Current User Filter</b><br />This filter is a context based filter that will return the username of the currently logged in user.<br /><br /><b>Date Filter</b><br />This is a simple date control that takes advantage of the SharePoint calendar control to allow the user to pick a date for a report.  <br /><br /><b>Page Field Filter</b><br />This filter will return the value of a published field from the page it is connected to, such as Content Type, Created, Title, etc.<br /><br /><b>Query String (URL) Filter</b><br />This filter will redirect the value from a query string parameter as a filter value.  This is useful for pre-populating report filters based on URLs<br /><br /><b>SharePoint List Filter</b><br />This allows the designer to tie a popup selection window, similar to the Choice filter, to a SharePoint list.  There are some limited settings available which allow the designer to pick the display and value columns from a content type in a list view.<br /><br /><b>SQL Server Analysis Services Filter</b><br />This control allows the designer to pull data from either a KPI Web Part or directly from an SSAS cube.  <br /><br /><b>Text Filter</b><br />This simple text box filter allows a user to filter based on free-form text.<br /><br />As you can see, this is a nice selection of items, but it is somewhat limited in scope of what many clients might want to have available for their filters.  Many would want to be able to adjust the look and feel of their filtering while also providing direct data from web services and SQL.  None of those options are supported by Microsoft at this time.  In addition the entire feature set is dependent on the purchase of a rather expensive CAL that some customers may not be able to afford. The solution to these challenges is to build custom filters.  <br />\n<h1>CUSTOM FILTERS</h1>\rMicrosoft developed their out of the box filters to use a base class that acts as the ancestor of all of the filters in some way.  Luckily, while the base class provides some functionality that is unique to their collection of filters, it is not the driving factor that makes those filters available for filtering the report viewer.  This is accomplished through the use of the ITransformableFilterValues interface, which is part of the WSS3 API.  This allows us to build whatever filters we need using the freely available SharePoint API.<br /><br />For the purposes of this demonstration, we will create the following custom filters:<br />1)\tSimple single value drop down filter<br />2)\tMulti-value list box<br />3)\t2 Stage cascading drop down filter<br /><br />In addition, a button is needed to apply the filter values to the Report Viewer as well as save default values for individual users (so that they can automatically view the same report every time).<br />\n<h2>Basic Framework</h2>\rAnother point we will cover is how to enable these controls for easy UI changes.   The simplest approach for this would be to use user controls.  To some this means using a customized version of the Smart Part, but it doesn’t have to be quite that complicated.  Let’s start with a simple base web part that will load a user control based on a path we give it.<br /><br /><pre>\n01 :  \t[Guid(&quot;2f5a595f-8ad5-483d-b584-1ec088eedb17&quot;)]\n02  :  \tpublic class HostedUserControlFilter : Microsoft.Sharepoint.WebPartPages.WebPart\n03  :  \t{\n04  :  \t        [Personalizable(PersonalizationScope.Shared)]\n05  :  \t        [WebBrowsable(true)]\n06  :  \t        [System.ComponentModel.Category(&quot;Settings&quot;)]\n07  :  \t        [WebDisplayName(&quot;Path to ASCX File&quot;)]\n08  :  \t        [WebDescription(&quot;Give the complete (relative) URL to the user control&quot;)]\n09  :  \t        public string VirtualPath\n10  :  \t        {\n11  :  \t            get\n12  :  \t            {\n13  :  \t                if (virtualPath == null)\n14  :  \t                {\n15  :  \t                    virtualPath = &quot;&quot;;\n16  :  \t                }\n17  :  \t                return virtualPath;\n18  :  \t            }\n19  :  \t            set { virtualPath = value; }\n20  :  \t\t\t}\n21  :  \t \n22  :  \t\t\tUserControl localControl = null;\n23  :  \t\t\tprotected override void CreateChildControls()\n24  :  \t\t\t{\n25  :  \t\t\t\tbase.CreateChildControls();\n26  :  \t\t\t\tif (virtualPath != string.Empty &amp;&amp; Page != null)\n27  :  \t\t\t\ttry\n28  :  \t\t\t\t{\n29  :  \t\t\t\t\tlocalControl = Page.LoadControl(virtualPath) as UserControl;\t\n30  :  \t\t\t\t\tthis.Controls.Add(localControl as Control);\n31  :  \t\t\t\t}\n32  :  \t\t\t\tcatch\n33  :  \t\t\t\t{\n34  :  \t\t\t\t\tstring error = string.Format(&quot;Unable to load control {0}.  Verify that control exists and uses the FQDN of its base class.&quot;, virtualPath);\n35  :  \t\t\t\t\tthis.Controls.Add(new LiteralControl(error));\n36  :  \t\t\t\t}\n37  :  \t\t}\n38  :  \t}\n</pre><br /><br />As you can see above, the web control has a VirtualPath property.  This will point to the path of the User Control we would like to load.  The attribute decorations on the top of the property describe how to show this setting in the SharePoint web part editor.  Of course, some time could be spent building a tool part that could provide a drop down of valid User Controls based on a path, but this simple textbox based approach will work for now.  Once the virtual path is set, the control will load up into the web part as desired.<br /><br />This takes care of the presentation part of the web control.  The next step is to wire our web part to act as a filter.  There are two steps to this process:<br /><br />1)\tImplement the ITransformableFilterValues interface.<br />2)\tExpose a Connection method.<br />\n<h2>Implementing the ITransformableFilterValues interface</h2>\rThe ITransformableFilterValues interface is structured as show below:<br /><pre>\n01  :  \tnamespace Microsoft.SharePoint.WebPartPages\n02  :  \t{\n03  :  \t    public interface ITransformableFilterValues\n04  :  \t    {\n05  :  \t        bool AllowAllValue { get; }\n06  :  \t        bool AllowEmptyValue { get; }\n07  :  \t        bool AllowMultipleValues { get; }\n08  :  \t        string ParameterName { get; }\n09  :  \t        ReadOnlyCollection&lt;string&gt; ParameterValues { get; }\n10  :  \t    }\n11  :  \t}\n</pre><br /><br />As in all interfaces, the functionality is in the eye of the beholder, so to speak.  In the case of the ReportViewer control, the important functionality of this interface is the ParameterName and ParameterValues properties.  The rest are set to false.<br /><br />So when implementing this interface in our HostedUserControlFilter web part, the control looks as shown:<br /><br /><pre>\n01  :  \t[Guid(&quot;2f5a595f-8ad5-483d-b584-1ec088eedb17&quot;)]\n02  :  \tpublic class HostedUserControlFilter : Microsoft.Sharepoint.WebPartPages.WebPart\n03  :  \t{\n04  :  \t        [Personalizable(PersonalizationScope.Shared)]\n05  :  \t        [WebBrowsable(true)]\n06  :  \t        [System.ComponentModel.Category(&quot;Settings&quot;)]\n07  :  \t        [WebDisplayName(&quot;Path to ASCX File&quot;)]\n08  :  \t        [WebDescription(&quot;Give the complete (relative) URL to the user control&quot;)]\n09  :  \t        public string VirtualPath\n10  :  \t        {\n11  :  \t            get\n12  :  \t            {\n13  :  \t                if (virtualPath == null)\n14  :  \t                {\n15  :  \t                    virtualPath = &quot;&quot;;\n16  :  \t                }\n17  :  \t                return virtualPath;\n18  :  \t            }\n19  :  \t            set { virtualPath = value; }\n20  :  \t\t}\n21  :  \t\n22  :  \t\tUserControl localControl = null;\n23  :  \t\tprotected override void CreateChildControls()\n24  :  \t\t{\n25  :  \t\t\tbase.CreateChildControls();\n26  :  \t\t\tif (virtualPath != string.Empty &amp;&amp; Page != null)\n27  :  \t\t\ttry\n28  :  \t\t\t{\n29  :  \t\t\t\tlocalControl = Page.LoadControl(virtualPath) as UserControl;\t\n30  :  \t\t\t\tthis.Controls.Add(localControl as Control);\n31  :  \t\t\t}\n32  :  \t\t\tcatch\n33  :  \t\t\t{\n34  :  \t\t\t\tstring error = string.Format(&quot;Unable to load control {0}.  Verify that control exists and uses the FQDN of its base class.&quot;, virtualPath);\n35  :  \t\t\t\tthis.Controls.Add(new LiteralControl(error));\n36  :  \t\t\t}\n37  :  \t\t}\n38  :  \t \n39  :  \t        #region ITransformableFilterValues Members\n40  :  \t\n41  :  \t        public bool AllowAllValue {get { return false; } }\n42  :  \t\n43  :  \t        public bool AllowEmptyValue { get { return false; } }\n44  :  \t\n45  :  \t        public bool AllowMultipleValues { get { return false; } }\n46  :  \t\n47  :  \t        string parameterName = string.Empty;\n48  :  \t\n49  :  \t        [Personalizable(PersonalizationScope.Shared)]\n50  :  \t        [WebBrowsable(true)]\n51  :  \t        [System.ComponentModel.Category(&quot;Settings&quot;)]\n52  :  \t        [WebDisplayName(&quot;Filter Parameter Name&quot;)]\n53  :  \t        public string ParameterName\n54  :  \t        {\n55  :  \t            get { return parameterName; }\n56  :  \t            set { parameterName = value; }\n57  :  \t        }\n58  :  \t\n59  :  \t        public ReadOnlyCollection&lt;string&gt; ParameterValues\n60  :  \t        {\n61  :  \t            throw new NotImplementedException();\n62  :  \t        }\n63  :  \t\n64  :  \t        #endregion\n65  :  \t}\n</pre><br /><br />As you may notice, we decided to decorate the ParameterName property with the necessary Edit Pane attributes so that the user can name the property the web part represents at runtime.  <br /><br />At this point there is one property still to implement -- ParameterValues.  This property will return a read only collection of strings that represent the values we want to return to the report viewer.  This would come from our user control, but since the user control is dynamically assigned, we need to know what to return.  In this case, the simplest route is to implement an interface.  For the purposes of this demonstration we have created one called IHostedUserControlFilter.<br /><br /><pre>\n01  :  \t    public interface IHostedUserControlFilter\n02  :  \t    {\n03  :  \t        List&lt;string&gt; Values { get; set; }\n04  :  \t    }\n</pre><br /><br />One might look at this interface and think that there is no reason for a set accessor since this is a read-only kind of control, but we will indeed need a set accessor later on when we discuss saving the user’s default values.<br /><br />Since we now have an interface that we want our user controls to implement, we must now go back and do some type checking when we load up our control.  To accomplish this we will change the localControl member to be of type IHostedUserControlFilter and we will add a type check to our CreateChildControls method to check that the control we have loaded fits our interface.<br /><br /><pre>\n01  :  \tIHostedUserControlFilter localControl = null;\n02  :  \tprotected override void CreateChildControls()\n03  :  \t{\n04  :  \t\tbase.CreateChildControls();\n05  :  \t\tif (virtualPath != string.Empty &amp;&amp; Page != null)\n06  :  \t\ttry\n07  :  \t\t{\n08  :  \t\t\tlocalControl = Page.LoadControl(virtualPath) as IHostedUserControlFilter;\n09  :  \t\t\tif (localControl == null) throw new InvalidCastException(&quot;User Control must implement IHostedUserControlFilter&quot;);\t\n10  :  \t\t\tthis.Controls.Add(localControl as Control);\n11  :  \t\t}\n12  :  \t\tcatch\n13  :  \t\t{\n14  :  \t\t\tstring error = string.Format(&quot;Unable to load control {0}.  Verify that control exists and uses the FQDN of its base class.&quot;, virtualPath);\n15  :  \t\t\tthis.Controls.Add(new LiteralControl(error));\n16  :  \t\t}\n17  :  \t}\n</pre><br /><br />One final step is needed to make our Hosted User Control functional as a filter.  We have to implement a Connection that will allow us to tie this web part to the report viewer.  We do this simply by returning the web part through a property decorated with the ConnectionProvider attribute:<br /><br /><pre>\n01  :  \t[ConnectionProvider(&quot;Filter Value&quot;, &quot;A8A1CDC7-5C5F-4678-8FF2-EC44F65BCC76&quot;, AllowsMultipleConnections = true)]\n02  :  \tpublic ITransformableFilterValues GetConnection()\n03  :  \t{\n04  :  \t\treturn this;\n05  :  \t}\n</pre><br /><br />The name “Filter Value” must be hard coded, so we cannot tie it to the Parameter Name set at runtime, but this will be a generic enough name.  The Filter Value name is displayed in the connection menu used to trigger the connection edit screen.  The Parameter Name; however, is shown in the actual connection edit screen.<br /><br />Building a User Control for the filter<br />Now that the basic framework is out of the way, we need to build a user control to display in our filter container.  Let’s start with a simple one, a single hard coded drop down menu.<br /><br /><pre>\n01  :  \t&lt;%@ Control Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;SimpleDropDownFilter.ascx.cs&quot; Inherits=&quot;CustomFilters.UserControls.SimpleDropDownFilter, CustomFilters, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3302bed8990a619c&quot; %&gt;\n02  :  \t\n03  :  \t&lt;asp:DropDownList ID=&quot;cboStates&quot; runat=&quot;server&quot;&gt;\n04  :  \t    &lt;asp:ListItem Text=&quot;Texas&quot; Value=&quot;TX&quot; /&gt;\n05  :  \t    &lt;asp:ListItem Text=&quot;Tennesee&quot; Value=&quot;TN&quot; /&gt;\n06  :  \t    &lt;asp:ListItem Text=&quot;Oklahoma&quot; Value=&quot;OK&quot; /&gt;\n07  :  \t&lt;/asp:DropDownList&gt;\n</pre><br /><br />As you can see, there is not much to the front end of this control.  The code behind implements the IHostedUserControlFilter interface we defined earlier.  One thing that you should note here, however, is that the Inherits attribut of the Control tag is using the fully qualified assembly name of the base class.  This is because the assembly for the SharePoint solution will be going into the GAC.  SharePoint then needs the FQAN to find the correct version of the base class for loading.  If you do not set this in this manner, you will end up with a “Cannot load type” error.<br /><br /><pre>\n01  :  \tpublic partial class SimpleDropDownFilter : System.Web.UI.UserControl, IHostedUserControlFilter\n02  :  \t{\n03  :  \t\t#region IHostedUserControlFilter Members\t\n04  :  \t\tpublic List&lt;string&gt; Values\n05  :  \t    \t{\n06  :  \t    \t\tget\n07  :  \t\t\t{\n08  :  \t\t\t\treturn new List&lt;string&gt;(new string[] { cboStates.SelectedItem.Value});\n09  :  \t\t\t}\n10  :  \t\t\tset\n11  :  \t\t\t{\n12  :  \t\t\t\tif (value.Count &gt; 0)\n13  :  \t\t\t\t{\n14  :  \t\t\t\t\tcboStates.Items.FindByValue(value[0]).Selected = true;\n15  :  \t\t\t\t}\n16  :  \t\t\t}\n17  :  \t\t}\n18  :  \t\t#endregion\n19  :  \t}\n</pre><br /><br />As you may notice, we implemented the set accessor here as well by simply looking for the first value in the list in the drop down list and setting it to selected.  There is no other code needed for this control, given that the values are hard coded, but we could just as easily implemented a web service call or database call to fill the drop down list.<br /><br /><br />Let’s try another one.  In this user control, we will be supporting multiple values through a multi-select list box control.<br /><br /><pre>\n01  :  \t&lt;%@ Control Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;MultiSelectControl.ascx.cs&quot; Inherits=&quot;CustomFilters.UserControls.MultiSelectControl, CustomFilters, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3302bed8990a619c&quot; %&gt;\n02  :  \t&lt;asp:ListBox ID=&quot;ListBox1&quot; runat=&quot;server&quot; SelectionMode=&quot;Multiple&quot;&gt;\n03  :  \t    &lt;asp:ListItem&gt;Red&lt;/asp:ListItem&gt;\n04  :  \t    &lt;asp:ListItem&gt;Green&lt;/asp:ListItem&gt;\n05  :  \t    &lt;asp:ListItem&gt;Blue&lt;/asp:ListItem&gt;\n06  :  \t&lt;/asp:ListBox&gt;\n</pre><br /><br />Similar the the SimpleDropDownFilter above, we have the following code behind.<br /><pre>\n01  :  \tpublic partial class MultiSelectControl : System.Web.UI.UserControl, IHostedUserControlFilter\n02  :  \t{\n03  :  \t\t#region IHostedUserControlFilter Members\n04  :  \t\tpublic List&lt;string&gt; Values\n05  :  \t   \t{\n06  :  \t    \t\tget\n07  :  \t        \t{\n08  :  \t        \t\treturn ListBox1.Items.Cast&lt;ListItem&gt;().Where(item =&gt; item.Selected).Select(q =&gt; q.Value).ToList();\n09  :  \t        \t}\n10  :  \t\t\tset\n11  :  \t\t\t{\n12  :  \t\t\t\tforeach (string Item in value)\n13  :  \t\t\t\t{\n14  :  \t\t\t\t\tListBox1.Items.FindByValue(Item).Selected = true;\n15  :  \t\t\t\t}\n16  :  \t\t\t}\n17  :  \t\t}\n18  :  \t\t#endregion\n19  :  \t}\n</pre><br /><br />In this case, we use a little LINQ to convert out selected item values to a list of strings for the getter and we iterate through the inbound list of strings to set the selected values in the setter.  <br /><br />For our last filter, we will put together a cascading drop down control; in this example, a list of states that controls a list of cities.<br /><br /><pre>\n01  :  \t&lt;%@ Control Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;DependantDropDownFilter.ascx.cs&quot;\n02  :  \t    Inherits=&quot;CustomFilters.UserControls.DependantDropDownFilter, CustomFilters, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3302bed8990a619c&quot; %&gt;\n03  :  \t&lt;asp:UpdatePanel ID=&quot;UpdatePanel1&quot; runat=&quot;server&quot;&gt;\n04  :  \t    &lt;ContentTemplate&gt;\n05  :  \t        State: \n06  :  \t\t\t&lt;asp:DropDownList runat=&quot;server&quot; AutoPostBack=&quot;True&quot; ID=&quot;cboState&quot; \t\t\t\t\n07  :  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonselectedindexchanged=&quot;cboState_SelectedIndexChanged&quot;&gt;\n08  :  \t    \t\t\t&lt;asp:ListItem Text=&quot;Texas&quot; Value=&quot;TX&quot; /&gt;\n09  :  \t    \t\t\t&lt;asp:ListItem Text=&quot;Tennesee&quot; Value=&quot;TN&quot; /&gt;\n10  :  \t    \t\t\t&lt;asp:ListItem Text=&quot;Oklahoma&quot; Value=&quot;OK&quot; /&gt;\n11  :  \t        &lt;/asp:DropDownList&gt;\n12  :  \t        &lt;br /&gt;\n13  :  \t        City: \n14  :  \t\t\t&lt;asp:DropDownList runat=&quot;server&quot; ID=&quot;cboCity&quot;&gt;\n15  :  \t        &lt;/asp:DropDownList&gt;\n16  :  \t    &lt;/ContentTemplate&gt;\n17  :  \t&lt;/asp:UpdatePanel&gt;\n</pre><br /><br />The first thing you might notice here is that the City list has no items.  Given the nature of this list, it gets its items assigned in the code behind based on the state selection.<br /><br /><pre>\n01  :  \tpublic partial class DependantDropDownFilter : System.Web.UI.UserControl, IHostedUserControlFilter\n02  :  \t{\n03  :  \t\tprotected void Page_Load(object sender, EventArgs e)\t\n04  :  \t\t{\n05  :  \t\t\t///This is a fix needed by the Ajax Panel to be compatible with SharePoint\n06  :  \t\t\tScriptManager.RegisterStartupScript(this, this.GetType(), &quot;AjaxFix&quot;, \n07  :  \t\t\t\t&quot;&lt;script type=&#39;text/javascript&#39;&gt;_spOriginalFormAction = document.forms[0].action; “ + \n08  :  \t\t\t\t“_spSuppressFormOnSubmitWrapper=true;&lt;/script&gt;&quot;\n09  :  \t\t\t\t, false);\n10  :  \t\n11  :  \t\t\tif (!Page.IsPostBack)\n12  :  \t\t\t{\n13  :  \t        \t\t///Force the state drop down to select the city upon load\n14  :  \t            cboState_SelectedIndexChanged(null, null);\n15  :  \t\t\t}\n16  :  \t\t}\n17  :  \t\n18  :  \t\tprotected void cboState_SelectedIndexChanged(object sender, EventArgs e)\n19  :  \t    \t{\n20  :  \t    \t\tcboCity.Items.Clear();\n21  :  \t        \tswitch (cboState.SelectedValue)\n22  :  \t        \t{\n23  :  \t\t\t\tcase &quot;TX&quot;:\n24  :  \t            \t\tcboCity.Items.Add(&quot;Dallas&quot;);\n25  :  \t\t\t\t\tcboCity.Items.Add(&quot;Houston&quot;);\n26  :  \t\t\t\t\tcboCity.Items.Add(&quot;San Antonio&quot;);\n27  :  \t\t\t\t\tcboCity.Items.Add(&quot;Austin&quot;);\n28  :  \t\t\t\t\tbreak;\n29  :  \t\t\t\tcase &quot;TN&quot;:\n30  :  \t            \t\tcboCity.Items.Add(&quot;Chatenooga&quot;);\n31  :  \t\t\t\t\tbreak;\n32  :  \t\t\t\tcase &quot;OK&quot;:\n33  :  \t\t\t\t\tcboCity.Items.Add(&quot;OKC&quot;);\n34  :  \t\t\t\t\tcboCity.Items.Add(&quot;Tulsa&quot;);\n35  :  \t\t\t\t\tbreak;\n36  :  \t\t\t\tdefault:\n37  :  \t\t\t\t\tbreak;\n38  :  \t\t\t}\n39  :  \t\t}\n40  :  \t\n41  :  \t\t#region IHostedUserControlFilter Members\n42  :  \t\tpublic List&lt;string&gt; Values\n43  :  \t\t{\n44  :  \t\t\tget\n45  :  \t\t\t{\n46  :  \t        \t\treturn new List&lt;string&gt;(new string[] { cboCity.SelectedValue });\n47  :  \t\t\t}\n48  :  \t\t\tset\n49  :  \t        \t{\n50  :  \t\t\t\tif (value.Count &gt; 0)\n51  :  \t\t\t\t{\n52  :  \t\t\t\t\tstring City = value[0];\n53  :  \t\t\t\t\tswitch (City)\n54  :  \t\t\t\t\t{\n55  :  \t        \t        \t\tcase &quot;OKC&quot;:\n56  :  \t\t\t\t\t\tcase &quot;Tulsa&quot;:\n57  :  \t        \t             \t\t\tcboState.Items.FindByValue(&quot;OK&quot;).Selected = true;\n58  :  \t\t\t\t\t\t\tcboState_SelectedIndexChanged(null, null);\n59  :  \t\t\t\t\t\t\tcboCity.Items.FindByValue(City).Selected = true;\n60  :  \t\t\t\t\t\t\tbreak;\n61  :  \t\t\t\t\t\tcase &quot;Chatenooga&quot;:\n62  :  \t\t\t\t\t\t\tcboState.Items.FindByValue(&quot;TN&quot;).Selected = true;\n63  :  \t\t\t\t\t\t\tcboState_SelectedIndexChanged(null, null);\n64  :  \t\t\t\t\t\t\tcboCity.Items.FindByValue(City).Selected = true;\n65  :  \t\t\t\t\t\t\tbreak;\n66  :  \t\t\t\t\t\tcase &quot;Dallas&quot;:\n67  :  \t\t\t\t\t\tcase &quot;Houston&quot;:\n68  :  \t\t\t\t\t\tcase &quot;Austin&quot;:\n69  :  \t\t\t\t\t\tcase &quot;San Antonio&quot;:\n70  :  \t\t\t\t\t\t\tcboState.Items.FindByValue(&quot;TX&quot;).Selected = true;\n71  :  \t\t\t\t\t\t\tcboState_SelectedIndexChanged(null, null);\n72  :  \t\t\t\t\t\t\tcboCity.Items.FindByValue(City).Selected = true;\n73  :  \t\t\t\t\t\t\tbreak;\n74  :  \t\t\t\t\t\tdefault:\n75  :  \t\t\t\t\t\t\tbreak;\n76  :  \t\t\t\t\t}\n77  :  \t\t\t\t}\n78  :  \t\t\t}\n79  :  \t\t}\n80  :  \t\t#endregion\n81  :  \t}\n</pre><br /><br />In this code behind you can see a few of the tricks that make this work.  First off, this is an Ajaxified control.  This means that selecting the state will change the city options, but not force a post back.  This is important, because doing a post back against the server on a page that has a report viewer control on it, will cause that report to attempt to run against the parameters you have already selected.  If you have not yet finished selecting your parameters, the nuisance factor on this could be pretty high, not to mention the possibility of additional stress on the reporting server.<br /><br />In order to get the Ajax to work more than one, though, a piece of Javascript needs to be added.  This merely suppresses some SharePoint form submission wrappers that get in the way of the partial page response.  <br /><br />The state selection logic is simple enough, given that these are hard coded values and the Values property getter simply returns the selected value of the City drop down control.  The setter is important, though.  The logic here is a little convoluted, and would likely be much simpler in the case of a SQL data source, but essentially what we are doing is determining the state that was selected based on the city.  We select that state and force the selected index changed event handler to execute.  We then set the city drop down to the selected value.  <br />\n<h1>APPLYING THE FILTER VALUES</h1>\rAs I mentioned before, the filter values are applied to the report on post back to the server.  Therefore, in order to get the values to the server, we will have to force a post back in some way.  Microsoft’s filters do this by way of the Filter Actions web part.  It sounds fancy, but essentially it is just a button with a check box for saving your personal defaults.  To simulate this, we have to create our own Apply Filters button.<br />The basic concept is identical to the main HostedUserControlFilter web part.   We want to host a user control for the UI purposes.  We also want to raise an event from our UI layer when our apply filters button is clicked and expose a Boolean value indicating if the user chose to save defaults.  Given this, we start with our UI interface.<br /><pre>\n01  :  \tpublic interface IApplyFilters\n02  :  \t{\n03  :  \t\tbool SavePreferences { get; }\n04  :  \t\tevent EventHandler&lt;EventArgs&gt; ApplyFilters;\n05  :  \t}\n</pre><br /><br />We can then create a user control for our UI as shown here<br /><pre>\n01  :  \t&lt;%@ Control Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;ApplyFiltersTemplate.ascx.cs&quot; \n02  :  \tInherits=&quot;CustomFilters.UserControls.ApplyFiltersTemplate, CustomFilters, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3302bed8990a619c&quot; %&gt;\n03  :  \t&lt;asp:Button ID=&quot;btnApplyFilters&quot; runat=&quot;server&quot; Text=&quot;Apply Filters&quot; \n04  :  \t    onclick=&quot;btnApplyFilters_Click&quot; /&gt;&lt;br /&gt;\n05  :  \t&lt;asp:CheckBox ID=&quot;cbSaveValues&quot; runat=&quot;server&quot; Text=&quot;Save Defaults&quot;/&gt;\n</pre><br /><br />With the following Code Behind<br /><pre>\n01  :  \tpublic partial class ApplyFiltersTemplate : System.Web.UI.UserControl, IApplyFilters\n02  :  \t{\n03  :  \t\tprotected void btnApplyFilters_Click(object sender, EventArgs e)\n04  :  \t\t{\n05  :  \t\t    ApplyFilters(this, null);\n06  :  \t\t}\n07  :  \t\n08  :  \t\t#region IApplyFilters Members\n09  :  \t\tpublic bool SavePreferences\n10  :  \t\t{\n11  :  \t\t    get { return cbSaveValues.Checked; }\n12  :  \t\t}\n13  :  \t\n14  :  \t\tpublic event EventHandler&lt;EventArgs&gt; ApplyFilters;\n15  :  \t\t#endregion\n16  :  \t}\n</pre><br /><br />As you can see here, we implemented the IApplyFilters interface allowing us to raise the ApplyFilters event when the button is clicked and exposing the check state of the Save Values check box.<br />This user control is then hosted in the ApplyFiltersButton web part.  This web part functions, to some extent, just like the HostedUserControlFilter web part and the common functionality could likely be merged into a base class, but for the time being we’ll keep this simple.   Let’s look at the web part code.<br /><pre>\n01  :  \t[Guid(&quot;ea72d94a-eca1-47c0-9839-fc4c700fcfc4&quot;)]\n02  :  \tpublic class ApplyFiltersButton : Microsoft.SharePoint.WebPartPages.WebPart\n03  :  \t{\n04  :  \t\tprivate IApplyFilters localControl = null;\n05  :  \t\tprivate string virtualPath = string.Empty;\n06  :  \t\n07  :  \t\tpublic ApplyFiltersButton()\n08  :  \t\t{\n09  :  \t\t    this.ExportMode = WebPartExportMode.All;\n10  :  \t\t}\n11  :  \t\n12  :  \t\tprotected override void CreateChildControls()\n13  :  \t\t{\n14  :  \t\t    base.CreateChildControls();\n15  :  \t\t    if (virtualPath != string.Empty &amp;&amp; Page != null)\n16  :  \t\t\ttry\n17  :  \t\t\t{\n18  :  \t\t\t    localControl = Page.LoadControl(virtualPath) as IApplyFilters;\n19  :  \t\t\t    if (localControl == null) throw new InvalidCastException(&quot;User Control must implement IApplyFilters&quot;);\n20  :  \t\n21  :  \t\t\t    localControl.ApplyFilters += new EventHandler&lt;EventArgs&gt;(localControl_ApplyFilters);\n22  :  \t\t\t    this.Controls.Add(localControl as Control);\n23  :  \t\t\t}\n24  :  \t\t\tcatch\n25  :  \t\t\t{\n26  :  \t\t\t\tstring error = string.Format(&quot;Unable to load control {0}.  Verify that control exists and uses the FQDN of its base class.&quot;, virtualPath);\n27  :  \t\t\t    this.Controls.Add(new LiteralControl(error));\n28  :  \t\t\t}\n29  :  \t\t}\n30  :  \t\n31  :  \t\tvoid localControl_ApplyFilters(object sender, EventArgs e)\n32  :  \t\t{\n33  :  \t\t    if (localControl.SavePreferences)\n34  :  \t\t    {\n35  :  \t\t\t\tforeach (Microsoft.SharePoint.WebPartPages.WebPart part in WebPartManager.WebParts)\n36  :  \t\t\t\t{\n37  :  \t\t\t    \t\tHostedUserControlFilter filterPart = part as HostedUserControlFilter;\n38  :  \t\t\t    \t\tif (filterPart != null)\n39  :  \t\t\t    \t\t{\n40  :  \t\t\t\t\t\tfilterPart.PersistPersonalizedChanges();\n41  :  \t\t\t    \t\t}\n42  :  \t\t\t\t}\n43  :  \t\t    }\n44  :  \t\t}\n45  :  \t\n46  :  \t\t#region Settings\n47  :  \t\t[Personalizable(PersonalizationScope.Shared)]\n48  :  \t\t[WebBrowsable(true)]\n49  :  \t\t[System.ComponentModel.Category(&quot;Settings&quot;)]\n50  :  \t\t[WebDisplayName(&quot;Path to ASCX File&quot;)]\n51  :  \t\t[WebDescription(&quot;Give the complete (relative) URL to the user control&quot;)]\n52  :  \t\tpublic string VirtualPath\n53  :  \t\t{\n54  :  \t\t    get\n55  :  \t\t    {\n56  :  \t\t\tif (virtualPath == null)\n57  :  \t\t\t{\n58  :  \t\t   \t\t virtualPath = &quot;&quot;;\n59  :  \t\t\t}\n60  :  \t\t\treturn virtualPath;\n61  :  \t\t    }\n62  :  \t\t    set { virtualPath = value; }\n63  :  \t\t}\n64  :  \t\t#endregion\n65  :  \t}\n</pre><br /><br />As you can see, the functionality for the UI part of the web part is as we have already discussed.  The difference is that we are now implementing a different interface and assigning an event handler to our ApplyFilters event.  The ApplyFilters handler in this case doesn’t do anything regarding filters, but it does check to see if it should save the selected values as the current user’s default settings.  This is the personalization part of the custom web filters and is the reason we have the setters on the Value properties in the User Controls<br />To do this, we have to first find all of the web parts we are going to personalize.  This is done through the WebPartManager.  In this case we are enumerating through each web part and checking if it is a HostedUserControlFilter.  Once we know that is the case, we call the PersistPersonalizedChanges method on the web part.  This is the method we left empty earlier in this article.  Below is the additional code that needs to be added to the HostedUserControlFilter class to implement personalization.<br /><pre>\n01  :  \tstring[] personalizedDefaults = null;\n02  :  \t\n03  :  \t[WebBrowsable(false),\n04  :  \tWebPartStorage(Storage.Personal),\n05  :  \tPersonalizable(PersonalizationScope.User),\n06  :  \tDefaultValue((string)null)]\n07  :  \tpublic string[] PersonalizedDefaults\n08  :  \t{\n09  :  \t    get\n10  :  \t    {\n11  :  \t\t\treturn personalizedDefaults;\n12  :  \t    }\n13  :  \t    set\n14  :  \t    {\n15  :  \t\t\tpersonalizedDefaults = value;\n16  :  \t    }\n17  :  \t}\n18  :  \t\n19  :  \tinternal void PersistPersonalizedChanges()\n20  :  \t{\n21  :  \t    if (ParameterValues != null)\n22  :  \t    {\n23  :  \t\t\tList&lt;string&gt; pValues = new List&lt;string&gt;();\n24  :  \t\t\tpValues.AddRange(ParameterValues);\n25  :  \t\t\tpersonalizedDefaults = pValues.ToArray();\n26  :  \t\n27  :  \t\t\tusing (SPLimitedWebPartManager scopedWPM = SPContext.Current.Web.GetLimitedWebPartManager(HttpContext.Current.Request.Url.AbsoluteUri, PersonalizationScope.User))\n28  :  \t\t\t{\n29  :  \t\t    \t\t///Apparently, when you pull the Web Part from the  SPLimitedWebPartManager\n30  :  \t\t    \t\t///it is not the actual web part, but a deserialized version pulled from storage.\n31  :  \t\t    \t\t///Thus, you need to set the things you would like to have saved on a user level at this \n32  :  \t\t    \t\t///point.\n33  :  \t\n34  :  \t\t    \t\tHostedUserControlFilter scopedPart = scopedWPM.WebParts[this.ID] as HostedUserControlFilter;\n35  :  \t\t    \t\tscopedPart.PersonalizedDefaults = personalizedDefaults;\n36  :  \t\t    \t\tscopedWPM.SaveChanges(scopedPart);\n37  :  \t\t\t}\n38  :  \t    }\n39  :  \t}\n40  :  \t \n41  :  \tpublic HostedUserControlFilter()\n42  :  \t{\n43  :  \t    this.ExportMode = WebPartExportMode.All;\n44  :  \t    this.Load += new EventHandler(HostedUserControlFilter_Load);\n45  :  \t}\n46  :  \t\n47  :  \tvoid HostedUserControlFilter_Load(object sender, EventArgs e)\n48  :  \t{\n49  :  \t    if (!Page.IsPostBack)\n50  :  \t    {\n51  :  \t\t\t#region Load Personalizations\n52  :  \t\t\tif (personalizedDefaults != null)\n53  :  \t\t\t{\n54  :  \t\t\t    List&lt;String&gt; pv = new List&lt;string&gt;(personalizedDefaults);\n55  :  \t\t\t    System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; parmValues = \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew  System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;(pv);\n56  :  \t\t\t    ParameterValues = parmValues;\n57  :  \t\t\t}\n58  :  \t\t\t#endregion\n59  :  \t    }\n60  :  \t}\n</pre><br /><br />There are three basic pieces to the personalization system.  First, we have to determine what to personalize.  For this situation we are just going to store the selected values that would be output by the filter.  This is the PersonalizedDefaults property of the web part.  Next we have to actually store that information.  This is accomplished by the PersistPersonalizedChanges method. <br />To persist the personalized changes, we first have to acquire a specific web part manager that is limited to the User scope.  Once we have that web part manager, we then retrieve a copy of our current web part by passing in the web part’s ID.  This copy is a deserialized instance of the web part with no Page context.  Now we set the PersonalizedDefaults property of our web part copy and asked the Scoped Web Part Manager to save the web part.  Mission Accomplished.<br />The final part is reloading the defaults.  This is pretty simple, really.  The web part manager will load them on next page load automatically since they are now part of the user’s web part context.  The PersonalizedDefaults property is automatically set via deserialization and all we need to do is configure our UI.  This is done in the Load event handler on page first load (!IsPostBack).  <br />\n<h1>CONCLUSION</h1>\rAnd there you have it.  Custom Report Viewer filters with simple to change UIs.  Obviously, these classes need to be wrapped into a SharePoint solution and deployed, but that is beyond the scope of this article.  I highly recommend the WSPBuilder and the VS WSPBuilder Addon for building WSP functionality.  It is available on CodePlex.<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2009-07-22T13:56:29.51-07:00"
}