{
  "ProjectName": "teamdnndev",
  "Title": "Team DNN Development Project Starter Kit",
  "Description": "This is a starter kit that allows you to quickly & easily put together a solution or series of projects in a way that promotes best practices & team development",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This is a starter kit that allows you to quickly &#38; easily put together a solution or series of projects in a way that promotes best practices &#38; team development<br /><br />Please Note:  This isn&#39;t a Visual Studio Starter Kit.  This is simply a very easy to use zip package that you can apply to any existing DNN development environment.<br /><br />Some of the most common questions that I have experienced over time include:<br />\n<ul><li>How can I put together a project that allows a team to work on it at the same time?</li>\n<li>How can we have multiple extensions and not check in the website?</li>\n<li>How can I build against multiple versions of DNN?</li></ul>\n<br />The main reason this even exists is to hopefully get people to stop building in the DesktopModules folder.  This practice prevents team development, complicates source control, and eventually causes people to check-in their DNN website.<br /><br />This starter kit is a zip file that contains a tested and proven folder structure and build files that make use of MSBuild to move your files into your website and package your extension for installation into another DNN environment.<br /><br />Using this method of development, you can safely build WPA DNN extensions while not needing to check in your website, and it allows you to not have to re-invent the wheel to map your projects to source control.  This also allows you to easily put all of your DNN extension projects into a single solution!<br /><br />Be sure you review the <a href=\"https://teamdnndev.codeplex.com/documentation?referringTitle=Home\">documentation</a> for this project starter kit.  At this time, the following types of extensions have supporting build files:<br />\n<ul><li><a href=\"https://teamdnndev.codeplex.com/wikipage?title=Modules&referringTitle=Home\">Modules</a></li>\n<li><a href=\"https://teamdnndev.codeplex.com/wikipage?title=Skins&referringTitle=Home\">Skins</a></li>\n<li><a href=\"https://teamdnndev.codeplex.com/wikipage?title=Skin%20Objects&referringTitle=Home\">Skin Objects</a></li>\n<li><a href=\"https://teamdnndev.codeplex.com/wikipage?title=Widgets&referringTitle=Home\">Widgets</a></li></ul>\n<br />This enables you to do everything mentioned before, and it also allows you to have a very clean solution for all of your DNN extensions like shown below.  A live example of this can be seen at my <a href=\"https://github.com/hismightiness/dnnextensions\">DNN Extensions Github project</a> as well.<br /><br /><img src=\"/projects/teamdnndev/879f2865-5a20-444c-a361-2cc837f8d033\" alt=\"dnn-extensions-solution-explorer.png\" title=\"dnn-extensions-solution-explorer.png\" /></div><div class=\"ClearBoth\"></div>",
  "TagList": "DNN,DotNetNuke,Development,Source Control,Team Development,MSBuild,Packaging,Extensions,Module,Skin,Widget,Skin Object,",
  "LastEdited": "2014-02-09T15:15:06.03-08:00"
}