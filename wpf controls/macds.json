{
  "ProjectName": "macds",
  "Title": "Macds Framework",
  "Description": "Macds framework is a library of common modules used in our daily basis as logging, mapping, serialization, validation, inversion of control, xml helper, etc.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1><b>Project Description</b></h1>\rMacds framework is a library of common modules used in our daily basis as logging, mapping, serialization, validation, inversion of control, xml helper, etc.<br />\n<h2><b>Don&#39;t forget to provide me your feedback about why you want to download the library or why don&#39;t, I would like to know what is the current needs that you have so I can improve my libraries</b></h2>\r\n<i>*notes: don&#39;t forget to add a rate feedback, that small thing is our motivation</i><br /><br />The core library offers many features of common tasks to help you build great foundation. I will provide more information about the namespaces Remoting and <a href=\"https://macds.codeplex.com/wikipage?title=Service%20Locator&referringTitle=Home\">Service Locator</a> in another page because the examples must be clear to help you understand how to use it. Also you can download the unit test project to check the examples in <a href=\"http://macds.codeplex.com/releases/view/99468\">http://macds.codeplex.com/releases/view/99468</a><br />\n<h2><b>Configuration</b></h2>\r\nIs usual to find us dealing with a bunch of configuration section to develop in enterprise modules and one of the challenges is the collections. The core includes the namespace Configuration where you can find the class GenericElementCollection, this class help me to save time when I have to create collection properties.<br /><br /><pre>\n[ConfigurationProperty(&quot;ConnectionStrings&quot;, IsRequired = true),\nConfigurationCollection(typeof(GenericElementCollection&lt;CustomSettingElement&gt;), \nAddItemName = &quot;database&quot;, ClearItemsName = &quot;clear&quot;, RemoveItemName = &quot;remove&quot;)]\npublic GenericElementCollection&lt;CustomSettingElement&gt; Databases\n{\n    get \n    { \n      return (GenericElementCollection&lt;CustomSettingElement&gt;)this[&quot;ConnectionStrings&quot;]; \n    }\n    set { this[&quot;ConnectionStrings&quot;] = value; }\n }\n</pre><br />*download the test project <a href=\"http://macds.codeplex.com/releases/view/99468\">http://macds.codeplex.com/releases/view/99468</a><br />\n<h2><b>Logging</b></h2>\r\nIf you hate to deal with log4net XML driven in development state, you are just like me, now the core includes the namespace Log where you can find the class LogFactory. This class create a log4net instance without XML configuration, giving you the option to integrate logging behavior to any class in debug mode easily because it configure ILog instance for you.<br /><pre>\nlog4net.ILog logger = LogFactory.GetLog4netLogger();\n</pre><br />*note: you can create a custom log4net logger configured in the web.config using the factory as follow:<br /><pre>\nlog4net.ILog logger = LogFactory.GetLog4netLogger(&quot;LoggerName&quot;, false);\n</pre><br />*download the test project <a href=\"http://macds.codeplex.com/releases/view/99468\">http://macds.codeplex.com/releases/view/99468</a><br />\n<h2><b>Mapping</b></h2>\r\nIt is a common task to keep the domain model different of what Entity Framework creates. Using this approach we can keep the business logic depending in our own design for handling the object distribution, but, we must deal with mapping process converting the entity model to our domain model for every single entity. Well, the core offers the namespace Mapping that offer a easy way for it.<br /><br />You must decorate the property that you want to match from your class to the entity model using the attribute mapping, and passing the name of the equivalent property in the entity. Just adding the attribute you can let the core handle the mapping tasks for you:<br /><br /><i><b>Customer Model decorated using Mapping and Customer Entity</b></i><br /><pre>\npublic class CustomerModel\n{\n    [MappingAttribute(Name = &quot;FirstName&quot;)]\n    public string Name { get; set; }\n\n    [MappingAttribute(Name = &quot;LastName&quot;)]\n    public string LastName { get; set; }\n}\n\npublic class CustomerEntity\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n</pre><br /><br /><i><b>Object to Entity</b></i><br /><pre>\nvar  customerEntity = MappingFactory.ConvertFromMappedToObject(customerModel);\n</pre><br /><br /><i><b>Entity to Object</b></i><br /><pre>\nvar  customerModel = MappingFactory.ConvertFromObjectToMapped(customerEntity);\n</pre><br />*download the test project <a href=\"http://macds.codeplex.com/releases/view/99468\">http://macds.codeplex.com/releases/view/99468</a><br /><br />Also the mapping factory class create query string of the properties decorated with the attribute QueryStringAttribute.<br /><br /><i><b>Order Model decorated using QueryString attribute</b></i><br /><pre>\npublic class OrderModel\n{\n    [QueryString(Name = &quot;id&quot;, Position = 1, Optional = false)]\n    public int OrderID { get; set; }\n\n    [QueryString(Name = &quot;amount&quot;, Position = 2, Optional = false)]\n    public float Amount { get; set; }\n\n    [QueryString(Name = &quot;customerID&quot;, Position = 3, Optional = false)]\n    public int CustomerID { get; set; }\n}\n</pre><br /><br /><i><b>Object to QueryString</b></i><br /><pre>\nstring queryString = MappingFactory.GetQueryStringFromObject(order);\n\n// queryString value is: id=1&amp;amount=10&amp;customerID=1\n</pre><br />*download the test project <a href=\"http://macds.codeplex.com/releases/view/99468\">http://macds.codeplex.com/releases/view/99468</a><br />\n<h2><b>Serialization</b></h2>\r\nNowadays serializes object to XML or bytes is a common tasks and the core provides the namespace Serialization where you can find the Converter class to help you with these process.<br /><br /><i><b>Object and Bytes</b> (the class must be decorated as Serializable)</i><br /><pre>\n// Serialize object to byte array\nbyte[] data = Converter.GetBytesFromObject(customerModel);\n\n// Deserialize byte array to object\nCustomer customerModel = (CustomerModel)Converter.GetObjectFromBytes(data);\n</pre><br /><br /><i><b>Object and XML</b></i><br /><pre>\n// Serialize object to XML\nstring xml = Converter.GetXmlFromObject&lt;Customer&gt;(customerModel);\n\n// Deserialize XML to object\nCustomer customerModel = Converter.GetObjectFromXml&lt;Customer&gt;(xml);\n</pre><br />*download the test project <a href=\"http://macds.codeplex.com/releases/view/99468\">http://macds.codeplex.com/releases/view/99468</a><br />\n<h2><b>Validation</b></h2>\r\nDealing with enterprise solutions, we must create validation object to handle business rules, those validation if we don&#39;t take the correct approach, we will find them duplicated across the classes. The core offers a base class that help me build validation classes using the decorator pattern. Using this approach we will have a lot of validation units that we can group to accomplish a concrete rule.<br /><br />The ValidatorBase is an abstract class that help you group the validation units that implement the IValidation interface. You need to override one method named GetValidations where you apply the validator rules to be used. Lets validate the object JoinModel.<br /><br />We create our validation units<br /><pre>\n// Object to validate\npublic class JoinModel\n{\n    public string Firstname { get; set; }\n    public string Lastname { get; set; }\n    public string Password { get; set; }\n}\n\n// Validation Unit\npublic class StringEmptyValidation : IValidation\n{\n    private string data;\n\n    public StringEmptyValidation(string data)\n    {\n        this.data = data;\n    }\n\n    #region IValidation Members\n\n    public bool IsValid\n    {\n        get \n        { \n            return String.IsNullOrEmpty(this.data) ? false : true; \n        }\n    }\n\n    public Exception Exception\n    {\n        get { throw new ArgumentException(&quot;The data is empty&quot;); }\n    }\n\n    #endregion\n}\n\n// Validation Group\npublic class JoinValidator : ValidatorBase&lt;JoinModel&gt;\n{\n    public JoinValidator(JoinModel model) : base(model) { }\n\n    protected override IEnumerable&lt;IValidation&gt; GetValidations(JoinModel obj)\n    {\n        var list = new List&lt;IValidation&gt;();\n        list.Add(new StringEmptyValidation(obj.Firstname));\n        list.Add(new StringEmptyValidation(obj.Lastname));\n        list.Add(new StringEmptyValidation(obj.Password));\n\n        return list;\n    }\n}\n</pre><br /><br />Once you have the validation unit and the validation group created, the validation rule can be invoked in any service or repository class.<br /><pre>\npublic void JoinProcess(JoinModel join)\n{\n    join = new JoinValidator(join).GetValidData();\n    this.repository.Add(join);\n}\n</pre><br />*download the test project <a href=\"http://macds.codeplex.com/releases/view/99468\">http://macds.codeplex.com/releases/view/99468</a><br /><br />For complex scenarios when you are dealing with to many validation rules, the approach of adding and removing validation unit become a great feature.<br />\n<h2><b>Web Request</b></h2>\rIntegrating technologies like ASP 3.0 or PHP that offers web api, we use HttpWebRequest to process GET and POST call to other websites. The core offers the namespace Web when you can find the abstract class WebRequestBase. This base class provide the method SendRequest that you can use and define what type of call you want to process GET or POST, also you can define the variables that you want to send.<br /><br />-<b>Create a class that inherent from WebRequestBase</b>-<br /><pre>\npublic class HttpRequestManager : WebRequestBase\n{\n    public string GetRemoteDataByPost(string url, string data)\n    {\n        return this.SendRequest(url, data);\n    }\n\n    public string GetRemoteDataByGet(string url, string data)\n    {\n        return this.SendRequest(url, data, RequestMethod.GET);\n    }\n}\n</pre><br /><br />-<b>Send Post or Get Request</b>-<br /><pre>\n// Create instance of the http request manager class\nvar manager = new Mocks.HttpRequestManager();\n\n// Retreive data from google.com\nstring postData = manager.GetRemoteDataByPost(&quot;http://www.domain.com/&quot;, &quot;&quot;);\n\n// Retreive data from google.com\nstring getData = manager.GetRemoteDataByGet(&quot;http://www.domain.com&quot;, &quot;&quot;);\n</pre><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,.NET 4.0,C#,",
  "LastEdited": "2012-12-30T10:46:40.477-08:00"
}