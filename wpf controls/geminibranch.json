{
  "ProjectName": "geminibranch",
  "Title": "- Gemini - code branch",
  "Description": "the branch for all Hzj_jie's code",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />the branch for all Hzj_jie&#39;s code<br /><br />I will write some discussions about the design or implementation details in discussions <a href=\"https://geminibranch.codeplex.com/discussions\">https://geminibranch.codeplex.com/discussions</a><br /><br />most of the code are actively re-organizing and re-fectoring under /osi<br />/osi/root contains useful stuffs for .net development<br />say<br />/osi/root/connector, some wrapper to .net functions<br />/osi/root/envs, hardware &amp; software information, include environment variables, system performance<br />/osi/root/formation, some data structures<br />/osi/root/lock, a set of locks for different purpose<br />/osi/root/procedure, provide two different procedure based programming modules, by using lambda expression, they can save the time for working on lock / multi-threading / async-io, etc.<br />/osi/root/threadpool, a simple threadpool, which shares a same interface as managed threadpool, which can be switched by one line code change<br />/osi/root/utils, logging, counter, unhandled exception, stopwatch, resolver, etc<br />/osi/root/utt, a simple UniTTest framework<br />/osi/root/tests/, test cases for /osi/root stuffs<br /><br />osi is shorting for Operation System Interface, which is targeting a cross platform, cross environment basic interfaces to save the programmers from duplicated work for different devices / module / online service.<br />the basic design is to split the logic from IO. and the target is, writing a single logic, and running on mobile / pc / browser / tv / distributing system, etc.<br />but diff from a virtual machine, i am not planning to create a virtual layer between device and logic, instead the logic is running in the real device &lt;or .net runtime, since i am trying to implement it based on .net&gt;, while osi is more like a set of plug-ins, by accessing the osi interfaces, you can get users input, render screen, read / write files as usual.<br /><br /><br /><br />you will find lots of things in this code enlistment, from a piece of code to an entire solution.<br />including but not only<br />    create an object without knowing its type<br />    self-adapting compare without need an IComparable restriction<br />    serialize / deserialize object for network transport or filesystem storage<br />    different locks<br />    how to generate build info to code<br />    template design<br />    hi perf counter<br />    character escape<br />    network / html / http utilities<br />    pool<br />    string utilities / lazyStrCat / lazyString<br />    console application control break handling<br />    catch unhandled exception in domain / thread<br />    webBrowserDrawer<br />    pinvoke<br />    callbackManager / callbackAction<br />    eventComb / eventDriver, both are to write async program as sync<br />    configuration<br />    hi perf threadpool<br />    cacheManager<br />    DoS protection<br />    elpmis, scripting language engine<br />    free cluster, storing structured data into linear stream<br />    hi perf tcp / http server<br />    remotecall engine<br />    storoom<br />    frontdoor<br />    runrroom<br />... ... ... ...<br /><br />i am actively working on these projects, so no release can be found in downloads. you need to refer to source code <a href=\"http://geminibranch.codeplex.com/SourceControl/list/changesets\">http://geminibranch.codeplex.com/SourceControl/list/changesets</a>.<br /><br />enjoy, my pleasure if any can help you.<br /><br />/*******************************<br />non-commercial use only, or please contact me if you need to use the code for commercial purpose<br />except for the companies i am now working or was working at.<br />*******************************/<br /><br />any questions, feel free to drop me a msg to <a href=\"http://hzj_jie@hotmail.com\">hzj_jie@hotmail.com</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "allocator,compare,Serialization,deserialization,lock,build information,template,performance counters,pool,lazy evaluation,control break,unhandled exception,webBrowser Drawer,pinvoke,asynchronous,configuration,threadpool,cache,DoS protection,scripting language,structured data,tcp server,http server,remote call,rpc,storage,procedure,osi,unittest,unittest framework,unittesting,",
  "LastEdited": "2014-02-18T08:09:18.553-08:00"
}