{
  "ProjectName": "WordDocGenerator",
  "Title": "Word document generator using Open Xml 2.0 SDK",
  "Description": "WordDocumentGenerator is an utility to generate Word documents from templates using Visual Studio 2010 and Open XML 2.0 SDK. WordDocumentGenerator helps generate Word documents both non-refresh-able as well as refresh-able based on predefined templates using minimum code changes. Content controls are used as placeholders for document generation. It supports Word 2007 and Word 2010.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />WordDocumentGenerator is an utility to generate Word documents from templates using Visual Studio 2010 and Open XML 2.0 SDK. WordDocumentGenerator helps generate Word documents both non-refresh-able as well as refresh-able based on predefined templates using minimum code changes. Content controls are used as placeholders for document generation. It supports Word 2007 and Word 2010.<br /><br /><u>Request: Please share your comments so that it can be improved. Please share/tweet about this utility if you like it.</u><br /><br /><i>Update 1: Report generation samples using data bound content controls have been added</i><br /><i>Update 2: Report generation samples using XmlNode data, XPath and data bound content controls have been added</i><br /><i>Update 3: Sample that shows how to refresh a document from within Word has been added</i><br /><i>Update 4: Sample that generates documents having Charts(Line Chart &amp; Scatter Chart) has been added</i><br /><i>Update 5: Sample that generates documents using generic Xml has been added. I will update documentation in a week.</i><br /><br />Document generation is quite easy as code changes required are very less. A few images of document generation/refresh is displayed below<br /><br /><b>Document generation(Tables &amp; Charts)</b><br /><img src=\"/projects/WordDocGenerator/84062439-057b-4c2a-a005-1192bf16da6c\" alt=\"4.png\" title=\"4.png\" /><br /><br /><b>Template -&gt; Document generation</b><br /><br /><img src=\"/projects/WordDocGenerator/e122bfe0-2aba-42ab-9e7f-5ebd3161ad88\" alt=\"3.png\" title=\"3.png\" /><br /><br /><br /><b>Template -&gt; Document generation -&gt; Document Refresh</b><br /><br /><img src=\"/projects/WordDocGenerator/a2eaf216-4750-46ff-9d11-b7be5b86dbe7\" alt=\"1.png\" title=\"1.png\" /><br /><br /><br /><b>Document Refresh from within Word</b><br /><br /><img src=\"/projects/WordDocGenerator/b88a2cc3-cb77-4c12-a7b4-270927c9cff4\" alt=\"2.png\" title=\"2.png\" /><br /><br />Mostly one just needs to override these five methods while coding a new generator class. Sample generators have been provided in utility&#39;s source code. <br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Gets the place holder tag to type collection.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;returns&gt;</span><span style=\"color:Gray;\">&lt;/returns&gt;</span>\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">abstract</span> Dictionary&lt;<span style=\"color:Blue;\">string</span>, PlaceHolderType&gt; GetPlaceHolderTagToTypeCollection();\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Ignore placeholder found.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;placeholderTag&quot;&gt;</span><span style=\"color:Green;\">The placeholder tag.&lt;/param&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;openXmlElementDataContext&quot;&gt;</span><span style=\"color:Green;\">The open XML element data context.&lt;/param&gt;</span>\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">abstract</span> <span style=\"color:Blue;\">void</span> IgnorePlaceholderFound(<span style=\"color:Blue;\">string</span> placeholderTag, OpenXmlElementDataContext openXmlElementDataContext);\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Non recursive placeholder found.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;placeholderTag&quot;&gt;</span><span style=\"color:Green;\">The placeholder tag.&lt;/param&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;openXmlElementDataContext&quot;&gt;</span><span style=\"color:Green;\">The open XML element data context.&lt;/param&gt;</span>\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">abstract</span> <span style=\"color:Blue;\">void</span> NonRecursivePlaceholderFound(<span style=\"color:Blue;\">string</span> placeholderTag, OpenXmlElementDataContext openXmlElementDataContext);\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Recursive placeholder found.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;placeholderTag&quot;&gt;</span><span style=\"color:Green;\">The placeholder tag.&lt;/param&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;openXmlElementDataContext&quot;&gt;</span><span style=\"color:Green;\">The open XML element data context.&lt;/param&gt;</span>\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">abstract</span> <span style=\"color:Blue;\">void</span> RecursivePlaceholderFound(<span style=\"color:Blue;\">string</span> placeholderTag, OpenXmlElementDataContext openXmlElementDataContext);\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Container placeholder found.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;placeholderTag&quot;&gt;</span><span style=\"color:Green;\">The placeholder tag.&lt;/param&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;openXmlElementDataContext&quot;&gt;</span><span style=\"color:Green;\">The open XML element data context.&lt;/param&gt;</span>\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">abstract</span> <span style=\"color:Blue;\">void</span> ContainerPlaceholderFound(<span style=\"color:Blue;\">string</span> placeholderTag, OpenXmlElementDataContext openXmlElementDataContext);\r\n</pre></div>\n<h2>Development Status</h2>\r\nThe functionalities that can be achieved are:<br /><br /><b>Document Generation</b>\n<ol><li>Generate document from a Word template using content controls as place holders and populate controls with data(Object) e.g. [SampleDocumentGenerator, SampleRefreshableDocumentGenerator, SampleDocumentWithTableGenerator] </li>\n<li>Generate document from a Word template using content controls as place holders(data bound content controls) and populate controls with data(Object is serialized to Xml) e.g. [SampleDocumentGeneratorUsingDatabinding, SampleDocumentWithTableGeneratorUsingDatabinding, SampleDocumentGeneratorUsingXmlAndDatabinding]</li>\n<li>Refresh the document from within the document(e.g. right click on document and click Refresh) using document-level projects for Word 2007 and Word 2010</li>\n<li>Generate document from a Word template using content controls as place holders and populate controls with data(XmlNode) e.g. [SampleDocumentGeneratorUsingXml]</li>\n<li>Generate document from a Word template using content controls as place holders(data bound content controls) and populate controls with data(XmlNode) e.g. [SampleDocumentGeneratorUsingXmlAndDatabinding]</li>\n<li>Generate document from a Word template having charts and table e.g. [SampleDocumentWithTableAndChartsGenerator]</li>\n<li>Generate document that can be\n<ol><li>Standalone: Once generated document cannot be refreshed. </li>\n<li>Refreshable: Once generated document can be refreshed. Content controls will be added/updated/deleted and content control&#39;s content will be refreshed as per data.</li></ol></li>\n<li>Append documents using AltChunk</li>\n<li>Charts(Scatter and Line chart as of now)</li>\n<li>Protect Document</li>\n<li>UnProtect Document</li>\n<li>Removal of Content Controls from a document while keeping contents</li>\n<li>Removal of Foot notes</li>\n<li>Ensuring the each content control has unique Id&#39;s by fixing the duplicate Id&#39;s if any for a document</li>\n<li>Serializing an Object to Xml using XmlSerializer(Used for document generation using data bound content controls as serialized object is written to CustomXmlPart)</li></ol>\n<br /><b>Content Controls</b>\n<ol><li>Set text of a content control(not applicable for data bound content controls)</li>\n<li>Get text from a content control(not applicable for data bound content controls)</li>\n<li>Set text of content control while keeping PermStart and PermEnd elements(not applicable for data bound content controls)</li>\n<li>Set Tag of a content control</li>\n<li>Get Tag of a content control</li>\n<li>Set data binding of a content control </li>\n<li>Set text of a data bound content control from CustomXmlPart manually. This is helpful in cases when CustomXmlPart needs to be removed and this copies the text from the CustomXmlPart node using XPath.</li></ol>\n<br /><b>CustomXmlPart</b>\n<ol><li>Adding a CustomXmlPart to a document</li>\n<li>Removing CustomXmlPart from a document</li>\n<li>Getting CustomXmlPart from a document</li>\n<li>Add/Update a Xml element node inside CustomXmlPart. This is required\n<ol><li>To keep Document related metadata e.g. Document type, version etc.</li>\n<li>To make the Document self-refreshable. In this case the container content control is persisted inside a Placeholder node, the first time document is generated from template. Onwards when refreshing document we fetch the container content control from CustomXmlPart</li>\n<li>Saving the Xml e.g. serialized object which will be the data store for data bound content controls</li></ol></li></ol>\n<br /><br />You can read more about it at<br /><a href=\"http://blogs.msdn.com/b/atverma/archive/2011/12/31/utility-to-generate-word-documents-from-templates-using-visual-studio-2010-and-open-xml-2-0-sdk.aspx\">http://blogs.msdn.com/b/atverma/archive/2011/12/31/utility-to-generate-word-documents-from-templates-using-visual-studio-2010-and-open-xml-2-0-sdk.aspx</a><br /><a href=\"http://blogs.msdn.com/b/atverma/archive/2012/01/08/utility-to-generate-word-documents-from-templates-using-visual-studio-2010-and-open-xml-2-0-sdk-part-2-samples-updated.aspx\">http://blogs.msdn.com/b/atverma/archive/2012/01/08/utility-to-generate-word-documents-from-templates-using-visual-studio-2010-and-open-xml-2-0-sdk-part-2-samples-updated.aspx</a><br /><a href=\"http://blogs.msdn.com/b/atverma/archive/2012/01/11/utility-to-generate-word-documents-from-templates-using-visual-studio-2010-and-open-xml-2-0-sdk-part-3.aspx\">http://blogs.msdn.com/b/atverma/archive/2012/01/11/utility-to-generate-word-documents-from-templates-using-visual-studio-2010-and-open-xml-2-0-sdk-part-3.aspx</a><br /><a href=\"http://blogs.msdn.com/b/atverma/archive/2012/01/11/utility-to-generate-word-documents-from-templates-using-visual-studio-2010-and-open-xml-2-0-sdk-part-4.aspx\">http://blogs.msdn.com/b/atverma/archive/2012/01/11/utility-to-generate-word-documents-from-templates-using-visual-studio-2010-and-open-xml-2-0-sdk-part-4.aspx</a>\n<hr />---------------------------------------------------------------------------------------------------------------------<br />DISCLAIMER: The sample code or utility described herein is provided on an &quot;as is&quot; basis, without warranty of any kind.<br /><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "Open XML,Word 2010,Open Xml 2.0,Visual Studio 2010,Content Controls,Word 2007,Word,openxml word,openxml,Charts,Scatter_Plot Chart,Line Chart,Microsoft Office,AddIns,",
  "LastEdited": "2012-01-31T11:02:57.56-08:00"
}