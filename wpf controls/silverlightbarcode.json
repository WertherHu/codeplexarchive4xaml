{
  "ProjectName": "silverlightbarcode",
  "Title": "Silverlight Barcode Software",
  "Description": "This project aims to provide a Microsoft Silverlight barcode library and user control on the .Net platform. It's developed in C#.net and requires at least Visual Web Developer Express to compile.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\n<h1>Silverlight Barcode Software Project</h1>\r\n<img src=\"http://www.barcodesoftware.me/images/silverlightbarcodesoftware.jpg\" /><br /><br />The Project consists of two C# subprojects : <br />\n<h2>SilverlightBarcodeClassLibrary</h2>\rThis library is derived from the source code of the Code39 Barcode of the WPF Barcode Software project. The input and output properties, and methods of the Barcodes class are almost identitical. <br /><br /><b>Input Properties</b><br /><br />BarcodeType - There are many types of barcodes used in real life. For example, those used in retail are different from those used in warehouses and logistics. Currently, the barcode library implements a simple but widely used barcode symbology known as Code 39. This barcode is also known as Code 3 of 9. This barcode accepts only upper case characters &#39;A&#39; to &gt;&#39;Z&#39;, the numeric digits &#39;0&#39; to &#39;9&#39; and a few special characters. If you enter any other characters to the Data string, they will be ignored and filtered away.<br /><br />The Code 39 barcode has the advantage of being simple, as each of the characters are represented by a pattern of 10 alternating white and black bars. However, because the algorithm does not include much compression, the resulting barcode out is not very dense. In other words, you get a rather long barcode for a short data string.<br /><br />Data - This is the data to be encoded. For our WPF application, we have used &quot;1234567&quot; as the Data input string.<br /><br />CheckDigit - Some barcodes specify that a check digit must be included into the barcode. The check digit is usually an additional character (or several characters) that is appended to the input Data string and encoded into the barcode. The CheckDigit helps the scanner to verify that the data that it reads is correct and complete. For the Code39 barcode, the CheckDigit is optional. You can specify Yes or No to include or exclude it. <br /><br /><br /><b>Main Method</b><br /><br />encode() - After you have specified the Input Properties, you can start letting the barcode class to create the black and white bars. This is done by calling the method encode(). When this is done, you can start retrieving the results using the Output Properties of the Barcodes class.<br /><br /><br /><b>Output Properties</b><br /><br />EncodedData - This is the result returned by the &lt;code&gt;Barcodes&lt;/code&gt; after you have called the encode() method. The EncodedData returns a string in the form &quot;twtwttwtttwtwttttwttwwttwtwttwttwtwttt&quot;. The &quot;t&quot; represents a thin bar, while the &quot;w&quot; represents a thick bar. A thick bar is usually 3 times the width of a thin bar. The way to interpret the result is that each character indicates alternating bar colors. For example for &quot;twtw&quot;, the first &quot;t&quot; will be a thin black bar, the second &quot;w&quot; will be a thick white bar, the third &quot;t&quot; will be will be a thin black bar, and the fourth &quot;w&quot; will be a thick white bar. Our WPF application will use the string returned by EncodedData to draw a series of alternating black and white rectangles.<br /><br />HumanText - This is a text that is usually placed below the barcode. The Human Text helps a person to read the content of the barcode when a scanner is not available. The HumanText is usually identical to the input Data, but that not always the case. Sometimes, the HumanText will be formatted with special Start/Stop characters, otherwise, it will include the extra CheckDigit. Our WPF application will use the string returned by HumanText to draw the Human Readable Text below the barcode.<br />\n<h2>SilverlightBarcodeApplication</h2>\r\nThe following is the layout of the control.<br /><br />It consists of mainly a Canvas to hold the barcode and a TextBlock for the Human Readable Text. The default value of the<br />TextBlock is &quot;1234&quot; and it marks the location where the Human Readable Text of the barcode will be located. The barcode<br />is located exactly on top of the Human Readable Text. All the rest of the grid cells that surrounds the Canvas and TextBlock are considered quiet zones of the barcode -- they are deliberately left blank so that the scanner will not confuse anything in them with the actual barcode.<br /><br />The following is the source code for Page.xaml. Set ShowGridLines to True to see the layout.<br /><br />&lt;UserControl x:Class=&quot;SilverlightBarcodeApplication.Page&quot;<br />    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; <br />    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; <br />    Width=&quot;270&quot; Height=&quot;100&quot; Loaded=&quot;UserControl_Loaded&quot;&gt;<br />    &lt;Grid x:Name=&quot;grdLayoutRoot&quot; Background=&quot;White&quot; Width=&quot;270&quot; Height=&quot;100&quot; ShowGridLines=&quot;False&quot;&gt;<br />        &lt;Grid.RowDefinitions&gt;<br />            &lt;RowDefinition Height=&quot;10&quot;&gt;&lt;/RowDefinition&gt;<br />            &lt;RowDefinition Height=&quot;50&quot;&gt;&lt;/RowDefinition&gt;<br />            &lt;RowDefinition Height=&quot;30&quot;&gt;&lt;/RowDefinition&gt;<br />            &lt;RowDefinition Height=&quot;10&quot;&gt;&lt;/RowDefinition&gt;<br />        &lt;/Grid.RowDefinitions&gt;<br />        &lt;Grid.ColumnDefinitions&gt;<br />            &lt;ColumnDefinition Width=&quot;10&quot;&gt;&lt;/ColumnDefinition&gt;<br />            &lt;ColumnDefinition Width=&quot;250&quot;&gt;&lt;/ColumnDefinition&gt;<br />            &lt;ColumnDefinition Width=&quot;10&quot;&gt;&lt;/ColumnDefinition&gt;<br />        &lt;/Grid.ColumnDefinitions&gt;<br />        &lt;Canvas x:Name=&quot;MyCanvas&quot; Width=&quot;250&quot; Height=&quot;50&quot; Grid.Row=&quot;1&quot; Grid.Column=&quot;1&quot; /&gt;<br />        &lt;TextBlock x:Name=&quot;MyText&quot; Width=&quot;250&quot; Height=&quot;30&quot; Text=&quot;1234&quot; Grid.Row=&quot;2&quot; Grid.Column=&quot;1&quot;  TextAlignment=&quot;Center&quot;  FontSize=&quot;16&quot;/&gt;<br />    &lt;/Grid&gt;<br />&lt;/UserControl&gt;<br /><br />The barcode is drawn in the UserControl_Loaded method when the Control is loaded. <br /><br />The steps are rather straight forward. The control first uses the Barcode Library to return a string representing the bars of the barcode (known as the encodedData). From the encodedData, it is able to find the sum total of the number of thin bars that is able to fit into the Canvas width. (By the way, a thick bar is 3 times the width of a thin bar). This  sum total is known as the encodedLength. <br /><br />It then finds the width of the smallest bar in WPF coordinates (known as barWidth) by dividing the width of the Canvas by the encodedLength (the sum total of the number of thin bars).<br /><br />float barWidth = (float)(this.MyCanvas.Width / encodedLength);<br /><br />The barWidth is then used to draw the individual rectangles of the barcode. In this way, we are able to produce a barcode that fits into the Canvas exactly.<br /><br /><br />The following is the source code for the Usercontrol_Loaded method.<br /><br />       private void UserControl_Loaded(object sender, RoutedEventArgs e)<br />        {<br />            Me.BarcodeSoftware.Barcode.Barcodes barcode = new Me.BarcodeSoftware.Barcode.Barcodes();<br />            barcode.BarcodeType = Me.BarcodeSoftware.Barcode.Barcodes.BarcodeEnum.Code39;<br />            barcode.Data = &quot;123456&quot;;<br />            barcode.encode();<br />            string encodedData = barcode.EncodedData;<br />            MyText.Text = barcode.HumanText;<br /><br />            int encodedLength = 0;<br />            for (int x = 0; x &lt; encodedData.Length; x++)<br />            {<br />                if (encodedData[x] == &#39;t&#39;)<br />                    encodedLength++;<br />                else if (encodedData[x] == &#39;w&#39;)<br />                    encodedLength = encodedLength + 3;<br />            }<br /><br />            float barWidth = (float)(this.MyCanvas.Width / encodedLength);<br /><br />            if (barWidth &lt; 1)<br />                barWidth = 1;<br />            float thickWidth = barWidth * 3;<br />            double incrementWidth = 0;<br /><br />            int swing = 0;<br />            for (int x = 0; x &lt; encodedData.Length; x++)<br />            {<br />                Brush brush;<br />                if (swing == 0)<br />                    brush = new SolidColorBrush(Colors.Black);<br />                else<br />                    brush = new SolidColorBrush(Colors.White);<br /><br />                if (encodedData[x] == &#39;t&#39;)<br />                {<br />                    Rectangle r = new Rectangle();<br />                    r.Fill = brush;<br />                    r.Width = barWidth;<br />                    r.Height = this.MyCanvas.Height;<br />                    r.SetValue(Canvas.LeftProperty, incrementWidth);<br />                    r.SetValue(Canvas.TopProperty, 0.0);<br />                    MyCanvas.Children.Add(r);<br />                    incrementWidth = incrementWidth + ((barWidth));<br />                }<br />                else if (encodedData[x] == &#39;w&#39;)<br />                {<br />                    Rectangle r = new Rectangle();<br />                    r.Fill = brush;<br />                    r.Width = 3 * barWidth;<br />                    r.Height = this.MyCanvas.Height;<br />                    r.SetValue(Canvas.LeftProperty, incrementWidth);<br />                    r.SetValue(Canvas.TopProperty, 0.0);<br />                    MyCanvas.Children.Add(r);<br />                    incrementWidth = incrementWidth + (3 * (barWidth));<br />                }<br /><br />                if (swing == 0)<br />                    swing = 1;<br />                else<br />                    swing = 0;<br />            }<br />        }<br />    }<br /><br /><br /><img src=\"http://www.barcodesoftware.me/images/silverlightbarcode.jpg\" /><br /><br />A further improvement on the source code is to override the OnRender function of the control.<br /><br />For further updates on this project please visit<br /><a href=\"http://www.barcodesoftware.me\">http://www.barcodesoftware.me</a><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "Silverlight,",
  "LastEdited": "2009-05-17T22:10:06.333-07:00"
}