{
  "ProjectName": "fluenttemplates",
  "Title": "Silverlight Fluent Templates",
  "Description": "Silverlight Fluent Templates provides an easy to use interface for assigning, requiring and wiring up TemplateParts for Silverlight Controls. It also includes an Attribute centric approach as an alternative method.\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Silverlight Fluent Templates</h2>\rThe goal of this project is to help provide a richer interface for writing custom controls that utilize Template Parts. The first method of attack is providing an easy way to require certain parts, wireup events and assign types. Utilizing a common container class TemplatePart&lt;T&gt; FluentTemplates can build a chained interface for getting your control up and running. Due to Silverlight locking down any access to internal members and methods FluentTemplates will does have a few limitations. To really take advantage of the library you&#39;ll need to either implement an interface, inherit from a class or expose your internals. <br /><br />Currently this is a source code only project. When I feel like it&#39;s alpha/beta quality I will make a binary download available. For now consider this library musings of a silverlight control developer.<br />\n<h2>No Modifications Quickstart</h2>\rFluent Templates doesn&#39;t require you to change your controls. The As&lt;T&gt;() extension method will return a TemplatePart&lt;T&gt; that can then be used to Require, DependsOn, WireUp<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> OnApplyTemplate()\n{\n     submitButton = GetTemplateChild(ElementNames.SubmitButton)\n                            .As&lt;Button&gt;()\n                            .DependsOn(nameBox)\n                            .WireUp(b =&gt; b.Click += (sender, e) =&gt; RunSave());\n}\r\n</pre></div><h2>Inherited Control</h2>\rIf you&#39;d like to avoid using the As&lt;T&gt;() method you can inherit from TemplatedControl<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> TestFluentControl : TemplatedControl\n    {    \n        <span style=\"color:Blue;\">private</span> TextBox nameBox;\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> OnApplyTemplate()\n        {\n            nameBox = GetTemplateChild&lt;TextBox&gt;(ElementNames.NameBox)\n                           .Required()\n                           .WireUp(x =&gt; x.BindingValidationError += BoxValidationError);\n        }\n    }\r\n</pre></div><h2>Attribute Driven</h2>\rAnother alternative is using an Attribute approach. This however relies on your template properties or fields to be declared as protected and your assembly to be set to InternalsVisibleTo fluent templates<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">//In your Assembly.cs</span>\n[<span style=\"color:Blue;\">assembly</span>: InternalsVisibleTo(<span style=\"color:#A31515;\">&quot;FluentTemplates&quot;</span>,AllInternalsVisible=true)]\n\n<span style=\"color:Green;\">// your control</span>\n <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> AttributeTestControl : Control, ITemplatePartBinding\n    {\n        [TemplatePartBinding(Name = ElementNames.NameBox, Required = <span style=\"color:Blue;\">true</span>)] \n        <span style=\"color:Blue;\">internal</span> TextBox _nameBox;\n\n        [TemplatePartBinding(Name = ElementNames.SubmitButton, Required = <span style=\"color:Blue;\">true</span>)] \n        <span style=\"color:Blue;\">internal</span> Button _submitButton;\n\n      \n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> OnApplyTemplate()\n        {\n            <span style=\"color:Blue;\">base</span>.OnApplyTemplate();\n\n            <span style=\"color:Blue;\">if</span> (DesignTools.IsInDesignModeStatic)\n                <span style=\"color:Blue;\">return</span>;\n\n            TemplatePartBinding.BindTemplateParts(<span style=\"color:Blue;\">this</span>);\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">object</span> GetTemplatePartBinding(<span style=\"color:Blue;\">string</span> partName)\n        {\n            <span style=\"color:Blue;\">return</span> GetTemplateChild(partName);\n        }\n\n    }\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2010-07-13T21:05:49.983-07:00"
}