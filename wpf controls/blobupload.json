{
  "ProjectName": "blobupload",
  "Title": "Silverlight Azure Blob Parallel Upload Control",
  "Description": "Uploads a file in small chunks with retry mechanism to Azure Blobs",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h3><a href=\"http://blobupload.codeplex.com/wikipage?title=BLOB%20Parallel%20Upload%20Control%20%E2%80%93%20Internal%20Process%20Flow%20Description&version=5\"><img title=\"image\" src=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281267\" border=\"0\" alt=\"image\" width=\"97\" height=\"36\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a>&nbsp;&nbsp;&nbsp;\r\n<a href=\"http://blobupload.codeplex.com/wikipage?title=Screens&version=4\"><img title=\"image\" src=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281268\" border=\"0\" alt=\"image\" width=\"100\" height=\"37\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a>&nbsp;&nbsp;&nbsp;\r\n<a href=\"http://blobupload.codeplex.com/wikipage?title=FAQ&version=2\"><img title=\"image\" src=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281269\" border=\"0\" alt=\"image\" width=\"96\" height=\"37\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a>&nbsp;&nbsp;&nbsp;\r\n<a href=\"http://blobupload.codeplex.com/releases/73251/download/280824\"><img title=\"image\" src=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281282\" border=\"0\" alt=\"image\" width=\"112\" height=\"38\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border:0px\"></a></h3>\r\n<h3><span style=\"color:#c0504d\"><span>About</span></span><span><span> Project</span></span></h3>\r\n<h5>\r\n<hr>\r\n</h5>\r\n<p><strong><span style=\"color:#4f81bd\">Problem:</span></strong></p>\r\n<p>Traditionally uploading files to Windows Azure blob storage involve one of the following approaches, assuming the keys of your account are not to be made available to the client uploading the file:</p>\r\n<ol>\r\n<p>1. Web role uploads file to temporary directory and then uses API to upload file to a blob in parallel.</p>\r\n<p>2. Web role uses client side script, generally JQuery to split a client file and use an intercepting WCF service to upload the file to blob sequentially.</p>\r\n<p>3. Web role uses client side script and shared access signature to upload file sequentially to blob storage.</p>\r\n<p>4. Web role uses Silverlight control to upload files using shared access signature on the container.</p>\r\n</ol>\r\n<p>None of the solutions are truly up to mark in the issue of uploading files to blob storage from client side (to make it faster) and in parallel (to utilize parallel uploading capabilities of blob storage and make the process even faster).</p>\r\n<p><strong><span style=\"color:#4f81bd\">Solution:</span></strong></p>\r\n<p>The solution to the problem is two staged:</p>\r\n<ol>\r\n<p>1. Use a client side application to manage file operations such as splitting the file in chunks and retrying in case of failure.</p>\r\n<p>2. Web role uses client side script, generally JQuery to split a client file and use an intercepting WCF service to upload the file to blob sequentially.</p>\r\n</ol>\r\n<p>Building such a solution is simple with Silverlight. It runs on client and supports threading as well. Let&rsquo;s proceed step by step to build such a solution (Process flow diagram at the end of document):</p>\r\n<ol>\r\n<p>1. Create a <a href=\"http://msdn.microsoft.com/en-us/library/cc189008(VS.95).aspx\">\r\ncross domain policy</a> for access to blob storage through Silverlight application. This involves adding a policy file to the $root container of your storage account.</p>\r\n<p>2. Acquire shared access signature on container for a sufficient time in which the file may be uploaded.</p>\r\n<p>3. Pass this signature to the Silverlight application handling file uploads. I passed it through initialization parameter to Silverlight application.</p>\r\n<p>4. Inside the Silverlight application split the file into chunks of 1 MB each.</p>\r\n<p>5. Upload file using a single PUT request of you get a single packet and otherwise upload the file chunks as block blobs in parallel using multi-threading, I used\r\n<a href=\"http://portabletpl.codeplex.com/\">Portable TPL</a> that is an open source abstraction to threading in Silverlight 4. Silverlight 5 would have inbuilt TPL, but the process would remain essentially the same.</p>\r\n<p>6. In case any of the threads fail to upload its designated content, retry a finite number of times and fail the entire upload process if it keeps on failing.</p>\r\n<p>7. In case you have successfully uploaded the file as block blobs then issue a PUT request to commit the blocks.</p>\r\n<p>8. Exit the application.</p>\r\n</ol>\r\n<p>Please refer the documentation for more details.</p>\r\n<h3><span><span>&nbsp;</span></span></h3>\r\n<h3><span><span>Silverlight </span><span style=\"color:#c0504d\"><span>Blob Parallel</span></span><span> Upload Control</span></span></h3>\r\n<hr>\r\n<p><a href=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281243\"><img title=\"image\" src=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281244\" border=\"0\" alt=\"image\" width=\"316\" height=\"116\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a>&nbsp;&nbsp;&nbsp;\r\n<a href=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281245\">\r\n<img title=\"image\" src=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281246\" border=\"0\" alt=\"image\" width=\"309\" height=\"117\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a>&nbsp;\r\n<a href=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281247\">\r\n<img title=\"image\" src=\"http://download.codeplex.com/Download?ProjectName=blobupload&DownloadId=281248\" border=\"0\" alt=\"image\" width=\"313\" height=\"116\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a></p>\r\n<h5>&nbsp;</h5>\r\n<h3><span><span style=\"color:#c0504d\"><span>Features</span></span><span> Coming Soon</span></span></h3>\r\n<hr>\r\n<ol>\r\n<p>1. Support to upload multiple files.</p>\r\n<p>2. More Descriptive Upload Progress Tracker bar. This would display the each MB wise or kb wise uploading progress of the file.</p>\r\n<p>3. Implement concurrency control with TaskScheduler.</p>\r\n<p>4. Support for even larger files (&gt;200 Mb).</p>\r\n</ol>\r\n<p>&nbsp;</p>\r\n<h3><span><span style=\"color:#c0504d\"><span style=\"color:#000000\">References</span></span></span></h3>\r\n<hr>\r\n<ol>\r\n<p>1. <a href=\"http://blog.smarx.com/posts/uploading-windows-azure-blobs-from-silverlight-part-1-shared-access-signatures\">\r\nhttp://blog.smarx.com/posts/uploading-windows-azure-blobs-from-silverlight-part-1-shared-access-signatures</a></p>\r\n<p>2. <a href=\"http://portabletpl.codeplex.com/\">http://portabletpl.codeplex.com/</a></p>\r\n<p>3. <a href=\"http://watwp.codeplex.com/\">http://watwp.codeplex.com/</a></p>\r\n</ol>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Azure,Azure Storage,Silverlight,Parallel Programming,",
  "LastEdited": "2011-09-14T22:15:45.99-07:00"
}