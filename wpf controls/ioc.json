{
  "ProjectName": "ioc",
  "Title": "OpenNETCF.IoC Framework",
  "Description": "A lightweight managed IoC (Inversion of Control) and DI (Dependency Injection) framework designed for the .NET .Compact Framework but the full framework is supported as well.  It supports Registration, construction and even event aggregation in a tiny and wicked fast package.\r\n\r\nThis framework is patterned after Microsoft's SCSF object model, but actually built with device memory and processor constraints in mind.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">The OpenNETCF.IoC Framework it is a public-domain-licensed (you can&#39;t get any more free and unencumbered than that) framework written in C# (framework version 3.5) that provides both <a href=\"http://martinfowler.com/articles/injection.html\">inversion of control and dependency injection</a> for applications running on any or all of the following platforms:<br />\n<ul><li>.NET Compact Framework 2.0 or 3.5</li>\n<li>.NET Framework 3.5 or 4.0</li>\n<li><a href=\"http://blog.opennetcf.com/ctacke/2010/08/02/OpenNETCFIoCNowSupportingWinPhone.aspx\">Windows Phone 7</a></li>\n<li><a href=\"http://xamarin.com/monoforandroid\">Mono for Android (MonoDroid)</a></li>\n<li><a href=\"http://blog.opennetcf.com/ctacke/2010/10/29/AppleNETCFIoCAnIoCContainerForMonoTouch.aspx\">iPhone/MonoTouch</a></li></ul>\n<br />It&#39;s roughly modelled after <a href=\"http://msdn.microsoft.com/en-us/library/aa480482.aspx\">Microsoft&#39;s SCSF</a> and CAB frameworks, but it&#39;s scaled down and optimized for running on mobile and embedded devices, plus I &quot;fixed&quot; stuff that I think the SCSF got wrong (like having a static, globally available RootWorkItem and the ability to insert IMessageFilters into the application&#39;s message pump).<br /><br />This framework is in use in several commercial applications (both desktop and CF) already, so it&#39;s been pretty heavily tested and vetted.  I still want to add a few more features as well and go back through it looking for performance optimizations, but it certainly has enough features to be used in applications today.<br /><br />This release also ships with a full-blown, real-world sample application, not just the typical &quot;Northwind&quot; type of application.  The sample is called WiFiSurvey and it can be used to survey WiFi AP coverage of a site and to monitor associated AP changes as well as network addressability of a device.<br /><br />WiFiSurvey has a Configuration service, a <a href=\"http://www.microsoft.com/Sqlserver/2008/en/us/compact.aspx\">SQL CE 3.5</a>-backed Data Access Layer, an Infrastructure module and a an application shell all of which are fully decoupled from one another and that are all loaded dynamically using an XML definition file.  The shell makes use of both a DeckWorkspace and a TabWorkspace, showing you not just how to use them, but also how to create your own workspaces if need be.<br /><br />The WiFiSurvey application has a single source base for all target platforms and has been tested on the following platforms:<br /><br />ARM-based CE 6.0 with a 320x240 (landscape) display. <br />Pocket PC 2003 240x320 (portrait) <br />WinMo 5.0 240x320 (portrait and landscape)<br />The IoC framework has additionally been tested on x86-based CE 5.0 and CE 6.0 devices.<br /><br />As a side note, the WiFiSurvey sample application is also a good example of using the OpenNETCF <a href=\"http://www.opennetcf.com/Products/SmartDeviceFramework/tabid/65/Default.aspx\">Smart Device Framework</a> for getting wireless information.<br />\n<h2><b><u>The Basics</u></b></h2>\r<a href=\"https://ioc.codeplex.com/wikipage?title=Dependency%20Injection&referringTitle=Home\">Dependency Injection</a><br /><a href=\"https://ioc.codeplex.com/wikipage?title=Event%20Aggregation&referringTitle=Home\">Event Aggregation</a><br /><a href=\"https://ioc.codeplex.com/wikipage?title=Model-View-Presenter%2fController%20Features&referringTitle=Home\">Model-View-Presenter&#47;Controller Features</a><br />\n<h2><b><u>Tutorials</u></b></h2>\r<ul><li><a href=\"http://blog.opennetcf.com/ctacke/2009/03/09/InversionOfControlAndTheCompactFrameworkPartI.aspx\">Introduction to IoC and the Compact Framework</a></li>\n<li><a href=\"http://blog.opennetcf.com/ctacke/2009/03/10/TheOpenNETCFIoCFrameworkItemsAndServices.aspx\">The OpenNETCF.IoC Framework: Items and Services</a></li>\n<li><a href=\"http://blog.opennetcf.com/ctacke/2009/03/11/PartIIITheOpenNETCFIoCFrameworkEvents.aspx\">The OpenNETCF.IoC Framework: Events</a></li></ul>\n\n<h2><b><u>Performance</u></b></h2>\rThe OpenNETCF IoC Framework, for Singleton registration and resolution anyway, outperforms other popular IoC frameworks such as Ninject, Unity, Castle Windsor, Structure Map and AutoFac.  For a brief overview of the performance differences, see the following blog entry:\n<ul><li><a href=\"http://blog.opennetcf.com/ctacke/2011/04/29/BenchmarkingOpenNETCFsIoCFramework.aspx\">Benchmarking OpenNETCF&#39;s IoC Framework</a></li></ul>\n\n<h2><b><u>Common Service Locator Adapter</u></b></h2>\rAs of version 1.0.9280, we also support an adapter for the Microsoft Patterns and Practices team&#39;s <a href=\"http://commonservicelocator.codeplex.com\">CommonServiceLocator project</a>.<br />Download the adapter and tests for it over on the Downloads page.<br />\n<h2><b><u>Usage examples</u></b></h2>\rWe understand that we need to document the library better.  One of the pitfalls of creating open source projects is that there are often more questions than the developers can answer and we have to decide whether time is better spent adding features or documenting.  As an attempt to provide some developer help, below are links to real-world applications (where the source code is available) that use IoC that may be useful as implementation examples.\n<ul><li><a href=\"http://mtcagent.codeplex.com\">OpenNETCF MTConnect VirtualAgent</a></li>\n<li><a href=\"http://orm.codeplex.com\">OpenNETCF ORM</a> - the desktop source includes an Entity Generator which is a wizard-based application that uses IoC</li></ul>\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "COmpact Framework,IOC,Inversion of Control,dependency injection,MEF,Model View Presenter,Model-View-Presenter,MVP,MVC,MVC Framework,windows mobile,patterns & practices,.NET CF,gps,Windows Phone 7,monotouch,iphone,",
  "LastEdited": "2012-12-19T06:47:49.1-08:00"
}