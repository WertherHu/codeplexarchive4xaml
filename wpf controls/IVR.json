{
  "ProjectName": "IVR",
  "Title": "IVR applications based on Voicent Gateway (C# Sample Interface)",
  "Description": "In telephony, interactive voice response, or IVR, is a phone technology that allows a computer to detect voice and touch tones using a normal phone call. The IVR system can respond with pre-recorded or dynamically generated audio to further direct callers on how to proceed. IVR systems can be used to control almost any function where the interface can be broken down into a series of simple menu choices. Once constructed IVR systems generally scale well to handle large call volumes.\n\nThe IVR can enable you to make hundreds of personalized calls with a single click.\n\nIVR telephone notification software broadcast voice messages by phone. Ideal for group event reminders, marketing, lead generation, political campaign promotions, school fundraising, church communications, emergency notifications, and much more.\n\nYou can also use IVR Studio to develop your IVR applications. This tool enables flexible application development without any knowledge of VoiceXML. All you need is point and click to draw a call flow diagram. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1><a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> Introduction</h1>\r\nInteractive Voice Response (<a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a>) applications enable callers to interact with any software, such as query and modify database information, over their telephone. Callers can use their touch-tone pad to input requests or just say what they want to do, such as requesting account balance information.  <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> systems usually employ text-to-speech software to read information back.<br />\n<h1>The Using Scope of <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a></h1>\r\nIn telephony, interactive voice response, or <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a>, is a phone technology that allows a computer to detect voice and touch tones using a normal phone call. The <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> system can respond with pre-recorded or dynamically generated audio to further direct callers on how to proceed. <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> systems can be used to control almost any function where the interface can be broken down into a series of simple menu choices. Once constructed <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> systems generally scale well to handle large call volumes.<br /><br />The <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> can enable you to make hundreds of personalized calls with a single click.<br /><br /><a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> telephone notification software broadcast voice messages by phone. Ideal for group event reminders, marketing, lead generation, political campaign promotions, school fundraising, church communications, emergency notifications, and much more.<br /><br />You can also use <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR Studio</a> to develop your <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> applications. This tool enables flexible application development without any knowledge of VoiceXML. All you need is point and click to draw a call flow diagram.<br />\n<h1>Using the <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> API</h1>\r\nSince all these functions are implemented as a HTTP client communicating directly with a gateway, they can be run on any machine that has a connection to the host running the gateway. Here, we use the Voicent Gateway for the server.<br /><br />This C# Simple Interface is developed based on <a href=\"http://voicent.com/devnet/docs/simpleintf.htm\">Voicent Gateway Simple Outbound Call Interface</a>.<br /><br /><br /><b>SYNOPSIS</b><br /><br />    string CallText(string phoneno, string text, bool selfdelete)<br /><br /><b>DESCRIPTION</b><br /><br />    Make a phone call and play the specified text message. The text message is convert to voice by Voicent Gateway&#39;s text-to-speech engine.<br />    The options are: <br />    phoneno \tThe phone number to call<br />    text \tThe message for the phone call<br />    selfdelete \tAsk the gateway to automatically delete the call request after the call is made if it is set to &#39;1&#39;<br /><br />    The return value is the call request id &lt;reqId&gt;.<br /><br /><b>EXAMPLE</b><br /><br />    CallText(&quot;123-4567&quot;, &quot;Hello, how are you doing&quot;, true); <br /><br />    Make a call to phone number &#39;123-4567&#39; and say &#39;Hello, how are you doing&#39;. Since the selfdelete bit is set, the call request record in the gateway will be removed automatically after the call.<br />    string reqId = CallText(&quot;123-4567&quot;, &quot;Hello, how are you&quot;, 0);<br />    Make a call to phone number &#39;123-4567&#39; and say &#39;Hello, how are you&#39;. Since the selfdelete bit is not set, the call request record in the gateway will not be removed after the call. You can then use CallStatus to get the call status, or use CallRemove to remove the call record.<br /><br /><br /><b>SYNOPSIS</b><br /><br />    string CallAudio(string phoneno, string audiofile, bool selfdelete)<br /><br /><b>DESCRIPTION</b><br /><br />    Make a phone call and play the specified audio message.<br />    The options are: <br />    phoneno \tThe phone number to call<br />    audiofile \tThe audio message for the phone call. The format must be PCM 16bit, 8KHz, mono wave file. The audio file must be on the same host as Voicent Gateway.<br />    selfdelete \tAsk the gateway to automatically delete the call request after the call is made if it is set to &#39;1&#39;<br /><br />    The return value is the call request id &lt;reqId&gt;.<br /><br /><b>EXAMPLE</b><br /><br />    CallAudio(&quot;123-4567&quot;, &quot;C:\\my audios\\hello.wav&quot;, true); <br /><br />    Make a call to phone number &#39;123-4567&#39; and play the hello.wav file. Since the selfdelete bit is set, the call request record in the gateway will be removed automatically after the call.<br />    string reqId = CallAudio(&quot;123-4567&quot;, &quot;C:\\my audios\\hello.wav&quot;, 0);<br />    Make a call to phone number &#39;123-4567&#39; and play the hello.wav file. Since the selfdelete bit is not set, the call request record in the gateway will not be removed after the call. You can then use CallStatus to get the call status, or use CallRemove to remove the call record.<br /><br /><br /><b>SYNOPSIS</b><br /><br />    string CallStatus(string reqId)<br /><br /><b>DESCRIPTION</b><br /><br />    Check the call status of the call with &lt;reqId&gt;. If the call is made, the return value is &#39;Call Made&#39;, or if the call is failed, the return value is &#39;Call Failed&#39;, or if the call will retry, the return value is &quot;Call Will Retry&quot;, and for any other status, the return value is &quot;&quot;.<br /><br />    Please note that an empty string is returned if the call is still in progress. You&#39;ll need to wait and then poll the status again.<br /><br /><b>EXAMPLE</b><br /><br />    string status = CallStatus(&quot;11234035434&quot;); <br /><br /><br /><b>SYNOPSIS</b><br /><br />    void CallRemove(string reqId)<br /><br /><b>DESCRIPTION</b><br /><br />    Remove the call record of the call with reqId. If the call is not made yet, it will be removed also.<br /><br /><b>EXAMPLE</b><br /><br />    CallRemove(&quot;11234035434&quot;); <br /><br /><br /><b>SYNOPSIS</b><br /><br />    void CallTillConfirm(string vcastexe, string vocfile, string wavfile, string ccode)<br /><br /><b>DESCRIPTION</b><br /><br />    Keep calling a list of people until anyone enters the confirmation code. The message is the specified audio file. This is ideal for using it in a phone notification escalation process.<br /><br />    To use this feature, Voicent BroadcastByPhone Professional version has to be installed. This function is similar to the command line interface BroadcastByPhone has. But since the command cannot be invoke over a remote machine, this perl function uses the gateway to schedule an event, which in turn invokes the command on the gateway host.<br /><br />    The options are:<br /><br />    vcastexe \tThe BroadcastByPhone program. It is usually &#39;C:\\Program Files\\Voicent\\BroadcastByPhone\\bin\\vcast.exe&#39; on the gateway host.<br />    vocfile \tThe BroadcastByPhone call list to use.<br />    ccode \tThe confirmation code use for the broadcast<br />    wavfile \tThe audio file to use for the broadcast<br /><br /><b>EXAMPLE</b><br /><br />    CallTillConfirm(<br />    &quot;C:\\Program Files\\Voicent\\BroadcastByPhone\\bin\\vcast.exe&quot;,<br />    &quot;C:\\My calllist\\escalation.voc&quot;,<br />    &quot;C:\\My calllist\\escalation.wav&quot;, <br />    &quot;911911&quot;);<br /><br /><br />    This will invoke BroadcastByPhone program on the gateway host and start calling everyone one the call list defined in &#39;C:\\My calllist\\escalation.voc&#39;. The audio message played is &#39;C:\\My calllist\\escalation.wav&#39;. And as soon as anyone on the list enters the confirmation code &#39;911911&#39;, the call will stop automatically. <br /><br />\n<h1>Source Code</h1>\r<pre>\n  ----------------\n\n  File Voicent.cs:\n\n  ----------------\n\n  using System;\n  using System.Net;\n  using System.IO;\n\n  namespace Voicent\n  {\n      /// &lt;summary&gt;\n      /// Interface class for making telephone calls using the simple\n      /// API of Voicent Gateway.\n      /// &lt;/summary&gt;\n      public class Voicent\n      {\n          /// &lt;summary&gt;\n          /// Default constructor use http://localhost:8155\n          /// &lt;/summary&gt;\n          public Voicent()\n          {\n               m_host = &quot;localhost&quot;;\n\n               m_port = 8155;\n          } \n\n          /// &lt;summary&gt;\t\n          /// Constructor with host and port\n          /// &lt;/summary&gt;\n          /// &lt;param name=&quot;host&quot;&gt;Hostname of Voicent Gateway&lt;/param&gt;\n          /// &lt;param name=&quot;port&quot;&gt;port number of Voicent Gateway&lt;/param&gt;\n          public Voicent(string \n                      host, int port)\n          {\n               m_host = host;\n\n               m_port = port;\n          }\n\n          /// &lt;summary&gt;\n          /// Call the specified phone number and play the text using\n          /// text-to-speech engine\n          /// &lt;/summary&gt;\n          /// &lt;param name=&quot;phoneno&quot;&gt;telephone number to call&lt;/param&gt;\n          /// &lt;param name=&quot;text&quot;&gt;text message to play&lt;/param&gt;\n          /// &lt;param name=&quot;selfdelete&quot;&gt;if set to one, automatically remove call record on \n          /// gateway after the call is made&lt;/param&gt;\n          /// &lt;returns&gt;Call Request ID on gateway&lt;/returns&gt;\n          public string CallText(string phoneno, string text, bool selfdelete)\n          {\n               // call request url\n               string urlstr = &quot;/ocall/callreqHandler.jsp&quot;;\n\n               // setting the http post string\n               string poststr = &quot;info=Simple Text Call &quot; + \n                         phoneno;\n\n               poststr += &quot;&amp;phoneno=&quot; + phoneno;\n\n               poststr += &quot;&amp;firstocc=10&quot;;\n\n               poststr += &quot;&amp;selfdelete=&quot;;\n\n               poststr += (selfdelete ? &quot;1&quot; : &quot;0&quot;);\n\n               poststr += &quot;&amp;txt=&quot; + text;\n\n\n               // Send Call Request\n               String rcstr = PostToGateway(urlstr, poststr);\n\n               return GetRequestID(rcstr);\n          }\n\n          /// &lt;summary&gt;\n          /// Call the specified phone number and play the audio file\n          /// &lt;/summary&gt;\n          /// &lt;param name=&quot;phoneno&quot;&gt;telephone number to call&lt;/param&gt;\n          /// &lt;param name=&quot;filename&quot;&gt;audio file path name&lt;/param&gt;\n          /// &lt;param name=&quot;selfdelete&quot;&gt;if set to one, automatically  remove call record on \n          /// gateway after the call is made&lt;/param&gt;\n          /// &lt;returns&gt;Call Request ID on gateway&lt;/returns&gt;\n          public string CallAudio(string \n                      phoneno, string filename, bool selfdelete)\n          {\n               // call request url\n               string urlstr = &quot;/ocall/callreqHandler.jsp&quot;;\n\n               // setting the http post string\n               string poststr = &quot;info=Simple Audio Call &quot; + \n                         phoneno;\n\n               poststr += &quot;&amp;phoneno=&quot; + phoneno;\n\n               poststr += &quot;&amp;firstocc=10&quot;;\n\n               poststr += &quot;&amp;selfdelete=&quot;;\n\n               poststr += (selfdelete ? &quot;1&quot; : &quot;0&quot;);\n\n               poststr += &quot;&amp;audiofile=&quot; + filename;\n\n\n               // Send Call Request\n               String rcstr = PostToGateway(urlstr, poststr);\n\n               return GetRequestID(rcstr);\n           }\n\n\n          /// &lt;summary&gt;\n          /// Get call request status\n          /// &lt;/summary&gt;\n          /// &lt;param name=&quot;reqID&quot;&gt;Call request ID&lt;/param&gt;\n          /// &lt;returns&gt;status code&lt;/returns&gt;\n          public string CallStatus(string \n                            reqID)\n          {\n               //call status url\n               string urlstr = &quot;/ocall/callstatusHandler.jsp&quot;;\n\n               string poststr = &quot;reqid=&quot; + reqID;\n\n               // Send Call Request\n               String rcstr = PostToGateway(urlstr, poststr);\n\n               if (rcstr.IndexOf(&quot;^made^&quot;) != -1)\n                   return &quot;Call Made&quot;;\n\n               if (rcstr.IndexOf(&quot;^failed^&quot;) != -1)\n                   return &quot;Call Failed&quot;;\n\n               if (rcstr.IndexOf(&quot;^retry^&quot;) != -1)\n                   return &quot;Call Will Retry&quot;;\n\n               return &quot;&quot;;\n          }\n\n\n          /// &lt;summary&gt;\n          /// Remove the call request on the gateway\n          /// &lt;/summary&gt;\n          /// &lt;param name=&quot;reqID&quot;&gt;Call Request ID&lt;/param&gt;\n          public void CallRemove(string \n                      reqID)\n          {\n               // call status url\n               string urlstr = &quot;/ocall/callremoveHandler.jsp&quot;;\n\n               string poststr = &quot;reqid=&quot; + reqID;\n\n               // Send Call Request\n               PostToGateway(urlstr, poststr);\n          }\n\n          /// &lt;summary&gt;\n          /// Invoke Voicent BroadcastByPhone and start the\n                 call-till-confirm escalation process\n          /// &lt;/summary&gt;\n          /// &lt;param name=&quot;vcastexe&quot;&gt;BroadcastByPhone executable file path&lt;/param&gt;\n          /// &lt;param name=&quot;vocfile&quot;&gt;BroadcastByPhone call list file path&lt;/param&gt;\n          /// &lt;param name=&quot;wavfile&quot;&gt;Audio file, must be PCM 8KHz, 6bit, \n                 mono wave file format&lt;/param&gt;\n          /// &lt;param name=&quot;ccode&quot;&gt;Confirmation code, numbers only&lt;/param&gt;\n          public void CallTillConfirm(string \n                      vcastexe, string vocfile, string wavfile, string ccode)\n          {\n               // call request url\n               string urlstr = &quot;/ocall/callreqHandler.jsp&quot;;\n\n               // setting the http post string\n               string poststr = &quot;info=Simple Call till Confirm&quot;;\n\n               poststr += &quot;&amp;phoneno=1111111&quot;; // any number\n\n               poststr += &quot;&amp;firstocc=10&quot;;\n\n               poststr += &quot;&amp;selfdelete=0&quot;;\n\n               poststr += &quot;&amp;startexec=&quot; + vcastexe;\n\n\n               string cmdline = &quot;\\&quot;&quot; + vocfile + &quot;\\&quot; -startnow&quot;;\n\n               cmdline += &quot; -confirmcode &quot; + ccode;\n\n               cmdline += &quot; -wavfile &quot; + &quot;\\&quot;&quot; + wavfile + &quot;\\&quot;&quot;;\n\n\n               // add -cleanstatus if necessary\n               poststr += &quot;&amp;cmdline=&quot; + cmdline;\n\n               PostToGateway(urlstr, poststr);\n          }\n\n\n          protected string PostToGateway(string urlstr, string poststr)\n          {\n               Uri url = new Uri(&quot;http://&quot; + m_host + &quot;:&quot; + \n                         m_port.ToString() + urlstr);\n\n               HttpWebRequest HttpWRequest = (HttpWebRequest) \n                WebRequest.Create(url);\n\n               HttpWRequest.Headers.Set(&quot;Pragma&quot;, &quot;no-cache&quot;);\n\n               HttpWRequest.Timeout = 60000;\n\n               HttpWRequest.Method = &quot;POST&quot;;\n\n               HttpWRequest.ContentType = \n                         &quot;application/x-www-form-urlencoded&quot;;\n\n\n               byte[] PostData = \n                         System.Text.Encoding.ASCII.GetBytes(poststr);\n\n               HttpWRequest.ContentLength = PostData.Length;\n\n               Stream tempStream = HttpWRequest.GetRequestStream();\n\n               tempStream.Write(PostData,0,PostData.Length);\n\n               tempStream.Close();\n\n\n               HttpWebResponse HttpWResponse = (HttpWebResponse) \n                         HttpWRequest.GetResponse();\n\n               Stream receiveStream = \n                         HttpWResponse.GetResponseStream(); \n\n               StreamReader readStream = new \n                         StreamReader(receiveStream);\n\n\n               string rcstr = &quot;&quot;;\n\n               Char[] read = new Char[256]; \n\n               int count = 0;\n\n               while ((count = readStream.Read(read, 0, 256)) &gt; 0)\n               {\n                    rcstr += new String(read, 0, count);\n               }\n\n               HttpWResponse.Close();\n\n               readStream.Close();\n\n\n               return rcstr;\n          }\n\n\n          protected string GetRequestID(string rcstr)\n          {\n               int index1 = rcstr.IndexOf(&quot;[ReqId=&quot;);\n\n               if (index1 == -1)\n                   return &quot;&quot;;\n\n               index1 += 7;\n\n\n               int index2 = rcstr.IndexOf(&quot;]&quot;, index1);\n\n               if (index2 == -1)\n                  return &quot;&quot;;\n\n\n               return rcstr.Substring(index1, index2 - index1);\n          }\n\n\n\n          private string m_host;\n\n          private int m_port;\n      }\n  }\n\n\n\n\n\n\n\n\n\n\n                \n  --------------------\n\n   File TextVoicent.cs:\n\n  --------------------\n\n  using System;\n  using System.Threading;\n  using Voicent;\n                \n  namespace csapi\n  {\n      /// &lt;summary&gt;\n      /// Simple class to test Voicent C# Simple Interface\n      /// &lt;/summary&gt;\n      class TestVoicent\n      {\n          /// &lt;summary&gt;\n          /// The main entry point for the application.\n          /// &lt;/summary&gt;\n          [STAThread]\n          static void Main(string[] args)\n          {\n              string phoneno = &quot;8147838&quot;; // Replace it with your number\n\n\n              Voicent.Voicent voicent = new Voicent.Voicent();\n\n\n              // Test CallText\n              string reqId = voicent.CallText(phoneno, &quot;Hello, \n                        how are you&quot;, true);\n\n              Console.WriteLine(&quot;Call request ID = &quot; + reqId);\n\n\n              // Test CallAudio\n              reqId = voicent.CallAudio(phoneno, &quot;C:/Program \n                        Files/Voicent/MyRecordings/sample_message.wav&quot;, false);\n\n              Console.WriteLine(&quot;Call request ID = &quot; + reqId);\n\n\n              // try to get status\n              while (true)\n              {\n                  Thread.Sleep(20000); // wair for 20 seconds\n\n                  string status = voicent.CallStatus(reqId);\n\n                  Console.WriteLine(&quot;Call Status: &quot; + status);\n\n                  if (status.Length != 0)\n                      break;\n              }\n\n\n              // remove the call request on the gateway\n              voicent.CallRemove(reqId);\n\n\n              // Test call-till-confirm\n              voicent.CallTillConfirm(&quot;C:/Program Files/Voicent/\n                                                 BroadcastByPhone/bin/vcast.exe&quot;,\n                                           &quot;C:/temp/testctf.voc&quot;,\n                                           &quot;C:/Program Files/Voicent/\n                                                 MyRecordings/sample_message.wav&quot;,\n                                           &quot;12345&quot;);\n          }\n\n      }\n\n  }\n</pre><br /><br />\n<h1>Points of Interest about <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a></h1>\r\n<h2>Ideal inbound &amp; Outbound <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> solution</h2>\r\n        * Self-service<br />            Allow callers to get answers to standard inquiries simply and easily, and in seconds, without the need for an agent<br />\t* Reach the right agent<br /><br />\t    Automatically capture relevant information from your callers and direct them to the appropriate agent to handle their call<br />\t* 24/7 customer service<br /><br />\t    Enable your customers to get the information they need, when they need it. Your IVR application is working even when you’re not, or it can transfer calls to your cell phone.<br />\t* Automated Outbound <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a><br /><br />\t    Fully integrated with BroadcastByPhone Autodialer. Fully automated interactive outbound call applications to generate sales leads and keep in touch with your customers.<br /><br />\n<h2>Inbound &amp; Outbound <a href=\"http://www.voicent.com/ivr.php?a=8223\">IVR</a> Solution Key Features</h2>\r\t* Point-and-click call flow design<br />\t* Deployed on any PC with Windows 2000/2003/XP/Vista<br />\t* Transfer call to any phone, such as your cell phone<br />\t* Interactive touch tone response<br />\t* Speech command response<br />\t* Automatically convert text to speech<br />\t* Easy integration with your website<br />\t* (Developer feature) Integrate with any program through Java<br />\t* Support Skype or voice modems for making calls<br />\t* Support single phone line or multiple phone lines<br />\t* Natural Text-to-speech engine for playing any text over the phone</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2008-07-15T01:56:42.447-07:00"
}