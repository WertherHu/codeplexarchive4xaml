{
  "ProjectName": "thnhttp",
  "Title": "THN HTTP Stack",
  "Description": "A fast and lightweight HTTP stack for building HTTP server and client with total control and no dependency on .Net Http or Web client.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nA fast and lightweight HTTP stack for building HTTP server and client with total control and no dependency on .Net Http or Web client.</p>\r\n<p>This HTTP stack is written from scratch&nbsp;with zero architecture dependencies to&nbsp;spark enthusiasts with the lost art of writing custom server as well as to foster and facilitate the development of server&nbsp;libraries.</p>\r\n<p>Included in the source-code is a demo of how to write your own HTTP server that returns the current time. (Yes, this is exciting, imagine you can build SkyNet from these tiny blocks)<br>\r\n<br>\r\n<br>\r\n<strong>Features</strong></p>\r\n<ul>\r\n<li><strong>Automatic management of memory:</strong> one of the bigger issues with writing server software is memory leak and quick memory depletion. By using this stack, memory consumption is automatically repooled and managed behind the scene.\r\n</li><li><strong>Zero architecture dependency</strong>: common&nbsp;HTTP server examples found on the internet are&nbsp;involved with .NET Http client or web client. These are not optimized for server. Their architecture induces developer to write bad codes easily.\r\n By writing from scratch, this HTTP stack does not depend on such baggages. But the sweetest thing is, we didn't even design this stack to be dependent on sockets technology. Yes, you heard it right. The stack can and does work with sockets, but it can work\r\n without socket as well. This opens up exciting opportunities such as simulated server, tunneled HTTP, etc.\r\n</li><li><strong>Fast and lightweight</strong> </li><li><strong>Asynchronous </strong>everywhere without cumbersome API: take a look at the example codes. You will see that writing a HTTP request handler is a piece of cake. The code looks like it is synchronous but in fact it is asynchronous. If need to, you\r\n can easily change it to synchronous calls. (yes, that is also the meaning of zero architecture dependency)\r\n</li><li><strong>Low&nbsp;memory consumption</strong>: thanks to automatic memory management, the server by itself runs with minimal memory consumption. If you uses the tools provided in this HTTP stack and don't go crazy with custom buffering and memory allocations,\r\n your codes shall consume little memory as well. </li><li><strong>Friendly API</strong>: HTTP Request, HTTP Response and HTTP Context&nbsp;are designed to be intuitive. No more remembering which goes where.\r\n</li><li><strong>Friendly writer / reader</strong>: One of the scarier things with doing networking&nbsp;or low level I/O is the binary formatting and encoding. THN HTTP Stack takes care of this for you. Writing and reading stuff is fun again. (If you have to ask,\r\n the writing/reading stuff is independent of networking&nbsp;and&nbsp;HTTP as well. The I/O writing / reading is designed to be usable on files, stream, byte[], etc. )\r\n</li><li><strong>Concurrency</strong>: unlike other architecture, a request can be read and a response can be written at the same time. This is&nbsp;great for scenarios such as media streaming. The best part, your code doesn't have to know&nbsp;about concurrency.\r\n</li><li><strong>Extensible architecture</strong>: the HTTP Stack by itself is developer-friendly for writing extensions. In fact, see the recommended projects section below for proof.\r\n</li></ul>\r\n<p><strong>History</strong></p>\r\n<p>THN HTTP Stack is a side product resulted from many redesigns of <a href=\"http://www.ThnSolutions.com\" target=\"_blank\">\r\nTHN Solutions LLC.</a>'s Communication Foundation by&nbsp;<a href=\"http://www.minh-hai.com/\" target=\"_blank\">software architect Nguyễn, M. Hải</a>. At first, we wanted a communication abstraction layer that allows cross-domain, cross-layer, cross-tier communication\r\n with zero dependency on actual networking technologies or topologies. Furthermore, we didn't even want to be tied down by one protocol or even one messaging mechanism. After so many revisions, we achieved what we wanted and decided to test if our communication\r\n layer can be easily extended for HTTP protocol, which looks deceptively simple enough. We did do so and here is the HTTP Stack you can use.</p>\r\n<p>In 2014, THN decided to opensource version 6.5 of the library&nbsp;for educational purposes and for contributing back to the community.</p>\r\n<p>If you wish to explore more about how our communication layer can make you code faster, you might want to check out the next design called Neuron Network Communication Layer from&nbsp;this&nbsp;<a href=\"http://www.epicframework.com/\" target=\"_blank\">productive\r\n programming framework</a>.</p>\r\n<p><strong>Recommended projects</strong></p>\r\n<ul>\r\n<li><a href=\"http://thnweb.codeplex.com\" target=\"_blank\">THN Web Server</a> </li><li><a href=\"http://thnmedia.codeplex.com\" target=\"_blank\">THN Media Streaming Server</a>\r\n</li><li><a href=\"http://thnmvc.codeplex.com\" target=\"_blank\">THN MVC Web Server</a> </li><li><a href=\"http://mhblade.codeplex.com/\" target=\"_blank\">Blade View Engine</a> </li></ul>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,.NET,Web Server,HTTP Server,Media Server,HTTP,Video Server,HTTP Client,",
  "LastEdited": "2014-05-14T22:00:02.527-07:00"
}