{
  "ProjectName": "autoregistration",
  "Title": "Unity Auto Registration",
  "Description": "Unity Auto Registration extends Unity IoC container and provides fluent syntax to configure rules for automatic type registration.  Using few code lines you can scan specified assemblies and register all types that satisfy your rules.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1><b>Unity Auto Registration has moved to GitHub</b></h1>\rSince CodePlex is shutting down, I contacted  ArtemGovorov and he is fine with me moving this project to a new place.<br />From now on you can find this project on GitHub:<br /><a href=\"https://github.com/astaerk/AutoRegistration\">https://github.com/astaerk/AutoRegistration</a><br /><br /><br /><b>Install from Nuget</b><br />Add it to your project with nuget: Install-Package UnityAutoRegistration<br /><a href=\"http://nuget.org/List/Packages/UnityAutoRegistration\">http://nuget.org/List/Packages/UnityAutoRegistration</a><br /><br /><b>Project Description</b><br />Unity Auto Registration extends Unity IoC container and provides fluent syntax to configure rules for automatic type registration.  Using few code lines you can scan specified assemblies and register all types that satisfy your rules.<br /><br />Rules for determining whether to include/exclude type/assembly are predicates (Predicate&lt;T&gt;) so you can use lambda syntax to specify them or direct method name. There are a few methods in If helper class (like Implements, DecoratedWith) to cover some common scenarios of type registering.<br /><br />For example, auto registration configuration using Unity Auto Registration may look like:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n            <span style=\"color:Blue;\">var</span> container = <span style=\"color:Blue;\">new</span> UnityContainer();\n\n            container\n                .ConfigureAutoRegistration()\n                .ExcludeAssemblies(a =&gt; a.GetName().FullName.Contains(<span style=\"color:#A31515;\">&quot;Test&quot;</span>))\n                .Include(If.Implements&lt;ILogger&gt;, Then.Register().UsingPerCallMode())\n                .Include(If.ImplementsITypeName, Then.Register().WithTypeName())\n                .Include(If.Implements&lt;ICustomerRepository&gt;, Then.Register().WithName(<span style=\"color:#A31515;\">&quot;Sample&quot;</span>))\n                .Include(If.Implements&lt;IOrderRepository&gt;,\n                         Then.Register().AsSingleInterfaceOfType().UsingPerCallMode())\n                .Include(If.DecoratedWith&lt;LoggerAttribute&gt;,\n                         Then.Register()\n                                .As&lt;IDisposable&gt;()\n                                .WithTypeName()\n                                .UsingLifetime&lt;MyLifetimeManager&gt;())\n                .Exclude(t =&gt; t.Name.Contains(<span style=\"color:#A31515;\">&quot;Trace&quot;</span>))\n                .ApplyAutoRegistration();\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "Enterprise Library,dependency injection,IOC,Inversion of Control,unity,container,IoC/DI,Autoregistration,Auto registration,.NET 3.5,lambda,Fluent Interface,unity 2,UnityContainer,",
  "LastEdited": "2017-09-21T05:40:16.85-07:00"
}