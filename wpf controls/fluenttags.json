{
  "ProjectName": "fluenttags",
  "Title": "FluentTags ASP.NET",
  "Description": "FluentTags for ASP.NET makes it easier to write valid (x)html code.\r\n\r\nUser the power of of Intellisense and a fluent interface to quickly make valid html.\r\n\r\nExtremely useful for building complicated html structures (menus, controls, filters, ajax enabled controls).",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />FluentTags for ASP.NET makes it easier to write valid &#40;x&#41;html code.<br /><br />User the power of of Intellisense and a fluent interface to quickly make valid html.<br /><br />Extremely useful for building complicated html structures &#40;menus, controls, filters, ajax enabled controls&#41;.<br /><br /><b>FluentTags now available on Nuget</b><br /><br /><a href=\"https://nuget.org/packages/FluentTags\">https://nuget.org/packages/FluentTags</a><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nPM<span style=\"color:Gray;\">&gt;</span> Install<span style=\"color:Gray;\">-</span>Package FluentTags\r\n</pre></div><br /><b>Motivation</b><br />I was dissatisied with building complex html structures using the templating structures available in ASP.NET pages.  But building html with the built in classes is even more clunky.<br /><br />With Fluent Tags you can take advantage Visual Studio intellisense while using this HTML Domain Specific Language (DSL) to create compact, maintainable code.<br /><br />I&#39;ve used this library for over 3 years and I find myself missing it anytime I have to hand code HTML. I find that I can quickly create complex valid markup for menus, deeply nested structures and complex ajax controls, while keeping my sanity.<br /><br />You can take advantage of the compiler to check your syntax. If it compiles, there&#39;s a good change it is valid (of course that&#39;s not guaranteed, because you can subvert the type system by simply adding a control, however I think the trade off for flexibility is worth it).<br /><br /><b>Sample Code</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// create a new div tag</span>\n<span style=\"color:Blue;\">var</span> div = <span style=\"color:Blue;\">new</span> DivTag();\n<span style=\"color:Green;\">// create a new table that is a child of the div tag</span>\n<span style=\"color:Blue;\">var</span> table = div.Table().Style(<span style=\"color:#A31515;\">&quot;text-align:center;&quot;</span>);\n<span style=\"color:Green;\">// add a row and some fields to the table</span>\ntable.TR()\n    .TD(<span style=\"color:#A31515;\">&quot;some text&quot;</span>).End()\n    .TD(<span style=\"color:#A31515;\">&quot;some other text&quot;</span>).End();\r\n</pre></div><br />FluentTags with with ASP.NET Forms code. You can nest ASP.NET controls within your fluent tags.<br /><br />Fluent Tags inheret from the HtmlGenericControl class, so they play well with asp.net forms.<br /><br />In Code Behind:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\nButton b = <span style=\"color:Blue;\">new</span> Button();\nb.Text = <span style=\"color:#A31515;\">&quot;This Causes a postback&quot;</span>;\nb.Click += (s, evt) =&gt;\n{\n    <span style=\"color:Green;\">// DivPlaceHolder is defined in the page as a PlaceHolder control</span>\n    DivPlaceHolder.Controls.Add(<span style=\"color:Blue;\">new</span> DivTag().Text(<span style=\"color:#A31515;\">&quot;The button postback Worked!&quot;</span>).Style(<span style=\"color:#A31515;\">&quot;color:red;&quot;</span>).End());\n};\n\nButton b2 = <span style=\"color:Blue;\">new</span> Button();\nb2.Text = <span style=\"color:#A31515;\">&quot;This Causes a postback&quot;</span>;\nb2.Click += (s, evt) =&gt;\n{\n    DivPlaceHolder.Controls.Add(<span style=\"color:Blue;\">new</span> DivTag().Text(<span style=\"color:#A31515;\">&quot;The button2 postback Worked!&quot;</span>).Style(<span style=\"color:#A31515;\">&quot;color:red;&quot;</span>).End());\n};\n\nt.TR()\n    .TD().AddControl(b).End()\n    .TD().AddControl(b2).End()\n.End();\r\n</pre></div><br />Snippet from ASP.NET page (control, etc):<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">body</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">form</span> <span style=\"color:Red;\">id</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;form1&quot;</span> <span style=\"color:Red;\">runat</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;server&quot;</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">div</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">asp</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">PlaceHolder</span> <span style=\"color:Red;\">ID</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;DivPlaceHolder&quot;</span> <span style=\"color:Red;\">runat</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;server&quot;</span> <span style=\"color:Blue;\">&gt;</span><span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">asp</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">PlaceHolder</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">div</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">form</span><span style=\"color:Blue;\">&gt;</span>\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">body</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-05-17T14:54:00.533-07:00"
}