{
  "ProjectName": "localizationsupport",
  "Title": "WPF Localization Support",
  "Description": "WPF Localization Support allows developpers to localize their WPF applications via markup extensions. It extends the code from WPF Tutorial so that you are not limited to dependency properties. It's developed in C#.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />WPF Localization Support allows developpers to localize their WPF applications via markup extensions. It extends the code from WPF Tutorial so that you are not limited to dependency properties. It&#39;s developed in C&#35;.<br /><br />The library provides two markup extensions:\n<ul><li><i>Localize</i> that is designed to provide localized values to dependency properties</li>\n<li><i>ReflectedLocalize</i> that uses reflection in order to extend the localization capabilities to CLR properties</li></ul>\n<br /><b>History</b><br />I made this library when I needed myself some kind of support for localization of my WPF application ideally with a possibility to change the languages during runtime without restarting it. I found this nice article on WPF tutorial <a href=\"http://www.wpftutorial.net/LocalizeMarkupExtension.html\">http://www.wpftutorial.net/LocalizeMarkupExtension.html</a> where the author used a custom markup extension to accomplish the task. I downloaded his code and everything was perfectly fine until I needed to localize the textual descriptions of ribbon commands (I use the Ribbon CTP in my project). These commands are not dependency objects and so the approach taken on WPF tutorial did not work. But I didn&#39;t want to resign on the idea and so I finally extended the localize extension a bit. From the user&#39;s point of view not much has changed:<br /><br /><i>&lt;TextBlock Text=&quot;{Localize Text}&quot;/&gt;</i> <br />in comparison to <br /><i>&lt;SomeObject NonDepProp=&quot;{ReflectedLocalize Text,NonDepProp}&quot;/&gt;</i><br /><br />As you can see the only difference in usage (apart from the extension name) is that a second parameter is needed that is the name of the property being set by the extension. As you guess, I use the reflection. I also slightly changed the implementation of the localization manager so that it could possibly use a different resource provider for each localization. For details, please, consult the <a href=\"https://localizationsupport.codeplex.com/documentation?referringTitle=Home\">Documentation</a>.<br /><br />Hopefully, this library will be useful for someone.</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2009-07-29T09:27:58.697-07:00"
}