{
  "ProjectName": "DIServiceProvider",
  "Title": "Dependency Injection Service Provider (DISP)",
  "Description": "Dependency Injection Service Provider (DISP) is a wrapper or an interface that aim to allow .NET developers use one of the inversion of control  (IoC) containers out there such as StructureMap or Ninject from a high level of abstraction, using the same interface and classes without having to worry about the concrete implementation of each of the IoC containers.\r\n\r\nDISP provides an interface that will create and instance of an IoC container of your election, and provide generic interface to communicate with it. The goal is to implement support for as much IoC containers as is possible and to support as many features as we can for all of them from a high level of abstraction.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1><span id=\"ctl00_ctl00_MasterContent_ProjectTitleControl1_ProjectTitle1\" style=\"color:#800080\">What is Dependency Injection Service Provider (DISP)?</span></h1>\r\n<p>Dependency Injection Service Provider (DISP) is a wrapper or an interface that aim to allow .NET developers use one of the inversion of control&nbsp; (IoC) containers out there such as StructureMap or Ninject from a high level of abstraction, using the same\r\n interface and classes without having to worry about the concrete implementation of each of the IoC containers.</p>\r\n<h1><span id=\"ctl00_ctl00_MasterContent_ProjectTitleControl1_ProjectTitle1\" style=\"color:#800080\">How does Dependency Injection Service Provider works?</span></h1>\r\n<p>DISP provides static class that will create and instance of an IoC container of your election, and provide an interface to allow the communication between for application and the IoC Container instance.</p>\r\n<p>The final goal is to implement support for as much IoC containers as is possible and to support as many features as is possible for all of them from a high level of abstraction and using one unique API.</p>\r\n<p>The class diagram bellow displays a really early architecture of DISP, as you can see DIPS provides an static class that will allow you to access all the common IoC features by just providing the type of container that you want to use and a collection of\r\n the dependencies (and options) that the container will satisfied.</p>\r\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/5/5d/DISP_Architecture.png\" alt=\"DependencyInjectionServiceProvider.png\"></p>\r\n<h1><span id=\"ctl00_ctl00_MasterContent_ProjectTitleControl1_ProjectTitle1\" style=\"color:#800080\">Basic usage example</span></h1>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>DependencyInjectionServiceProvider.Initialize(\n    IoCContainerTypeEnum.Ninject, <span style=\"color:green\">//IoC contaner to be used</span>\n    <span style=\"color:blue\">new</span> List&lt;Service&gt;() <span style=\"color:green\">//List of dependencies</span>\n    {\n        <span style=\"color:blue\">new</span> Service() {\n            Scope = ScopeEnum.Singleton,\n            SourceType = <span style=\"color:blue\">typeof</span>(IRepository&lt;User&gt;),\n            TargetType = <span style=\"color:blue\">typeof</span>(UserRepository)\n        }\n    }\n);\n</pre>\r\n</div>\r\n<h1><span id=\"ctl00_ctl00_MasterContent_ProjectTitleControl1_ProjectTitle1\" style=\"color:#800080\">Important notice</span></h1>\r\n<p><span style=\"color:#800080\"><span style=\"color:#000000\">I still working on this project, there are not an stable release at the moment, you can download the code to see what is the status of the project and maybe join it but you may not use this software\r\n for any production environment as it still in an early development stage.</span><br>\r\n</span></p>\r\n<h1><span style=\"color:#800080\"><br>\r\n</span></h1>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "ioc container,IOC,IoC/DI,dependency injection,DI,Abstraction,interface,wrapper,Ninject,StructureMap,unity,",
  "LastEdited": "2012-05-28T12:07:33.297-07:00"
}