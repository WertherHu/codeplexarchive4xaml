{
  "ProjectName": "HTMLAppWP7",
  "Title": "HTML App Host Framework",
  "Description": "This is an HTML Application Host framework for building HTML5/regular HTML/JavaScript for Windows Phone.  The framework consists of controls needed to support embed html apps in a standard xap format used by the market place for deploying to windows phone.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nThis is an HTML Application Host framework for building HTML/HTML5/JavaScript for Windows Phone 7.x&#43;. The framework consists of controls needed to support embed html apps in a standard xap format used by the market place for deploying to phone 7.5.<br>\r\n<br>\r\nPrimarily the framework consists of a browser shell that wires up the isolated storage replication infrastructure so that the application is corrected setup in&nbsp;isolated storage&nbsp;that makes it easy to drop in a pre built html/javascript/css based application\r\n and that shell base class also add's wiring for 'task's that allow javascript to call phone 7 api's directly from script.\r\n<br>\r\n<br>\r\nPlease email me if your interested in contributing to this project. So far there is one app in the marketplace that uses this framework.</p>\r\n<p><strong>Using the HTML App Host Framework</strong></p>\r\n<p>the HTML App Host Framework current consist's of 3 critical parts. 1, the app host shell, 2, the html loader and 3 the task processor. For an HTML application developer you don't really need to worry about most of it but in the following context. To start\r\n you need to create an empty Silverlight application in visual studio and then reference the HTML App Host dll. Then you need to create a directory called HTML and add your HTML application to this. The HTML application can include html files, resources, images,\r\n css, script files etc and folder structure or whatever you need. On the downside you need to create a 'manifest.xml' file at the root of the html folder that maps all the files. This allows the HTMLAppHostFramework to consume your application and run it on\r\n the phone. Here is a typical manifest.xml file:</p>\r\n<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;<br>\r\n&lt;IsolatedStorageManifest&gt;<br>\r\n&lt;Files&gt; <br>\r\n&lt;File Name=&quot;index.html&quot; /&gt; <br>\r\n&lt;File Name=&quot;about.html&quot; /&gt; <br>\r\n&lt;/Files&gt; <br>\r\n&lt;Directories&gt; <br>\r\n&lt;Directory Name=&quot;inc&quot;&gt; <br>\r\n&lt;Files&gt; <br>\r\n&lt;File Name=&quot;script1.js&quot;/&gt; <br>\r\n&lt;File Name=&quot;script2.js&quot;/&gt; <br>\r\n&lt;/Files&gt; <br>\r\n&lt;/Directory&gt; <br>\r\n&lt;/Directories&gt; <br>\r\n&lt;/IsolatedStorageManifest&gt;</p>\r\n<p>Basic a simple index of your html application. the trick here is that html assets can't be referenced directly from a xap to say a webbrowser control so the apphost used class called 'IsolatedStorageResourceHelper' to copy everything from the xap based on\r\n the manifest.xml file into isolated storage where it can be referenced and executed directly.</p>\r\n<p>The next step is to edit your main page in your app to reference the AppHostShell and your html. The AppHostShell is used much like a webbrowser control but it extends the control to deal with the IsolatedStoargeResourceHelper' class and to expose Phone\r\n 7 API's to the script environment so that the script can call out to those API's through 'tasks' using the 'TaskProcessor' class. Also the AppHostShell exposes an event called 'ScriptNotify' so you can extend what is dealt with if there are special cases you\r\n want to handle in your own code.</p>\r\n<p>After the HTML app is created, then added to the HTML directory AND you have finished the manifest.xml file, the next step is to add the namespace reference in the XAML of your start XAML page. I like to rename the default 'MainPage' to 'Shell.xaml' but\r\n if you do this you have to edit the master app manifest under properties to point at the new name or your app won't work. But you can leave it as 'MainPage'.</p>\r\n<p>In any case, in this page the namespace reference should be in the rootnode and look something like this:</p>\r\n<p>xmlns:HTMLAppHost=&quot;clr-namespace:HTMLApplicationHostFramework;assembly=HTMLApplicationHostFramework&quot;</p>\r\n<p>then you can add the control to the xaml surface generally you can just rip out everything in the page and replace even the root grid with this:</p>\r\n<p>&lt;Grid x:Name=&quot;LayoutRoot&quot; Background=&quot;Transparent&quot;&gt; <br>\r\n&lt;HTMLAppHost:AppHostShell Source=&quot;/index.html&quot; /&gt; <br>\r\n&lt;/Grid&gt; <br>\r\n&lt;/phone:PhoneApplicationPage&gt;</p>\r\n<p>You'll note that now when you run the app your app on the phone will be entirely your app, well save the system tray and I like to turn that property off in the root node but you can do that in your javascript too using the task api that is created by the\r\n HTMLAppHost control.</p>\r\n<p>If all of your app is HTML based you're done but if you need to call out to phone 7 api's from your javascript you can make calls like this:</p>\r\n<p>window.external.notify(&quot;Email:pieseczek@hotmail.com:Email from JavaScriptFWP7&quot;);</p>\r\n<p>Basically the syntax of the string is &quot;[task name]:[param]*n&quot; currently I've only added a few tasks like email but that I'll be adding much more in the coming weeks. Ping me if you use the framework for your app's, I'll give your app some social media love.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "wp7,wp7dev,html5,html,javascript,phone7,C#,mango,Library,",
  "LastEdited": "2011-11-09T13:38:00.827-08:00"
}