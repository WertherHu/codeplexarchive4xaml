{
  "ProjectName": "webformsmodelbinder",
  "Title": "Model Binder for ASP.NET Web Forms",
  "Description": "Bind models to ASP.NET web form controls!",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Model Binder for ASP.NET Web Forms</h2>\r\nBind models to ASP.NET web form controls.<br /><br /><b>Download the source + sample to get started. The sample is very easy to follow!</b><br />\n<h2>Features</h2>\r<ul><li>Two-way model binding (bind model values to controls and vice versa)</li>\n<li>Supports collection types</li>\n<li>Supports complex types (nested)</li>\n<li>Supports native ASP.NET server controls and 3rd party controls (Telerik, Infragistics, etc.)</li></ul>\n\n<h2>Usage</h2>\r\nInstead of manually binding properties to web forms like this:<br /><br /><pre>\n        this.FirstName.Text = employee.FirstName;\n        this.LastName.Text = employee.LastName;\n        this.DateOfBirth.Text = employee.DateOfBirth.ToString();\n</pre><br /><br />Bind the model to page controls (Page or User Control) using the ModelBinder:<br /><br /><pre>\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            if (!IsPostBack)\n            {\n                // Retrieve employee details from the database.\n                var employee = GetEmployeeFromDb();\n\n                // Bind the model to page controls.\n                ModelBinder.BindControl(employee, this);\n            }\n        }\n</pre><br /><br />Bind the control values to the model:<br /><br /><pre>\n        protected void Update_Click(object sender, EventArgs e)\n        {\n            if (Page.IsValid)\n            {\n                // Bind the control values to model.\n                var employee = ModelBinder.BindModel&lt;Employee&gt;(this);\n\n                // Do something like:\n                // EmployeeService.UpdateEmployee(employee);\n            }\n        }\n</pre><br />\n<h2>Setting Up (POCO and Attributes)</h2>\r\nAttributes:<br /><br /><b>NotMapped</b><br />Properties decorated with the NotMapped attribute will not be binded.<br /><br /><pre>\n        [NotMapped]\n        public string DontBindMe { get; set; }\n</pre><br /><br /><b>MapToControl</b><br />The <u>control id</u> to bind to. If you don&#39;t specify this attribute, the ModelBinder will look for the property name of the class.<br /><br /><pre>\n        // Look for a control named &quot;txtLastName&quot;\n        [MapToControl(ControlId = &quot;txtLastName&quot;)]\n        public string LastName { get; set; }\n\n        // Look for a control named &quot;FirstName&quot;\n        public string FirstName { get; set; }\n</pre><br /><br /><b>ValueSource</b><br />The <u>control property</u> to bind to (an enum or a string value). If you don&#39;t specify this attribute, the default is &quot;Text&quot;.<br /><br /><i>Bind a property to a control with &quot;Text&quot; property</i><br /><br /><pre>\n        public string UserCode { get; set; }\n\n        [ValueSource(&quot;Text&quot;)]\n        public string UserCode { get; set; }\n\n        [ValueSource(FromProperty.Text)]\n        public string UserCode { get; set; }\n</pre><br /><br /><i>Bind the property to a DropDownList</i><br /><br /><pre>\n        [ValueSource(FromProperty.SelectedValue)]\n        public string ContactPreference { get; set; }\n</pre><br /><br /><i>Mapping an int property to an Infragistics WebNumericEditor (DataMode set to &quot;Int&quot;)</i><br /><br /><pre>\n        [ValueSource(&quot;ValueInt&quot;)]\n        public int Age { get; set; }\n</pre><br /><br /><i>A decimal property to an Infragistics WebNumericEditor (DataMode set to &quot;Decimal&quot;)</i><br /><br /><pre>\n        [ValueSource(&quot;ValueDecimal&quot;)]\n        public decimal Salary { get; set; }\n</pre><br /><br /><b>TypeConvert</b><br />Instructs the ModelBinder to convert the value. Type conversion is required if you&#39;re going to map an integer/decimal/date property to a textbox control.<br /><br /><i>A decimal property mapped to a Textbox</i><br /><br /><pre>\n        // TypeConvert is required because we are mapping a decimal property to a string (Textbox.Text property)\n        [ValueSource(FromProperty.Text)]\n        [TypeConvert]\n        public decimal Salary { get; set; }\n\n        // Using an Infragistic WebNumericEditor, we map the ValueSource to a decimal type so TypeConvert is not needed\n        [ValueSource(&quot;ValueDecimal&quot;)]\n        public decimal Salary { get; set; }\n</pre><br /><br /><b>Include</b><br />Include a complex type in binding (e.g. Address class in Employee). Recursion is supported.<br /><br /><pre>\n        [Include]\n        public Address Address { get; set; }\n</pre><br /><br /><b>RaiseBindingError</b><br />Instructs the ModelBinder to throw an exception if there&#39;s a mapping error (e.g. ValueSource is set to a non-existing property ValueSource(&quot;Txt&quot;)).<br /><br /><pre>\n        [RaiseBindingError]\n        public class Employee\n</pre><br /><br /><b>ValueList</b><br />Atttribute to decorate collection types (List&lt;int&gt;, Collection&lt;int&gt;). If you don&#39;t specify this value and the property implements the ICollection interface, the ModelBinder will use the default values:<br />\n<ul><li>CollectionProperty = &quot;Items&quot;</li>\n<li>SelectedProperty = &quot;Selected&quot;</li>\n<li>FindMethod = &quot;FindByValue&quot;</li>\n<li>FindMethodInParent = false</li>\n<li>AddMethod = &quot;Add&quot;</li></ul>\n<br />For ASP.NET controls, you don&#39;t need to specify the ValueList attribute for collections. For 3rd party controls like Telerik RadListBox:<br /><br /><pre>\n        [ValueSource(FromProperty.Value)]\n        [TypeConvert]\n        [ValueList(FindMethod = &quot;FindItemByValue&quot;, FindMethodInParent = true)]\n        public Collection&lt;int&gt; Books { get; set; }\n</pre><br />\n<h2>Sample</h2>\r\n<pre>\n    [RaiseBindingError]\n    public class Employee\n    {\n        [TypeConvert]\n        [ValueSource(FromProperty.Value)]\n        public int EmployeeId { get; set; }\n\n        public string FirstName { get; set; }\n\n        public string LastName { get; set; }\n\n        [ValueSource(FromProperty.SelectedValue)]\n        public string EmployeeType { get; set; }\n\n        [ValueSource(FromProperty.SelectedValue)]\n        public string Gender { get; set; }\n        \n        [TypeConvert]\n        public DateTime? DateOfBirth { get; set; }\n\n        [TypeConvert]\n        public int NoOfDependants { get; set; }\n        \n        [ValueSource(FromProperty.Checked)]\n        public bool IsActive { get; set; }\n\n        [ValueSource(FromProperty.Value)]\n        [TypeConvert]\n        public Collection&lt;int&gt; Skills { get; set; }\n\n        [ValueSource(FromProperty.Value)]\n        [TypeConvert]\n        public Collection&lt;int&gt; Hobbies { get; set; }\n\n        [Include]\n        public Address Address { get; set; }\n    }\n\n    public class Address\n    {\n        public string Street { get; set; }\n\n        public string City { get; set; }\n\n        public string StateOrProvince { get; set; }\n\n        [ValueSource(FromProperty.SelectedValue)]\n        public string CountryCode { get; set; }\n\n        public string PostalCode { get; set; }\n    }\n</pre><br />\n<h2>Model Validation</h2>\r\nUse Fluent Validation for .NET to validate the model: <a href=\"http://fluentvalidation.codeplex.com/\">http://fluentvalidation.codeplex.com/</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "ASP.NET,ASP.NET MVC,model,Binding,Reflection,forms,web,POCO,Attributes,",
  "LastEdited": "2012-11-28T18:30:32.79-08:00"
}