{
  "ProjectName": "littleumph",
  "Title": "LittleUmph",
  "Description": "It's a little library to help you to alleviate some of the mundane stuff during your development. It has some nifty stuff like a neat database wrapper, conversion utilities, string functions and vast of other mini helpers to improve the efficiency and consistency of your code.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Project Description</h2>\rIt&#39;s a little library to help you to alleviate some of the mundane stuff during your development. It has some nifty stuff like a neat database wrapper, conversion utilities, string functions and vast of other mini helpers to improve the efficiency and consistency of your code.<br />\n<h2>Database Helper</h2>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// Get single value from a row using column index</span>\n<span style=\"color:Blue;\">int</span> count = db.ScalarQuery(<span style=\"color:#A31515;\">&quot;SELECT COUNT(Name) FROM Users&quot;</span>, \n                  columnIndex: 0, valueOnError: -1);\n             \n<span style=\"color:Green;\">// You can cast your result using generic query (specifying &quot;&lt;DateTime&gt;&quot; is optional)</span>\nDateTime lastUpdated = db.ScalarQuery(<span style=\"color:#A31515;\">&quot;SELECT LastUpdated FROM Users WHERE id = 10&quot;</span>, \n            columnName: <span style=\"color:#A31515;\">&quot;LastUpdated&quot;</span>, valueOnError: DateTime.MinValue);\n            \n<span style=\"color:Green;\">// Update using sql query</span>\n<span style=\"color:Blue;\">int</span> result = db.NonQuery(<span style=\"color:#A31515;\">&quot;UPDATE Users SET Name=&#39;John Stevenson&#39; WHERE id=10&quot;</span>);\n \n<span style=\"color:Green;\">// The library dynamicly create SqlCommand and assign the value to them </span>\n<span style=\"color:Green;\">// (the value params[] is the same order as @parameter appearances)</span>\n<span style=\"color:Green;\">// You get the security of SqlCommand without </span>\n<span style=\"color:Green;\">// the hassle of building your own paramenters</span>\nSqlDataReader dr = db.DynQuery(<span style=\"color:#A31515;\">&quot;SELECT * FROM Users WHERE Age &gt; @age AND Birthday &gt; @bday&quot;</span>, 18, <span style=\"color:Blue;\">new</span> DateTime(2000, 1, 1)));\n\n<span style=\"color:Green;\">// DynScalar: get the first column, return -10 if an error occur</span>\n<span style=\"color:Blue;\">int</span> age = db.DynScalarQuery&lt;<span style=\"color:Blue;\">int</span>&gt;(columnIndex: 0, valueOnError: -10, \n            sql: <span style=\"color:#A31515;\">&quot;SELECT Age FROM Users WHERE Id = @id&quot;</span>, parameters: 75);\n           \n<span style=\"color:Green;\">// Trucate db log </span>\ndb.AsyncTruncateLog(sizeInMb: 10);\n<span style=\"color:Green;\">// Get sql server utc datetime</span>\nDateTime dbUtcTime = db.GetDbDateTimeUtc();\r\n</pre></div>For more indept examples on this you can goto <a href=\"https://littleumph.codeplex.com/wikipage?title=Database%20Helper&referringTitle=Home\">Database Helper</a> under documentation.<br />\n<h2>Bulk Insert</h2>\r<b>Inserted one million rows in less than 40 seconds.</b><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nList&lt;<span style=\"color:Blue;\">object</span>&gt; dataList = <span style=\"color:Blue;\">new</span> List&lt;<span style=\"color:Blue;\">object</span>&gt;();\n<span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> j = 0; j &lt; 10000; j++)\n{\n    <span style=\"color:Blue;\">string</span> name = <span style=\"color:#A31515;\">&quot;Name&quot;</span>;\n    <span style=\"color:Blue;\">int</span> heightInInches = Num.Random(50, 100);\n    DateTime birthday = DateTime.Now;\n    dataList.Add(<span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">object</span>[] { name, heightInInches, birthday });\n}\n<span style=\"color:Green;\">// This will insert 10,000 records at once, support sql2005 and higher</span>\n<span style=\"color:Blue;\">int</span> result = db.BulkInsert(tableName: <span style=\"color:#A31515;\">&quot;MillionsRows&quot;</span>, \n                     columnList: <span style=\"color:#A31515;\">&quot;(Name, Height, Birthday)&quot;</span>, data: dataList);\r\n</pre></div>Documentation: <a href=\"https://littleumph.codeplex.com/wikipage?title=Bulk%20Insert&referringTitle=Home\">Bulk Insert</a><br />\n<h2>Simple Encryption</h2>\rEncrypt using AES encryption but all the passphrase and encrypted data are in string format, which make it easier to handle.<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">const</span> <span style=\"color:Blue;\">string</span> secretPassPhrase = <span style=\"color:#A31515;\">&quot;Yo!&quot;</span>;\n\n<span style=\"color:Green;\">// encrypted = &quot;R4qn9MZwIUlrAPmww3Or2dnx5ZBLFWNSEI8g+geh7z8=&quot;</span>\n<span style=\"color:Blue;\">string</span> encrypted = SimpleEncryption.Encrypt(<span style=\"color:#A31515;\">&quot;This is my secret ...&quot;</span>, secretPassPhrase);\n\n<span style=\"color:Green;\">// plaintext = &quot;This is my secret ...&quot;</span>\n<span style=\"color:Blue;\">string</span> plaintext = SimpleEncryption.Decrypt(encrypted, secretPassPhrase);\r\n</pre></div>Documentation: <a href=\"https://littleumph.codeplex.com/wikipage?title=Simple%20Encryption&referringTitle=Home\">Simple Encryption</a><br />\n<h2>Data Conversion</h2>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">byte</span>[] bytBin = Bin.ToBytes(<span style=\"color:#A31515;\">&quot;10110110&quot;</span>);\n<span style=\"color:Blue;\">string</span> hexBin = Bin.ToHex(<span style=\"color:#A31515;\">&quot;10110110&quot;</span>);\n<span style=\"color:Blue;\">int</span> decBin = Bin.ToInt(<span style=\"color:#A31515;\">&quot;10110110&quot;</span>, valueOnError: -1);\n\n<span style=\"color:Blue;\">string</span> binDec = Dec.ToBin(127);\n<span style=\"color:Blue;\">string</span> hexDec = Dec.ToHex(127, totalLength: 4);\n<span style=\"color:Blue;\">byte</span>[] bytDec = Dec.ToBytes(127, totalLength: 4);\n\n<span style=\"color:Blue;\">string</span> binHex = Hex.ToBin(<span style=\"color:#A31515;\">&quot;FAE2 A7B2&quot;</span>);\n<span style=\"color:Blue;\">byte</span>[] bytHex = Hex.ToBytes(<span style=\"color:#A31515;\">&quot;FAE2 A7B2&quot;</span>);\n<span style=\"color:Blue;\">int</span> decHex = Hex.ToInt(<span style=\"color:#A31515;\">&quot;FAE2 A7B2&quot;</span>, valueOnError: -1);\n\n<span style=\"color:Blue;\">byte</span>[] bytArr = <span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">byte</span>[] { 10, 7, 11, 34 };\n<span style=\"color:Blue;\">string</span> binByt = ByteArr.ToBin(bytArr);\n<span style=\"color:Blue;\">string</span> hexByt = ByteArr.ToHex(bytArr);\n<span style=\"color:Blue;\">int</span> decByt = ByteArr.ToInt(bytArr, valueOnError: -1);\n<span style=\"color:Blue;\">string</span> strByt = ByteArr.ToString(bytArr);\r\n</pre></div>Documentation: <a href=\"https://littleumph.codeplex.com/wikipage?title=Conversions&referringTitle=Home\">Conversions</a><br />\n<h2>Word Of Caution</h2>\rThis library is primary is using by me for my personal projects. Hence there are a few of experimental stuff inside the library. If you see a file marked as Alpha please use caution when using it. Other than that everything else I will make sure the interface remain the same even when the code changes.</div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,Controls,SQL Server,DAL,Tools,Open Source,csharp,Library,Windows Forms,utilities,Encryption,Database Tools,Helpers,SQL 2005,SQL 2008,",
  "LastEdited": "2012-04-05T09:10:21.173-07:00"
}