{
  "ProjectName": "htmlwinforms",
  "Title": "HTML Forms in Windows Forms",
  "Description": "As the names suggests this code library is designed to introduce HTML code (primarily form code) into Windows Forms. It was created because standard Win Form controls use far too many resources when used in large numbers. It also supports web technology's such as Javascript.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">As the names suggests this code library is designed to introduce HTML code &#40;primarily form code&#41; into Windows Forms. It was created because standard Win Form controls use far too many resources when used in large numbers. It also supports web technology&#39;s such as Javascript.<br /><br /><b>To use this library:</b><br />\n<ul><li>Add it to your Toolbox and place the &quot;WebFormViewer&quot; on your form.</li>\n<li>The WebFormViewer contains a reference to a WebForm, when this is assigned it will automatically load it into view.</li></ul>\n\n<ul><li>The library is contained within the &quot;HTMLForms&quot; namespace.</li>\n<li>To create a WebForm: &quot;WebForm &lt;YourWebForm&gt; = new WebForm();&quot;</li>\n<li>To add WebControls to the WebForm, use &quot;&lt;YourWebForm&gt;.Controls.Add(&lt;YourWebControl&gt;);&quot;</li>\n<li>To apply a CSS StyleSheet to the WebForm change &quot;&lt;YourWebForm&gt;.CSSFilename&quot;</li></ul>\n\n<ul><li>WebControls are the core of the implementation.</li>\n<li>Some basic WebControls are included in the library and can be found in the &quot;HTMLForms.Controls&quot; namespace:\n<ul><li>Textbox</li>\n<li>PasswordBox</li>\n<li>TextArea</li>\n<li>Checkbox</li>\n<li>CheckboxList</li>\n<li>ComboBox</li>\n<li>ResetButton</li>\n<li>Array</li></ul></li></ul>\n<br /><br /><b>Create your own WebControls:</b>\n<ul><li>You can create your own WebControl by inheriting from WebControl.</li></ul>\n\n<ul><li>You must implement the following methods:\n<ul><li>void PopulateRow(); - This is the first routine which will be called, add HtmlElement&#39;s to &quot;this.Row&quot; in here. <b>Important: Do Not Store References To The Elements Created.</b></li>\n<li>void Update(); - This is called when the HtmlElement&#39;s should be updated to reflect the information in your WebControl. <b>Important: Do Not Add HtmlElement&#39;s Here.</b></li>\n<li>object GetData(); - return any relevant data from your WebControl, e.g. Textbox returns the text in the input box as a string.</li></ul></li></ul>\n\n<ul><li>Optional methods:\n<ul><li>void AttachEventHandlers(); - If you wish to hook into Events from your HTMLElement&#39;s, do this here.</li>\n<li>void Link(HtmlElement row); - This is called when the &quot;this.Row&quot; reference needs to be updated and should only be implemented if your WebControl contains other WebControls. <b>Important: Always Call &quot;base.Link(row);&quot;</b></li>\n<li>int RowsUsed { get; } - If your control uses more than one row of its parent table, this should be overridden to return the number of rows used.</li></ul></li></ul>\n\n<ul><li>Properties:\n<ul><li>object Tag - Empty object for storing anything associated with the WebControl.</li>\n<li>bool Enabled - If false any inputs should be disabled when PopulateRow() or Update() is called.</li>\n<li>int RowsUsed - Number of rows of the parent table that this WebControl uses, default 1.</li>\n<li>HtmlElement Row - The first row of the WebControls parent table that this WebControl should add information to.</li>\n<li>HtmlDocument Document - The HtmlDocument which contains the information provided by this WebControl.</li></ul></li></ul>\n<br /><img src=\"/projects/htmlwinforms/6f96f3f6-7041-4510-8ad2-339793c55c25\" alt=\"HTMLForms&#32;Example.PNG\" title=\"HTMLForms&#32;Example.PNG\" /></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,C#,html,Controls,javascript,Windows Forms,forms,Web,Flash,MY,",
  "LastEdited": "2010-02-23T05:39:03.333-08:00"
}