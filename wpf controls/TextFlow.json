{
  "ProjectName": "TextFlow",
  "Title": "TextFlow - Language-based WF Workflows",
  "Description": "TextFlow is a language-based workflow compiler and execution environment.  It allows authors to create Windows Workflow-based executable programs using a language syntax as opposed to drag and drop in the WF designer.\n\nThe project consists of several parts: an authoring environment that displays workflow syntax as well as visual flowchart; a compiler to translate syntax to WF programs; a decompiler to translate from WF program to syntax; and an execution engine that provides all necessary runtime infrastructure.\n\nThe grammar that defines workflow syntax is built using ANTLR (www.antlr.org).  It supports various control flow constructs such as conditional branching and looping, iteration, parallel execution, etc.\n\nHere's a simple \"Hello World\" in TextFlow:\n\n***********\n\nWAITFOR 3 SECONDS                // delay thrown in just for fun...\n\n[\n   \"Hello, World!\" => Message   // 'Message' DependencyProperty of custom activity bound to string\n\n   DisplayMessage                    // some custom activity that displays a message, somehow\n]\n\n***********\n\nNoteworthy aspects of the codebase:\n\n- demonstrates how to build workflows using the WF activity object model, including data binding\n- demonstrates how to host the WF designer in a Windows Forms application\n- demonstrates use of .NET 3.5 expression trees (http://msdn2.microsoft.com/en-us/library/bb397951.aspx) to compute conditional logic\n- demonstrates how to implement a serialization surrogate (needed to allow WF infrastructure to serialize expression trees, which aren't inherently serializable)\n- demonstrates use of Reflection.Emit APIs to dynamically generate Activity subclasses, including dynamic DependencyProperty creation (necessary to bind arbitrarily-typed inputs and outputs)\n\nConstructive feedback welcome, and appreciated!\n\nEnjoy!\n\nJosh\nwww.joshlane.net/blog",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />TextFlow is a language-based workflow compiler and execution environment.  It allows authors to create Windows Workflow-based executable programs using a language syntax as opposed to drag and drop in the WF designer.<br /><br />The project consists of several parts&#58; an authoring environment that displays workflow syntax as well as visual flowchart&#59; a compiler to translate syntax to WF programs&#59; a decompiler to translate from WF program to syntax&#59; and an execution engine that provides all necessary runtime infrastructure.<br /><br />The grammar that defines workflow syntax is built using ANTLR &#40;www.antlr.org&#41;.  It supports various control flow constructs such as conditional branching and looping, iteration, parallel execution, etc.<br /><br />Here&#39;s a simple &#34;Hello World&#34; in TextFlow&#58;<br /><br />&#42;&#42;&#42;&#42;&#42;&#42;&#42;&#42;&#42;&#42;&#42;<br /><br />WAITFOR 3 SECONDS                &#47;&#47; delay thrown in just for fun...<br /><br />&#91;<br />   &#34;Hello, World&#33;&#34; &#61;&#62; Message   &#47;&#47; &#39;Message&#39; DependencyProperty of custom activity bound to string<br /><br />   DisplayMessage                    &#47;&#47; some custom activity that displays a message, somehow<br />&#93;<br /><br />&#42;&#42;&#42;&#42;&#42;&#42;&#42;&#42;&#42;&#42;&#42;<br /><br />Noteworthy aspects of the codebase&#58;<br /><br />- demonstrates how to build workflows using the WF activity object model, including data binding<br />- demonstrates how to host the WF designer in a Windows Forms application<br />- demonstrates use of .NET 3.5 expression trees &#40;http&#58;&#47;&#47;msdn2.microsoft.com&#47;en-us&#47;library&#47;bb397951.aspx&#41; to compute conditional logic<br />- demonstrates how to implement a serialization surrogate &#40;needed to allow WF infrastructure to serialize expression trees, which aren&#39;t inherently serializable&#41;<br />- demonstrates use of Reflection.Emit APIs to dynamically generate Activity subclasses, including dynamic DependencyProperty creation &#40;necessary to bind arbitrarily-typed inputs and outputs&#41;<br /><br />Constructive feedback welcome, and appreciated&#33;<br /><br />Enjoy&#33;<br /><br />Josh<br />www.joshlane.net&#47;blog<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "WF,Workflow Foundation,workflow,expression trees,antlr,compiler,C#,Reflection.Emit,WWF,",
  "LastEdited": "2008-02-29T19:08:28.15-08:00"
}