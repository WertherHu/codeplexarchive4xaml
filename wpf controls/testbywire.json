{
  "ProjectName": "testbywire",
  "Title": "Test By Wire",
  "Description": "Test by wire is a unit test framework, which handles automatic setup and orchestration of test-target and dependencies. In addition Test By Wire features an automatic mocking feature, that is interfaces with pure BDD style syntax.\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1>Welcome</h1>\r\n<p>TestByWire is an extension to your Unit Test framework , which automatically injects dependencies, makes it easy to stub calls and makes stubbing of private non-injected dependencies possible.</p>\r\n<p>Additionally, TestByWire introduces a new BDD like syntax that strictly enforces AAA unit testing. This will make sure you call only one method on your test target and only makes one assert in each test.</p>\r\n<p>Using TestByWire&nbsp;has shown to actually make the production code adhere to the SOLID principles as a side effect to the strict way of testing.</p>\r\n<p><span style=\"font-size:20px; font-weight:bold\">Video Tutorials</span></p>\r\n<ul>\r\n<li><a title=\"Initializing Test Target\" href=\"http://youtu.be/yV30cUSG_o8\" target=\"_blank\">Initializing Test Target</a>\r\n</li><li><a title=\"Asserting Dependency\" href=\"http://youtu.be/4BUpgNDCzvg\" target=\"_blank\">Asserting Dependency</a>\r\n</li><li><a title=\"Specifying Behavior\" href=\"http://youtu.be/OEIXcSVjG44\" target=\"_blank\">Specifying Behavior</a>\r\n</li><li><a title=\"Using Stubs\" href=\"http://youtu.be/4YoX0Mokem0\" target=\"_blank\">Using Stubs</a>\r\n</li><li><a title=\"Attribute Nesting\" href=\"http://youtu.be/Mz7Me6MRPjU\" target=\"_blank\">Attribute Nesting</a>\r\n</li><li><a title=\"Scenarios\" href=\"http://youtu.be/5I3sQlm8jkE\" target=\"_blank\">Scenarios</a>\r\n</li><li><a title=\"Using Fakes\" href=\"http://youtu.be/aPwaR0NRR0c\" target=\"_blank\">Using Fakes</a>\r\n</li><li><a title=\"Exceptions\" href=\"http://youtu.be/tBioaavqSaM\" target=\"_blank\">Exceptions</a>\r\n</li><li><a title=\"BDD Notation\" href=\"http://youtu.be/qPejA__1RSo\" target=\"_blank\">BDD Notation</a>\r\n</li></ul>\r\n<p><span style=\"font-size:20px; font-weight:bold\">Guides and Reference</span></p>\r\n<p>Guides and reference is being added in the Documentation section.</p>\r\n<p><span style=\"font-size:20px; font-weight:bold\">Short Introduction</span></p>\r\n<p>Now, what can TestByWire do for your code? Imagine you have the following class that you need to put under test:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Payment\n{\n  <span style=\"color:blue\">private</span> ILogger _log;\n  <span style=\"color:blue\">private</span> IDataLayer _dal;\n\n  <span style=\"color:blue\">public</span> Payment(ILogger log)\n  {\n    _log = log;\n    _dal = <span style=\"color:blue\">new</span> SqlServerDataLayer();\n  }\n\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> TransferFunds(<span style=\"color:blue\">string</span> fromAccountId, <span style=\"color:blue\">string</span> toAccountId, <span style=\"color:blue\">int</span> amount)\n  {\n    _log.Trace(&ldquo;Transfering funds <span style=\"color:blue\">from</span> &ldquo; &#43; fromAccountId &#43; &ldquo; to &ldquo; &#43; toAccountId);\n    \n    <span style=\"color:blue\">bool</span> result = _dal.WithdrawCash(fromAccountId, amount);\n\n    <span style=\"color:blue\">if</span>(result)\n      _dal.DepositCash(toAccountId, amount);\n   }\n}\n</pre>\r\n</div>\r\n<p><br>\r\nTo test this class, in your test class inherit from TestTarget&lt;T&gt; where T is the class under test &ndash; here Payment:<br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[TestClass]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> PaymentTest : TestTarget&lt;Payment&gt;\n{\n  [TestMethod]\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> TransferFundsTest()\n  {\n    When.Calling.TransferFunds(&ldquo;10&rdquo;, &ldquo;20&rdquo;, 200);\n\n    Then&lt;ILogger&gt;.Should(l =&gt; l.Trace());\n  }\n}\n</pre>\r\n</div>\r\n<p><br>\r\nWhat happens behind the scene is that TestByWire automatically will create stubs of any interface or class it encounters in the constructor.<br>\r\n<br>\r\nAs you might notice from the syntax in the sample code, executing the test itself is done in a Gherkin like syntax making the test very declarative and easy to read.<br>\r\n<br>\r\nTo execute a method on the class under test, simple spell out: When.Calling.MethodName. In the same manner, assertions are made using the Then&lt;T&gt; construct. If, as in the sample above, an assertion about a call to a dependency has to be made, place the\r\n dependency&rsquo;s interface in the Then generic parameter and call Satisfies with the action to assert. Plain and simple.<br>\r\n<br>\r\nIn the Payment class, the _dal member field is instantiated in the constructor as a hardcoded dependency that is not immediately stubable. TestByWire can, however, do something about that. It is called Late Bound Stubbing. This means that yes, the constructor\r\n can initialize the field, but after the constructor has executed, TestByWire will override that field with a stub. Consider the test now:<br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[TestClass]\n[UseStubLateBound(&ldquo;_dal&rdquo;)]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> PaymentTest : TestTarget&lt;Payment&gt;\n{\n  [TestMethod]\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> TransferFundsTest()\n  {\n    Given.That&lt;IDataLayer&gt;(d =&gt; d.WithdrawCash(<span style=\"color:blue\">null</span>,0)).Returns(<span style=\"color:blue\">true</span>);\n\n    When.Calling.TransferFunds(&ldquo;10&rdquo;, &ldquo;20&rdquo;, 200);\n\n    Then&lt;ILogger&gt;.Should(l =&gt; l.Trace());\n  }\n}\n</pre>\r\n</div>\r\n<p><br>\r\nThe attribute UseLateBoundStub will instruct the framework to replace the field with the name provided with a stub of the same type as the field. This also means that the system can be given behavior instructions via the Given statement also introduced in the\r\n test above.<br>\r\n<br>\r\nThe Given directive tells the system that the stub of type IDataLayer must return true if the method WithdrawCash is called. Arguments will be completely ignored because setting up a match on the behavior would in reality impose an extra assert that is undesired\r\n in TestByWire.<br>\r\n<br>\r\nThe final statement in the test is the Then&lt;ILogger&gt; clause. This is the actual assert. Calling Should with an action or function will determine if the actual method call was actually ever made by the code under test.<br>\r\n<br>\r\nThe examples shown here does not show all TestByWire's functionality. See more samples by downloading the source and look in the Tutorial folder.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "BDD,TDD,Unit Testing,Mocking,Quality Control,Testing,Gherkin,",
  "LastEdited": "2011-09-12T12:18:15.793-07:00"
}