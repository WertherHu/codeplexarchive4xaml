{
  "ProjectName": "SPConfigStore",
  "Title": "SharePoint config store",
  "Description": "The SharePoint Config Store is intended for SharePoint developers, and provides the framework to be able to use a SharePoint list for application configuration values. This is useful when there are certain values used in a site or application's code, but we don't to hardcode them or even store them in web.config. Storing such values in a list means they can be easily updated (possibly by end users if you choose to allow this) without requiring access to the web server's filesystem.\n\nExample config items for a SharePoint site/application/control could be:\n\n'AdministratorEmail' - 'bob@somewhere.com'\n'SendWorkflowEmails' - 'true'\n\nThe Config Store is also highly-optimized, and so offers more than just a simple implementation of just retrieving values from a list. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><i>Update: Release 2.1.0.2 uploaded 03 Sept 2009 - see Release 2.1.0.2 page for release notes</i><br /><br /><b>Project Description</b><br />The SharePoint Config Store is intended for SharePoint developers, and provides the framework to be able to use a SharePoint list for application configuration values. This is useful when there are certain values used in a site or application&#39;s code, but we don&#39;t to hardcode them or even store them in web.config. Storing such values in a list means they can be easily updated &#40;possibly by end users if you choose to allow this&#41; without requiring access to the web server&#39;s filesystem.<br /><br />Example config items for a SharePoint site&#47;application&#47;control could be&#58;<br /><br />&#39;AdministratorEmail&#39; - &#39;bob&#64;somewhere.com&#39;<br />&#39;SendWorkflowEmails&#39; - &#39;true&#39;<br /><br />The Config Store is also highly-optimized, and so offers more than just a simple implementation of just retrieving values from a list. <br /><br /><b>Details</b><br /><br />The list used to store config items looks like this (N.B. the items shown are my examples, you&#39;d add your own):<br /><br /><img src=\"/projects/SPConfigStore/96b9c4f2-39b1-46f1-b8ea-1b7f120a35e6\" alt=\"ConfigStoreList.jpg\" title=\"ConfigStoreList.jpg\" /><br /><br />There is a special content type associated with the list, so adding a new item is easy:<br /><br /><img src=\"/projects/SPConfigStore/f098f4cc-cd84-4b4f-9953-42a0450fec1e\" alt=\"ConfigItemContentType.jpg\" title=\"ConfigItemContentType.jpg\" /><br /><br />..and the content type is defined so that all the required fields are mandatory:<br /><br /><img src=\"/projects/SPConfigStore/db22185c-5223-419f-8ad9-5d4124b96046\" alt=\"AddNewConfigItem.jpg\" title=\"AddNewConfigItem.jpg\" /><br /><br /><b>Retrieving values</b><br /><br />Once a value has been added to the Config Store, it can be retrieved in code as follows (you&#39;ll also need to add a reference to the Config Store assembly and &#39;using&#39; statement of course):<br /><br /><pre>\nstring sAdminEmail = ConfigStore.GetValue(&quot;MyApplication&quot;, &quot;AdminEmail&quot;);\n</pre><br />Note that there is also a method to retrieve <b>multiple</b> values with a single query. This avoids the need to perform multiple queries so should be used for performance reasons if your control/page will retrieve <i>many</i> items from the Config Store - think of it as a best practise. The code is slightly more involved, but should make sense when you think it through. We create a generic List of &#39;ConfigIdentifiers&#39; (a ConfigIdentifier specifies the category and name of the item e.g. &#39;MyApplication&#39;, &#39;AdminEmail&#39;) and pass it to the &#39;GetMultipleItems()&#39; method:<br /><br /><pre>\nList&lt;ConfigIdentifier&gt; configIds = new List&lt;ConfigIdentifier&gt;();\nConfigIdentifier adminEmail = new ConfigIdentifier(&quot;MyApplication&quot;, &quot;AdminEmail&quot;);\nConfigIdentifier sendMails = new ConfigIdentifier(&quot;MyApplication&quot;, &quot;SendWorkflowEmails&quot;);\nconfigIds.Add(adminEmail);\nconfigIds.Add(sendMails);\n\nDictionary&lt;ConfigIdentifier, string&gt; configItems = ConfigStore.GetMultipleValues(configIds);\n\nstring sAdminEmail = configItems[adminEmail];\nstring sSendMails = configItems[sendMails];\n</pre><br />..the method returns a generic Dictionary containing the values, and we retrieve each one by passing the respective ConfigIdentifier we created earlier to the indexer.<br /><br /><b>Other notes</b><br />\n<ul><li>All items are wrapped up in a Solution/Feature so there is no need to manually create site columns/content types/the Config Store list etc. There is also an install script for you to easily install the Solution.</li>\n<li>Config items are cached in memory, so where possible there <i>won&#39;t even be</i> a database lookup!</li>\n<li>The Config Store is also designed to operate where no SPContext is present e.g. a list event receiver. In this scenario, it will look for values in your SharePoint web application&#39;s web.config file to establish the URL for the site containing the Config Store (N.B. these web.config keys get automatically added when the Config Store is installed to your site). This also means it can be used outside your SharePoint application, e.g. a console app. </li>\n<li>The Config Store can be moved from it&#39;s default location of the root web for your site. For example my sites usually have a hidden &#39;config&#39; web, so I put the Config Store in here, along with other items. (To do this, create a new list (in whatever child web you want) from the &#39;Configuration Store list&#39; template (added during the install), and modify the &#39;ConfigWebName&#39;/&#39;ConfigListName&#39; keys which were added to your web.config to point to the new location. As an alternative if you already added 100 items which you don&#39;t want to recreate, you could use my other tool, the SharePoint Content Deployment Wizard at <a href=\"http://www.codeplex.com/SPDeploymentWizard\">http://www.codeplex.com/SPDeploymentWizard</a> to move the list.)</li>\n<li><b>All source code and Solution/Feature files are included</b>, so if you want to change anything, you can</li>\n<li>Installation instructions are in the readme.txt in the download</li></ul>\n<br />Hope you find it useful, all feedback welcome!<br /><br />Chris O&#39;Brien.<br /><a href=\"http://www.sharepointnutsandbolts.com\">www.sharepointnutsandbolts.com</a><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "SharePoint,Appsettings,config,",
  "LastEdited": "2009-09-03T16:18:10.453-07:00"
}