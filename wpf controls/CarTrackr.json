{
  "ProjectName": "CarTrackr",
  "Title": "Track your car expenses with CarTrackr!",
  "Description": "CarTrackr is a sample application for the ASP.NET MVC framework using the repository pattern and dependency injection using the Unity application block. It was written for various demos in presentations done by Maarten Balliauw.\n\nCarTrackr is an online software application designed to help you understand and track your fuel usage and kilometers driven.\n\nYou will have a record on when you filled up on fuel, how many kilometers you got in a given tank, how much you spent and how much liters of fuel you are using per 100 kilometer.\n\nCarTrackr will enable you to improve your fuel economy and save money as well as conserve fuel. Fuel economy and conservation is becoming an important way to control your finances with the current high price.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project description</h1>\rCarTrackr is a sample application for the ASP.NET MVC framework using the repository pattern and dependency injection using the Unity application block. It was written for various demos in presentations done by Maarten Balliauw.<br /><br />CarTrackr is an online software application designed to help you understand and track your fuel usage and kilometers driven.<br /><br />You will have a record on when you filled up on fuel, how many kilometers you got in a given tank, how much you spent and how much liters of fuel you are using per 100 kilometer.<br /><br />CarTrackr will enable you to improve your fuel economy and save money as well as conserve fuel. Fuel economy and conservation is becoming an important way to control your finances with the current high price.<br />\n<h1>Source code</h1>\rLatest version: <a href=\"https://cartrackr.codeplex.com/releases/view/18356\">CarTrackr (ASP.NET MVC 1.0 version)</a><br />\n<h1>Author blog feed</h1>\r<div class=\"rss\"><div class=\"accentbar\"><span class=\"left\">&nbsp;</span>Maarten Balliauw {blog} News Feed<span class=\"right\">&nbsp;</span></div><div class=\"entry\"><div class=\"title\"><a href=\"http://blog.maartenballiauw.be/post/2016/03/23/Someone-broke-the-Internet!-Or-why-you-may-want-to-mirror-your-dependencies%e2%80%a6.aspx\">Someone broke the Internet! Or why you may want to mirror your dependencies…</a></div><div class=\"moreinfo\"><span class=\"date\">Wednesday, March 23, 2016</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://blog.maartenballiauw.be/syndication.axd\">Maarten Balliauw {blog}</a></span></div><p><p>Twitter celebrated its 10th birthday this week, and those who have been on that social network long enough know that at least once a week there’s a massive outrage about something&nbsp;that, in the end, usually does not seem so bad. This week’s topic: someone broke the Internet!</p> <p>Wait, break the Internet? Well, sort of. In short, a package named <a href=\"https://github.com/azer/left-pad/issues/4\">“left-pad” was removed</a> from the official NPM repository. The action in itself sucks, then again the owner of the package <a href=\"https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.ttckmvl5m\" target=\"_blank\">sheds some light</a> that clears up the \"why\".&nbsp;Anyway, because another popular package depended on it, installing that package resulted in a broken dependency chain. Which in turn resulted in JavaScript applications around the world having development-time and build-time issues because of that broken dependency. It hit <a href=\"http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/?mt=1458711595849\">press</a>, and some <a href=\"https://medium.com/@Rich_Harris/how-to-not-break-the-internet-with-this-one-weird-trick-e3e2d57fee28#.trjbo4p7s\">bloggers</a> gave their opinion on the issue. And here’s my opinion…</p> <p>First of all, I think it’s insane to take a dependency on a package that pads a string with zeroes and contains 11 lines of useful source code. These utility functions typically go in your own codebase, but I agree this is debatable. But to me, taking a dependency for something as trivial as that is a bit crazy – it’s like hiring an assistant to tie your shoe laces.</p> <p>Second, while this all happened in NPM land, this could also happen in NuGet, Maven, Componist, PyPi, Gem and other package managers. Writing code in 2016? Then let me rephrase that: this could happen to you! Someone else can break your build! Imagine what would happen if all of a sudden Newtonsoft.Json was removed from NuGet.org…</p> <h2>Public repositories</h2> <p>In my opinion, public repositories should, never, ever, allow package deletes. NuGet.org doesn’t allow this (<a href=\"http://blog.nuget.org/20151007/Package-Content-and-Removals.html\">except when there’s legal/copyright stuff involved</a>, which happened once in its 6 year lifetime). And I think other package managers should have the same policy. No deletes. Period.</p> <p>Of course, there are edge cases like accidental publishes – it should be possible to remove those. But if a package has been downloaded more than, say&nbsp;10 times, it should stay. No exceptions.</p> <h2>Your codebase</h2> <p>Flashback to 2014. NuGet started to take off with early adopters and smart people all around. The package manager introduced package restore – a way to not have your dependencies in your source control system. Some people were <a href=\"http://blog.ploeh.dk/2014/01/29/nuget-package-restore-considered-harmful/\">wary</a>, others responded in <a href=\"http://blog.maartenballiauw.be/post/2014/01/30/Source-Control-considered-harmful.aspx\">full sarcasm mode</a> (damn I’m a sarcastic bastard sometimes). From a blog post I wrote in 2014:</p> <blockquote> <p>Just like with source control, issue trackers and other things (like package restore) in your build process, you should read up on them, play with them and know the risks. Do we know that our Internet connection can break during solar storms? Well yes. It’s a minor risk but if it’s important to your shop do mitigate that risk. Do laptops break? Yes. If it’s important that you can keep working even if a laptop crashes, buy some more and keep them up-to-date with your main development machine. If you rely on GitHub and want to get work done if they have issues, make sure you have an up to date fork somewhere on a file share. Make that two file shares! <p>And if you rely on NuGet package restore… you get the point, right? <strong>For NuGet, there are private repositories available that can host your in-house packages <em>and</em> the ones you are using from upstream sources like NuGet.org. Use them, if they matter for your development process.</strong> Know about NuGet 2.8’s automatic fallback to the local cache you have on disk and if something goes wrong, use that cache until the package source is back up. <p>The development process and the tools are part of your system. Know your tools. Even if it requires you to read crazy books like how to work with git. Or <a href=\"http://amzn.to/pronuget2\">Pro NuGet 2</a>.</p></blockquote> <p>See that bold highlight? That’s basically the exact same thing I want to point out in this blog post. If you depend on a package that is critical to you, then mirror it. There are various in-house and hosted package repositories available, <a href=\"https://docs.nuget.org/contribute/ecosystem\">for example in the NuGet space</a> (<a href=\"http://www.myget.org\">MyGet</a> has been around <a href=\"http://blog.maartenballiauw.be/post/2011/05/31/Creating-your-own-private-NuGet-feed-myget.aspx\">since 2011</a> for <strong><em>exactly</em></strong> this reason).</p> <p>If it is life threatening, mirror your dependencies. If you’re okay with hanging out in a bar for an afternoon if an upstream repository is down for a bit, or re-writing left-padding code because a package has been removed, then don’t mirror. Know your risks, think about how much of a threat they present to you, and act accordingly. (keyword here is: think)</p> <h2>But I need it so bad!</h2> <p>For those of you who did depend on left-pad and did not an to take action: NPM (and NuGet, and…) typically store a huge amount of packages on every developer and CI machine’s disk. I just checked my machine and have 3 GB of NPMs on there, and 6 GB of NuGets. Talk to a colleague, who knows, you may be able to find left-pad again, upload it to your private repository and be done with it.</p> <p>Enjoy!</p></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://blog.maartenballiauw.be/post/2015/12/23/disabling-session-affinity-in-azure-app-service-web-apps-websites.aspx\">Disabling session affinity in Azure App Service Web Apps (Websites)</a></div><div class=\"moreinfo\"><span class=\"date\">Wednesday, December 23, 2015</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://blog.maartenballiauw.be/syndication.axd\">Maarten Balliauw {blog}</a></span></div><p><p>In one of our production systems, we’re using Azure Websites to host a back-end web API. It runs on several machines and benefits from the automatic load balancing we get on Azure Websites. When going through request logs, however, we discovered that of these several machines a few were getting a lot of traffic, some got less and one even only got hit by our monitoring system and no other traffic. That sucks!</p> <p>In our back-end web API we’re not using any session state or other techniques where we’d expect the same client to always end up on the same server. Ideally, we want round-robin load balancing, distributing traffic across machines as much as possible. How to do this with Azure Websites?</p> <h2>How load balancing in Azure Websites works</h2> <p>Flashback to 2013. Calvin Keaton did a TechEd session titled “Windows Azure Web Sites: An Architecture and Technical Deep Dive” (<a href=\"https://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/WAD-B329#fbid=\">watch it here</a>). In this session (around 51:18), he explains what Azure Websites architecture looks like. The interesting part is the load balancing: it seems there’s a boatload of reverse proxies that handle load balancing at the HTTP(S) level, using <a href=\"http://www.iis.net/downloads/microsoft/application-request-routing\">IIS Application Request Routing</a> (ARR, like a pirate).</p> <p>In short: when a request comes in, ARR makes the request with the actual web server. Right before sending a response to the client, ARR slaps a “session affinity cookie” on the response which it uses on subsequent requests to direct that specific users requests back to the same server. You may have seen this cookie in action when using Fiddler on an Azure Website – look for <em>ARRAffinity</em> in cookies.</p> <h2>Disabling Application Request Routing session affinity via a header</h2> <p>By default, it seems ARR does try to map a specific client to a specific server. That’s good for some web apps, but in our back-end web API we’d rather not have this feature enabled. Turns out this is possible: when Application Request Routing 3.0 was released, a <a href=\"http://blogs.technet.com/b/erezs_iis_blog/archive/2013/09/16/new-features-in-arr-application-request-routing-3-0.aspx#_Toc366673311\">magic header was added</a> to achieve this.</p> <p>From the <a href=\"http://blogs.technet.com/b/erezs_iis_blog/archive/2013/09/16/new-features-in-arr-application-request-routing-3-0.aspx#_Toc366673311\">release blog post</a>:</p> <blockquote> <p>The special response header is <strong>Arr-Disable-Session-Affinity</strong> and the application would set the value of the header to be either <strong>True</strong> or <strong>False</strong>. If the value of the header is true, ARR would not set the affinity cookie when responding to the client request. In such a situation, subsequent requests from the client would not have the affinity cookie in them, and so ARR would route that request to the backend servers based on the load balance algorithm. </p></blockquote> <p>Aha! And indeed: after adding the following to our Web.config, load balancing seems better for our scenario:</p> <div class=\"wlWriterEditableSmartContent\" id=\"scid:9D7513F9-C04C-4721-824A-2B34F0212519:952b2504-c970-4348-b5ba-4359e7d0d2a3\" style=\"margin: 0px; padding: 0px; float: none; display: inline;\"><pre style=\"width: 829px; height: 246px; overflow: auto; background-color: white;\"><div><!--<br /><br />Code highlighting produced by Actipro CodeHighlighter (freeware)<br />http://www.CodeHighlighter.com/<br /><br />--><span style=\"color: rgb(0, 0, 255);\">&lt;?</span><span style=\"color: rgb(255, 0, 255);\">xml version=\"1.0\" encoding=\"utf-8\"</span><span style=\"color: rgb(0, 0, 255);\">?&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br /></span><span style=\"color: rgb(0, 0, 255);\">&lt;</span><span style=\"color: rgb(128, 0, 0);\">configuration</span><span style=\"color: rgb(0, 0, 255);\">&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br />  </span><span style=\"color: rgb(0, 0, 255);\">&lt;</span><span style=\"color: rgb(128, 0, 0);\">system.webServer</span><span style=\"color: rgb(0, 0, 255);\">&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br />    </span><span style=\"color: rgb(0, 0, 255);\">&lt;</span><span style=\"color: rgb(128, 0, 0);\">httpProtocol</span><span style=\"color: rgb(0, 0, 255);\">&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br />      </span><span style=\"color: rgb(0, 0, 255);\">&lt;</span><span style=\"color: rgb(128, 0, 0);\">customHeaders</span><span style=\"color: rgb(0, 0, 255);\">&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br />        </span><span style=\"color: rgb(0, 0, 255);\">&lt;</span><span style=\"color: rgb(128, 0, 0);\">add </span><span style=\"color: rgb(255, 0, 0);\">name</span><span style=\"color: rgb(0, 0, 255);\">=\"Arr-Disable-Session-Affinity\"</span><span style=\"color: rgb(255, 0, 0);\"> value</span><span style=\"color: rgb(0, 0, 255);\">=\"true\"</span><span style=\"color: rgb(255, 0, 0);\"> </span><span style=\"color: rgb(0, 0, 255);\">/&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br />      </span><span style=\"color: rgb(0, 0, 255);\">&lt;/</span><span style=\"color: rgb(128, 0, 0);\">customHeaders</span><span style=\"color: rgb(0, 0, 255);\">&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br />    </span><span style=\"color: rgb(0, 0, 255);\">&lt;/</span><span style=\"color: rgb(128, 0, 0);\">httpProtocol</span><span style=\"color: rgb(0, 0, 255);\">&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br />  </span><span style=\"color: rgb(0, 0, 255);\">&lt;/</span><span style=\"color: rgb(128, 0, 0);\">system.webServer</span><span style=\"color: rgb(0, 0, 255);\">&gt;</span><span style=\"color: rgb(0, 0, 0);\"><br /></span><span style=\"color: rgb(0, 0, 255);\">&lt;/</span><span style=\"color: rgb(128, 0, 0);\">configuration</span><span style=\"color: rgb(0, 0, 255);\">&gt;</span></div></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div><br /><p>Enjoy!</p>\n<h2></h2><br /><p><em>Disclaimer: I’m an Azure geezer and may have misnamed Azure App Service Web Apps as “Azure Websites” throughout this blog post.</em></p></p></div><div class=\"accentbar\"><span class=\"left\">&nbsp;</span>Maarten Balliauw {blog} News Feed<span class=\"right\">&nbsp;</span></div></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "MVC,sontek-favorite,",
  "LastEdited": "2008-10-15T00:15:35.65-07:00"
}