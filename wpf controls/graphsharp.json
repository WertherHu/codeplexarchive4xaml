{
  "ProjectName": "graphsharp",
  "Title": "Graph#",
  "Description": "Graph# is a graph layout framework.\nIt contains some layout algorithms and a GraphLayout control for WPF applications.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Graph#</h1>\r\n<b>Project Description</b><br />Graph&#35; is a graph layout framework.<br />It contains some layout algorithms and a GraphLayout control for WPF applications.<br /><br /><a href=\"https://graphsharp.codeplex.com/wikipage?title=Architecture&referringTitle=Home\">Architecture</a> | <a href=\"https://graphsharp.codeplex.com/wikipage?title=Tutorials&referringTitle=Home\">Tutorials</a> | <a href=\"https://graphsharp.codeplex.com/wikipage?title=Roadmap&referringTitle=Home\">Roadmap</a> | <b>Documentation on the way</b> | <b>Silverlight support is on the way</b><br /><br />We depend on:\n<ul><li>Microsoft Code Contracts <a href=\"http://msdn.microsoft.com/en-us/devlabs/dd491992.aspx\">http://msdn.microsoft.com/en-us/devlabs/dd491992.aspx</a></li>\n<li>QuickGraph <a href=\"http://quickgraph.codeplex.com\">http://quickgraph.codeplex.com</a></li></ul>\n<br /><a href=\"http&#58;&#47;&#47;www.ndepend.com&#47;\"><img src=\"/projects/graphsharp/88b7675a-90e5-4cab-a2d5-1638945b8684\" alt=\"NDepend\" title=\"NDepend\" /></a><br /><br /><b>Supported layout algorithms</b>:<br />- Fruchterman - Reingold<br />- Kamada - Kawai<br />- ISOM<br />- LinLog<br />- Simple Tree layout<br />- Simple Circle layout<br />- <b>NEW</b> Sugiyama layout (Use the Efficient Sugiyama layout algorithm)<br />- <b>NEW</b> Compound graph layout (CompoundFDP algorithm)<br />- on the way:\n<ul><li>radial tree</li>\n<li>balloon tree</li>\n<li>Orthogonal layout</li></ul>\n<br /><b>Supported overlap removal algorithms</b>:<br />- Force-Scan Algorithm<br /><br /><b>Edge layout algorithms also supported!</b><br />- on the way: orthogonal edge layout<br /><br /><b>Highlight algorithms supported!</b><br />- Simple highlight algorithm (highlight vertex/edge &amp; neigbours)<br /><br /><b>GraphLayout WPF control!</b><br />- Can use all kinds of algorithms (layout, overlap removal, edge, highlight)<br />- Vertex dragging supported<br />- Templates for vertices and <b>edges</b> supported<br />- Mutable graph -&gt; automatic relayout after the graph changes (burst mode: lot of modification but only 1 relayout)<br />- Async layout (background thread) supported<br />- Position changes are animated!<br /><br /><b>Example application included!</b><br /><br /><img src=\"/projects/graphsharp/daaae3ca-fcb6-45cd-ae11-8de39291a048\" alt=\"GraphSharpSample.png\" title=\"GraphSharpSample.png\" /><br /><br /><b>Example: Dependency Graph with LinLog layout using Graph#.Controls.GraphLayout control and Graph# lib</b><br /><br /><img src=\"/projects/graphsharp/245fb610-96fe-4d00-87a6-212b10accf1d\" alt=\"dependency-visualizer.png\" title=\"dependency-visualizer.png\" /><br /><br /><b>IF YOU WANT TO TAKE PART IN THIS PROJECT, YOU&#39;RE WELCOME! PLEASE CONTACT ME!</b></div><div class=\"ClearBoth\"></div>",
  "TagList": "Useful,graph layout,wouter,chart,graph,WPF Controls,WPF,WPF MVVM,",
  "LastEdited": "2010-08-27T14:50:38.413-07:00"
}