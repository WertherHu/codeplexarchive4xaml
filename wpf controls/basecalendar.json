{
  "ProjectName": "basecalendar",
  "Title": "BaseCalendar",
  "Description": "BaseCalendar is a server-side ASP.NET web control (WebForms or MVC) that renders a calendar while giving you full control over the generated HTML. By default it generates an HTML table, but can be easily configured to generate divs, ul/li, or anything else.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Why</h2>\r\nI wrote BaseCalendar because I got frustrated with the calendar control that comes with the .NET framework. Even in the latest framework version (4.0) it generates HTML code that cannot be overwritten. For example even if NextPrevFormat is set to CustomText the actual rendered text is wrapped inside a &lt;a href=&quot;javascript:<i></i>doPostBack(&#39;...&#39;)&quot;&gt;...&lt;/a&gt; tag. If we want the custom text to be an anchor we end up with nested A tags. Because of this and other non-standard attributes it generates the rendered HTML cannot pass validation. I needed something that would give me full control over the generated HTML and not use or require PostBacks.<br />\n<h2>Features</h2>\r\n<ul><li>Full control over the generated HTML. By default it generates HTML tables, but can be easily configured to generate divs, ul/li, or anything else (see demo #4). You can also control how each tag is rendered or if it should be rendered at all.</li>\n<li>You can change the culture for each individual calendar. (see demo #5)</li>\n<li>Designed with client-side / Javascript in mind, for example you can assign IDs to any tag.</li>\n<li>CSS friendly, easy way to assign CSS classes to most generated tags, or do it manually for all tags.</li>\n<li>Does not rely on VIEWSTATE or PostBack.</li></ul>\n\n<h2>How to use</h2>\r\nDownload the latest version from the &quot;Downloads&quot; section and unzip the solution. Copy and add the BaseControls project to your solution, add a reference to this project and you&#39;re good to go. The BaseCalendar control is part of the BaseControls project (there may be other Base* server-side controls in this project in the future). The downloaded file comes with 5 demos.<br />\n<h2>Architecture</h2>\r\nThe generated HTML has the following structure:<br /><br /><pre>&lt;calendar&gt;\n  &lt;caption /&gt;\n  &lt;header&gt;\n    &lt;navigation /&gt;\n    &lt;dayofweek /&gt;\n  &lt;/header&gt;  \n  &lt;body&gt;\n    &lt;row&gt;\n      &lt;cell /&gt;\n      &lt;cell /&gt;\n      ...\n    &lt;/row&gt;\n    &lt;row&gt;\n      ...\n    &lt;/row&gt;\n    ...\n  &lt;/body&gt;\n&lt;/calendar&gt;</pre><br />By default &lt;calendar&gt; will be generated as TABLE, &lt;header&gt; as THEAD, &lt;row&gt; as TR, and so on. Each of these blocks has an event associated, for example &lt;calendar&gt; has the OnRenderMain event, &lt;navigation&gt; has OnRenderHeaderNavigation and so on. <br /><br />All of these OnRender* events are passed either a BaseTag or BaseTagContent instance. There are a few customized BaseTagContent like BaseTagContentDayOfWeek, but they are basically BaseTagContent instances. The main difference between BaseTag and BaseTagContent is that BaseTagContent can have inner content while BaseTag cannot. <br /><br />The order of operation for all these events goes something like this:<br />\n<ul><li>The control creates a tag control (BaseTag or BaseTagContent) and initializes it with the default values.</li>\n<li>If there is an event handler assigned it gives you an opportunity to make changes to the tag control.</li>\n<li>Renders the result.</li></ul>\nSo you have the final saying as to what is generated. You can change the Tag property and output LI instead of TR or to null to not render it at all, add an ID or CSS class, set custom style attributes, or add custom attributes. You also have a way of doing a custom opening / closing tag. Using this technique you can even include two completely separate ending tags (see Demo #4 where we need to add an extra tag with clear:both). If the event passes a BaseTagControl you also have the option of changing the entire content of the tag.<br /><br />There are a number of CSS attributes that you can use to assign CSS classes. For example there&#39;s a CssBodyDay you can use to assign to every day cell, or CssBodyDayWeekend only for weekend days. In cases where more than one class is assigned to a tag the generated HTML will look like &lt;tag class=&quot;first second third&quot; /&gt;. Of course all this can be overwritten inside the appropriate OnRender* event by removing the class from the tag.Class collection.<br />\n<h2>Contact</h2>\r\nIf you have any questions / suggestions / bugs / critiques don&#39;t hesitate to contact me. Also, if you end up using the control, I would love to know where you used it.</div><div class=\"ClearBoth\"></div>",
  "TagList": "calendar,Calendar Control,ASP.NET,",
  "LastEdited": "2010-06-08T20:32:44.77-07:00"
}