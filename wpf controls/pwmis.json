{
  "ProjectName": "pwmis",
  "Title": "PDF.NET SOD",
  "Description": "PWMIS 数据开发框架\r\nPWMIS Data Develop Framework\r\n\r\nVer 4.5 开源版本\r\nVer 4.5 Open Source Solution\r\n\r\nincludes ORM、Web/WinForm Data Control、SQL MAPPING,ORM query language:OQL",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>源码搬迁公告</h1>\r  <a href=\"https://github.com/znlgis/sod\">GitHub</a> <br />  <a href=\"https://gitee.com/znlgis/sod\">码云</a> <br />\n<h1>Getting Started</h1>\r<h1>菜鸟入门</h1>\r\n<b>Beginner</b>：How to use Entity Framework? SOS!<br /><b>Senior men</b>：Try using the SOD Framework!<br /><br /><b>菜鸟</b>：怎么使用EF框架啊？遇到麻烦了，救命！<br /><b>老鸟</b>：试试SOD开发框架！<br /><br />Still using <b>EF</b> and get stuck? Why not release yourself and try <b>SOD</b>!<br />It is easy, and simple. It Still <b>support .NET 2.0</b>,and The memory use is tiny.<br /><br />一直使用EF并且老是遇到麻烦？何不解放自己并且试试SOD框架呢！<br />它是简单的，容易使用的，轻量级的框架，并且仍然支持.NET 2.0，只需极小的内存即可运行。<br /><br /><b>SOD</b> <i>not only</i> a ORM framework,include SQL-MAP,DataControls,detai ,but it is a light weight framework . see  <a href=\"http://www.pwmis.com/sqlmap\">this page.</a> <br /><br /><b>SOD</b> 不仅仅是一个ORM框架，还包括 SQL-MAP,DataControls,但它却是一个非常轻量级的框架。了解更多，看<a href=\"http://www.pwmis.com/sqlmap\">这里。</a><br /><br /><br />Learning more,see <a href=\"https://pwmis.codeplex.com/wikipage?title=Framework%20details&amp;version=2\">this page.</a> <br /><br />要了解更多，请看<a href=\"https://pwmis.codeplex.com/wikipage?title=Framework%20details&amp;version=2\">这篇文章</a><br />\n<hr />\n<br />下面一个简单的SOD框架ORM使用的实例：<br />在开始工作之前，先建立一个控制台项目，然后在程序包管理控制台，添加SOD框架的Nuget 包：<br /><pre>\nInstall-Package PDF.NET.SOD \n</pre><br />这样即可获取到最新的SOD框架包并且添加引用，然后，就可以开始下面的工作了。<br />已经建立好的当前Demo程序下载，<a href=\"http://pwmis.codeplex.com/downloads/get/1522232\">看这里</a><br /> \n<h1>1，首先建立一个实体类： </h1>\r  <div style=\"color:Black;background-color:White;\"><pre>\r\n   <span style=\"color:Blue;\">public</span>  <span style=\"color:Blue;\">class</span> User : EntityBase \n   { \n       <span style=\"color:Blue;\">public</span> User() \n       { \n           TableName = <span style=\"color:#A31515;\">&quot;Tb_User&quot;</span>; \n           IdentityName = <span style=\"color:#A31515;\">&quot;UserID&quot;</span>; \n           PrimaryKeys.Add(<span style=\"color:#A31515;\">&quot;UserID&quot;</span>); \n      } \n  \n       <span style=\"color:Blue;\">public</span>  <span style=\"color:Blue;\">int</span> ID \n       { \n           <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> getProperty&lt;<span style=\"color:Blue;\">int</span>&gt;(<span style=\"color:#A31515;\">&quot;UserID&quot;</span>); } \n           <span style=\"color:Blue;\">set</span> { setProperty(<span style=\"color:#A31515;\">&quot;UserID&quot;</span>, value); } \n       } \n  \n       <span style=\"color:Blue;\">public</span>  <span style=\"color:Blue;\">string</span> Name \n       { \n           <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> getProperty&lt;<span style=\"color:Blue;\">string</span>&gt;(<span style=\"color:#A31515;\">&quot;Name&quot;</span>); } \n           <span style=\"color:Blue;\">set</span> { setProperty(<span style=\"color:#A31515;\">&quot;Name&quot;</span>, value, 50); } \n       } \n  \n       <span style=\"color:Blue;\">public</span>  <span style=\"color:Blue;\">string</span> Pwd \n       { \n           <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> getProperty&lt;<span style=\"color:Blue;\">string</span>&gt;(<span style=\"color:#A31515;\">&quot;Pwd&quot;</span>); } \n           <span style=\"color:Blue;\">set</span> { setProperty(<span style=\"color:#A31515;\">&quot;Pwd&quot;</span>, value, 50); } \n       } \n    } \r\n</pre></div>\n<ul><li>这个User实体类将映射到一个名字为“Tb_User”的表，并且映射一个名字为UserID的主键，同时，UserID字段也是表的<b>“标识”</b>字段（IdentityName属性），对SOD框架而言，实体类的标识字段在Oracle，MySQL等所有非SqlServer上表现的特性是一致的，即字段都有自增功能。</li>\n<li>实体类的属性方法内部调用了 getProperty和 setProperty方法，来获取或者设置属性对应的数据库字段值，我们称这样的属性为 <b>“持久化属性”</b>，用来跟类的普通属性相区别。对于字符串属性而言，setProperty方法还可以指定映射的字段的长度，<u>这对于执行查询的时候获得稳定的查询计划很重要</u>。</li></ul>\n\n<h1>2，然后建立一个 DbContext: </h1>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n  <span style=\"color:Blue;\">class</span>  LocalDbContext:DbContext \n   { \n       <span style=\"color:Blue;\">public</span> LocalDbContext() \n           : <span style=\"color:Blue;\">base</span>(<span style=\"color:#A31515;\">&quot;local&quot;</span>) \n       { \n           <span style=\"color:Green;\">//local 是连接字符串名字 </span>\n       } \n  \n       <span style=\"color:Blue;\">protected</span>  <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">bool</span> CheckAllTableExists() \n       { \n           <span style=\"color:Green;\">//创建用户表 </span>\n           CheckTableExists&lt;User&gt;(); \n           <span style=\"color:Blue;\">return</span>  <span style=\"color:Blue;\">true</span>; \n       } \n   }\n \r\n</pre></div>\n<h1>3，修改下App.config 文件的连接配置： </h1>\r\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;?</span><span style=\"color:#A31515;\">xml</span> <span style=\"color:Red;\">version</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">1.0</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">encoding</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">utf-8</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">?&gt;</span> \n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">configuration</span><span style=\"color:Blue;\">&gt;</span> \n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">connectionStrings</span><span style=\"color:Blue;\">&gt;</span> \n   <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">add</span> <span style=\"color:Red;\">name</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">local</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">connectionString</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Data Source=.;database=TestDB; Integrated Security=True</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">providerName</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">SqlServer</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span> \n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">connectionStrings</span><span style=\"color:Blue;\">&gt;</span> \n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">configuration</span><span style=\"color:Blue;\">&gt;</span> \r\n</pre></div>providerName 是SOD框架提供的驱动程序，可选的内容有：<br />\n<ol><li>Access</li>\n<li>SqlServer</li>\n<li>Oracle</li>\n<li>SqlCe</li>\n<li>OleDb</li>\n<li>Odbc</li></ol>\n<br />如果是其它的扩展程序集，那么providerName应该写成下面的形式：<br /><pre>\n    providerName=&quot;PWMIS.DataProvider.Data.OracleDataAccess.Oracle,PWMIS.OracleClient&quot;\n</pre><br />其中，“,”号前是驱动程序类型的全名称， “,”号后是驱动程序所在的程序集名称，要求该程序集必须放到 跟PWMIS.Core.dll 同一个目录下，且是同一个兼容版本。<br />有关数据库连接配置的详细内容，请参考：<a href=\"https://pwmis.codeplex.com/wikipage?title=2.2.3%20扩展数据访问类配置&referringTitle=Home\">2.2.3 扩展数据访问类配置</a><br />\n<h1>4，然后，像下面这样使用，如果连接的数据库没有数据库或者表，可自动创建数据库和表：</h1>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n           <span style=\"color:Green;\">//创建数据库和表</span>\n           LocalDbContext context=<span style=\"color:Blue;\">new</span>  LocalDbContext();\r\n</pre></div><br />上面确定“用户表”已经存在了，可以写SQL语句查询和删除之前的测试数据：<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n AdoHelper db=MyDB.GetDBHelperByConnectionName(<span style=\"color:#A31515;\">&quot;local&quot;</span>);<span style=\"color:Green;\">//local是配置的连接字符串名字</span>\n <span style=\"color:Green;\">//格式化查询</span>\n <span style=\"color:Blue;\">var</span> userList=db.ExecuteMapper(<span style=\"color:#A31515;\">&quot;SELECT UserId,Name FROM Table_User WHERE Name={0}&quot;</span>,<span style=\"color:#A31515;\">&quot;zhang san&quot;</span>)\n    .MapToList(reader =&gt; <span style=\"color:Blue;\">new</span>\n               {\n                  UID = reader.GetInt32(0),\n                  Name = reader.GetString(1)\n              });\n <span style=\"color:Green;\">//删除数据</span>\n <span style=\"color:Blue;\">int</span> count= db.ExecuteNonQuery(<span style=\"color:#A31515;\">&quot;delete from Tb_User where Name=&#39;zhang san&#39;&quot;</span>);\n\r\n</pre></div>上面的查询方式类似于流行的Dapper方式，但性能更高，它直接利用了DataReader，<b>无任何性能损失</b>。<br />另外，也可以使用ORM的方式来删除和添加数据，如下示例：<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n          <span style=\"color:Green;\">//重新指定主键，删除旧的测试数据 </span>\n           User oldUser = <span style=\"color:Blue;\">new</span>  User(); \n           oldUser.PrimaryKeys.Clear(); \n           oldUser.PrimaryKeys.Add(<span style=\"color:#A31515;\">&quot;Name&quot;</span>); \n           oldUser[<span style=\"color:#A31515;\">&quot;Name&quot;</span>] = <span style=\"color:#A31515;\">&quot;zhang san&quot;</span>; <span style=\"color:Green;\">//索引器使用 </span>\n           <span style=\"color:Blue;\">int</span> count= context.Remove&lt;User&gt;(oldUser); \n  \n           User zhang_san = <span style=\"color:Blue;\">new</span>  User() { Name = <span style=\"color:#A31515;\">&quot;zhang san&quot;</span>, Pwd = <span style=\"color:#A31515;\">&quot;123&quot;</span> }; \n           count = context.Add&lt;User&gt;(zhang_san);<span style=\"color:Green;\">//采用 DbContext 方式插入数据 </span>\n  \r\n</pre></div><br />当然插入数据的方式很多，具体请看本文提供的源码下载。 <br />\n<h1>5，最后，像下面这样使用查询即可：</h1>\r\n<div style=\"color:Black;background-color:White;\"><pre>\r\n \n           User user = <span style=\"color:Blue;\">new</span>  User() { Name = <span style=\"color:#A31515;\">&quot;zhang san&quot;</span> }; \n           OQL q = OQL.From(user) \n             .Select() \n             .Where(user.Name) \n           .END; \n  \n           PrintOQL(q); \n           List&lt;User&gt; users = EntityQuery&lt;User&gt;.QueryList(q); \n\r\n</pre></div><br /> 这种方式适合简单的相等条件查询，如果需要复杂的条件，可以修改成下面这个样子：<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n\n           <span style=\"color:Green;\">//示例：采用操作符重载写比较条件 </span>\n           User user = <span style=\"color:Blue;\">new</span>  User(); \n           OQL q = OQL.From(user) \n                         .Select() \n                         .Where(cmp =&gt; cmp.Property(user.Name) == <span style=\"color:#A31515;\">&quot;zhang san&quot;</span>) \n                       .END; \n         PrintOQL(q); \n           <span style=\"color:Green;\">//使用扩展方法 using PWMIS.Core.Extensions; </span>\n           List&lt;User&gt; users = q.ToList&lt;User&gt;();\n\r\n</pre></div><br />示例代码中的  可以修改成 &gt;,&lt;,like 等SQL支持的比较符号。 <br /> 如果需要更多条件，可以使用 &amp;表示SQL的AND，| 表示 SQL的OR 逻辑关系，比如： <br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n\n           <span style=\"color:Green;\">//示例：采用操作符重载写比较条件 </span>\n           User user = <span style=\"color:Blue;\">new</span>  User(); \n           OQL q = OQL.From(user) \n                         .Select() \n                         .Where(cmp =&gt; cmp.Property(user.Name) == <span style=\"color:#A31515;\">&quot;zhang san&quot;</span> \n                         &amp; cmp.Comparer(user.Pwd ,<span style=\"color:#A31515;\">&quot;=&quot;</span>,<span style=\"color:#A31515;\">&quot;123&quot;</span>) ) \n                       .END; \n         PrintOQL(q); \n           <span style=\"color:Green;\">//使用扩展方法 using PWMIS.Core.Extensions; </span>\n           List&lt;User&gt; users = q.ToList&lt;User&gt;(); \n\r\n</pre></div><br />实际上，框架提供了至少6种查询方式，详细内容，请看Demo程序下载，<a href=\"http://pwmis.codeplex.com/downloads/get/1522232\">看这里</a><br /><br />  附注：<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n\n       <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> PrintOQL(OQL q)\n       { \n           Console.WriteLine(<span style=\"color:#A31515;\">&quot;OQL to SQL:\\r\\n{0}&quot;</span>, q.ToString()); \n           Console.WriteLine(<span style=\"color:#A31515;\">&quot;SQL Parameters:\\r\\n{0}&quot;</span>, q.PrintParameterInfo()); \n       } \n\r\n</pre></div><br /> 该方法可以打印OQL的SQL和参数信息，为你调试代码带来方便。 <br /> \n<hr />\n <br /> 这样，一个简单的ORM使用实例就做好了。上面这段ORM例子，不仅仅适用于Oracle,使用在其它数据库都是可以得，只需要修改 连接字符串配置的 providerName和 connectionString 即可。<br /><br /> 详细可以参考  <a href=\"http://www.cnblogs.com/bluedoctor/p/4359878.html\">Oracle 免费的数据库--Database 快捷版 11g 安装使用与&quot;SOD框架&quot;对Oracle的CodeFirst支持</a><br /> <br />   <br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "orm,Data Controls,PDF.NET,OQL,SQL-MAP,SQL Tools,PWMIS,proj1,",
  "LastEdited": "2017-11-08T06:19:30.8-08:00"
}