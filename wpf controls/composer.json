{
  "ProjectName": "composer",
  "Title": "Composer",
  "Description": "Composer is an extensible Compositional Architecture framework, providing a set of functionality such as Inversion of Control container (IoC), Dependency Injection (DI), Plug-in framework, Aspect Oriented Programming (AOP), Configurability and Composability for components.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Moved to GitHub</h1>\rThe project is moved to GitHub at <a href=\"https://github.com/appson/composer\">https://github.com/appson/composer</a><br /><br /><b>Project Description</b><br />Composer is an extensible Compositional Architecture framework, providing a set of functionality such as Inversion of Control container &#40;IoC&#41;, Dependency Injection &#40;DI&#41;, Plug-in framework, Aspect Oriented Programming &#40;AOP&#41;, Configurability and Composability for components.<br />\n<h1>Links</h1>\r<ul><li><b><a href=\"http://www.compositional.net/composer/\">Composer Website</a></b></li>\n<li><b><a href=\"http://community.compositional.net/bb/\">Composer Community</a></b></li>\n<li><a href=\"http://composer.codeplex.com/releases\">Download the latest version or previous releases</a></li>\n<li><a href=\"http://compositional.net/composer/documentation.html\">See the documentation</a></li>\n<li><a href=\"http://composer.codeplex.com/workitem/list/basic\">Report bugs and suggestions, or browse current ones</a></li>\n<li><a href=\"http://composer.codeplex.com/SourceControl/list/changesets\">Browse or download the source code</a></li>\n<li>Composer is a member of <b><a href=\"http://www.compositional.net/compositional/\">Compositional Software Initiative</a></b></li></ul>\n\n<h1>What is Composer?</h1>\rComposer is a framework to enable software to be developed in a <b>Compositional</b> manner. A complete software system can be formed by composing various smaller re-usable parts together. It simplifies the software development process, and help developers and architects meet design goals such as Configurability, Extensibility, Reusability and Customizability.<br />\n<h1>What problems are addressed by Composer?</h1>\rThe items below are high-level benefits of building software in Compositional architecture, which is provided by Composer.\n<ul><li><b>Inversion of Contro</b>l: Composer can act as a container for Inversion of Control.</li>\n<li><b>Dependency Injection</b>: Composer can inject dependencies of components either created by composer itself, or created outside and handed over to it.</li>\n<li><b>Interception and Filtering</b>: Composer facilitates means for intercepting calls between components, filtering them, or redirecting them.</li>\n<li><b>Dynamic Mocking</b>: Composer has tools for dynamically creating implementations of interfaces.</li>\n<li><b>Aspect Oriented Programming</b>: Composer facilitates easy creation of Aspects between layers.</li>\n<li><b>Extensibility</b>: Composer provides means for building extensible software components quickly and easily.</li>\n<li><b>Plug-in framework</b>: Composer makes it easy to incorporate plug-in functionality in an application.</li>\n<li><b>Configuration</b>: Composer allows software components declare configuration options, which can be provided from flexible sources without the knowledge of the component itself.</li>\n<li><b>Customizability</b>: Composer makes customizing software for different customer much easier.</li>\n<li><b>Reusability</b>: Composer enables easier re-use of software components across different products, and across customizations of the same product.</li>\n<li><b>Substitutability</b>: Composer makes individual components easily substitutable, without affecting other parts of the system.</li>\n<li><b>Testability</b>: Composer makes it easy to isolate a single component or a group of components for testing.</li>\n<li><b>Instance Sharing</b>: Composer can keep track of instantiated components, and share the instance for different uses to prevent unneeded object creations.</li>\n<li><b>Lazy Initialization</b>: Composer makes it easy to defer instantiation of components until when they are actually needed.</li>\n<li><b>XML Based composition</b>: Composer has utilities to parse XML documents that specify the composition and registration of components.</li>\n<li><b>Extend Composition Logic</b>: Composer is extensible itself, allowing you to customize and add your own logic to the composition flow in several ways.</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,.NET 4.0,IOC,IoC/DI,Composite,AOP,interception,Configuration,Compositional,",
  "LastEdited": "2016-10-14T10:20:39.813-07:00"
}