{
  "ProjectName": "versatiledatasources",
  "Title": "Versatile DataSources",
  "Description": "2 DataSource controls for ASP.NET. EntityDAODataSource improves upon the ideas behind the DomainDataSource. POCODataSource lets you work with POCO classes. Both support Dynamic Data and establish a strong separation of concerns between UI and business logic.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />2 DataSource controls for ASP.NET. EntityDAODataSource improves upon the ideas behind the DomainDataSource. POCODataSource lets you work with POCO classes. Both support Dynamic Data and establish a strong separation of concerns between UI and business logic.<br /><br />These DataSources encourage building business logic classes and establish a strong separation of concerns between user interface development and business logic. With Dynamic Data added, you get an outstanding webcontrols generator that follows the attributes you have established on your business logic classes.<br /><br /><i>This project requires ASP.NET 4.0 Beta 2 or higher</i><br /><br />\n<h2>EntityDAODataSource Features</h2>\r<ul><li>For use with Data Access Objects (&quot;DAO&quot;) that handle the CRUD (&quot;create, read, update, delete&quot;) actions. Starter DAO classes are supplied for ADO.NET, LINQ to SQL, and ADO.NET Entity Framework. They already predefine the following methods: Update, Insert, Delete, SelectAll, SelectOne (by primary key), and Select (query by the filtering properties on the EntityDAODataSource). Your existing DAO classes can be used as well.</li>\n<li>Defines strong separation of concerns between user interface and business logic, letting the business logic dictate everything possible. The web page developer only identifies the Entity class, Select method, and the Select method parameters. (Even the Select method and its parameters are optional as in many cases EntityDAODataSource can figure them out.)</li>\n<li>Supports Dynamic Data. Introduces ADO.NET support to Dynamic Data.</li>\n<li>Provides a mechanism for paging, sorting, filtering, and caching, which is delegated to the Select methods on the DAO classes. The supplied DAO classes already implement all of these capabilities.</li>\n<li>Select methods are easy to setup. They are always passed the SelectArgs object which passes in paging, sorting, filtering, and caching information. Select methods only need to create their query, consuming the sorting and filtering data. Then pass both the query and the SelectArgs object to the ExecuteSelectCommand for execution where paging and caching are applied.</li>\n<li>Supports the DynamicFilter and QueryableFilterRepeater controls without using the QueryExtender control.</li>\n<li>Supports Dynamic Data’s Url Routing to determine the table, action (read, edit, insert), and record. You don’t have to setup any Parameter objects in SelectParameters or WhereParameters properties.</li>\n<li>Supports Associations (relationships) defined by Dynamic Data and used by Url Routing.</li>\n<li>Provides design mode support, including a Configure command and editors for its SelectParameters, WhereParameters, and FilterExpressions properties.</li></ul>\n\n<h2>POCODataSource Features</h2>\r<ul><li>For any data entry form that takes an action based on the data input.</li>\n<li>For use with the POCO class intended to run an action. Eliminates the middle step of transferring data from an intermediate form to the final object by handling two-way databinding directly with the POCO instance.</li>\n<li>Populates the properties of objects automatically. You can just invoke their “action method” or pass them to a separate class&#39;s action method.</li>\n<li>Supports Dynamic Data. Apply the attributes of System.ComponentModel.DataAnnotations to your POCO class and let Dynamic Data construct a matching user interface complete with validation. Allows separation of concerns design where the business logic dictates how to build the user interface.</li>\n<li>Very simple setup. Either assign the POCO class type to the POCOTypeName property or use the CreatePOCOInstance event to return an instance of the object.</li>\n<li>Provides design mode support</li></ul>\n\n<h2>About the Author</h2>\rPeter Blum runs PeterBlum.com (<a href=\"http://www.peterblum.com\">http://www.peterblum.com</a>), a vendor of controls and technologies for ASP.NET since 2002. His &quot;Peter&#39;s Data Entry Suite&quot; is focused on all facets of data entry web forms. It includes an extensive upgrade to ASP.NET Dynamic Data, making the technology applicable to far more cases.</div><div class=\"ClearBoth\"></div>",
  "TagList": "ASP.NET,Data Access Layer,DataSource,dynamic data,SoC,ASP.NET 4.0,Business Objects,Business Logic,POCO,Domain Model,DataSources,",
  "LastEdited": "2009-11-13T09:42:41.91-08:00"
}