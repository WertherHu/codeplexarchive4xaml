{
  "ProjectName": "xamlite",
  "Title": "XAMLite UI Library for XNA",
  "Description": "A XAML-inspired lightweight UI library for XNA projects.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>XAMLite (pronounced zamel-lite): A <a href=\"http://en.wikipedia.org/wiki/Extensible_Application_Markup_Language\">\r\nXAML</a>-inspired lightweight UI library for Windows-based XNA 4.0 (Refresh) projects.</p>\r\n<p>By &quot;XAML-inspired&quot;, we're referring to the collection of user interface controls that can be instantiated via C#, when working with XAML-based technologies like WPF and Silverlight (as opposed to the XML markup side of XAML).</p>\r\n<p>So XAMLite doesn't actually have any XAML markup? Exactly.&nbsp; What we do have is the exact same object model for things like Label, TextBlock, Image, etc. controls.&nbsp; So if you're already familiar with the properties and methods available to XAML\r\n controls, you'll be right at home working with XAMLite.</p>\r\n<p><strong>Example</strong></p>\r\n<p>Here's a <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.label.aspx\">\r\nlabel</a> in (code-only) XAML:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Label label = new Label();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.Content = &quot;Hello&quot;;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.Foreground = Brushes.Red;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.HorizontalAlignment = HorizontalAlignment.Center;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.VerticalAlignment = VerticalAlignment.Center;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.Visibility = Visibility.Visible;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.Add( label );</p>\r\n<p>Here's - almost exactly the same code, for a label in XAMLite.</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XAMLiteLabel label = new XAMLiteLabel( game );<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.Content = &quot;Hello&quot;;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.Foreground = Brushes.Red;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.HorizontalAlignment = HorizontalAlignment.Center;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.VerticalAlignment = VerticalAlignment.Center;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; label.Visibility = Visibility.Visible;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; game.Components.Add( label );</p>\r\n<p><strong>Rationale</strong></p>\r\n<p>The reason for mimicking the XAML object model and layout conventions for user interface controls is that Microsoft has made it clear that XAML is the plan going forward for UI construction (in the past for XAML in WPF/Silverlight, and in the&nbsp;the future,\r\n XAML in&nbsp;<a href=\"http://en.wikipedia.org/wiki/WinRT\">WinRT</a>).&nbsp; So developers are either already familiar with XAML-style interface construction, or if not, they should be and there will be future dividends to becoming XAML-savvy.&nbsp; As we've\r\n already seen in Silverlight 5 on Windows phone, XAML can be directly supported within XNA.&nbsp; I predict this will happen at some point in the future for desktop XNA application development as well.&nbsp; This is another reason the XAMLite library is being\r\n built following XAML conventions - so that transition (from XAMLite to &quot;real&quot; XAML)&nbsp;is as smooth as possible.&nbsp;</p>\r\n<p><strong>Project Goals</strong></p>\r\n<ul>\r\n<li>Simple: ease-of-use for new developers is the primary goal.&nbsp; There should be almost no learning curve for developers who have a beginner-level familiarity with XAML.<strong>&nbsp;</strong>\r\n</li><li>Lightweight: this is a library that can be used on top of your application, not a framework that you build your application on top of.&nbsp; XAMLite doesn't need to be used for all of your UI.\r\n</li><li>No Manager:&nbsp; this might not be possible, but the goal is avoid a centralized XAMLiteManager which takes all controls and is then responsible for rendering them.&nbsp;&nbsp; The reason for this is that a high-level UI manager may include assumptions\r\n that aren't true for a particular application.&nbsp; Instead, we provide individual standard low-level XNA DrawableGameponents allowing applications to use them however needed.&nbsp; (Not having a centralized UI manager will likely have performance costs,\r\n but we're not optimizing for performance). </li><li>Targeting Windows applications. </li></ul>\r\n<p><strong>Project Not-Goals</strong></p>\r\n<ul>\r\n<li>High-performance: optimizing for simplicity, not performance. </li><li>Comprehensive: not trying to mimic more than 1% of all possible XAML functionality\r\n</li><li>XML-style XAML markup. </li><li>Visual Studio designer support. </li><li>Not targeting Xbox or Windows Phone applications. </li></ul>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "XNA,GUI,2d,Interface,Controls,",
  "LastEdited": "2012-05-13T18:03:59.14-07:00"
}