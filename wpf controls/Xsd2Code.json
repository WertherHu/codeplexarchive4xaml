{
  "ProjectName": "Xsd2Code",
  "Title": "xsd2Code community edition .net class generator from XSD schema",
  "Description": "Xsd2Code community edition is a CSharp or Visual Basic Business Entity class Generator from XSD schema.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nXsd2Code community edition is a CSharp or Visual Basic Business Entity class Generator from XSD schema.</p>\r\n<hr>\r\n<h3>&nbsp;<u>What Xsd2Code community edition can do ?</u></h3>\r\n<ul>\r\n<li>Plugin integration for vs 2010, 2012, 2013 </li><li>Generate CS, VB code from xsd schema. </li><li>Generate partial class. </li><li>Support generic and custom collection (List&lt;T&gt;, ObservableCollection&lt;T&gt;, MyCustomCollection&lt;T&gt;).\r\n</li><li>Support automatic properties when no special get or set is required. </li><li>Can generate <strong>WCF</strong> attributes (DataContract/DataMember). </li><li>Implement INotifyPropertyChanged for enable DataBinding. </li><li>Generate summary documentation from xsd annotation. </li><li>Save and load Xml document into isolated file storage for silverlight app. </li><li>Read an write xml with UTF-8/32, ASCII, Unicode, Default. </li><li>Save and load from XML file. </li></ul>\r\n<hr>\r\n<p><strong><img src=\"/projects/Xsd2Code/817a8a61-bd00-4999-809d-2cd58ab6b912\" alt=\"\" width=\"120\" height=\"22\"></strong></p>\r\n<p><strong>xsd2code is available as dual-licensing.</strong></p>\r\n<ul>\r\n<li>xsd2code&#43;&#43; (<a href=\"http://www.xsd2code.com\">www.xsd2code.com</a>)<br>\r\nPaid version with additional features for developers and business customers working on commercial projects. (Vs 2010 to Vs 2015)\r\n</li><li>xsd2code community edition (here on codeplex) </li></ul>\r\n<hr>\r\n<p>&nbsp;</p>\r\n<h3><u>How to use it ?</u></h3>\r\n<p>Xsd2Code community edition is an AddIn for visual studio 2008.<br>\r\nRight clic on xsd schema in solution explorer, choose options and generate code.<br>\r\n<br>\r\n<img title=\"AddinMenu.jpg\" src=\"/projects/Xsd2Code/80d23815-31c3-4def-a253-c16d55e68b1f\" alt=\"AddinMenu.jpg\"><br>\r\n<br>\r\n<img title=\"propertyGrid.png\" src=\"/projects/Xsd2Code/59fb9cca-a053-4e4a-8d54-0e974a74263c\" alt=\"propertyGrid.png\"><br>\r\n<br>\r\n</p>\r\n<h3><u>Enable databinding.</u></h3>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>      <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">element</span> <span style=\"color:red\">name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">show</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">xs:boolean</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">nillable</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">true</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n</pre>\r\n</div>\r\n<p><br>\r\nResult :</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        [System.Xml.Serialization.XmlElementAttribute(IsNullable=<span style=\"color:blue\">true</span>)]\r\n        <span style=\"color:blue\">public</span> System.Nullable&lt;<span style=\"color:blue\">bool</span>&gt; show {\r\n            <span style=\"color:blue\">get</span> {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.showField;\r\n            }\r\n            <span style=\"color:blue\">set</span> {\r\n                <span style=\"color:blue\">if</span> ((showField.Equals(value) != <span style=\"color:blue\">true</span>)) {\r\n                    <span style=\"color:blue\">this</span>.showField = value;\r\n                    OnPropertyChanged(<span style=\"color:#a31515\">&quot;show&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\r\n        \r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnPropertyChanged(<span style=\"color:blue\">string</span> info) {\r\n            PropertyChangedEventHandler handler = PropertyChanged;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>) {\r\n                handler(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(info));\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<h3><u>Hide private field in Visual studio.</u></h3>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>     [EditorBrowsable(EditorBrowsableState.Never)]\r\n     <span style=\"color:blue\">private</span> List &lt;dvds&gt; dvdsField;\r\n</pre>\r\n</div>\r\n<h3><u>Generic collection.</u></h3>\r\n<p><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">element</span>\r\n<span style=\"color:red\">name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Product</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">complexType</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">sequence</span>\r\n<span style=\"color:red\">maxOccurs</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">unbounded</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">element</span>\r\n<span style=\"color:red\">name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ProductName</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">xs:string</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:blue\">/&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">element</span>\r\n<span style=\"color:red\">name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ProductVersion</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">xs:string</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:blue\">/&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">sequence</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">complexType</span><span style=\"color:blue\">&gt;</span><br>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">element</span><span style=\"color:blue\">&gt;</span></p>\r\n<p><br>\r\nResult :</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> .ctor class constructor</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> Product() {\r\n            <span style=\"color:blue\">if</span> ((<span style=\"color:blue\">this</span>.productVersionField == <span style=\"color:blue\">null</span>)) {\r\n                <span style=\"color:blue\">this</span>.productVersionField = <span style=\"color:blue\">new</span> List&lt;System.String&gt;();\r\n            }\r\n            <span style=\"color:blue\">if</span> ((<span style=\"color:blue\">this</span>.productNameField == <span style=\"color:blue\">null</span>)) {\r\n                <span style=\"color:blue\">this</span>.productNameField = <span style=\"color:blue\">new</span> List&lt;System.String&gt;();\r\n            }\r\n        }\r\n        \r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks/&gt;</span>\r\n        [System.Xml.Serialization.XmlElementAttribute(<span style=\"color:#a31515\">&quot;ProductName&quot;</span>)]\r\n        <span style=\"color:blue\">public</span> List&lt;System.String&gt; ProductName {\r\n            <span style=\"color:blue\">get</span> {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.productNameField;\r\n            }\r\n            <span style=\"color:blue\">set</span> {\r\n                <span style=\"color:blue\">if</span> ((<span style=\"color:blue\">this</span>.productNameField != <span style=\"color:blue\">null</span>)) {\r\n                    <span style=\"color:blue\">if</span> ((productNameField.Equals(value) != <span style=\"color:blue\">true</span>)) {\r\n                        <span style=\"color:blue\">this</span>.productNameField = value;\r\n                        OnPropertyChanged(<span style=\"color:#a31515\">&quot;ProductName&quot;</span>);\r\n                    }\r\n                }\r\n                <span style=\"color:blue\">else</span> {\r\n                    <span style=\"color:blue\">this</span>.productNameField = value;\r\n                    OnPropertyChanged(<span style=\"color:#a31515\">&quot;ProductName&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<h3><u>Lazy loading pattern.</u></h3>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        [System.Xml.Serialization.XmlElementAttribute(<span style=\"color:#a31515\">&quot;Dvds&quot;</span>)]\r\n        <span style=\"color:blue\">public</span> List&lt;dvd&gt; Dvds {\r\n            <span style=\"color:blue\">get</span> {\r\n                <span style=\"color:blue\">if</span> ((<span style=\"color:blue\">this</span>.dvdsField == <span style=\"color:blue\">null</span>)) {\r\n                    <span style=\"color:blue\">this</span>.dvdsField = <span style=\"color:blue\">new</span> List&lt;dvd&gt;();\r\n                }\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.dvdsField;\r\n            }\r\n            <span style=\"color:blue\">set</span> {\r\n                <span style=\"color:blue\">this</span>.dvdsField = value;\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<h3><u>Serialize/Deserialize XML.</u></h3>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Serializes current EntityBase object into an XML document</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:green\">// &lt;returns&gt;string XML value&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">string</span> Serialize() {\r\n            System.IO.StreamReader streamReader = <span style=\"color:blue\">null</span>;\r\n            System.IO.MemoryStream memoryStream = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">try</span> {\r\n                memoryStream = <span style=\"color:blue\">new</span> System.IO.MemoryStream();\r\n                Serializer.Serialize(memoryStream, <span style=\"color:blue\">this</span>);\r\n                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);\r\n                streamReader = <span style=\"color:blue\">new</span> System.IO.StreamReader(memoryStream);\r\n                <span style=\"color:blue\">return</span> streamReader.ReadToEnd();\r\n            }\r\n            <span style=\"color:blue\">finally</span> {\r\n                <span style=\"color:blue\">if</span> (streamReader != <span style=\"color:blue\">null</span>) {\r\n                    streamReader.Dispose();\r\n                }\r\n                <span style=\"color:blue\">if</span> (memoryStream != <span style=\"color:blue\">null</span>) {\r\n                    memoryStream.Dispose();\r\n                }\r\n            }\r\n        }\r\n        \r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Deserializes workflow markup into an EntityBase object</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:green\">// &lt;param name=&quot;xml&quot;&gt;string workflow markup to deserialize&lt;/param&gt;</span>\r\n        <span style=\"color:green\">// &lt;param name=&quot;obj&quot;&gt;Output EntityBase object&lt;/param&gt;</span>\r\n        <span style=\"color:green\">// &lt;param name=&quot;exception&quot;&gt;output Exception value if deserialize failed&lt;/param&gt;</span>\r\n        <span style=\"color:green\">// &lt;returns&gt;true if this XmlSerializer can deserialize the object; otherwise, false&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">bool</span> Deserialize(<span style=\"color:blue\">string</span> xml, <span style=\"color:blue\">out</span> T obj, <span style=\"color:blue\">out</span> System.Exception exception) {\r\n            exception = <span style=\"color:blue\">null</span>;\r\n            obj = <span style=\"color:blue\">default</span>(T);\r\n            <span style=\"color:blue\">try</span> {\r\n                obj = Deserialize(xml);\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>;\r\n            }\r\n            <span style=\"color:blue\">catch</span> (System.Exception ex) {\r\n                exception = ex;\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\r\n            }\r\n        }\r\n        \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">bool</span> Deserialize(<span style=\"color:blue\">string</span> xml, <span style=\"color:blue\">out</span> T obj) {\r\n            System.Exception exception = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">return</span> Deserialize(xml, <span style=\"color:blue\">out</span> obj, <span style=\"color:blue\">out</span> exception);\r\n        }\r\n        \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> T Deserialize(<span style=\"color:blue\">string</span> xml) {\r\n            System.IO.StringReader stringReader = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">try</span> {\r\n                stringReader = <span style=\"color:blue\">new</span> System.IO.StringReader(xml);\r\n                <span style=\"color:blue\">return</span> ((T)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));\r\n            }\r\n            <span style=\"color:blue\">finally</span> {\r\n                <span style=\"color:blue\">if</span> (stringReader != <span style=\"color:blue\">null</span>) {\r\n                    stringReader.Dispose();\r\n                }\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<h3><u>SaveToFile and LoadFromFile method.</u></h3>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>       <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Serializes current EntityBase object into file</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:green\">// &lt;param name=&quot;fileName&quot;&gt;full path of outupt xml file&lt;/param&gt;</span>\r\n        <span style=\"color:green\">// &lt;param name=&quot;exception&quot;&gt;output Exception value if failed&lt;/param&gt;</span>\r\n        <span style=\"color:green\">// &lt;returns&gt;true if can serialize and save into file; otherwise, false&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">bool</span> SaveToFile(<span style=\"color:blue\">string</span> fileName, <span style=\"color:blue\">out</span> System.Exception exception) {\r\n            exception = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">try</span> {\r\n                SaveToFile(fileName);\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>;\r\n            }\r\n            <span style=\"color:blue\">catch</span> (System.Exception e) {\r\n                exception = e;\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\r\n            }\r\n        }\r\n        \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">virtual</span> <span style=\"color:blue\">void</span> SaveToFile(<span style=\"color:blue\">string</span> fileName) {\r\n            System.IO.StreamWriter streamWriter = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">try</span> {\r\n                <span style=\"color:blue\">string</span> xmlString = Serialize();\r\n                System.IO.FileInfo xmlFile = <span style=\"color:blue\">new</span> System.IO.FileInfo(fileName);\r\n                streamWriter = xmlFile.CreateText();\r\n                streamWriter.WriteLine(xmlString);\r\n                streamWriter.Close();\r\n            }\r\n            <span style=\"color:blue\">finally</span> {\r\n                <span style=\"color:blue\">if</span> (streamWriter != <span style=\"color:blue\">null</span>) {\r\n                    streamWriter.Dispose();\r\n                }\r\n            }\r\n        }\r\n        \r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Deserializes workflow markup from file into an EntityBase object</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:green\">// &lt;param name=&quot;xml&quot;&gt;string workflow markup to deserialize&lt;/param&gt;</span>\r\n        <span style=\"color:green\">// &lt;param name=&quot;obj&quot;&gt;Output EntityBase object&lt;/param&gt;</span>\r\n        <span style=\"color:green\">// &lt;param name=&quot;exception&quot;&gt;output Exception value if deserialize failed&lt;/param&gt;</span>\r\n        <span style=\"color:green\">// &lt;returns&gt;true if this XmlSerializer can deserialize the object; otherwise, false&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">bool</span> LoadFromFile(<span style=\"color:blue\">string</span> fileName, <span style=\"color:blue\">out</span> T obj, <span style=\"color:blue\">out</span> System.Exception exception) {\r\n            exception = <span style=\"color:blue\">null</span>;\r\n            obj = <span style=\"color:blue\">default</span>(T);\r\n            <span style=\"color:blue\">try</span> {\r\n                obj = LoadFromFile(fileName);\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>;\r\n            }\r\n            <span style=\"color:blue\">catch</span> (System.Exception ex) {\r\n                exception = ex;\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\r\n            }\r\n        }\r\n        \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">bool</span> LoadFromFile(<span style=\"color:blue\">string</span> fileName, <span style=\"color:blue\">out</span> T obj) {\r\n            System.Exception exception = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">return</span> LoadFromFile(fileName, <span style=\"color:blue\">out</span> obj, <span style=\"color:blue\">out</span> exception);\r\n        }\r\n        \r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> T LoadFromFile(<span style=\"color:blue\">string</span> fileName) {\r\n            System.IO.FileStream file = <span style=\"color:blue\">null</span>;\r\n            System.IO.StreamReader sr = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">try</span> {\r\n                file = <span style=\"color:blue\">new</span> System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);\r\n                sr = <span style=\"color:blue\">new</span> System.IO.StreamReader(file);\r\n                <span style=\"color:blue\">string</span> xmlString = sr.ReadToEnd();\r\n                sr.Close();\r\n                file.Close();\r\n                <span style=\"color:blue\">return</span> Deserialize(xmlString);\r\n            }\r\n            <span style=\"color:blue\">finally</span> {\r\n                <span style=\"color:blue\">if</span> (file != <span style=\"color:blue\">null</span>) {\r\n                    file.Dispose();\r\n                }\r\n                <span style=\"color:blue\">if</span> (sr != <span style=\"color:blue\">null</span>) {\r\n                    sr.Dispose();\r\n                }\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<h3><u>Default value.</u></h3>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">attribute</span> <span style=\"color:red\">name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">nationality</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">xs:string</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">default</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">US</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p><br>\r\nResult :</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> .ctor class constructor</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> Actor() {\r\n            <span style=\"color:blue\">this</span>.nationalityField = <span style=\"color:#a31515\">&quot;US&quot;</span>;\r\n        }\r\n</pre>\r\n</div>\r\n<h3><u>Code xml comment.</u></h3>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">element</span> <span style=\"color:red\">name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">firstname</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">xs:string</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n     <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">annotation</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">documentation</span><span style=\"color:blue\">&gt;</span>\r\n        Gets or sets the firstname of the actor\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">documentation</span><span style=\"color:blue\">&gt;</span>\r\n     <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">annotation</span><span style=\"color:blue\">&gt;</span>\r\n <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">xs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">element</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p><br>\r\nResult :</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the firstname of the actor</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> firstname {<span style=\"color:blue\">get</span>;<span style=\"color:blue\">set</span>;}\r\n</pre>\r\n</div>\r\n<h3><u>Backup options generation in cs or vb header</u></h3>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// ------------------------------------------------------------------------------</span>\r\n<span style=\"color:green\">//  &lt;auto-generated&gt;</span>\r\n<span style=\"color:green\">//    Generated by Xsd2Code. Version 2.1.3148.17485</span>\r\n<span style=\"color:green\">//   &lt;NameSpace&gt;XSD2Code.Test&lt;/NameSpace&gt;&lt;Collection&gt;List&lt;/Collection&gt;...</span>\r\n<span style=\"color:green\">//  &lt;auto-generated&gt;</span>\r\n<span style=\"color:green\">// ------------------------------------------------------------------------------</span>\r\n<span style=\"color:blue\">namespace</span> XSD2Code.Test {\r\n    <span style=\"color:blue\">using</span> System;\r\n    <span style=\"color:blue\">using</span> System.Diagnostics;\r\n    ...\r\n</pre>\r\n</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "addin,C#,xml,VB.NET,CodeDOM,code generation,schema,WPF,Serialization,csharp,wcf,Visual Studio,ObjectBuilder,add-in,xaml,Code Generator,favorite,Object Builder,C# 3.0,Web Services,CodeGen,generator,code generation tool,Interesting,SCHEME,Visual Studio 2008,Wouter,xsd,codce generation,XML Serialization,C# 3.5,serialize,yorkrj,Data Types,Xsd2Code,VS add,MyList.CodeGenerator,C# or VB class gener,Type 'CRM.Core.Types,class generation,XSD Generator,",
  "LastEdited": "2016-03-02T01:19:47.007-08:00"
}