{
  "ProjectName": "stockprices",
  "Title": "Monitor record table changes with WPF and WCF",
  "Description": "Monitor insert update delete table changes on SQL Server and receive immediate notification containing modified record values.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Audit table change with WPF, WCF and SqlTableDependency </h1>\r<a href=\"https://tabledependency.codeplex.com/\">SqlTableDependency</a> is an open source component that can create a series of database objects used to receive notifications on table record change. When any insert/update/delete operation is detected, a change notification containing the record’s status is sent to SqlTableDependency, thereby eliminating the need of an additional SELECT to update application’s data.<br /><br />To get notifications, SqlTableDependency provides an on the fly low-level implementation of an infrastructure composed of a table trigger, contracts, messages, queue, service broker and a clean-up stored procedure.<br /><br />SqlTableDependency class provides access to notifications without knowing anything about the underlying database infrastructure. When a record change happens, this infrastructure notifies SqlTableDependency, which in turn raises a .NET event to subscribers providing the updated record values. \n<h2>Listen for table change alert</h2>\rUsing the SqlTableDependency is a good way to make your data driven application (whether it be Web or Windows Forms) more efficient by removing the need to constantly re-query your database checking for data changes.<br /><br /><pre>\nInstead of executing a request from client to the database, we do the reverse: sending a notification from database to clients applications.\n</pre><br />The following video show how to build a web application able to send real time notifications to clients. The code is visible below:<br /><br /><a href=\"https://youtu.be/c2LfyCmy65A\"><img style=\"border:none;\" src=\"https://www.codeplex.com/Download?ProjectName=tabledependency&amp;DownloadId=%20%20%201496255\" /></a><br />\n<h2>Get notifications on record change using WPF and WCF</h2>\rThis example show how to keep up to date WPF client applications displaying Stock prices. Every WPF client has a grid that needs to be automatically updated whenever a stock price change.<br />\n<h4>WCF server application implementing Publish-Subscribe pattern</h4>\rLet&#39;s assume that we have a table as:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">CREATE</span> <span style=\"color:Blue;\">TABLE</span> [Stocks] (\n\t[Code] [nvarchar](50) <span style=\"color:Blue;\">NULL</span>,\n\t[Name] [nvarchar](50) <span style=\"color:Blue;\">NULL</span>,\n\t[Price] [decimal](18, 0) <span style=\"color:Blue;\">NULL</span>)\r\n</pre></div><br />that is continuously update with stock&#39;s value from an external thread. We want our WPF application be notified every time a new value is updated without polling periodically the Stocks table. This means we want receive notifications from our database on every table change. <br /><br />To achieve this, we need a service application that will take care of create a SqlTableDependency object and for every change notification received, forward this new stock price to all interested WPF client applications.<br /><br />For this we are going to use a WCF service implementing the Publish-Subscribe pattern. This service will act as stock price broker receiving database notifications on any stock price change and in turn will notify subscribed WCF client applications:<br /><br /><img src=\"https://www.codeplex.com/Download?ProjectName=tabledependency&amp;DownloadId=1622005\" /><br /><br />For simplicity, we create a console application acting as WCF host. In this application we create a C# model that will be filled by notification with the new table value:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> class Stock\n{\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">decimal</span> Price { get; <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Blue;\">public</span> string Symbol { get; <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Blue;\">public</span> string <span style=\"color:Blue;\">Name</span> { get; <span style=\"color:Blue;\">set</span>; }\n}\r\n</pre></div><br />After that, we create the WCF service interfaces:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">interface</span> IPriceChangeCallBack\n    {\n        [OperationContract]\n        <span style=\"color:Blue;\">void</span> PriceChange(<span style=\"color:Blue;\">string</span> code, <span style=\"color:Blue;\">string</span> name, <span style=\"color:Blue;\">decimal</span> price);\n    }\r\n</pre></div><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    [ServiceContract(CallbackContract = <span style=\"color:Blue;\">typeof</span>(IPriceChangeCallBack))]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">interface</span> IPriceTicker\n    {\n        [OperationContract]\n        <span style=\"color:Blue;\">void</span> Subscribe();\n\n        [OperationContract]\n        <span style=\"color:Blue;\">void</span> Unsubscribe();\n\n        [OperationContract]\n        IList&lt;Stock&gt; GetAllStocks();\n\n        [OperationContract]\n        <span style=\"color:Blue;\">void</span> PublishPriceChange(<span style=\"color:Blue;\">string</span> item, <span style=\"color:Blue;\">string</span> name, <span style=\"color:Blue;\">decimal</span> price);\n    }\r\n</pre></div><br />Now we install SqlTableDependency nuget package:<br /><br /><pre>\nPM&gt; Install-Package SqlTableDependency\n</pre><br />We implement now the WCF service:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    [ServiceBehavior(\n            InstanceContextMode = InstanceContextMode.Single, \n            ConcurrencyMode = ConcurrencyMode.Single)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> PriceTicker : IPriceTicker, IDisposable\n    {\n        <span style=\"color:Blue;\">#region</span> Instance variables\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">readonly</span> List&lt;IPriceChangeCallBack&gt; _callbackList = \n                <span style=\"color:Blue;\">new</span> List&lt;IPriceChangeCallBack&gt;();\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">readonly</span> <span style=\"color:Blue;\">string</span> _connectionString;\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">readonly</span> SqlTableDependency&lt;Stock&gt; _sqlTableDependency;\n\n        <span style=\"color:Blue;\">#endregion</span>\n\n        <span style=\"color:Blue;\">#region</span> Constructors\n\n        <span style=\"color:Blue;\">public</span> PriceTicker()\n        {\n            _connectionString = ConfigurationManager\n                        .ConnectionStrings[<span style=\"color:#A31515;\">&quot;connectionString&quot;</span>]\n                        .ConnectionString;\n\n            _sqlTableDependency = <span style=\"color:Blue;\">new</span> SqlTableDependency&lt;Stock&gt;(\n                        _connectionString, \n                        <span style=\"color:#A31515;\">&quot;Stocks&quot;</span>);\n\n            _sqlTableDependency.OnChanged += TableDependency_Changed;\n            _sqlTableDependency.OnError += (sender, args) =&gt; \n                        Console.WriteLine($<span style=\"color:#A31515;\">&quot;Error: {args.Message}&quot;</span>);\n            _sqlTableDependency.Start();\n\n            Console.WriteLine(<span style=\"color:#A31515;\">@&quot;Waiting for receiving notifications...&quot;</span>);\n        }\n\n        <span style=\"color:Blue;\">#endregion</span>\n\n        <span style=\"color:Blue;\">#region</span> SqlTableDependency\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> TableDependency_Changed(\n            <span style=\"color:Blue;\">object</span> sender, \n            RecordChangedEventArgs&lt;Stock&gt; e)\n        {\n            Console.WriteLine(Environment.NewLine);\n            Console.WriteLine($<span style=\"color:#A31515;\">&quot;DML: {e.ChangeType}&quot;</span>);\n            Console.WriteLine($<span style=\"color:#A31515;\">&quot;Code: {e.Entity.Code}&quot;</span>);\n            Console.WriteLine($<span style=\"color:#A31515;\">&quot;Name: {e.Entity.Name}&quot;</span>);\n            Console.WriteLine($<span style=\"color:#A31515;\">&quot;Price: {e.Entity.Price}&quot;</span>);\n\n            <span style=\"color:Blue;\">this</span>.PublishPriceChange(e.Entity.Code, e.Entity.Name, e.Entity.Price);\n        }\n\n        <span style=\"color:Blue;\">#endregion</span>\n\n        <span style=\"color:Blue;\">#region</span> Publish-Subscribe design pattern\n\n        <span style=\"color:Blue;\">public</span> IList&lt;Stock&gt; GetAllStocks()\n        {\n            <span style=\"color:Blue;\">var</span> stocks = <span style=\"color:Blue;\">new</span> List&lt;Stock&gt;();\n\n            <span style=\"color:Blue;\">using</span> (<span style=\"color:Blue;\">var</span> sqlConnection = <span style=\"color:Blue;\">new</span> SqlConnection(_connectionString))\n            {\n                sqlConnection.Open();\n                <span style=\"color:Blue;\">using</span> (<span style=\"color:Blue;\">var</span> sqlCommand = sqlConnection.CreateCommand())\n                {\n                    sqlCommand.CommandText = <span style=\"color:#A31515;\">&quot;SELECT * FROM [Stocks]&quot;</span>;\n\n                    <span style=\"color:Blue;\">using</span> (<span style=\"color:Blue;\">var</span> sqlDataReader = sqlCommand.ExecuteReader())\n                    {\n                        <span style=\"color:Blue;\">while</span> (sqlDataReader.Read())\n                        {\n                            <span style=\"color:Blue;\">var</span> code = sqlDataReader\n                                    .GetString(sqlDataReader\n                                    .GetOrdinal(<span style=\"color:#A31515;\">&quot;Code&quot;</span>));\n                            <span style=\"color:Blue;\">var</span> name = sqlDataReader\n                                    .GetString(sqlDataReader\n                                    .GetOrdinal(<span style=\"color:#A31515;\">&quot;Name&quot;</span>));\n                            <span style=\"color:Blue;\">var</span> price = sqlDataReader\n                                    .GetDecimal(sqlDataReader\n                                    .GetOrdinal(<span style=\"color:#A31515;\">&quot;Price&quot;</span>));\n\n                            stocks.Add(<span style=\"color:Blue;\">new</span> Stock { \n                                    Code = code, \n                                    Name = name, \n                                    Price = price });\n                        }\n                    }\n                }\n            }\n\n            <span style=\"color:Blue;\">return</span> stocks;\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Subscribe()\n        {\n            <span style=\"color:Blue;\">var</span> registeredUser = OperationContext.\n                        Current\n                        .GetCallbackChannel&lt;IPriceChangeCallBack&gt;();\n            <span style=\"color:Blue;\">if</span> (!_callbackList.Contains(registeredUser))\n            {\n                _callbackList.Add(registeredUser);\n            }\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Unsubscribe()\n        {\n            <span style=\"color:Blue;\">var</span> registeredUser = OperationContext\n                        .Current\n                        .GetCallbackChannel&lt;IPriceChangeCallBack&gt;();\n            <span style=\"color:Blue;\">if</span> (_callbackList.Contains(registeredUser))\n            {\n                _callbackList.Remove(registeredUser);\n            }\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> PublishPriceChange(<span style=\"color:Blue;\">string</span> code, <span style=\"color:Blue;\">string</span> name, <span style=\"color:Blue;\">decimal</span> price)\n        {\n            _callbackList.ForEach(<span style=\"color:Blue;\">delegate</span> (IPriceChangeCallBack callback) { \n                        callback.PriceChange(code, name, price); \n            });\n        }\n\n        <span style=\"color:Blue;\">#endregion</span>\n\n        <span style=\"color:Blue;\">#region</span> IDisposable\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Dispose()\n        {\n            _sqlTableDependency.Stop();\n        }\n\n        <span style=\"color:Blue;\">#endregion</span>\n    }\n}}\r\n</pre></div><br />We set the endpoint binding as:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;?</span><span style=\"color:#A31515;\">xml</span> <span style=\"color:Red;\">version</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">1.0</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">encoding</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">utf-8</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">?&gt;</span>\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">configuration</span><span style=\"color:Blue;\">&gt;</span>\n\n  <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">connectionStrings</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">add</span> <span style=\"color:Red;\">name</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">connectionString</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">connectionString</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">data source=.;initial catalog=TableDependencyDB;integrated security=False; User ID=Test_User;Password=Casadolcecasa1</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">providerName</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">System.Data.SqlClient</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n  <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">connectionStrings</span><span style=\"color:Blue;\">&gt;</span>\n\n  <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">startup</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">supportedRuntime</span> <span style=\"color:Red;\">version</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">v4.0</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">sku</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">.NETFramework,Version=v4.6</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n  <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">startup</span><span style=\"color:Blue;\">&gt;</span>\n\n  <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">system.serviceModel</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">behaviors</span><span style=\"color:Blue;\">&gt;</span>\n      <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">serviceBehaviors</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">behavior</span><span style=\"color:Blue;\">&gt;</span>\n          <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">serviceMetadata</span> <span style=\"color:Red;\">httpGetEnabled</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">true</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n          <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">serviceDebug</span> <span style=\"color:Red;\">includeExceptionDetailInFaults</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">true</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n        <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">behavior</span><span style=\"color:Blue;\">&gt;</span>\n      <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">serviceBehaviors</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">behaviors</span><span style=\"color:Blue;\">&gt;</span>\n\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">services</span><span style=\"color:Blue;\">&gt;</span>\n      <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">service</span> <span style=\"color:Red;\">name</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">ConsoleApplicationServer.PriceChangeService.PriceTicker</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">endpoint</span> <span style=\"color:Red;\">address</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">get</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">binding</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">wsDualHttpBinding</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">contract</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">ConsoleApplicationServer.PriceChangeContracts.IPriceTicker</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n          <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">identity</span><span style=\"color:Blue;\">&gt;</span>\n            <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">dns</span> <span style=\"color:Red;\">value</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">localhost</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n          <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">identity</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">endpoint</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">endpoint</span> <span style=\"color:Red;\">address</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">mex</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">binding</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">mexHttpBinding</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">contract</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">IMetadataExchange</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">host</span><span style=\"color:Blue;\">&gt;</span>\n          <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">baseAddresses</span><span style=\"color:Blue;\">&gt;</span>\n            <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">add</span> <span style=\"color:Red;\">baseAddress</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">http://localhost:8090/PriceTickerService/</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n          <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">baseAddresses</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">host</span><span style=\"color:Blue;\">&gt;</span>\n      <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">service</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">services</span><span style=\"color:Blue;\">&gt;</span>\n  <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">system.serviceModel</span><span style=\"color:Blue;\">&gt;</span>\n\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">configuration</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div><br />And to conclude, we code the hosting part:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">class</span> Program\n    {\n        <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> Main(<span style=\"color:Blue;\">string</span>[] args)\n        {\n            <span style=\"color:Blue;\">var</span> host = <span style=\"color:Blue;\">new</span> ServiceHost(<span style=\"color:Blue;\">typeof</span>(PriceTicker));\n            host.Open();\n            Console.WriteLine($<span style=\"color:#A31515;\">&quot;Service started at {host.Description.Endpoints[0].Address}&quot;</span>);\n            Console.WriteLine(<span style=\"color:#A31515;\">&quot;Press key to stop the service.&quot;</span>);\n            Console.ReadLine();\n            host.Close();\n        }\n    }\r\n</pre></div>\n<h4>WPF client applications</h4>\rAs first step we need to create a WCF&#39;s proxy to execute the price change subscription and of course to read the initial list of stocks. This operation can be done from visual studio: run the server application and then Add a service reference typing the WCF url end point:<br /><br /><img src=\"https://www.codeplex.com/Download?ProjectName=tabledependency&amp;DownloadId=1622006\" /><br /><br />We prepare the layout as follow:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Window</span> <span style=\"color:Red;\">x:Class</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">DataGridSample.Window1</span><span style=\"color:Black;\">&quot;</span>\n        <span style=\"color:Red;\">xmlns</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:Black;\">&quot;</span>\n        <span style=\"color:Red;\">xmlns:x</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:Black;\">&quot;</span>\n        <span style=\"color:Red;\">Title</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">DataGrid Sample</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Height</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">350</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Width</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">776</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Grid</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">DataGrid</span> <span style=\"color:Red;\">Height</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">302</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Width</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">750</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">HorizontalAlignment</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Left</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Margin</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">10,10,0,0</span><span style=\"color:Black;\">&quot;</span> \n          <span style=\"color:Red;\">Name</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">McDataGrid</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">VerticalAlignment</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Top</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">RowHeight</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">30</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">ColumnWidth</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">auto</span><span style=\"color:Black;\">&quot;</span> \n                  <span style=\"color:Red;\">ColumnHeaderHeight</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">30</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">HeadersVisibility</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Column</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">AlternatingRowBackground</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Silver</span><span style=\"color:Black;\">&quot;</span>\n                  <span style=\"color:Red;\">BorderBrush</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Gray</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">BorderThickness</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">1</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">AutoGenerateColumns</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">False</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n\n            <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">DataGrid.Columns</span><span style=\"color:Blue;\">&gt;</span>\n                <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">DataGridTextColumn</span> <span style=\"color:Red;\">Header</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Code</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Binding</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding Code}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n                <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">DataGridTextColumn</span> <span style=\"color:Red;\">Header</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Name</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Binding</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding Name}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n                <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">DataGridTextColumn</span> <span style=\"color:Red;\">Header</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Price</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Binding</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding Price}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n            <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">DataGrid.Columns</span><span style=\"color:Blue;\">&gt;</span>\n\n        <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">DataGrid</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Grid</span><span style=\"color:Blue;\">&gt;</span>\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Window</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div><br />Our client application executes an initial request to WCF, just to fill its grid. After that, the application subscribe its self as listener for price change notifications. In this way, every time a stock is updated, a notification containing fresh values is received:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> Window1 : Window, IPriceTickerCallback\n    {\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">readonly</span> IList&lt;Stock&gt; _stocks;\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">readonly</span> PriceTickerClient _proxy;\n\n        <span style=\"color:Blue;\">public</span> Window1()\n        {\n            <span style=\"color:Blue;\">this</span>.InitializeComponent();\n           \n            <span style=\"color:Blue;\">var</span> instanceContext = <span style=\"color:Blue;\">new</span> InstanceContext(<span style=\"color:Blue;\">this</span>);\n            _proxy = <span style=\"color:Blue;\">new</span> PriceTickerClient(instanceContext);\n            _proxy.Subscribe();\n\n            _stocks = _proxy.GetAllStocks();\n            <span style=\"color:Blue;\">this</span>.McDataGrid.ItemsSource = _stocks;\n\n            <span style=\"color:Blue;\">this</span>.Closing += (sender, args) =&gt;\n            {\n                <span style=\"color:Blue;\">try</span>\n                {\n                    _proxy?.Unsubscribe();\n                }\n                <span style=\"color:Blue;\">catch</span>\n                {\n                    <span style=\"color:Green;\">// ignored</span>\n                }\n            };\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> PriceChange(<span style=\"color:Blue;\">string</span> code, <span style=\"color:Blue;\">string</span> name, <span style=\"color:Blue;\">decimal</span> price)\n        {\n            <span style=\"color:Blue;\">if</span> (_stocks != <span style=\"color:Blue;\">null</span>)\n            {\n                <span style=\"color:Blue;\">var</span> customerIndex = _stocks.IndexOf(_stocks.FirstOrDefault(c =&gt; c.Code == code));\n                <span style=\"color:Blue;\">if</span> (customerIndex &gt;= 0)\n                {\n                    _stocks[customerIndex] = <span style=\"color:Blue;\">new</span> Stock {Code = code, Name = name, Price = price };\n\n                    <span style=\"color:Blue;\">this</span>.McDataGrid.Dispatcher.Invoke(DispatcherPriority.Background, <span style=\"color:Blue;\">new</span> Action(() =&gt;\n                    {\n                        <span style=\"color:Blue;\">this</span>.McDataGrid.Items.Refresh();\n                    }));\n                }\n            }\n        }\n    }\r\n</pre></div><br />More info about <a href=\"https://tabledependency.codeplex.com/\">SqlTableDependency</a>.<br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2016-12-10T06:55:25.257-08:00"
}