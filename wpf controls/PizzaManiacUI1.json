{
  "ProjectName": "PizzaManiacUI1",
  "Title": "PizzaManiac 1 - Simple WPF Layout",
  "Description": "Part 1 in a series of demos to explore WPF techniques in the context of the East Bay .Net User's Group \"PizzaMania\" learning project",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h3><u>Overview</u></h3>\r\nThis is part 1 in a series of demos to accompany an <a href=\"http://www.codeplex.com/pizzamania\">East Bay .Net User&#39;s Group project</a>.  While the User&#39;s Group project takes a &quot;software-as-service&quot; approach, our series will focus primarily on the presentation layer, applying WPF to a set of non-trivial interface requirements, while paying special attention to the need for clean, maintainable, extensible code.  The project consists of an OrderEntry application, used to generate and track walk-in and phone-in customer orders, with a separate OrderMonitor application to display open pizza orders to the kitchen staff.  We are NOT trying to suggest that this particular UI (or the use of WPF, for that matter), would represent an appropriate solution for a similar set of <a href=\"http://www.micros.com/NR/rdonlyres/49A20E3E-02EC-4E0E-9986-72B0511B0DF5/0/PizzaHutUK.pdf\">real-world business requirements</a>, but it enables us to discuss many real-world project concerns while exercising a broad range of WPF features.<br />\n<ul><li><b>PizzaManiac 1:  Simplistic WPF layout to support basic application structure and behavior</b></li>\n<li><a href=\"http://www.codeplex.com/pizzamaniacUI2\">PizzaManiac 2</a>  :  Realistic feature set, real-time WCF communications, and some UI customization</li>\n<li><a href=\"http://www.codeplex.com/pizzamaniacUI3\">PizzaManiac 3</a>  :  Significant increase in complexity, to support multiple product types</li>\n<li>PizzaManiac 4 :  Robust communications and data management, .Net 3.5 updates, and a more polished UI</li></ul>\n<br /><br />In this initial demo, we are purposely tring to keep things simple, using a subset of key WPF features to generate functional UI shells for our two client applications.  Future iterations will add a much more polished appearance, support real-time WCF communication between the two client applications, and greatly extend the supported feature set -- at the cost of a significant jump in code (and markup) complexity.  For demo purposes, I&#39;ve tried to optimize the layout of the UI to enable displaying the two clients side-by-side at the most common projector resolution of 1024x768. <br /><br /><br />The OrderEntry screen displays a list of Orders and their state.  The underlying implementation uses a DataTemplate to define how an Order should be displayed, with custom ValueConverters to interpret binding information.  Definitions of colors and styles are kept separate from the markup that uses them, in ResourceDictionaries -- a habit that&#39;s critical to keeping the markup easy to understand and maintain as the application grows.<br /><br /><img src=\"/projects/PizzaManiacUI1/adb3564a-97e4-4eb4-b5e0-aad2d66cdfa1\" alt=\"OrderEntry1.png\" title=\"OrderEntry1.png\" />|<br /><br /><br />Adding or editing an Order triggers an animation which makes it appear as if the selected Order item is expanding or collapsing to expose or hide Order information for editing.  WPF makes it trivial to support edit operations by simply setting the DataContext of the edit view to refer to the currently-selected Order, but the common requirement to be able to CANCEL edit operations requires some trickery, and we use simple &quot;Clone&quot; methods on the underlying business objects to avoid polluting the UI with ugly code to track edit changes.  The UI is implemented as a set of nested UserControl-derived views, and this encapsulation of markup and supporting code helps control code volume and complexity.<br /><br /><img src=\"/projects/PizzaManiacUI1/af0c976d-bebb-440e-857c-60064a90b11a\" alt=\"OrderEntry2.png\" title=\"OrderEntry2.png\" /><br /><br /><br />This crude initial shell for our KitchenMonitor UI leverages WPF&#39;s support for control customization by replacing the standard &quot;Stacked&quot; view of list elements, with a &quot;Wrapped&quot; view.  Selecting a list item triggers a style change in the underlying DataTemplate, exposing a &quot;Close&quot; button which will cause the item to be removed from the list and, in our next demo, notifying the OrderEntry client that our Pizza is ready.  Other enhancements to this UI will include display of standard options (&quot;Xtra Cheese&quot;, &quot;Deep Dish&quot;), listing explicit ingredients for Custom pizzas, and using color to warn that we&#39;re in danger of missing our 30-minute delivery guarantee...<br /><br /><img src=\"/projects/PizzaManiacUI1/f5e4aadb-5c5c-4dff-867d-35bdab4edc55\" alt=\"OrderMonitor1.png\" title=\"OrderMonitor1.png\" /><br /><br />\n<h3><u>Alternative Interpretations</u></h3>\r\nThere are obviously many other possible approaches to supporting the required feature set with a WPF layout.  The &quot;Outlook&quot; style, left-side selection, right-side detail view is a likely alternative for the OrderEntry application, that one of the other User Group members might want to try.<br /><br /><img src=\"/projects/PizzaManiacUI1/4f214fb2-75b5-448d-b481-f28dbbab2e1f\" alt=\"SplitView2.jpg\" title=\"SplitView2.jpg\" /><br /><br /><br />Real-world &quot;Point Of Sale&quot; solutions, used at franchises like Baja Fresh, TGI Friday&#39;s, and elsewhere (check out <a href=\"http://www.micros.com/NR/rdonlyres/49A20E3E-02EC-4E0E-9986-72B0511B0DF5/0/PizzaHutUK.pdf\">the Pizza Hut case study</a>, from Micros), rely on a limited set of colors, and little animation, but have the same &quot;order entry - kitchen display&quot; dual application architecture, supporting the same basic set of features.<br /><br /> <img src=\"/projects/PizzaManiacUI1/c521d240-8fc4-4a44-9b79-8e29797f3b82\" alt=\"Micros.png\" title=\"Micros.png\" /><br /><br /><br /><i><b>A Note About our Application Title:</b>  I can&#39;t remember which member of the Windows developer community suggested Microsoft keep their pizza-related demo names consistent with the naming conventions they apply to their release products, but I thought it was funny, and I&#39;m hoping someone can remind me who to properly credit for the &quot;MeatAndCheeseDisc Management Server&quot; product name knockoff.</i><br /><br />\n<h3><u>Other projects by Andy L.</u></h3>\r\n<ul><li><a href=\"http://www.codeproject.com/KB/WPF/XSButton.aspx\">WPF Custom Controls - Without the Pain</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/CustomFrames.aspx\">WPF Non-Client Area Design Techniques For Custom Window Frames</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/AlarmBar.aspx\">An Animated AlarmBar Custom Control in WPF</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/WatermarkTextBox.aspx\">A WatermarkTextBox in 3 Lines of XAML</a></li></ul>\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,PizzaMania,XAML,C#,",
  "LastEdited": "2008-10-13T20:39:53.383-07:00"
}