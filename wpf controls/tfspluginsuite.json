{
  "ProjectName": "tfspluginsuite",
  "Title": "TFS Plugin Suite",
  "Description": "A suite of TFS Plugins that enforces process guidance on the server-side across all teams and is easily customizable to meet the needs of different orgs.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description<br>\r\n</strong>A suite of TFS Plugins that enforces process guidance on the server-side across all teams and is easily customizable to meet the needs of different orgs.</p>\r\n<p><strong><a href=\"http://www.youtube.com/watch?v=HVjZbg-yoxI\">TFS Plugin Suite Intro Video</a>&nbsp;(10 minutes)</strong><br>\r\n<br>\r\n<strong>Why use a TFS Plugin over a Checkin Policy?</strong></p>\r\n<ul>\r\n<li><strong>Ensure compliance:</strong> TFS Plugins can ensure the enforcement of policies are not overridden. Checkin policies can be overridden by the user and only a notification of noncompliance is stored. (Think of TFS Plugins as\r\n<span style=\"text-decoration:underline\">guard rails</span> and check-in policies like\r\n<span style=\"text-decoration:underline\">rumble strips</span>.) </li><li><strong>Ease of configuration:</strong> TFS Plugins can have their configuration maintained in a centralized location that spans all team projects. Checkin policies are configured for each team project which results in a higher maintenance cost.\r\n</li><li><strong>Ease of deployment:</strong> TFS Plugins are easy to&nbsp;deploy as the bits live on the TFS Server. Checkin policies are difficult to distribute to all TFS clients.\r\n</li></ul>\r\n<h1>Plugins</h1>\r\n<p><strong>Branch Merge Check-In Policy<br>\r\n</strong>Provides allowable source and target branch location. For example,&nbsp;branches from a&nbsp;&quot;main&quot; branch can be configured to only&nbsp;be created in&nbsp;a &quot;development&quot; folder.&nbsp; In our example configuration, we follow the code promotion branch\r\n model as shown below.&nbsp; This allows for branching between an &quot;integration&quot; and branches within a &quot;development&quot; folder.&nbsp; Then branches within &quot;development&quot; may be branched to a &quot;CodeReview&quot; folder, which then allows branching to a &quot;Staging&quot; folder\r\n and likewise &quot;Staging&quot; to &quot;Production&quot;.&nbsp;</p>\r\n<p>$/TeamProject<br>\r\n&nbsp; &nbsp; ☐ CodeReview<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&Xi; Release 1.0<br>\r\n&nbsp;&nbsp; &nbsp;☐ Development<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &Xi; Release 1.0<br>\r\n&nbsp;&nbsp;&nbsp; &Xi; Integration<br>\r\n&nbsp;&nbsp;&nbsp; ☐ Staging<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &Xi; Release 1.0<br>\r\n&nbsp;&nbsp;&nbsp; ☐ Production<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &Xi; Release 1.0</p>\r\n<p><strong>Change Type Policy<br>\r\n</strong>Prevents users from checking in to certain areas if the changetypes associated with each item checked in&nbsp;are not configured.&nbsp; In our example configuration, if a change type is of type branch, merge,&nbsp;rollback, delete, or undelete&nbsp;in\r\n the &quot;Integration&quot; branch or &quot;CodeReview&quot;, &quot;Staging&quot;, or &quot;Production&quot; folders, then it is blocked.</p>\r\n<p><strong>Inherit Only for new Branch Security<br>\r\n</strong>This simple policy removes explicit permissions to the newly created branch that would have otherwise been cloned from the source branch.&nbsp;</p>\r\n<p><strong>Forbidden Patterns Policy</strong><strong><br>\r\n</strong>Prevents users from checking in files with forbidden filename patterns. For example, stop your users from checking in compilation output (dlls), adding personal user settings to source control or even using programming languages that you don't support.\r\n (This is basically what's found in the Power Tools version of the client-side check-in policy except that it also allows for friendly error messages.)<br>\r\n<br>\r\n<strong>Work Item Association Policy</strong><br>\r\nEnsures that the associated work items to a checkin comply with standards that you set. The following standards can be enforced:</p>\r\n<ul>\r\n<li>Specify work item queries whose results will be the only legal work items for a check-in to be associated with. (e.g. Require an active task that is assigned to the submitter.)\r\n</li><li>Stop check-ins if the associated work items match the results from a work item query. (e.g. Deny direct assignment to work items categorized as requirements.)\r\n</li><li>Limit the work in progress so that&nbsp;each commit of code&nbsp;reflects one task.&nbsp;(e.g. Enforce that only a single task is used for each check-in.)\r\n</li><li>Ensure associated work is set to a current iteration. Iterations classified a past or future (determined by&nbsp;the iteration's start and end dates) will not be allowed.\r\n</li></ul>\r\n<p><strong>Pattern Bypass Override </strong><br>\r\nAllow for certain version control paths defined by Regex get a free pass on&nbsp;server-side check-in policies.<br>\r\n<br>\r\n<strong>Account Override</strong><br>\r\nAllow for configured groups (i.e. service accounts) to bypass server-side&nbsp;check-in policies.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "TFS,PlugIns,subscribers,team foundation,Check-in Policy,Process Guidance,Team System,Process Template,source control,vsts,work item,forbidden patterns,compliance,",
  "LastEdited": "2014-11-17T07:35:44.957-08:00"
}