{
  "ProjectName": "quickdmx",
  "Title": "Quick Dmx 512 - A Simple C# DMX 512 framework",
  "Description": "QuickDmx is a simple framework you can use to extend and quickly create scalable applications who act as Dmx 512 controllers.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>QuickDmx - A simple DMX 512 framework</b><br />QuickDmx is a simple framework you can use to extend and quickly create scalable applications who act as Dmx 512 controllers.<br /><br />DMX 512 is a protocol mainly used in showbusiness who usually allow a single console (the controller) to control lightning of the show.<br /><br />Over time, the DMX 512 protocol is now able to control more than light intensity.  It can control leds with colors, scan robots movements and a lot of accessories like smoke machines and curtains.<br /><br />The first version of QuickDmx is supporting only one type of Dmx Port, the OpenDmx USB port, who is based on the FTDI USB-to-serial chip.<br /><br />QuickDMX is designed to work with .NET 4.0 and 4.5.  Can be integrated in a Winforms, WPF or even an ASP.NET application.  Currently it&#39;s not possible to use it from Windows Store App, since they can&#39;t access USB or serial ports.<br /><br />To use it, simply reference the DLL in your project and type those lines of code :<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n\t<span style=\"color:Blue;\">var</span> port = FtdiUsbDmxPort.GetPorts().FirstOrDefault();\n\t<span style=\"color:Blue;\">if</span> (port != <span style=\"color:Blue;\">null</span>)\n\t{\n\t\t<span style=\"color:Blue;\">using</span> (<span style=\"color:Blue;\">var</span> dmxController = port.CreateController())\n\t\t{\n\t\t\t<span style=\"color:Green;\">// Send some levels to channels 1 to 3</span>\n\t\t\tdmxController[1] = 255;\n\t\t\tdmxController[2] = 180;\n\t\t\tdmxController[3] = 180;\n\t\t\tThread.Sleep(TimeSpan.FromSeconds(15));\n\t\t}\n\t}\r\n</pre></div><br />QuickDmx Features :\n<ul><li>Can control any number of Dmx ports, with the ability to match the ports according to their USB Path</li>\n<li>Fully Thread-safe</li>\n<li>Will adapt the Dmx Universe length according to data on it, to ensure the highest DMX refresh rate</li>\n<li>Can report the current refresh rate to app</li>\n<li>State of the art .NET code</li>\n<li>No unsafe code</li>\n<li>Will ensure every channels set to zero before exiting the application</li></ul>\n<br />You can use QuickDmx to build those kind of softwares :\n<ul><li>Build any custom automations (for a custom show, by example)</li>\n<li>Build a generic DMX console application</li>\n<li>Build a bridge to control DMX from another source/protocol (TCP/IP, by example)</li></ul>\n<br />Important :<br />DMX 512 is an old protocol.  Very efficient, but old too.  That means it&#39;s slow.  You should try to always allocate lower addresses first and keep addresses of higher addresses for resources you&#39;re not using very often.  If the refresh rate is too slow, you should consider to add another DMX 512 port.</div><div class=\"ClearBoth\"></div>",
  "TagList": "dmx,dmx512,lights,lightning,c#,csharp,quickdmx,Lighting Control,",
  "LastEdited": "2013-01-27T14:09:04.82-08:00"
}