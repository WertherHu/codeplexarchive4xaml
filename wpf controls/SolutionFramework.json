{
  "ProjectName": "SolutionFramework",
  "Title": "Mind Chemistry -  Solution Framework",
  "Description": "\r\nThis project involves the creation of a cloud-based application builder, with outputs including the following types of apps:\r\n\r\n•\tBasic web site with content management features via web parts.\r\n•\tAdvanced web applications following a tiered architecture using Domain Services, Entity Framework, and SQL backend.\r\n•\tSilverlight applications (including mobile) with RIA services and the above.\r\n\r\nAll application types will use the MVVM (model, view, view-model) design pattern.\r\n\r\nImmediate features will include the following:\r\n\r\n•\tA Silverlight-based designer to allow for creation of an application, its model, its view model, and the corresponding views all hooked together.\r\n•\tModels will be accessible via a TreeView.\r\n•\tAnother TreeView will allow for the creation of a site map to represent the views, its controls, and its navigation layout.\r\n•\tDrag and drop capability from the Model TreeView to the site map views will allow for automated creation of the corresponding View-Models attached to the views, the UI bindings, and the queries to the Model.\r\n•\tDesigners for the various controls on the view, including TreeViews, GridViews, Data Forms, Search Lists, Reports, etc.\r\n•\tLINQ query designers.\r\n•\tLINQ queries generated for all Model access from the ViewModels.\r\n•\tValidation designers.\r\n•\tCode generation using CodeModel and T4 templates.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><span style=\"font-size:medium\"><strong><span style=\"font-size:medium\"><strong></strong>Introducing &quot;Type-Surface&quot; Development</span></strong></span></p>\r\n<p>Type-Surface Development involves designing code as opposed to writing it.</p>\r\n<p>With type-surface development,&nbsp; you create an application initially through assembling typed abstractions called &quot;type surfaces&quot;, as opposed to traditional coding by instantiating objects and writing code logic against those objects.&nbsp; The design\r\n process doesn't necessarily do away with coding, at the same time provides much of the foundation for which to insert custom code logic - logic that focuses primarily on business rules, as opposed to the mundane wiring of common elements found in every application.</p>\r\n<p>Type-surface development is not a beginner's design technology.&nbsp; It does not result in spaghetti code, reams of meta-data XML, or guess work UI's based directly off of the database schema.&nbsp; It&nbsp;does not involve usage of&nbsp;a code workflow\r\n designer meant&nbsp;for novice users.&nbsp; &nbsp;It results in professionally generated code, well-commented and adhering to de facto coding standards.&nbsp; Code is not hidden away in binaries and made available to further enhance to achieve the desired\r\n results.&nbsp; The code generation results in an N-tiered solution, automatically wiring together the Data Layer, Business Rules Layer, Domain Services Layer, DTO's, local Data Services, the View Models, and their associated views accessible via a Unity IoC\r\n container.&nbsp;&nbsp; It also results in the creation of automated unit and integration tests.&nbsp; This methodology allows the developer to do what he/she does best, which is to solve business problems instead of doing repetitive tasks.</p>\r\n<p><a href=\"http://solutionframework.codeplex.com/wikipage?title=Type%20Surfaces\">Type Surfaces</a></p>\r\n<p><span style=\"font-size:medium\"><strong>Project Description</strong> <br>\r\n</span><br>\r\nThis project involves the creation of a cloud-based application builder, with outputs including the following types of apps:\r\n<br>\r\n<br>\r\n&bull; Basic web site with content management features via web parts. <br>\r\n&bull; Advanced web applications following a tiered architecture using Domain Services, Entity Framework, and SQL backend.\r\n<br>\r\n&bull; Silverlight applications (including mobile) with RIA services and the above.\r\n<br>\r\n<br>\r\nAll application types will use the MVVM (model, view, view-model) design pattern.&nbsp; (NOTE!!! Considering MVC3 and Razor - tell me your thoughts)<br>\r\n<br>\r\nImmediate features will include the following: <br>\r\n<br>\r\n&bull; A Silverlight-based designer to allow for creation of an application, its model, its view model, and the corresponding views all hooked together.\r\n<br>\r\n&bull; Models will be accessible via a TreeView. <br>\r\n&bull; Another TreeView will allow for the creation of a site map to represent the views, its controls, and its navigation layout.\r\n<br>\r\n&bull; Drag and drop capability from the Model TreeView to the site map views will allow for automated creation of the corresponding View-Models attached to the views, the UI bindings, and the queries to the Model.\r\n<br>\r\n&bull; Designers for the various controls on the view, including TreeViews, GridViews, Data Forms, Search Lists, Reports, etc.\r\n<br>\r\n&bull; LINQ query designers. <br>\r\n&bull; LINQ queries generated for all Model access from the ViewModels. <br>\r\n&bull; Validation designers. <br>\r\n&bull; Code generation using CodeModel and T4 templates.</p>\r\n<h1><span style=\"font-size:medium\">Summary</span></h1>\r\n<p>Solution Framework will provide the ability to fast track a software development project with primary focus on corporate web sites and shrink-wrap software products. The tool would, however, suite the needs of any smaller projects, eliminating much of the\r\n plumbing work common to most software development efforts. In fact, earlier developed aspects of the Solution Framework application will be used to create the remaining functional features of the product.</p>\r\n<p>The system will support proven SDLC methodologies and best practices and patterns. The system will target as its primary user a technically perceptive business analyst that can take goals and objects, requirements, use cases, and process flows and turn that\r\n into functional screens and reports.&nbsp; It will however serve the needs of developers and&nbsp;architects&nbsp;of all levels of skill.</p>\r\n<h1><span style=\"font-size:medium\">Project Background</span></h1>\r\n<p>Mind Chemistry Inc. is in need of a web application and product software. The requirements and design of these applications have been developed and documented. The web site itself involves over 120 pages and a back end database of about 287 tables. The web\r\n site integrates with SharePoint, Commerce Server, BizTalk, and Microsoft Dynamics. The product software is estimated to take around seven work years to complete. Several venture capitalist organizations and private investors have keen interest in the outcomes\r\n of these projects. Due to time and budget constraints, the solution decided upon is not to create the software from scratch however to create another project as &ldquo;open-source&rdquo; referred to by the code name &ldquo;Solution Framework&rdquo;. Solution\r\n Framework will be used to develop the other fore-mentioned products as well as related subsidiary products, including as a specialized social networking site and development tools for an IT consulting firm developing custom software for third party clients.</p>\r\n<h1><span style=\"font-size:medium\">Project Definition</span></h1>\r\n<p>The project involves creating a &quot;rich-client-based&quot; application builder. The end-result application will reside on the hosting site however can be developed via the rich client. Wizards and designers will be available to the end-user to create the following:</p>\r\n<ul>\r\n<li>Application Structure </li><li>Database (via Domain Model) </li><li>Queries (via LINQ) and Validation designers </li><li>Site Map and User Interface </li><li>A Visual Studio Solution that is accessible and maintainable via TFS </li><li>Continuous Integration </li><li>A compilable, runnable web application on the hosting site. </li><li>Other features such as unit and integration tests, content management, and deployment workflow (develop, test, production)\r\n</li></ul>\r\n<h2><span style=\"font-size:medium\">Goals/Objectives</span></h2>\r\n<p>1.&nbsp;&nbsp;&nbsp;&nbsp; Reduce the time required to develop a web-based application.\r\n<br>\r\n2.&nbsp;&nbsp;&nbsp;&nbsp; Provide a web-based interface in which no Visual Studio is required locally to create a basic web application.\r\n<br>\r\n3.&nbsp;&nbsp;&nbsp;&nbsp; For advanced applications, provide a boiler-plate project which can be further customized by an end user or developer\r\n<br>\r\n4.&nbsp;&nbsp;&nbsp;&nbsp; Allow a developer to open solutions, make modifications, and check back into the core via TFS.\r\n<br>\r\n5.&nbsp;&nbsp;&nbsp;&nbsp; Prevent developer modifications from being overwritten by further customizations done via the rich client.\r\n<br>\r\n6.&nbsp;&nbsp;&nbsp;&nbsp; Provide the basic wiring of a web application that is typically repetitive such as the following:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ●&nbsp; Creation of solutions, projects, IIS configurations, directory structures, common layers and tiers,\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; standard design patterns and practices, common files, assemblies, etc.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ●&nbsp; Automatic creation of site maps, menus, submenus, tabs, quick links, etc. via user specified navigation\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ●&nbsp; Wiring together of forms and pages based on user specified navigation.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ●&nbsp; Wiring of forms to domain model sources.\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ●&nbsp; Automatic creation of view models <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ●&nbsp; Wiring of UI elements to domain model objects and sources via bindings to a view-model.\r\n<br>\r\n<br>\r\n7.&nbsp;&nbsp;&nbsp;&nbsp; Allow an end-user (non-developer) to create and customize basic pages, navigation, and content items.\r\n<br>\r\n8.&nbsp;&nbsp;&nbsp;&nbsp; Avoid overlap as much as possible with already existing Microsoft technologies.</p>\r\n<p><br>\r\nFuture goals:</p>\r\n<p>1.&nbsp;&nbsp;&nbsp;&nbsp; Content management and approval workflow <br>\r\n2.&nbsp;&nbsp;&nbsp;&nbsp; Multi-environment deployment <br>\r\n3.&nbsp;&nbsp;&nbsp;&nbsp; In-place code modifications <br>\r\n4.&nbsp;&nbsp;&nbsp;&nbsp; Support of SDM documents <br>\r\n5.&nbsp;&nbsp;&nbsp;&nbsp; Full product life-cycle support <br>\r\n6.&nbsp;&nbsp;&nbsp;&nbsp; Screen prototyping and wire framing <br>\r\n7.&nbsp;&nbsp;&nbsp;&nbsp; User documentation and help authoring and support</p>\r\n<h2><span style=\"font-size:medium\">Cost/Benefit Assessment</span></h2>\r\n<p>The cost benefit is the reduced time and cost required to develop and maintain a web application. Estimated cost reduction of 75% of overall cost. Also, being a cloud-based application, reduces cost of required hardware, software licensing, installation\r\n and maintenance costs, cost of development tools, etc.</p>\r\n<h2><span style=\"font-size:medium\">End Product - Risks</span></h2>\r\n<p>Will Microsoft come out with something like this soon?&nbsp; Probably.&nbsp; We can&rsquo;t wait.</p>\r\n<h2><span style=\"font-size:medium\">Project Progress</span></h2>\r\n<p>Yes, multiple phases are going on at once.&nbsp; Want it sooner?&nbsp; .. Get involved!</p>\r\n<p><a href=\"http://download.codeplex.com/Download?ProjectName=solutionframework&DownloadId=278577\"><img title=\"image\" src=\"http://download.codeplex.com/Download?ProjectName=solutionframework&DownloadId=278578\" border=\"0\" alt=\"image\" width=\"446\" height=\"48\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border:0px\"></a></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "LINQ,code generation,web parts,Continuous Integrati,Domain Model,Domain Driven Design,SQL Server 2008,Test Driven Design,MVVM,ASP.NET 4.0,RIA Services,Cloud Computing,C# 4.0,silverlight 4,Entity Framework 4.0,RhinoMocks,T4 Templates,unity,IOC,WebParts,xaml,LINQ query providers,",
  "LastEdited": "2011-11-06T20:32:17.857-08:00"
}