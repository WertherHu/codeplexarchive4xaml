{
  "ProjectName": "wpfcomposites",
  "Title": "WPF Composites",
  "Description": "WPF Composites offers a pure C# code-behind (no XAML, no datatemplates) approach to working with WPF controls via grid-based composites.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">10/7/2014 - I&#39;ve successfully used this library to build a couple small WPF tools. The only thing I found missing so far is a native FileDialog built in WPF-CPS. Therefore, I may build one in the Contrib project.<br /><br /><i>&quot;If WPF via XAML and MVVM is heavyweight like EntityFramework is; then, maybe, WPF-CPS is like the LINQ-to-SQL of WPF Development? Nimble and lightweight, even if limited!&quot; --Anonymous</i><br /><br /><b>WPF Composites (WPF-CPS)</b> may enable a Rapid-Application-Development (RAD) approach to building Fluent WPF desktop applications and/or Windows Store Desktop Apps for Windows 8*? <br /><br />Windows Desktop Apps may likely continue to be superior for <b>synchronous, enterprise and content creation</b> apps. In counterpoint, touch-first, Modern UI WinRT apps may best serve the arena of asynchronous, individual consumer and content consumption apps. There may, indeed, be a place for Desktop apps ongoing after all?<br /><br />WPF-CPS provides an alternative, concise, C# (or IronPython or F#) code-behind approach to managing WPF UI Framework Element composites. WPF Composites are normally managed via XAML and DataTemplates but this library uses <u>ID&#39;s and X-Y Coordinates</u> instead to position elements on the screen. This is currently for synchronous apps only. It is not designed to be thread-safe. I welcome volunteers!<br /><br />It works via <b>100% code-behind</b>, zero XAML, has CSS-like Selectors, has Generators to generate multiple Framework Elements based on a single Prototype Element&#39;s properties (e.g. create a button and automatically clone it 5 times), and supports 26 different WPF controls. Just added sorting to the panels too to allow sorting Grid, StackPanel, DockPanel, WrapPanel, TreeView, and DataGrid. <br /><br />It contains four child namespaces: Observables, Selectors, Generators, and Dialogs.<br />These all reside within the comprehensive FasterWPF parent namespace.<br /><br /><i>* I haven&#39;t actually submitted a desktop app to the Windows Store using WPF Composites. I can&#39;t vouch for whether an app created with this library would readily pass or fail the stringent Windows App Certification Requirements. I am not liable for any success or failure in attempting to get your app certified. Certification details:</i><br /><a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/hh749939.aspx\">http://msdn.microsoft.com/en-us/library/windows/desktop/hh749939.aspx</a><br /><br /><b>Address Book Demo - Desktop Application</b><br /><br />Below is a screenshot of a <u>full-featured</u> demo desktop application that I wrote in F# leveraging WPF-CPS:<br /><br /><img src=\"/projects/wpfcomposites/d0ca55b1-3eaa-4931-9e6c-f1595278e4eb\" alt=\"AddressBookScreenShotSmall.png\" title=\"AddressBookScreenShotSmall.png\" /><br /><br />Feel free to try out this demo application (at your own risk, of course) here:<br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Address%20Book%20Demo&referringTitle=Home\">Address Book Demo</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Address%20Book%20Demo%20Source%20Code&referringTitle=Home\">Address Book Demo Source Code</a><br /><br /><b>WPF Composites Contrib</b><br />I recently added a supporting project to WPF Composites (WPF-CPS) to allow exploring/building out new controls and techniques which leverage this existing code library.<br /><a href=\"https://wpfcompositescontrib.codeplex.com/\">https://wpfcompositescontrib.codeplex.com/</a><br />The first contribution is an experimental <b>Squares Navigator</b>, a kind of data visualization control similar to paging. Each square represents <b>1/400th</b> of a very large dataset. In this example, I leverage a dataset of around <b>39,000 mutual fund records</b> provided by the SEC for free at data.gov here:<br />http://catalog.data.gov/dataset/investment-company-series-and-class-information<br />The second contribution is a rudimentary <b>Paging Control</b> for a DataGrid. I recently added <b>Page Recycling</b> to this example so that the Paging Control can now likely handle a few hundred records per page with relative ease. Therefore, a total dataset of 3500 records would likely be quite manageable. <br /><br /><b>LINKS</b><br /><br /><u>Demos</u><br />C# <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Demo%20App%20Screenshots&referringTitle=Home\">Demo App Screenshots</a>, also <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Hello%20World&referringTitle=Home\">Hello World</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Iron%20Python%20Example&referringTitle=Home\">Iron Python Example</a> <br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=F%20Sharp%20Example&referringTitle=Home\">F Sharp Example</a><br /><br /><u>Tutorials and Details</u><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Easy%20as%201-2-3-4-5&referringTitle=Home\">Easy as 1-2-3-4-5</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=How-To%20Examples&referringTitle=Home\">How-To Examples</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Dictionaries&referringTitle=Home\">Dictionaries</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Events&referringTitle=Home\">Events</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=CPSBaseWindow&referringTitle=Home\">CPSBaseWindow</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Implementing%20IParent&referringTitle=Home\">Implementing IParent</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Implementing%20IComposite&referringTitle=Home\">Implementing IComposite</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Sorting&referringTitle=Home\">Sorting</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Group%20Descriptions&referringTitle=Home\">Group Descriptions</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Cascading%20ListBox&referringTitle=Home\">Cascading ListBox</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Visual%20State%20Manager&referringTitle=Home\">Visual State Manager</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=WPF%20Databinding%2c%20INotifyPropertyChanged%2c%20and%20Dependency%20Properties&referringTitle=Home\">WPF Databinding, INotifyPropertyChanged, and Dependency Properties</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Geometries&referringTitle=Home\">Geometries</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Attached%20Properties&referringTitle=Home\">Attached Properties</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Animations&referringTitle=Home\">Animations</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Print%20Helper&referringTitle=Home\">Print Helper</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Image%20Flipper&referringTitle=Home\">Image Flipper</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Aero&referringTitle=Home\">Aero</a><br /><br /><u>The Four Namespaces</u><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Rx%20Observables&referringTitle=Home\">Rx Observables</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Selectors&referringTitle=Home\">Selectors</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Dialogs&referringTitle=Home\">Dialogs</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Generators%20%28Prototypes%29&referringTitle=Home\">Generators &#40;Prototypes&#41;</a><br /><br /><u>Commentary</u><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Pros%20and%20Cons&referringTitle=Home\">Pros and Cons</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=To-Do%20List&referringTitle=Home\">To-Do List</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Status%20Update&referringTitle=Home\">Status Update</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=WINRT%20Note&referringTitle=Home\">WINRT Note</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Port%20to%20Silverlight&referringTitle=Home\">Port to Silverlight</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Model-View-Presenter&referringTitle=Home\">Model-View-Presenter</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Memory%20Profile&referringTitle=Home\">Memory Profile</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Recognition&referringTitle=Home\">Recognition</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Caveats&referringTitle=Home\">Caveats</a><br /><a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Known%20Issues&referringTitle=Home\">Known Issues</a><br /><br /><b>BEGIN COMPOSITE . . .  END COMPOSITE</b><br /><br />Below is an example for creating a new composite, adding a new Rectangle to the composite, followed by adding two Textblocks underneath the Rectangle (all in column 0 if using a Grid Composite):<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nmyDockPanel.BeginComposite(myGuid)\n                .AddAnything&lt;Rectangle, DockPanel&gt;(0,0)\n                .AddText(1,0, <span style=\"color:#A31515;\">&quot;Hello World 1&quot;</span>)\n                .AddText(2,0, <span style=\"color:#A31515;\">&quot;This is text at Row 2 Column 0 in the composite&quot;</span>)\n                .EndComposite(<span style=\"color:Blue;\">new</span> DockArgs(Dock.Left));\r\n</pre></div><b>- The entire composite is then added to myDockPanel at Dock.Left.</b><br /><b>- myDockPanel is an IParent.</b><br /><b>- IComposites are added to IParent controls.</b><br /><b>- IComposites are containers for Child elements.</b><br /><br />Typically, objects retrieved from or saved to a SQL database will have a record ID associated with them, either a GUID or a basic IDENTITY number (1-...).  It follows then that composites of UI Elements on the screen may also be associated with such an ID. However, a GUID is not required as one can be created by the library automatically behind the scenes.<br /><br />This use of ID&#39;s works well for binding and retrieving sets of UI Elements. Within a single composite tied to an ID, identify X-Y Coordinates for positioning child elements within a parent container.<br /><br /><b>COMPOSITE STRUCTURE</b><br /><br />Each &quot;composite&quot; is wrapped in a Border. This is always the top-level Type of the composite. In this way, the Border may play a versatile role similar to the DIV tag on the web?<br /><br />The different container types are added at the end of a ContentControl. This ContentControl is wrapped in a Border:<br /><img src=\"/projects/wpfcomposites/7767aae5-5a77-4afd-8fa9-945bc671033b\" alt=\"Composite.png\" title=\"Composite.png\" /><br />Besides <b>BeginComposite...EndComposite</b>, there is also <b>BeginSettings...EndSettings</b> which should be defined first. These settings are stored and then applied to each item (either by Type or based on X-Y position) when BeginComposite is called. There is also support for subscribing/unsubscribing events.<br /><br /><b>ICOMPOSITE CONTAINER TYPES</b><br /><br />Currently, I support multiple containers (each implementing IComposite):<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">enum</span> ContainerType\n{\n     HorizontalPanel = 0,\n     Grid = 1,\n     WrapPanel = 2,\n     DockPanel = 3,\n     VerticalPanel = 4,\n     ContentControlPanel = 5,\n     Canvas = 6,\n     UniformGrid = 7\n}\n\n<span style=\"color:Green;\">//Define the container to use upon initializing an IParent</span>\nmyDockPanel.Initialize(100, 100, ContainerType.Grid, . . . \r\n</pre></div>The X-Y Coordinate obviously ties to Rows and Columns when using a container type of Grid, but here is a full breakdown for all the different IComposites:<br /><br /><b>Grid:</b> x-y maps to row-column<br /><b>HorizontalPanel, VerticalPanel, WrapPanel, UniformGrid;</b> x is ignored (should be 0), y maps to index of Children<br /><b>DockPanel:</b> x maps to the Dock enum by int: Left = 0, Top = 1, Right = 2, Bottom = 3; y maps to index of Children<br /><b>ContentControlPanel:</b> there is only one x-y and that is 0,0 for the single Child<br /><b>Canvas:</b> x maps to distance from Top, and y maps to distance from Left. <br />Remember that x-y coordinates must be unique per child item; i.e., you can&#39;t have two items share the same x-y coordinate since this is used as a unique key to store and retrieve by.<br /><br /><b>COMMON COMPOSITE SCENARIOS</b><br /><br />Here is a breakdown of several common Composite scenarios. It can occasionally be confusing to think about how to nest complex Composites or build up chains of IParents and Composites. Hopefully, this may be a helpful guide:<br /><img src=\"/projects/wpfcomposites/925511ae-101f-485f-94c0-4910f547d717\" alt=\"CommonCompositeScenarios.png\" title=\"CommonCompositeScenarios.png\" /><br /><br /><b>26 IPARENT CONTROLS</b><br /><br />I started with a working example of this code-behind approach via <b>extensions to the WPF ListBox</b>. I used extension methods because I didn&#39;t want developers to have to implement new custom controls.<br />This humble start has grown into fair support for 26 IParent controls:<br /><br /><b>Code Examples</b><br />Examples for all of these exist in the Demo App. Completion of the documentation here is pending . . .<br />1. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Grid%20Example&referringTitle=Home\">Grid Example</a><br />2. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Menu%20Example&referringTitle=Home\">Menu Example</a><br />3. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=ListBox%20Example&referringTitle=Home\">ListBox Example</a><br />4. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Combo%20Example&referringTitle=Home\">Combo Example</a><br />5. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=ScrollViewer%20Example&referringTitle=Home\">ScrollViewer Example</a><br />6. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Dock%20Panel%20Example&referringTitle=Home\">Dock Panel Example</a><br />7. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=StackPanel%20Example&referringTitle=Home\">StackPanel Example</a><br />8. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Wrap%20Panel%20Example&referringTitle=Home\">Wrap Panel Example</a><br />9. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=GroupBox%20Example&referringTitle=Home\">GroupBox Example</a><br />10. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=DialogBox%20%28Border%29%20Example&referringTitle=Home\">DialogBox &#40;Border&#41; Example</a><br />11. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=TabControl%20Example&referringTitle=Home\">TabControl Example</a><br />12. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Tree%20View%20Example&referringTitle=Home\">Tree View Example</a><br />13. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Window%20Example&referringTitle=Home\">Window Example</a><br />14. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=DataGrid&referringTitle=Home\">DataGrid</a><br />15. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Canvas%20Example&referringTitle=Home\">Canvas Example</a><br />16. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Expander&referringTitle=Home\">Expander</a><br />17. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=CheckBox%20Example&referringTitle=Home\">CheckBox Example</a><br />18. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=RadioButton%20Example&referringTitle=Home\">RadioButton Example</a><br />19. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=AdornerDecorator%20Example&referringTitle=Home\">AdornerDecorator Example</a> (Field Validation)<br />20. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=ToolBarTray%20and%20ToolBar%20Example&referringTitle=Home\">ToolBarTray and ToolBar Example</a><br />21. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=ContentControl3D&referringTitle=Home\">ContentControl3D</a><br />22. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=UserControl%20Example&referringTitle=Home\">UserControl Example</a><br />23. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=ListView%20Example&referringTitle=Home\">ListView Example</a><br />24. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Button%20Example&referringTitle=Home\">Button Example</a><br />25. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=ContentControl%20Example&referringTitle=Home\">ContentControl Example</a><br />26. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Popup%20Example&referringTitle=Home\">Popup Example</a><br /><br /><u>IScrollViewerStrategy Examples</u><br />1. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=TextBox%20%28Multi-Line%29%20Example&referringTitle=Home\">TextBox &#40;Multi-Line&#41; Example</a><br />2. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=RichTextBox%20Example&referringTitle=Home\">RichTextBox Example</a><br /><br /><u>Other Compatible Controls Examples</u><br /><a href=\"https://wpftoolkit.codeplex.com/\">https://wpftoolkit.codeplex.com/</a> by Xceed <a href=\"http://xceed.com\">http://xceed.com</a><br />1. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Extended%20WPF%20Toolkit%e2%84%a2%20Community%20Edition%20DataGrid&referringTitle=Home\">Extended WPF Toolkit&#8482; Community Edition DataGrid</a><br />2. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Extended%20WPF%20Toolkit%e2%84%a2%20Community%20Edition%20DecimalUpDown&referringTitle=Home\">Extended WPF Toolkit&#8482; Community Edition DecimalUpDown</a> (aka NumericTextBox for Currency and %)<br />3. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Extended%20WPF%20Toolkit%e2%84%a2%20Community%20Edition%20MaskedTextBox&referringTitle=Home\">Extended WPF Toolkit&#8482; Community Edition MaskedTextBox</a> (For fixed-length formatted strings such as phone number or social security number)<br />4. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Extended%20WPF%20Toolkit%e2%84%a2%20Community%20Edition%20MultiLineTextEditor&referringTitle=Home\">Extended WPF Toolkit&#8482; Community Edition MultiLineTextEditor</a><br />5. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=System.Windows.Controls.TextBox&referringTitle=Home\">System.Windows.Controls.TextBox</a><br />6. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=System.Windows.Controls.DatePicker&referringTitle=Home\">System.Windows.Controls.DatePicker</a><br />7. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=System.Windows.Forms.DataVisualization.Charting.Chart&referringTitle=Home\">System.Windows.Forms.DataVisualization.Charting.Chart</a><br />8. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=TextBlock%20and%20Label&referringTitle=Home\">TextBlock and Label</a><br />9. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Images&referringTitle=Home\">Images</a><br />10. <a href=\"https://wpfcomposites.codeplex.com/wikipage?title=Context%20Menu%20Example&referringTitle=Home\">Context Menu Example</a><br /><br /><b>Supported Controls</b><br />These controls are official IParents.<br /> <br /><img src=\"/projects/wpfcomposites/3cf6b246-e5a0-42f0-bd4e-a54d38624e2b\" alt=\"IParentGuide.png\" title=\"IParentGuide.png\" /><br /><br /><b>Other Compatible Controls</b><br /><br />These controls are NOT official IParents but they may not need to be; e.g., if a control is more atomic. Below are controls that are such compatible controls that are showcased in examples in the Demo App:<br /><br /><b>1. Extended WPF Toolkit™ Community Edition DataGrid</b> offered open-source <a href=\"https://wpftoolkit.codeplex.com/\">https://wpftoolkit.codeplex.com/</a> by Xceed <a href=\"http://xceed.com\">http://xceed.com</a><br /><b>2. Extended WPF Toolkit™ Community Edition DecimalUpDown</b> (Format strings include C-Currency, F-Fixed Point, G-General, N-Number, P-Percent)<br /><b>3. Extended WPF Toolkit™ Community Edition MaskedTextBox</b> (For fixed-length formatted strings such as phone number or social security number)<br /><b>4. Extended WPF Toolkit™ Community Edition MultiLineTextEditor</b><br /><b>5. System.Windows.Controls.TextBox</b><br /><b>6. System.Windows.Controls.DatePicker</b><br /><b>7. System.Windows.Forms.DataVisualization.Charting.Chart</b><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "IronPython,WPF,Extension Methods,Composite,ListBox,ScrollViewer,WPF ListBox,selectors,Generators,Fluent,F#,F Sharp,WPF Composites,UI,Windows Store,Desktop App,Desktop,Address Book,Reactive,Reactive WPF,Rx,Reactive Extensions,Observable,",
  "LastEdited": "2014-10-07T19:23:51.26-07:00"
}