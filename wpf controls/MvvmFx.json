{
  "ProjectName": "MvvmFx",
  "Title": "MVVM FX - Caliburn.Micro for Windows Forms and Wisej",
  "Description": "Caliburn.Micro and Bound controls library for Windows Forms and Wisej.",
  "MovedLink": "https://github.com/MvvmFx/MvvmFx",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Caliburn.Micro and Bound controls library for Windows Forms and Wisej.<br /><br />Updated 2016-02-16<br />\n<h1>Concluded the migration of the source code to <a href=\"http://github.com/MvvmFx/MvvmFx\">GitHub</a></h1>\r\n\n<h1>Caliburn.Micro for Windows Forms and Wisej</h1>\r\n<h4>Project statement</h4>\r\nThe MVVM FX project targets <b>Windows Forms</b> and <b>Wisej</b>.<br /><br />The project focus shifted from a collection of loose tools to a development framework based on three libraries:\n<ul><li>Caliburn.Micro MVVM framework</li>\n<li>bound controls library</li>\n<li>general purpose data binding library</li></ul>\nThe project&#39;s main goal is the MVVM framework. <b>Caliburn.Micro</b> is one of the best MVVM frameworks around (some would say it is the best). Based on a partial port from <a href=\"http://caliburnmicro.codeplex.com/SourceControl/network/forks/ddurland/CaliburnMicroWinForms\">Dan Durland</a>, the missing features were added, bit by bit.<br /><br />In order to do proper MVVM, one must use controls that support data binding. Some of the standard Windows Forms controls (or Wisej controls for that matter) don&#39;t comply with this requirement, namely TreeView. The bound controls library fills this gap.<br /><br />Due to Windows Forms binding shortcomings, a general purpose binding library is instrumental for the Caliburn.Micro port. The <b>MvvmFx.Windows</b> library is based on  <a href=\"http://truss.codeplex.com/\">Truss</a> and includes some features that aren&#39;t needed for the Caliburn.Micro port. The same source code was used to build <b>MvvmFx.DataBinding</b>, a smaller version of the library, that is stripped off of all method binding parts, like Action or Command binding. Note <i>Caliburn.Micro does not need an implementation of ICommand because it has Actions which are superior to commands in every way</i>, as Rob Eisenberg <a href=\"http://caliburnmicro.codeplex.com/discussions/241024\">puts it</a>.<br />\n<h4>Project status overview</h4>\r<ul><li>Updated to Caliburn.Micro 1.5.2+ (latest fixes before BCL port)</li>\n<li>MvvmFx.CaliburnMicro CSLA.NET adapter</li>\n<li>Targets .NET 4.0 / 4.5 / 4.5.1</li>\n<li>Fully documented source code.</li>\n<li>Stable development stage.</li>\n<li>Four (4) samples are ready, one (1) is published but still in progress.</li>\n<li>A NuGet release is bound to happen any day.</li></ul>\n\n<h4>To-do list</h4>\r<ul><li>NuGet release</li>\n<li>MvvmFx.CaliburnMicro Dialog Extensions</li>\n<li>Thorough test of BoundListView</li>\n<li>Unit tests for binding library support for Validated event</li></ul>\n\n<h4>Start using MVVM on your Windows Forms or Visual WebGUI projects now!</h4>\r<ul><li>Download the <a href=\"http://mvvmfx.codeplex.com/SourceControl/list/changesets\">source code and samples</a></li></ul>\n\n<h4>Supports complex binding paths for convention binding</h4>\r<ul><li>Read Caliburn.Micro <a href=\"http://caliburnmicro.codeplex.com/SourceControl/changeset/aac1a4e22f7e47d32dad3794e40ac765db627b90\">source control entry</a> for this feature.</li>\n<li>This feature enables the use of a Model property to maintain the data.</li>\n<li>To bind the Model property &quot;InvoideNr&quot; to a UI TextBox, just use the UI TextBox name &quot;model_InvoiceNr&quot; (case insensitive).</li>\n<li>Examples on the samples.</li></ul>\n\n<h4>Full support for Caliburn.Micro parameters</h4>\r<ul><li>$eventargs</li>\n<li>$datacontext</li>\n<li>$bindingcontext (feature for WinForms and WebGUI)</li>\n<li>$source</li>\n<li>$executioncontext</li>\n<li>$view</li>\n<li>$this</li>\n<li>$this.property for parameter binding (exclusive feature of this port)</li>\n<li>&quot;object.property&quot; for parameter binding</li>\n<li>Auto refresh of guard method &quot;.property&quot; parameters (with a little help from MvvmFx own binding library)</li>\n<li>Examples on the samples.</li></ul>\n\n<h4>DataBinding library features</h4>\r<ul><li>Bindings <i>&#224; la</i> WPF, with Converters, one way, two way, etc.</li>\n<li>Can bind to about anything using the binder systems below:\n<ul><li>INotifyPropertyChanged</li>\n<li>&lt;property&gt;Changed event (used by Windows Forms and Visual WebGUI)</li>\n<li>control Validated event (used by Windows Forms and Visual WebGUI)</li></ul></li>\n<li>Stable development stage.</li></ul>\n\n<h4>BoundControls library features</h4>\r<ul><li>Can use BindingSource or BindingList.</li>\n<li>Available controls:\n<ul><li>BoundListView (beta)</li>\n<li>BoundTreeView (stable)</li></ul></li></ul>\n\n<h2>Old news</h2>\r<ul><li>MVVM FX release 2.0.2 went NuGet on 28-10-2012. Look for &quot;mvvmfx&quot;.</li>\n<li>New on release 2.0.2\n<ul><li>MVVM Light Toolkit partial port for Windows Forms and Visual WebGUI using MVVM FX </li></ul></li></ul>\n\n<h2>Binding tools features</h2>\r<ul><li>Data binding for any CLR object (this is a kind of a fork of <a href=\"http://truss.codeplex.com/\">Truss</a>) (released under Ms-PL license)</li>\n<li>Command binding to any input event on UI objects (released under Ms-PL license)</li>\n<li>use WeakReference to avoid memory leaks</li>\n<li>DependencyObject and DependencyProperty for any CLR object, namely Form and UserControl under Windows Forms and Visual WebGUI (this is a kind of a fork of <a href=\"https://github.com/mono/mono\">GitHub mono / mono</a>) (released under the MIT license).</li></ul>\n\n<h2>Data Binding</h2>\r<ul><li>Bindings <i>&#224; la</i> WPF, with Converters, one way, two way, etc.</li>\n<li>Can bind to about anything using one of the binder systems below:\n<ul><li>INotifyPropertyChanged</li>\n<li>&lt;property&gt;Changed event (used by Windows Forms and Visual WebGUI)</li>\n<li>WPF DependencyProperty</li>\n<li>MvvmFx own DependencyProperty</li></ul></li></ul>\n\n<h2>DependencyObject and DependencyProperty</h2>\rThe requsite of this module is to make it easier to port MVVM libraries (like MVVM Light or Caliburn.Micro) and use them under WindowsForms or Visual WebGUI. The implemention isn&#39;t complete as it stops where the referred goal is achieved.<br />\n<h2>Data binding timings</h2>\rTest specification: set a single property 100.000 times\n<h4>Debug mode</h4>\r<div style=\"color:Black;background-color:White;\"><pre>\r\nMvvmFx binding\n==============\n\nBind to source INPC: 2.005 msec.\nBind to target TargetObject: 2.062 msec.\n\nBind to source XxxChanged: 2.005 msec.\nBind to target TargetObject: 2.023 msec.\n\nBind to source XxxChangedGenericArgs: 1.983 msec.\nBind to target TargetObject: 2.032 msec.\n\nBind to source SystemDependencyObject: 2.352 msec.\nBind to target TargetObject: 2.410 msec.\n\nBind to source MvvmFxDependencyObject: 3.207 msec.\nBind to target TargetObject: 3.275 msec.\n\nWPF binding\n===========\nSymmetric\n---------\nWrite to TestWpf: 6.570 msec.\nWrite to TestWpf: 6.159 msec.\n\nAsymmetric\n----------\nWrite to TestWpf: 6.517 msec.\nWrite to INPC: 8.710 msec.\r\n</pre></div>\n<h4>Release mode</h4>\r<div style=\"color:Black;background-color:White;\"><pre>\r\nMvvmFx binding\n==============\n\nBind to source INPC: 1.939 msec.\nBind to target TargetObject: 1.948 msec.\n\nBind to source XxxChanged: 1.866 msec.\nBind to target TargetObject: 1.923 msec.\n\nBind to source XxxChangedGenericArgs: 1.888 msec.\nBind to target TargetObject: 1.934 msec.\n\nBind to source SystemDependencyObject: 2.228 msec.\nBind to target TargetObject: 2.286 msec.\n\nBind to source MvvmFxDependencyObject: 2.897 msec.\nBind to target TargetObject: 2.950 msec.\n\nWPF binding\n===========\nSymmetric\n---------\nWrite to TestWpf: 6.530 msec.\nWrite to TestWpf: 6.137 msec.\n\nAsymmetric\n----------\nWrite to TestWpf: 6.508 msec.\nWrite to INPC: 8.622 msec.\r\n</pre></div><br /><b>Note</b><br />This project&#39;s scope used to be <i>Model-View-ViewModel application framework and library for WPF, Surface, and Silverlight</i>.<br /><br />I&#39;m much obliged to Sam Bourton for transferring project ownership and thus allow the use of the MVVMFX name.<br />\n<h3>To Join</h3>\rTo join this project and make your own contribution:\n<ol><li>Register on CodePlex</li>\n<li>Go to <a href=\"https://www.codeplex.com/site/users/view/tiago\">my Codeplex page</a> and send a contact.</li></ol></div><div class=\"ClearBoth\"></div>",
  "TagList": "Windows Forms,WindowsForms,Visual WebGui,WebGUI,databinding,MVVM,Caliburn.Micro,Bound Controls,WinForms,VWG,Windows.Forms,CaiburnMicro,Wisej,",
  "LastEdited": "2017-09-13T04:33:25.25-07:00"
}