{
  "ProjectName": "bbremotetranslation",
  "Title": "bb remote translation",
  "Description": "Client /Server RealTime application controlling remote translations.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">Remote translation control<br /><br />Introduction:<br />Today, we are using 2 types of online translation, this applies to all our broadcasted lessons/events/congresses etc.<br /><br />1st type is well known and based on local translation, i.e. translators are sitting in BB center and translating using locally generated video/audio sources without usage of any SW add-ons. While this type has problems of its own this document is not concentrated on this type at all.<br /><br />2nd type starting to become if not primary but important role in our day to day broadcast. Moreover, if properly developed, it can in near future simplify our broadcast solutions for congresses/ outdoor events etc. and give us fairly chip options to extend our coverage for other languages.  This is remote translation. This type currently covering Italian, Spanish, French German and partially English languages in our daily broadcast and is heavily based on SW add-ons to enable it. <br /><br />Problem starts that currently there is no complete solution for easy operation neither from server side i.e. there aren’t easy options to control/solve issues during broadcast, nor from client side i.e. it fairly complicated for each translator to set up environment required for translation. And since most of translators are not technical experts often it becomes a headache to enable/support it. Below you will find detailed problem description and suggestions for solving it.<br /><br />Problem description:<br />In order to enable remote translation we need to steadily supply to end point following streams:<br />1.\tReal time video. This requirement is coming from translators demand to see what actually happens for easing up the translation process.<br />2.\tReal time multiple audio streams. This requirement is coming from fact that we need to give option for translator to choose from available language sources best option he can translate from.<br />3.\tReceive steady real time audio stream to rebroadcast it to appropriate language stream from BB center.<br /><br />In addition there is a requirement to change remote translator audio settings to optimize it performance for broadcast or solve issues.<br /><br />Today’s solutions are not applying most of the issues and somehow just providing minimal solutions for streaming. Here is list of today’s solution and their complications:<br />1.\tThird party conference e.g. Skype. Skype is used in the past to receive audio stream from translators. Major problem that appeared we can’t rely on 3rd parties. And Skype showed that servers are tending to fall in most impropriate timing. So recently we’ve stopped from using it.<br />2.\tFlash based conference servers. Today we are using this in order to provide video &amp; audio streams to the remote translator. This technology is unfriendly in usage for our purposes, needs multiple streams for each language and is totally out of date. Of course in addition this requires additional servers (currently used Moscow servers for it) <br />3.\tTeam Talk 4. This is most promising technology allowing fairly easy to provide multiple audio and video streams. However for our purpose (since it is designed to support multiple conferences) we need to open 3 different TT4 applications with different settings each to use it for translation. In order to use it without issues requires technical knowledge and basic understanding of broadcast system. Which most of our translators not have. In addition there is no option to control client settings in order to fix problems when required on client side, thus it might take fairly long time to get connected to translator and explain him what he need to fix. Although currently usage of TT4 is messy this is our best solution for today. <br /><br />Motivation:<br />Summarizing all above we are desperately need dedicated application for remote translators to enable steady and clean broadcast. This will allow us to simplify all our translation boxes (i.e. unify solution to remote style) remove unnecessary hardware (mixers, wiring etc.) and leave only central control mixer for it. In addition to all above when having such an application (which answers our needs) all technical congresses preparations will become much easier and chipper, since there won’t be required build up translation boxes, if we could rely on our remote translators solutions. <br /><br />So having such application will tremendously ease work of everyone, clean unnecessary equipment and most important will clean or neglect our broadcast issues.<br />Solution proposal:<br />Team Talk 4 is providing its sources for $$$. Having such a basic library it will be doable in reasonable timeframe, make our application, based on functionality of TT4 client to support our needs, without requirements to design it from scratch, real time complications etc. <br /><br />Having such ability will open us a new space of solutions for broadcast requirements, easy groups visualization during broadcasts, scalable solution to add on other languages and in future will give us ability to improve quality of our broadcast for most of the scenarios we are using today.<br />Requirement Summary:<br />1.\tServer configured client<br />2.\tRunning in parallel: 2 input streams (choosed by client from server defined list) and 1 output audio stream <br />a.\tVideo stream (real timed video to screen)<br />b.\tAudio stream (source language to headphones)<br />c.\t1 output audio stream from mic to BB broadcast center. This one should to be able to connect to regular TT4 client for other reasons (e.g. Saturdays etc.)<br />3.\tShould be ability to control from server microphone level + mute/unmute <br />a.\tMay be with some delay <a href=\"https://bbremotetranslation.codeplex.com/wikipage?title=1-2%20sec&referringTitle=Home\">1-2 sec</a>(i.e. you can periodically ask for server updates)<br /><br /><br />Detailed description<br />Server configuration and control:<br />During application run, it should read from the predefined server following configuration fields:<br /><br />1.\tTT4 server and all required configuration settings to run TT4 client<br />a.\tThis should be done only on initialization phase<br />2.\tBasic usage configuration<br />a.\tThis should include microphone volume settings etc.<br />3.\tList of dedicated for translation active audio streams (input) <br />a.\tThis should be checked constantly (but not real time) and have ability to change input audio stream on each point of application run<br />4.\tList of dedicated for translation active video streams (input)<br />a.\tThis should be checked constantly (but not real time) and have ability to change input video stream on each point of application run<br />5.\tAbility to choose what output stream should be connected to.<br />a.\tThis should be done either once during application init phase by user, or have some sort of lock mechanism in order not give user ability easily change it (should not be required) since 1 application should support only 1 language.<br />6.\tAbility to change microphone level from server control application<br />a.\tThis should be done during application active phase<br />b.\tAbility to indicate application (from server side) either it using <br />i.\tlocal settings – i.e. locally defined by user<br />ii.\tserver settings – i.e. defined from server<br />iii.\tIndicate user that it working with server controlled mic. settings<br />c.\tOverride options should be cleaned on each application init phase<br />7.\tAbility to supply to server average (rms)/peak microphone level (i.e. rms/peak levels for several seconds)<br />8.\tFriendly indication to user that he/she that control room want to chat/talk with him<br />a.\tThis is not requirement for chat but for some indication of chat requirement<br />b.\tThis should have easily understandable visualization<br />9.\tIndication from user that he wants to chat with control room<br />a.\tThis is not requirement for chat but for some indication of chat requirement<br />b.\tThis should have easily understandable visualization<br /><br />Audio/video stream:<br />During application run should be provided ability to change input audio/video stream, and once (or through lock mechanism) output audio stream should be chosen. <br /><br /><br />Client UI:<br />Should be minimalistic and simple. Should include:<br />1.\tChoosing audio/video streaming<br />2.\tConstant level mic. Control<br />3.\tConstant indication of mic average(rms)/peak level (real time) <br />4.\tCurrent mic. level settings (with ability to easily change it )<br />5.\tIndication of remote/local mic. level usage<br />6.\tIndication of chat requirements (see server settings)<br />7.\tHelp button (this should give indication to control room)<br />8.\tRequired local configuration (may be done through) menu.<br />a.\tShould include all required local settings e.g. sound card settings etc.<br /><br />Server control UI:<br />Should be minimalistic and simple. Prefarably web based. Should include:<br />1.\tAbility to see all active channels.<br />a.\tIncluding mic average/peak levels<br />b.\tCurrent mic level settings (on each client)<br />2.\tAbility to indicate chat request<br />3.\tIndication of help request from client<br />4.\tAbility to override/unoverride client mic settings<br /><br />Rest of the configuration settings should be done through other application and up to programmer/broadcast to decide what UI/requirements needed to supply to server required configuration information.<br /><br /><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-04-15T03:17:31.3-07:00"
}