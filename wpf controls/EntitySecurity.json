{
  "ProjectName": "EntitySecurity",
  "Title": "Entity Security",
  "Description": "Provides an interface based approach to allowing the implementation of fine grained access control using a Reference Monitor",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br /><br />Provides an interface based approach to allowing the implementation of fine grained access control using a Reference Monitor<br /><br />Works seamlessly to provide object level protection with Entity Framework and can easily be added to other libraries or systems as required<br /><br /><b>Reference Monitor Overview</b><br /><br />A reference monitor is an approach to implement a secure system based on access control. Any system can be depicted in terms of subjects, objects, an authorization database, an audit trail, and a reference monitor, as shown in Figure 1. The reference monitor is the control center that authenticates subjects and implements and enforces the security policy for every access to an object by a subject.<br /><br />Refer to how a reference monitor works <a href=\"https://entitysecurity.codeplex.com/wikipage?title=1&referringTitle=Home\">1</a> or <a href=\"https://entitysecurity.codeplex.com/wikipage?title=2&referringTitle=Home\">2</a>.<br /><br /><img src=\"/projects/EntitySecurity/a655e080-8fea-40f2-b5f3-872c36beff11\" alt=\"reference-monitor.png\" title=\"reference-monitor.png\" /><br /><br /><b>Usage Overview</b><br /><br />Allows access via the following protections, each of which provides Read,Write,Execute,Delete<br />\n<ul><li>System</li>\n<li>Owner</li>\n<li>Group</li>\n<li>World</li></ul>\n<br />In the simplest case we call ReferenceMonitor.IsPermitted to ascertain whether a user (subject) can perform an operation to an object.<br /><br />e.g.<br /><pre>\nif (!ReferenceMonitor.IsPermitted(Zaretto.Security.Operation.Create, currentUser, currentObject))\n    throw new Exception(&quot;Cannot create a new object&quot;).\n</pre><br /><br /><b>Usage in Entity Framework</b><br /><br /><pre>\n/// &lt;summary&gt;\n/// check the permissions during save changes\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;\nprotected void Entities_SavingChanges(object sender, EventArgs e)\n{\n    var osm = ((IObjectContextAdapter)this).ObjectContext.ObjectStateManager;\n\n    foreach (var addedObject in osm.GetObjectStateEntries(System.Data.EntityState.Added))\n    {\n        ReferenceMonitor.ThrowIfNotPermitted(Operation.Create,\n                                                currentUser,\n                                                addedObject as IControlledObject);\n    }\n\n    foreach (var modifiedObject in osm.GetObjectStateEntries(System.Data.EntityState.Modified))\n    {\n        ReferenceMonitor.ThrowIfNotPermitted(Operation.Write,\n                                                currentUser,\n                                                modifiedObject as IControlledObject);\n    }\n\n    foreach (var modifiedObject in osm.GetObjectStateEntries(System.Data.EntityState.Deleted))\n    {\n        ReferenceMonitor.ThrowIfNotPermitted(Operation.Delete,\n                                                currentUser,\n                                                modifiedObject as IControlledObject);\n    }\n}\n\n/// &lt;summary&gt;\n/// check the permission of every object that is materialized - only those that implement IControlledObject will be checked\n/// as the reference monitor doesn&#39;t check null objects or subjects\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;\nprivate void ObjectMaterialized(object sender, ObjectMaterializedEventArgs e)\n{\n    ReferenceMonitor.ThrowIfNotPermitted(Operation.Read, \n                                         currentUser, \n                                         e.Entity as IControlledObject);\n}\n</pre><br /><br /><b>Usage in DataOjbects.net </b><br /><br /><pre>\n        protected override void OnGettingFieldValue(Xtensive.Orm.Model.FieldInfo field)\n        {\n            if (DisablePermissionsChecking)\n                return;\n\n            // don&#39;t check access to fields of type protection or permission- otherwise we can never use these for\n            // checking permissions of an object that we don&#39;t have access to.\n            // also shouldn&#39;t really check fields that are used inside the reference monitor\n            if (field.ValueType.FullName == &quot;DomainModel.Protection&quot;\n                || field.ValueType.FullName == &quot;DomainModel.Permission&quot;\n\t\t|| field.Name == &quot;Id&quot; \n\t\t|| field.Name == &quot;BaseGroup&quot;\n                )\n                return;\n\n            base.OnGettingFieldValue(field);\n\n            skipSecurityCheck = true;\n\n    ReferenceMonitor.ThrowIfNotPermitted(Operation.Read, \n                                         currentUser, \n                                         this as IControlledObject);\n\n            skipSecurityCheck = false;\n        }\n\n        protected override void OnSettingFieldValue(Xtensive.Orm.Model.FieldInfo field, Object value)\n        {\n            if (skipSecurityCheck || DisablePermissionsChecking)\n                return;\n\n            base.OnSettingFieldValue(field, value);\n\n            skipSecurityCheck = true;\n ReferenceMonitor.ThrowIfNotPermitted(Operation.Write,\n                                                currentUser,\n                                                this as IControlledObject);\n            skipSecurityCheck = false;\n        }\n\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2015-11-29T00:52:57.087-08:00"
}