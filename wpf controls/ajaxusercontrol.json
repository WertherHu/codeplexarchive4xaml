{
  "ProjectName": "ajaxusercontrol",
  "Title": "ASP.NET WebForms Ajax Available User Control",
  "Description": "There are several approaches to use ajax callback in ASP.NET. We can use PageMethods in WebForms (but not in User Controls), ScriptServices or implement ICallbackEventHandler for your code-behind class and even use jQuery post or get methods to call webforms or pagemethods (but not methods from your own user controls).\r\n\r\nBut they all have some disadvantages or limitations, for instance, using UserControl you canâ€™t use PageMethods in the control declaration (inside markup and scripts), using Script Services you are forced to spread the logic specific to current user control only throughout the web application despite of placing this logic inside your code-behind user control class. ICallbackEventHandler approach is more powerfull but also more difficult and more specific to current user control logic.\r\n\r\nThis project aims to allow developer to use server side methods in the client scripts more easily and more convinient without any unnecessary actions to provide serialization/deserialization parameters or results from server side (for example, using json), using only the same method signatures on the client side as they are declared on the server side code-behind class.\r\n\r\nOnly one agreement will be required - declared server side method have to return AjaxResponse or its inherited class value. Needless to say that all parameters either to call server side method or return value from method must meet the requirements to be serializable.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong></p>\r\n<p><br>\r\nThere are several approaches to use AJAX callback in ASP.NET. We can use:</p>\r\n<ul>\r\n<li>PageMethods in WebForms (but not in User Controls) </li><li>ScriptServices </li><li>Implement ICallbackEventHandler for your code-behind class </li></ul>\r\n<p style=\"padding-left:30px\">and use later jQuery post or get methods to call webforms or pagemethods (but not methods from your own user controls).</p>\r\n<p><br>\r\nBut they all have some disadvantages or limitations, for instance:</p>\r\n<ul>\r\n<li>Using UserControl you can&rsquo;t use PageMethods in the control declaration (inside markup and scripts)\r\n</li><li>Using Script Services you are forced to spread the logic specific only to current user control throughout the web application instead of placing this logic inside your code-behind class of user control.\r\n</li><li>ICallbackEventHandler approach is more powerfull but also is more difficult and more specific to current user control logic.\r\n</li></ul>\r\n<p>This project aims to allow developers to use server side methods in the client scripts more easily and in more convinient way without any unnecessary actions to provide serialization/deserialization of parameters or results from server side (for example,\r\n using json), using only the same method signatures on the client side as they are declared on the server side code-behind class.<br>\r\n<br>\r\nOnly one agreement will be required - declared server side method has to return AjaxResponse or inherited class value. Needless to say that all parameters and return value must be serializable.<br>\r\n<br>\r\n<br>\r\n<strong>OK, let me show:</strong></p>\r\n<p>Create an user control in your web application and inherit code-behind class from\r\n<strong>AjaxAvailableUserControl</strong>. In attached sample web application (look at source code), I created DemoUserControl.ascx to show you how it should look like:</p>\r\n<div style=\"border:1px solid #000080; color:#000000; font-family:'Courier New',Courier,Monospace; font-size:10pt\">\r\n<div style=\"background-color:#ffffff; max-height:300px; overflow:auto; padding:2px 5px; white-space:nowrap\">\r\n<span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">partial</span>\r\n<span style=\"color:#0000ff\">class</span> <span style=\"color:#2b91af\">DemoUserControl</span> :\r\n<span style=\"color:#2b91af\">AjaxAvailableUserControl</span></div>\r\n</div>\r\n<p>After that, you can declare some of the methods you possibly want to use on the client side. For example:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"border:1px solid #000080; color:#000000; font-family:'Courier New',Courier,Monospace; font-size:10pt\">\r\n<div style=\"background:none repeat scroll 0% 0% #ffffff; max-height:300px; overflow:auto\">\r\n<ol style=\"background:none repeat scroll 0% 0% #ffffff; margin:0pt; padding:0pt 0pt 0pt 5px; white-space:nowrap\">\r\n<li><span style=\"color:#0000ff\">public</span> <span style=\"color:#2b91af\">AjaxResponse</span> MyDemoMethod1(<span style=\"color:#0000ff\">string</span> arg1,\r\n<span style=\"color:#0000ff\">string</span> arg2, <span style=\"color:#0000ff\">int</span> arg3,\r\n<span style=\"color:#0000ff\">bool</span> arg4) </li></ol>\r\n</div>\r\n</div>\r\n<p>It's all you need to do on the server side. After that you are able to call the server side method in JavaScript code on the client side. For instance, it should look like:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"border:1px solid #000080; color:#000000; font-family:'Courier New',Courier,Monospace; font-size:10pt\">\r\n<div style=\"background:none repeat scroll 0% 0% #ffffff; max-height:300px; overflow:auto\">\r\n<ol style=\"background:none repeat scroll 0% 0% #ffffff; margin:0pt; padding:0pt 0pt 0pt 5px; white-space:nowrap\">\r\n<li>jQuery.execute(<span style=\"color:#800000\">&quot;MyDemoMethod1&quot;</span>, </li><li style=\"background:none repeat scroll 0% 0% #f3f3f3\">{ <span style=\"color:#800000\">\r\n&quot;arg1&quot;</span>: <span style=\"color:#800000\">&quot;test string 1&quot;</span>, <span style=\"color:#800000\">\r\n&quot;arg2&quot;</span>: <span style=\"color:#800000\">&quot;test strign 2&quot;</span>, <span style=\"color:#800000\">\r\n&quot;arg3&quot;</span>: 2, <span style=\"color:#800000\">&quot;arg4&quot;</span>: <span style=\"color:#0000ff\">\r\nfalse</span> }, </li><li>{ </li><li style=\"background:none repeat scroll 0% 0% #f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;onSuccess:\r\n<span style=\"color:#0000ff\">function</span> (data) { </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(<span style=\"color:#800000\">&quot;settings:&quot;</span> &#43; data.AdditionalSettings &#43;\r\n<span style=\"color:#800000\">&quot;;currentPage:&quot;</span> &#43; data.CurrentPage.toString());\r\n</li><li style=\"background:none repeat scroll 0% 0% #f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;},\r\n</li><li>&nbsp;&nbsp;&nbsp;&nbsp;onError: <span style=\"color:#0000ff\">function</span> (exception) { alert(exception); }\r\n</li><li style=\"background:none repeat scroll 0% 0% #f3f3f3\">}); </li></ol>\r\n</div>\r\n</div>\r\n<p>As you can see, on the client side we use<strong> $.execute</strong> jQuery plug-in to call the server side method by specifying the method name and the parameter names and their values. Usually, on the client side we use two handlers to process callbacks\r\n - onSuccess and onError mentioned above.</p>\r\n<p>onSuccess handler receives an parameter named &quot;data&quot; - it's just a result from server side method; in our case, this is the returned value from MyDemoMethod1 method.</p>\r\n<p>AjaxResponse class contains several useful fields to use in jQuery UI grids, but you always could inherit it and use your own custom implementation for your specific behavior.</p>\r\n<p><strong>OK, Where is it possible to apply?</strong></p>\r\n<p>There are many places to be convenient to use this approach, for example, in classical ASP.NET WebForms applications, where the significant part of projects is spread into user controls used to build eventually the final pages, or to build SharePoint Visual\r\n Web Parts which are based on User Controls, or to implement SiteCore Sublayouts which are also based on ASP.NET User Controls.</p>\r\n<p><strong><span id=\"result_box\" lang=\"en\"><span>All</span> <span>comments and suggestions are</span>\r\n<span>welcome, many thanks for your time and attention.</span></span></strong></p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px; top:736px; width:1px; height:1px; overflow:hidden\">\r\n<div style=\"border:#000080 1px solid; color:#000; font-family:'Courier New',Courier,Monospace; font-size:10pt\">\r\n<div style=\"background:#000080; color:#fff; font-family:Verdana,Tahoma,Arial,sans-serif; font-weight:bold; padding:2px 5px\">\r\nCode Snippet</div>\r\n<div style=\"background:#ddd; max-height:300px; overflow:auto\">\r\n<ol style=\"background:#ffffff; margin:0 0 0 2.5em; padding:0 0 0 5px\">\r\n<li>jQuery.execute(<span style=\"color:#800000\">&quot;MyDemoMethod1&quot;</span>, </li><li style=\"background:#f3f3f3\">{ <span style=\"color:#800000\">&quot;arg1&quot;</span>: <span style=\"color:#800000\">\r\n&quot;test string 1&quot;</span>, <span style=\"color:#800000\">&quot;arg2&quot;</span>: <span style=\"color:#800000\">\r\n&quot;test strign 2&quot;</span>, <span style=\"color:#800000\">&quot;arg3&quot;</span>: 2, <span style=\"color:#800000\">\r\n&quot;arg4&quot;</span>: <span style=\"color:#0000ff\">false</span> }, </li><li>{ </li><li style=\"background:#f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: <span style=\"color:#0000ff\">\r\nfunction</span> (data) { </li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff\">debugger</span>;\r\n</li><li style=\"background:#f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(<span style=\"color:#800000\">&quot;settings:&quot;</span> &#43; data.AdditionalSettings &#43;\r\n<span style=\"color:#800000\">&quot;;currentPage:&quot;</span> &#43; data.CurrentPage.toString());\r\n</li><li>&nbsp;&nbsp;&nbsp;&nbsp;}, </li><li style=\"background:#f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;onError: <span style=\"color:#0000ff\">\r\nfunction</span> (exception) { alert(exception); } </li><li>}); </li></ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "usercontrol,Ajax,JavaScript,ASP.NET,",
  "LastEdited": "2012-02-10T05:03:51.937-08:00"
}