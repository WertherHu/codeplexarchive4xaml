{
  "ProjectName": "boilen",
  "Title": "Boilerplate Generator",
  "Description": "The Boilerplate Generator, or \"boilen\", is a simple T4 Template file for generating boilerplate property, interface, and constructor code.",
  "MovedLink": "https://bitbucket.org/EmperorXLII/boilen",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Description</h2>\rThe Boilerplate Generator, or &#34;boilen&#34;, is a simple T4 Template file for generating boilerplate property, interface, and constructor code.<br /><br />\n<h2>Releases</h2>\rSee release notes for details.\n<ul><li><b>26 June 2012</b> - <a href=\"https://boilen.codeplex.com/releases/view/90213\">Boilen v3.5</a></li></ul>\n\n<h2>Use</h2>\r<b>Caveat:</b> Boilen was created to support a specific project and will not necessarily fit your needs.  It has not been designed for extensibility and is tailored to the features we needed.  That said, the generated code is still general purpose (we are talking about properties after all), and you&#39;re welcome to use it.<br />\n<ul><li><a href=\"#Requirements\">Requirements</a></li>\n<li><a href=\"#FirstTimeSetup\">First-time Setup</a></li>\n<li><a href=\"#BoilenEditor\">Boilen Editor</a></li>\n<li><a href=\"#UsingBoilen\">Using Boilen</a>\n<ul><li><a href=\"#AddAndImplementMembers\">Add And Implement Members</a></li>\n<li><a href=\"#DocumentationReplacements\">Documentation Replacements</a></li>\n<li><a href=\"#ConfigurationMethods\">Configuration Methods</a></li></ul></li>\n<li><a href=\"#Examples\">Examples</a></li></ul>\n<br /><a name=\"Requirements\"></a>\n<h3>Requirements</h3>\r<ul><li>Project must output a <span class=\"codeInline\">.dll</span> library.</li>\n<li>Project must target .NET or WPF (not Silverlight).\n<ul><li>The generator uses WPF features as input to generate both WPF and Silverlight code.</li></ul></li>\n<li>(helpful) Familiarity with the <a href=\"http://www.olegsych.com/2007/12/text-template-transformation-toolkit/\">T4 framework</a>.</li></ul>\n<br /><a name=\"FirstTimeSetup\"></a>\n<h3>First-time Setup</h3>\r<ul><li>(optional) Add the <span class=\"codeInline\">BoilenTemplate.zip</span> item template to your Visual Studio user directory (<span class=\"codeInline\">Visual Studio 2008\\Templates\\ItemTemplates\\Visual C#\\General</span> under the Documents directory).</li>\n<li>Add the <span class=\"codeInline\">Boilen.tt</span> file to your project.\n<ul><li>For example, create a <span class=\"codeInline\">Templates</span> directory and copy <span class=\"codeInline\">Boilen.tt</span> to it.</li></ul></li>\n<li>Add a new <span class=\"codeInline\">Includes.tt</span> file to your project.\n<ul><li>This file should contain T4 directives to include your library and any common constants referenced by your templates (see example below).</li></ul></li>\n<li>(optional) Setup your project to automatically register your assembly in the GAC, or update your Reference Paths to include the output folder.\n<ul><li>The <a href=\"#BoilenEditor\">Boilen Editor</a> can be used to edit and transform files without having to register assemblies in the GAC.</li></ul></li></ul>\n<br /><span class=\"codeInline\">Includes.tt</span><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n&lt;#@ assembly name=<span style=\"color:#A31515;\">&quot;Dependencies.For.Your.Project&quot;</span> #&gt;\n&lt;#@ assembly name=<span style=\"color:#A31515;\">&quot;Your.Project&quot;</span> #&gt;\n&lt;#@ import <span style=\"color:Blue;\">namespace</span>=<span style=\"color:#A31515;\">&quot;Your.Project.Namespaces&quot;</span> #&gt;\n&lt;#\n<span style=\"color:Green;\">//GlobalSettings.ExternalDocumentationPrefix = &quot;Documentation/&quot;;</span>\n#&gt;\n&lt;#+\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">const</span> <span style=\"color:Blue;\">string</span> CommonConstants = <span style=\"color:#A31515;\">&quot;x&quot;</span>;\n \n[TemplateType] <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">struct</span> CommonReferenceTypes { }\n#&gt;\r\n</pre></div><br /><a name=\"BoilenEditor\"></a>\n<h3>Boilen Editor</h3>\rThe Boilen Editor is a stand-alone application that allows you to open, edit, and transform <span class=\"codeInline\">.b.tt</span> template files. Any assembly references from local projects will be automatically copied when performing a transform operation, so the assemblies do not need to be registered in the GAC.<br /><br /><table><tr><th> Open Boilen Template File </th><th> Search For Boilen Template File in Selected Project </th></tr>\n<tr><td> <img src=\"/projects/boilen/4766042a-d6e6-4346-abc3-4e28a6858a11\" alt=\"Open&#32;Boilen&#32;Template&#32;File\" title=\"Open&#32;Boilen&#32;Template&#32;File\" /> </td><td> <img src=\"/projects/boilen/7cb1ee4e-b264-42d2-b97c-f82e0202d0d0\" alt=\"Search&#32;for&#32;Boilen&#32;Template&#32;File\" title=\"Search&#32;for&#32;Boilen&#32;Template&#32;File\" /> </td></tr></table><br /><br /><table><tr><th> Edit and Transform Files in the Boilen Editor </th></tr>\n<tr><td> <img src=\"/projects/boilen/b04ff169-0c2a-41ab-9f81-b2dd5ae63a25\" alt=\"Boilen&#32;Editor\" title=\"Boilen&#32;Editor\" /> </td></tr></table><br /><br /><a name=\"SnippetWindow\"></a><br /><table><tr><th> Configure and Insert Member Snippets </th></tr>\n<tr><td> <img src=\"/projects/boilen/e8cfbb37-764e-4e6a-a10e-67f31ace353e\" alt=\"Insert&#32;Member&#32;Snippet\" title=\"Insert&#32;Member&#32;Snippet\" /> </td></tr></table><br /><br /><a name=\"UsingBoilen\"></a>\n<h3>Using Boilen</h3>\r<ol><li>Add a new partial type to your project (i.e. <span class=\"codeInline\">Example.cs</span>; see example code below).</li>\n<li>Build the project, in order to get the new type into the output library.</li>\n<li>Add a new T4 template file (i.e. <span class=\"codeInline\">Examples.properties.tt</span>; see example code below).\n<ol><li><i>With <span class=\"codeInline\">BoilenTemplate.zip</span> Item Template:</i>\n<ol><li>Right-click in the Solution Explorer tool window and select <b>Add Item...</b>.</li>\n<li>Go to the <i>General</i> section and select <i>Boilen Template</i> from the <i>My Templates</i> category at the bottom.</li></ol></li>\n<li><i>Manual:</i>\n<ol><li>Add T4 directives to include <span class=\"codeInline\">Boilen.tt</span> and <span class=\"codeInline\">Includes.tt</span>.</li>\n<li>Add a T4 directive to include the namespace of the targeted type, or add the directive to the global <span class=\"codeInline\">Includes.tt</span> file, or use the full type name.</li>\n<li>Add a new T4 statement block, with a first line of <span class=\"codeInline\">Partial.Type&lt;YourType&gt;( )</span> or <span class=\"codeInline\">Partial.Type( typeof(YourType) )</span>.</li>\n<li>Add a last line of <span class=\"codeInline\">.Run( this.Write );</span></li></ol></li>\n<li>(optional) If creating a template for a class derived from a type with a non-default constructor, use the base type for <span class=\"codeInline\">YourType</span> and add a <span class=\"codeInline\">&quot;DerivedType&quot;</span> argument to the <span class=\"codeInline\">Partial.Type</span> method.</li>\n<li>Add any <span class=\"codeInline\">.Add_</span> and <span class=\"codeInline\">.Implement_</span> calls to add members to the generated type.\n<ol><li>(tip) You can use the <a href=\"#SnippetWindow\">snippet window</a> in the Boilen Editor to configure and insert <span class=\"codeInline\">.Add_</span> and <span class=\"codeInline\">.Implement_</span> calls.</li></ol></li></ol></li>\n<li>Save the template to generate the <span class=\"codeInline\">Examples.properties.cs</span> file.</li></ol>\n<br /><a name=\"AddAndImplementMembers\"></a>\n<h4><span class=\"codeInline\">.Add_</span> and <span class=\"codeInline\">.Implement_</span> Members</h4>\rAll of the <span class=\"codeInline\">.Add_</span> methods follow the same pattern, illustrated below.  The <span class=\"codeInline\">.Implement_</span> methods follow a simpler pattern, as the name and documentation are determined by the interface being implemented.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n.Add[kind]( [name], [description], [other required parameters], [optional configuration] )\r\n</pre></div><table><tr><th> Pattern </th><th> Description </th></tr>\n<tr><td> <span class=\"codeInline\">[kind]</span> </td><td> The type of property or event (i.e. Immutable Property, Dependency Property, etc). </td></tr>\n<tr><td> <span class=\"codeInline\">[name]</span> </td><td> The name of the member (i.e. <span class=\"codeInline\">&quot;count&quot;</span>). </td></tr>\n<tr><td> <span class=\"codeInline\">[description]</span> </td><td> The documentation summary for the member. </td></tr>\n<tr><td> <span class=\"codeInline\">[optional configuration]</span> </td><td> An optional callback method that allows for further customization of a type.  See below where the <span class=\"codeInline\">SetDefaultValue</span> configuration method is used to set the default value of the immutable <span class=\"codeInline\">&quot;count&quot;</span> property to <span class=\"codeInline\">11</span>. </td></tr></table><br /><br />Supported members are listed below.  See the &quot;PartialType.Implementers.cs&quot; section of the <span class=\"codeInline\">Boilen.tt</span> file for the most up to date list of supported members.<br /><br /><table><tr><th> Method </th><th> Parameters </th></tr>\n<tr><td> <span class=\"codeInline\">AddEvent&lt;THandler&gt;</span> </td><td> name, description, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">AddConstantProperty&lt;T&gt;</span> </td><td> name, description, value, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">AddImmutableProperty&lt;T&gt;</span> </td><td> name, description, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">AddMutableProperty&lt;T&gt;</span> </td><td> name, description, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">AddLazyProperty&lt;T&gt;</span> </td><td> name, description, initializerExpression, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">AddDependencyProperty&lt;T&gt;</span> </td><td> name, description, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">AddDependencyProperty</span> </td><td> existingProperty, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">AddMetadataOverride&lt;T&gt;</span> </td><td> existingProperty, defaultValue </td></tr>\n<tr><td> <span class=\"codeInline\">AddTemplatePart&lt;T&gt;</span> </td><td> name, description, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">ImplementINotifyPropertyChanged</span> </td><td> {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">ImplementIEquatable</span> </td><td> equatableProperties, {configure} </td></tr>\n<tr><td> <span class=\"codeInline\">ImplementPropertyNameConstants</span> </td><td> {configure} </td></tr></table><br /><br /><a name=\"DocumentationReplacements\"></a>\n<h4>Documentation Replacements</h4>\r<b>Note:</b> Boilen now supports importing documentation from external xml files as an alternative to the <span class=\"codeInline\">[description]</span> parameter. Set the <span class=\"codeInline\">GlobalSettings.ExternalDocumentationPrefix</span> in <span class=\"codeInline\">Includes.tt</span> to the directory where xml files are kept (i.e. <span class=\"codeInline\">&quot;Documentation\\&quot;</span>, or <span class=\"codeInline\">&quot;&quot;</span> for the current directory).<br /><br />The <span class=\"codeInline\">[description]</span> parameter supports both simple and expandable replacement values:\n<ul><li>Simple replacements change one value to another, just like the standard <span class=\"codeInline\">string.Replace</span> method.  For example, if you had a replacement from <span class=\"codeInline\">&quot;b&quot;</span> to <span class=\"codeInline\">&quot;X&quot;</span>, the documentation string <span class=\"codeInline\">&quot;abc&quot;</span> would be output as <span class=\"codeInline\">&quot;aXc&quot;</span>.  Custom simple replacements can be added to any implementer using the <span class=\"codeInline\">Replacements.Add</span> configration method.</li>\n<li>Expandable replacements can take arguments and perform a formatted replacement.  Expanders are surrounded by <span class=\"codeInline\">%</span>s.  Arguments are separated by <span class=\"codeInline\">:</span>s, and can use no-argument expanders as their value.  For example, using the standard <span class=\"codeInline\">see</span> replacement, the documentation string <span class=\"codeInline\">&quot;See %see:X.Y%.&quot;</span> would be output as <span class=\"codeInline\">&quot;See &lt;see cref=&#39;X.Y&#39;/&gt;.&quot;</span>; using the <span class=\"codeInline\">type</span> expander argument on a property of type <span class=\"codeInline\">Example</span>, the documentation string <span class=\"codeInline\">&quot;See %see:type.Y%.&quot;</span> would be output as <span class=\"codeInline\">&quot;See &lt;see cref=&#39;Example.Y&#39;/&gt;.&quot;</span>.</li></ul>\n<br />Default replacements are listed below.  See the &quot;Doc.cs&quot; section of the <span class=\"codeInline\">Boilen.tt</span> file for the most up to date list of default replacements.<br /><br /><table><tr><th> Simple </th><th> Value </th></tr>\n<tr><td> <span class=\"codeInline\">null</span> </td><td> <span class=\"codeInline\">&lt;see langword=&#39;null&#39;/&gt;</span> </td></tr>\n<tr><td> <span class=\"codeInline\">true</span> </td><td> <span class=\"codeInline\">&lt;see langword=&#39;true&#39;/&gt;</span> </td></tr>\n<tr><td> <span class=\"codeInline\">false</span> </td><td> <span class=\"codeInline\">&lt;see langword=&#39;false&#39;/&gt;</span> </td></tr></table><br /><br /><table><tr><th> Expander </th><th> Value </th></tr>\n<tr><td> <span class=\"codeInline\">name</span> </td><td> The name of the property or event (i.e. in the example below, the name of the <span class=\"codeInline\">Count</span> property is <span class=\"codeInline\">Count</span>). </td></tr>\n<tr><td> <span class=\"codeInline\">type</span> </td><td> The type of the property or event (i.e. in the example below, the type of the <span class=\"codeInline\">Count</span> property is <span class=\"codeInline\">int</span>). </td></tr>\n<tr><td> <span class=\"codeInline\">parent_type</span> </td><td> The type the property or event is declared on (i.e. in the example below, the declaring type of the <span class=\"codeInline\">Count</span> property is <span class=\"codeInline\">Example</span>). </td></tr>\n<tr><td> <span class=\"codeInline\">see</span> </td><td> <span class=\"codeInline\">&lt;see cref=&#39;{0}&#39;/&gt;</span> </td></tr>\n<tr><td> <span class=\"codeInline\">seealso</span> </td><td> <span class=\"codeInline\">&lt;seealso cref=&#39;{0}&#39;/&gt;</span> </td></tr>\n<tr><td> <span class=\"codeInline\">langword</span> </td><td> <span class=\"codeInline\">&lt;see langword=&#39;{0}&#39;/&gt;</span> </td></tr>\n<tr><td> <span class=\"codeInline\">paramref</span> </td><td> <span class=\"codeInline\">&lt;paramref name=&#39;{0}&#39;/&gt;</span> </td></tr>\n<tr><td> <span class=\"codeInline\">typeparamref</span> </td><td> <span class=\"codeInline\">&lt;typeparamref name=&#39;{0}&#39;/&gt;</span> </td></tr></table><br /><br /><a name=\"ConfigurationMethods\"></a>\n<h4>Configuration Methods</h4>\r<ul><li><b>PartialType</b>\n<ul><li><span class=\"codeInline\">SetIsSealed( bool )</span> - Sets whether the partial type is declared as <span class=\"codeInline\">sealed</span>.</li>\n<li><span class=\"codeInline\">SetConstructorAccessibility( Accessibility )</span> - Sets the accessibility of the partial type&#39;s constructor (<span class=\"codeInline\">Public</span>, <span class=\"codeInline\">Protected</span>, <span class=\"codeInline\">Internal</span>, or <span class=\"codeInline\">Private</span>).</li>\n<li><span class=\"codeInline\">AddConstructorSuppressionAttribute( string, string, string, bool )</span> - Adds a <span class=\"codeInline\">System.Diagnostics.CodeAnalysis.SuppressMessage</span> attribute with the specified category, id, and justification values to the static (<span class=\"codeInline\">true</span>) or instance (<span class=\"codeInline\">false</span>) constructor.</li>\n<li><span class=\"codeInline\">SetOverrideDefaultStyleKey( bool )</span> - Sets whether the partial type overrides the <span class=\"codeInline\">DefaultStyleKey</span> property for a control type.</li>\n<li><span class=\"codeInline\">AddNamespace( Type|string )</span> - Adds a <span class=\"codeInline\">using</span> declaration for a namespace to the generated file.</li>\n<li><span class=\"codeInline\">InsertText( InsertionPoint, string )</span> - Inserts an arbitrary piece of text at the specified location in the generated code (<span class=\"codeInline\">Usings</span>, <span class=\"codeInline\">BeforeTypeDeclaration</span>, <span class=\"codeInline\">AfterTypeDeclaration</span>, or <span class=\"codeInline\">Body</span>).</li></ul></li>\n<li><b>Implementer</b>\n<ul><li><span class=\"codeInline\">Replacements.Add( string, string )</span> - Replaces first value with the second value in the output documentation (i.e. when using documentation from an existing type, such as for an existing dependency property).</li>\n<li><span class=\"codeInline\">SetCondition( CompilationSymbol )</span> - Sets the compilation condition of the member (i.e. <span class=\"codeInline\">#if SILVERLIGHT</span>).</li>\n<li><b>Accessor</b>\n<ul><li><span class=\"codeInline\">SetAccessibility( Accessibility )</span> - Sets the accessibility of a member (<span class=\"codeInline\">Public</span>, <span class=\"codeInline\">Protected</span>, <span class=\"codeInline\">Internal</span>, or <span class=\"codeInline\">Private</span>).</li>\n<li><span class=\"codeInline\">SetCategory( string )</span> - Adds a <span class=\"codeInline\">CategoryAttribute</span> with the specified value.</li>\n<li><span class=\"codeInline\">SetInheritance( Inheritance )</span> - Sets the inheritance of a member (<span class=\"codeInline\">None</span>, <span class=\"codeInline\">Override</span>, or <span class=\"codeInline\">Virtual</span>).</li>\n<li><span class=\"codeInline\">AddAttribute( Type, [CompilationSymbol,] T )</span> - Adds an attribute with the specified positional argument (and optional conditional compilation symbol).</li>\n<li><span class=\"codeInline\">AddAttribute( Type, [CompilationSymbol,] string[], params string[] )</span> - Adds an attribute with the specified positional argument values, and the specified <span class=\"codeInline\">&quot;name=value&quot;</span> named arguments (and optional conditional compilation symbol).</li>\n<li><span class=\"codeInline\">AddSuppressionAttribute( string, string, string )</span> - Adds a <span class=\"codeInline\">System.Diagnostics.CodeAnalysis.SuppressMessage</span> attribute with the specified category, id, and justification values.</li>\n<li><b>Event</b>\n<ul><li><span class=\"codeInline\">SetEnableArgsConvenienceMethod( bool )</span> - Sets whether to create a convenience method taking the <span class=\"codeInline\">EventArgs</span> constructor arguments, in addition to the method taking the <span class=\"codeInline\">EventArgs</span> instance.</li></ul></li>\n<li><b>Property</b>\n<ul><li><span class=\"codeInline\">SetDefaultValue( T )</span> - Sets the default value of the property.</li>\n<li><span class=\"codeInline\">SetDefaultExpression( string )</span> - Sets the default value of the property, as returned by the expression (i.e. <span class=\"codeInline\">&quot;new List&lt;T&gt;()&quot;</span> or <span class=\"codeInline\">&quot;CalculatePropertyValue()&quot;</span>).</li>\n<li><span class=\"codeInline\">AddGuard( guard )</span> - Adds a validation guard to the property. See also standard guards: <span class=\"codeInline\">NotNull</span>, <span class=\"codeInline\">EnumIsDefined</span>, <span class=\"codeInline\">IsInRange</span>, <span class=\"codeInline\">Satisfies</span>.</li>\n<li><b>ConstantProperty</b></li>\n<li><b>ImmutableProperty</b>\n<ul><li><span class=\"codeInline\">SetIncludeInConstructor( bool )</span> - Sets whether to add a constructor parameter for the property. If set to <span class=\"codeInline\">false</span>, must set default value or default expression (i.e. for collection properties, commonly you initialize it with a new collection instance).</li></ul></li>\n<li><b>MutableProperty</b>\n<ul><li><span class=\"codeInline\">SetSetterAccessibility( Accessibility )</span> - Sets the accessibility of the <span class=\"codeInline\">set</span> accessor.</li>\n<li><b>LazyProperty</b></li></ul></li>\n<li><b>DependencyProperty</b>\n<ul><li><span class=\"codeInline\">SetAttached( bool )</span> - Sets whether to define an attached dependency property.</li>\n<li><span class=\"codeInline\">SetReadOnly( bool )</span> - Sets whether to define a read-only dependency property.</li>\n<li><span class=\"codeInline\">SetSetterAccessibility( Accessibility )</span> - Sets the accessibility of a read-only dependency property&#39;s <span class=\"codeInline\">set</span> accessor.</li>\n<li><span class=\"codeInline\">SetOptions( FrameworkPropertyMetadataOptions, {string} )</span> - Sets the <span class=\"codeInline\">FrameworkPropertyMetadataOptions</span> for the property, with an optional Silverlight compatibility implementer.</li>\n<li><span class=\"codeInline\">SetChanged( Changed )</span> - Sets what method signature to use for the property change handler (<span class=\"codeInline\">None</span>, <span class=\"codeInline\">Static</span>, <span class=\"codeInline\">Virtual</span>, <span class=\"codeInline\">Instance</span>, or <span class=\"codeInline\">Parameterless</span>).</li>\n<li><span class=\"codeInline\">SetCoerce( Coerce )</span> - Sets how the property should be coerced (<span class=\"codeInline\">None</span>, <span class=\"codeInline\">Custom</span>, or <span class=\"codeInline\">NonNegative</span>).</li>\n<li><span class=\"codeInline\">SetValidate( Validate )</span> - Sets how the property should be validated (<span class=\"codeInline\">None</span>, <span class=\"codeInline\">Custom</span>, <span class=\"codeInline\">Enum</span>, or <span class=\"codeInline\">NotNull</span>).</li>\n<li><b>NewDependencyProperty</b></li>\n<li><b>ExistingDependencyProperty</b></li></ul></li>\n<li><b>MetadataOverride</b>\n<ul><li><span class=\"codeInline\">SetOverrideInSilverlight( bool )</span> - Sets whether to override the default value in Silverlight, as well as overriding the dependency property metadata in WPF.</li></ul></li>\n<li><b>TemplatePart</b></li></ul></li></ul></li>\n<li><b>Interface</b>\n<ul><li><b>IEquatable</b>\n<ul><li><span class=\"codeInline\">SetFormatSelector( Funct&lt;ITarget,bool,string&gt; )</span> - Sets a seletor to choose how values of each equatable property is compared and hashed (<span class=\"codeInline\">true</span> indicating <span class=\"codeInline\">Equals</span>, and <span class=\"codeInline\">false</span> indicating <span class=\"codeInline\">GetHashCode</span>). Default selector returns <span class=\"codeInline\">&quot;EqualityComparer&lt;{2}&gt;.Default.Equals(this.{1}, {0}.{1})&quot;</span> for <span class=\"codeInline\">Equals</span> (where <span class=\"codeInline\">0</span> is the name of the comparand, <span class=\"codeInline\">1</span> is the name of the property, and <span class=\"codeInline\">2</span> is the type of the property), and returns <span class=\"codeInline\">&quot;EqualityComparer&lt;{1}&gt;.Default.GetHashCode(this.{0})&quot;</span> for <span class=\"codeInline\">GetHashCode</span> (where <span class=\"codeInline\">0</span> is the name of the property, and <span class=\"codeInline\">1</span> is the type of the property).</li>\n<li><span class=\"codeInline\">SetImplementOperators( bool )</span> - Sets whether <span class=\"codeInline\">==</span> and <span class=\"codeInline\">!=</span> operator overloads should be implemented. Default is <span class=\"codeInline\">true</span>.</li>\n<li><span class=\"codeInline\">SetEqualsImplementation( Implementation )</span> - Sets whether the <span class=\"codeInline\">Equals</span> implementation is automatic, custom, or mixed (<span class=\"codeInline\">Auto</span>, <span class=\"codeInline\">Custom</span>, or <span class=\"codeInline\">AutoAndCustom</span>).</li>\n<li><span class=\"codeInline\">SetGetHashCodeImplementation( Implementation )</span> - Sets whether the <span class=\"codeInline\">GetHashCode</span> implementation is automatic, custom, or mixed (<span class=\"codeInline\">Auto</span>, <span class=\"codeInline\">Custom</span>, or <span class=\"codeInline\">AutoAndCustom</span>).</li>\n<li><span class=\"codeInline\">SetVerifyExactType( bool )</span> - Sets whether <span class=\"codeInline\">Equals</span> will verify that the current and given objects are the same type before comparing their members. Default is <span class=\"codeInline\">false</span>.</li></ul></li>\n<li><b>INotifyPropertyChanged</b>\n<ul><li><span class=\"codeInline\">SetInheritImplementation( bool )</span> - Sets whether to prevent adding new Raise helper methods if the base type already implements <span class=\"codeInline\">INotifyPropertyChanged</span>.</li></ul></li>\n<li><b>PropertyNameConstants</b></li></ul></li></ul></li></ul>\n<br /><a name=\"Examples\"></a>\n<h3>Examples</h3>\r\n<span class=\"codeInline\">Example.cs</span><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> Example {\n    <span style=\"color:Green;\">// implementation</span>\n}\r\n</pre></div><br /><span class=\"codeInline\">Example.properties.tt</span><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n&lt;#@ include file=<span style=\"color:#A31515;\">&quot;./Templates/Boilen.tt&quot;</span> #&gt;\n&lt;#@ include file=<span style=\"color:#A31515;\">&quot;./Templates/Includes.tt&quot;</span> #&gt;\n&lt;#\nPartial.Type&lt;Example&gt;( )\n    .AddImmutableProperty&lt;<span style=\"color:Blue;\">int</span>&gt;( <span style=\"color:#A31515;\">&quot;count&quot;</span>, <span style=\"color:#A31515;\">&quot;the number of items in the %see:parent_type%&quot;</span>, p =&gt; p\n        .SetDefaultValue( 11 )\n    )\n    <span style=\"color:Green;\">// other members</span>\n    .Run( <span style=\"color:Blue;\">this</span>.Write );\n#&gt;\r\n</pre></div><br /><span class=\"codeInline\">Example.properties.cs</span><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// &lt;AUTO-GENERATED&gt;</span>\n<span style=\"color:Green;\">//   !!! WARNING !!!</span>\n<span style=\"color:Green;\">//   !!!   This code was automatically generated from a T4 template.</span>\n<span style=\"color:Green;\">//   !!!   Do not edit this file directly. Changes to this file will be lost.</span>\n<span style=\"color:Green;\">//   !!! WARNING !!!</span>\n<span style=\"color:Green;\">//   </span>\n<span style=\"color:Green;\">//      Source Template: Example.properties.tt</span>\n<span style=\"color:Green;\">//       Last Generated: 02/12/2009 14:00:28</span>\n<span style=\"color:Green;\">// &lt;/AUTO-GENERATED&gt;</span>\n\n\n<span style=\"color:Blue;\">using</span> System;\n\n\n<span style=\"color:Blue;\">namespace</span> Your.Project.Namespaces\n{\n    \n    <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> Example\n    {\n        \n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">readonly</span> <span style=\"color:Blue;\">int</span> zz_count;\n        \n        \n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Initializes a new &lt;see cref=&#39;Example&#39;/&gt; instance with the specified count.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> &lt;param name=&#39;count&#39;&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The number of items in the &lt;see cref=&#39;Example&#39;/&gt;.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/param&gt;</span>\n        <span style=\"color:Blue;\">public</span> Example(<span style=\"color:Blue;\">int</span> count)\n        {\n            <span style=\"color:Blue;\">this</span>.zz_count = count;\n            \n            <span style=\"color:Blue;\">this</span>.InitializeInstance();\n        }\n        \n        <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">void</span> InitializeInstance();\n        \n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Initializes a new &lt;see cref=&#39;Example&#39;/&gt; instance.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> Example()\n            : <span style=\"color:Blue;\">this</span>(11) { }\n        \n        \n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Gets the number of items in the &lt;see cref=&#39;Example&#39;/&gt;.</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Count\n        {\n            <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>.zz_count; }\n        }\n        \n    }\n    \n}\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "T4,C# 3.5,C#,WPF,Silverlight,code generation,C# 3.0,",
  "LastEdited": "2012-06-26T14:08:02.4-07:00"
}