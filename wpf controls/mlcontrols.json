{
  "ProjectName": "mlcontrols",
  "Title": "Multilanguage Controls",
  "Description": "Control library with a Image and ImageButton controls that get the desired image from a resource file.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\r<b>Multilanguage Controls</b> is a control library to <i>.NET Framework 2.0</i>  with two common controls used in a web application: <i>Image</i> and <i>ImageButton</i>. The key point is that each control gets the showed image from a resource file rather than get it directly through the property <i>ImageUrl</i>. <br />The idea came from the need to work with images containing words. In the common way, type some code is necessary to obtain the desired image by changing the <i>ImageUrl</i>  property to get the image with translated words according to the selected culture to each <i>Image</i> or <i>ImageButton</i> control in the project. The <b>Multilanguage Controls</b> extends <a href=\"http://msdn2.microsoft.com/en-us/library/system.web.ui.webcontrols.image(VS.80).aspx\">System.Web.UI.WebControls.Image</a>  and <a href=\"http://msdn2.microsoft.com/en-us/library/system.web.ui.webcontrols.imagebutton(VS.80).aspx\">System.Web.UI.WebControls.ImageButton</a>  encapsulating this features and uses a <a href=\"http://msdn2.microsoft.com/en-us/library/5c67a8bd(VS.80).aspx\">HTTP Handler</a>, included in the control library, to get the image from resource file according  to the selected culture and only needs that you register the handler in the web.config file and set three properties of the control.\n<h1>How to use in a Visual Studio 2005 Web Application</h1>\r<ul><li>The images needs to be added to a global resouces (.resx files located in the App_GlobalResouces ASP.NET folder). <a href=\"http://msdn2.microsoft.com/en-us/library/ms227427(VS.80).aspx\">See MSDN</a></li>\n<li>You can add the controls to the Toolbox; by this way, you can drag and drop controls on web forms. <a href=\"http://msdn2.microsoft.com/en-us/library/ms165355(VS.80).aspx\">See MSDN</a></li>\n<li>Register the HTTP Handler used by the controls in the &lt;system.web&gt; section of the web.config file:</li></ul>\n<pre>\n\t&lt;system.web&gt;\n\t\t...\n\t\t&lt;httpHandlers&gt;\n\t\t\t&lt;add verb=&quot;*&quot; path=&quot;MultilanguageControlsHandler.ashx&quot;\ntype=&quot;MultilanguageControls.Handler, MultilanguageControls&quot;/&gt;\n\t\t&lt;/httpHandlers&gt;\n\t\t\n\t&lt;/system.web&gt;\n</pre>\n<ul><li>After adding control to the page, you need to define the following three properties:</li></ul>\n<img src=\"/projects/mlcontrols/8356f85d-7661-4f9c-836a-fba5e6acc8f2\" alt=\"Properties.jpg\" title=\"Properties.jpg\" /><br /><b>ImageType</b>: indicate the <a href=\"http://msdn2.microsoft.com/en-us/library/system.drawing.imaging.imageformat(VS.80).aspx\">System.Drawing.Imaging.ImageFormat</a> of the desired image. The default value is &quot;<i>Jpeg</i>&quot;.<br /><b>ResourceKeyName</b>: The name of the resource key of the resource file containing the desired image.<br /><b>ResouceType</b>: The type of the desired resource from the App<i>GlobalResources folder (e.g., for the Images.resx, Images.en-US.resx, Images.es-ES.resx, the type is </i>Resources.Images_)<br />The <i>ImageURL</i> property only takes effect at design time. At the run time, <i>ImageUrl</i>   is defined to call the registered HTTP handler passing the values of properties above.<br /><br /><pre>\n    /// &lt;summary&gt;\n    /// Image control that obtains the desired image from a resource file\n    /// &lt;/summary&gt;\n    [ToolboxData(&quot;&lt;{0}:Image runat=server&gt;&lt;/{0}:Image&gt;&quot;)]\n    [Description(&quot;Image Control that obtains the desired image from a resource file&quot;)]\n    [Localizable(true)]\n    public class Image : System.Web.UI.WebControls.Image\n    {\n        . . .\n        /// &lt;summary&gt;\n        /// Define the ImageUrl property of the image control from \n        /// registered HTTP handler in web.config file\n        /// &lt;/summary&gt;\n        protected override void OnInit(EventArgs e)\n        {\n            base.OnInit(e); \n            \n            if (_resourceType != null &amp;&amp; _resourceKeyName != null)\n            {\n                this.ImageUrl = string.Format(\n&quot;MultilanguageControlsHandler.ashx?culture={0}&amp;resource={1}&amp;key={2}&amp;format={3}&quot;, \nThread.CurrentThread.CurrentUICulture.Name, _resourceType, _resourceKeyName, \n_imageType.ToString());\n            }\n        }\n\n        . . .\n\n    }\n</pre><br />The handler gets the image from resource file that corresponds to the <a href=\"http://msdn2.microsoft.com/en-us/library/system.threading.thread.currentuiculture(VS.80).aspx\">System.Threading.Thread.CurrentThread.CurrentUICulture</a> passed by the control and returns the image to the control.<br /><br /><pre>\n    public class Handler : IHttpHandler\n    {\n        private string _culture, _resourceType, _key, _format;\n        private MemoryStream _imageStream;\n\n        /// &lt;summary&gt;\n        /// Implements the IHttpHandler.ProcessRequest\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;context&quot;&gt;The current execution HTTP process&lt;/param&gt;\n        public void ProcessRequest(HttpContext context)\n        {\n            GetParameters(context);\n            SaveImage();\n\n            //Return the image to the control\n            context.Response.ContentType = \n                string.Format(&quot;image/{0}&quot;, _format.ToString());\n            context.Response.BinaryWrite(_imageStream.GetBuffer());\n        }\n\n        /// &lt;summary&gt;\n        /// Obtain parameters passed by the image control\n        /// &lt;/summary&gt;\n        private void GetParameters(HttpContext context)\n        {\n            _culture = context.Request.QueryString[&quot;culture&quot;];\n            _resourceType = context.Request.QueryString[&quot;resource&quot;];\n            _key = context.Request.QueryString[&quot;key&quot;];\n            _format = context.Request.QueryString[&quot;format&quot;];\n        }\n\n        /// &lt;summary&gt;\n        /// Get the image from the resource file and save it on a memory stream\n        /// &lt;/summary&gt;\n        private void SaveImage()\n        {\n            //Get the image from de resource file\n            ResourceManager rm = \n                new ResourceManager(_resourceType, GetResourceAssembly());\n            Bitmap bmp = (Bitmap)rm.GetObject(_key, new CultureInfo(_culture));\n\n            //Save the image in a memory stream\n            _imageStream = new MemoryStream();\n            bmp.Save(_imageStream, GetImageFormat());\n        }\n\n        /// &lt;summary&gt;\n        /// Implements the IHttpHandler.IsReusable\n        /// &lt;/summary&gt;\n        public bool IsReusable\n        {\n            get\n            {\n                return false;\n            }\n        }\n\n        /// &lt;summary&gt;\n        /// Find and return the satelite assembly with the resources\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;System.Reflection.Assembly object&lt;/returns&gt;\n        private Assembly GetResourceAssembly()\n        {\n            Assembly assembly = null;\n\n            foreach (Assembly a in AppDomain.CurrentDomain.GetAssemblies())\n            {\n                if (a.FullName.IndexOf(&quot;App_GlobalResources&quot;) &gt; -1)\n                {\n                    assembly = a;\n                    break;\n                }\n            }\n\n            return assembly;\n        }\n\n        /// &lt;summary&gt;\n        /// Find the specified image format in the control&#39;s ImageFormat property\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;ImageFormat object&lt;/returns&gt;\n        private ImageFormat GetImageFormat()\n        {\n            ImageFormat imgFormat = ImageFormat.Jpeg;\n\n            foreach (PropertyInfo p in typeof(ImageFormat).GetProperties())\n            {\n                if (p.Name == _format)\n                {\n                    imgFormat = (ImageFormat)p.GetValue(null, null);\n                    break;\n                }\n            }\n\n            return imgFormat;\n        }\n    }\n</pre><br />If you not set the <b>ResourceKeyName</b> and <b>ResouceType</b> properties, the controls will act as the base controls.\n<h1>Test Web Site</h1>\rThe sample web site project use three specified cultures: <br />Portuguese(Brazil), the default culture, English (United States) and Spanish (Spain).<br />To select a culture, the project uses the <b>SelectCulture.ascx</b> user control. To load the selected culture, the project uses the <b>PageBase</b> class at the <b>App_Code/PageBase.cs</b>.\n<h2>App_Code/PageBase.cs</h2>\rThe <b>PageBase class</b> is used as the base class to all the web forms that use the multilanguage features. The <b>PageBase</b> class override the <a href=\"http://msdn2.microsoft.com/en-us/library/system.web.ui.page.initializeculture(VS.80).aspx\">System.Web.UI.Page.InitializeCulture</a> method to get the current culture stored in the session (managed by the static property <b>SelectedCulture</b>) and set this culture as the culture for the current thread. See more about <a href=\"http://msdn2.microsoft.com/en-us/library/system.threading.thread.currentculture(VS.80).aspx\">CurrentCulture</a> and <a href=\"http://msdn2.microsoft.com/en-us/library/system.threading.thread.currentuiculture(VS.80).aspx\">CurrentUICulture</a><br /><br /><pre>\npublic class PageBase : System.Web.UI.Page\n{\n    /// &lt;summary&gt;\n    /// Initialize de culture choosen by the user\n    /// &lt;/summary&gt;\n    protected override void InitializeCulture()\n    {\n        if (!IsPostBack)\n        {\n            DefineCulture();\n            base.InitializeCulture();\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Set the culture choosen by the user\n    /// &lt;/summary&gt;\n    /// &lt;remarks&gt;\n    /// If the culture was not choosen, the default language \n    //// from the user&#39;s browser is defined\n    /// &lt;/remarks&gt;\n    public static void DefineCulture()\n    {\n        if (SelectedCulture == null)\n        {\n            SelectedCulture = \n                new CultureInfo(HttpContext.Current.Request.UserLanguages[0]);\n        }\n\n        System.Threading.Thread.CurrentThread.CurrentCulture = SelectedCulture;\n        System.Threading.Thread.CurrentThread.CurrentUICulture = SelectedCulture;\n    }\n\n    /// &lt;summary&gt;\n    /// Get or set the culture to use\n    /// &lt;/summary&gt;\n    public static CultureInfo SelectedCulture\n    {\n        get\n        {\n            return (CultureInfo)HttpContext.Current.Session[&quot;SelectedCulture&quot;];\n        }\n        set\n        {\n            HttpContext.Current.Session[&quot;SelectedCulture&quot;] = value;\n        }\n    }\n}\n</pre>\n<h2>SelectCulture.ascx</h2>\rThe user control have one flag corresponding to each culture of the project.<br />When the user clicks a image, a new corresponding <a href=\"http://msdn2.microsoft.com/en-us/library/system.globalization.cultureinfo(VS.80).aspx\">System.Globalization.CultureInfo</a> is created and stored in the <b>PageBase.SelectedCulture</b> property. Thus, the control redirects the current page to itself to load the new selected culture.<br /><br /><pre>\npublic partial class SelectCulture : System.Web.UI.UserControl\n{\n     . . . \n\n    protected void imgUS_Click(object sender, ImageClickEventArgs e)\n    {\n        ChangeCulture(new CultureInfo(&quot;en-US&quot;));\n    }\n\n    /// &lt;summary&gt;\n    /// Change the culture and redirects to the same \n    /// page to initialize the new choosen culture\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;culture&quot;&gt;\n    /// CultureInfo object that represents the choosen culture\n    /// &lt;/param&gt;\n    private void ChangeCulture(CultureInfo culture)\n    {\n        PageBase.SelectedCulture = culture;\n        Response.Redirect(Request.UrlReferrer.ToString());\n    }\n}\n</pre>\n<h2>Default.aspx</h2>\rThe <b>Default.aspx</b> is the sample page that uses the <b>PageBase</b> class as the base class and the <b>SelectCulture.ascx</b> user control to select the culture. The <b>Image1</b> control is a <b>MultilanguageControl</b> that shows the image <i>flag.gif</i>  from Images.resx, Images.en-US.resx or Images.es-ES.resx, according the selected culture.<br />The other controls use <a href=\"http://quickstarts.asp.net/QuickStartv20/aspnet/doc/localization/localization.aspx#resources\">Local Resources</a> to show the contents.</div><div class=\"ClearBoth\"></div>",
  "TagList": "resource,Image,Multilanguage,ImageButton,Visual Studio,.NET,",
  "LastEdited": "2010-05-11T12:50:54.01-07:00"
}