{
  "ProjectName": "propertygridce",
  "Title": "PropertyGridCE - Mobile version of PropertyGrid",
  "Description": "A useful WinForms control that mimics most of the PropertyGrid functionality in the .NET Compact Framework",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />A useful WinForms control that mimics most of the PropertyGrid functionality in the .NET Compact Framework<br /><br /><img src=\"/projects/propertygridce/04bde60c-0fc7-4d6d-90f1-3f4b54f2eaea\" alt=\"Screenshot_PropertyGridCE.png\" title=\"Screenshot_PropertyGridCE.png\" /><br />\n<h2>Introduction</h2>\rI have used the PropertyGrid control in some projects and have concluded that is extremely useful, flexible, and professional looking. But unfortunately, it is not available for the .NET Compact Framework. I guess the reason is that it is too heavy to provide all its functionality in a constrained environment like Windows CE. PropertyGrid will require the support of lots of classes, interfaces, and attributes.<br />Since I needed to develop a Pocket PC version of my desktop software, I had to reproduce all the functionality of the PropertyGrid and related elements, matching the name of the real .NET equivalents. I did it with success, but the resulting source code didn&#39;t satisfy me at all because it was too complex.<br />Based on this experience, I developed this new implementation of my control; this time, I ignored the name-compatibility requirements and produced a simpler solution, but keeping most of the great PropertyGrid features, as I will explain further.<br />\n<h2>Basic Usage - Person Class</h2>\rThe supplied demo project will allow you to test all the PropertyGridCE capabilities. There are three classes defined in DemoClasses.cs, with different features, like custom attributes. Here is the declaration of the first and simplest one:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> Person\n{\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">enum</span> Gender { Male, Female }\n\n    <span style=\"color:Blue;\">#region</span> private fields\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span>[] _Names = <span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">string</span>[3];\n    <span style=\"color:Blue;\">private</span> Gender _Gender;\n    <span style=\"color:Blue;\">private</span> DateTime _BirthDate;\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">int</span> _Income;\n    <span style=\"color:Blue;\">private</span> System.Guid _Guid;\n    <span style=\"color:Blue;\">#endregion</span>\n\n    <span style=\"color:Blue;\">#region</span> Public Properties\n    [Category(<span style=\"color:#A31515;\">&quot;Name&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;First Name&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> FirstName\n    {\n        <span style=\"color:Blue;\">set</span> { _Names[0] = value; }\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Names[0]; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Name&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;Mid Name&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> MidName\n    {\n        <span style=\"color:Blue;\">set</span> { _Names[1] = value; }\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Names[1]; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Name&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;Last Name&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> LastName\n    {\n        <span style=\"color:Blue;\">set</span> { _Names[2] = value; }\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Names[2]; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Characteristics&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;Gender&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> Gender PersonGender\n    {\n        <span style=\"color:Blue;\">set</span> { _Gender = value; }\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Gender; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Characteristics&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;Birth Date&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> DateTime BirthDate\n    {\n        <span style=\"color:Blue;\">set</span> { _BirthDate = value; }\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _BirthDate; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Characteristics&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Income\n    {\n        <span style=\"color:Blue;\">set</span> { _Income = value; }\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Income; }\n    }   \n    <span style=\"color:Green;\">// multiple attributes at the same line</span>\n    [DisplayName(<span style=\"color:#A31515;\">&quot;GUID&quot;</span>), ReadOnly(<span style=\"color:Blue;\">true</span>), ParenthesizePropertyName(<span style=\"color:Blue;\">true</span>)]   \n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> GuidStr\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Guid.ToString(); }\n    }\n    <span style=\"color:Green;\">// this property will not be displayed</span>\n    [Browsable(<span style=\"color:Blue;\">false</span>)]  \n    <span style=\"color:Blue;\">public</span> System.Guid Guid\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Guid; }\n    }\n    <span style=\"color:Blue;\">#endregion</span>\n\n    <span style=\"color:Blue;\">public</span> Person()\n    {\n        <span style=\"color:Green;\">// default values</span>\n        <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &gt; 3; i++)\n            _Names[i] = <span style=\"color:#A31515;\">&quot;&quot;</span>;\n        _Gender = Gender.Male;\n        _Guid = System.Guid.NewGuid();\n    }\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">string</span> ToString()\n    {\n        <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">string</span>.Format(<span style=\"color:#A31515;\">&quot;{0} {1} {2}&quot;</span>, FirstName, MidName, LastName).Trim().Replace(<span style=\"color:#A31515;\">&quot;  &quot;</span>, <span style=\"color:#A31515;\">&quot; &quot;</span>);\n    }\n}\r\n</pre></div><img src=\"/projects/propertygridce/3a4a4a23-0c5a-4721-b94d-c3829ee3c447\" alt=\"1Person.png\" title=\"1Person.png\" />      <img src=\"/projects/propertygridce/c6044df4-51b5-409b-9081-d644bdfcc04b\" alt=\"1PersonProps.png\" title=\"1PersonProps.png\" /><br /><br />Notice that there are two fields (private) and properties (public) declared with similar names. The control will show just the properties, not the fields. If you are using C# 3.0, you can avoid declaring the underlying fields by using auto-implemented properties<br />To show the properties of a Person object is quiet simple; just assign it to the control&#39;s SelectedObject property, as shown:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nPropertyGrid1.SelectedObject = thePerson;\n<span style=\"color:Green;\">//&#39;thePerson&#39; is an object of class Person</span>\r\n</pre></div>\n<h2>Basic Attributes</h2>\rIn the Person class implementation, you will notice there are some properties that have attributes (those with square brackets); they won&#39;t have any effect on your class behaviour, but will do with the property grid. These attributes are similar to those implemented in the desktop .NET Framework. Let&#39;s see them in detail.\n<ul><li>Category: Lets you specify a category group for the affected property. A category appears by default at the property grid with a gray background, as you can see in the first screenshot. If the property doesn&#39;t have a Category attribute, it will belong to a blank category group, as with the GUID property in the previous screenshot. It is recommended to always specify a category for each property.</li>\n<li>DisplayName: Will be useful when you want to display a property name different from the real one. Usually, it is used when you have to increment readability with white spaces, or abbreviate the name.</li>\n<li>ReadOnly: When set to true, will prevent the property from being edited; it will be just shown in the property grid.</li>\n<li>ParenthesizePropertyName: When set to true, will display the names between parenthesis. This is used to enhance some important properties, and force them to show at the beginning of a category group.</li>\n<li>Browsable: When set to false, the property will not be shown. It is useful when you have a property that you don&#39;t want to show at all, like the GUID property in the first example.</li></ul>\nAll these attributes are declared in the System.ComponentModel namespace, to keep some degree of compatibility with the original PropertyGrid control.<br />\n<h2>Custom Properties - Vehicle Class</h2>\rWhile the simplest implementation of PropertyGridCE exposes all the properties of a class (with the exception of those with the Browsable attribute set to false), the ICustomProperties interface will allow to conditionally expose some properties. There are a few steps to accomplish this, as in the following example:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// Sample class with custom properties</span>\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> Vehicle : \n    PropertyGridCE.ICustomProperties\n{\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">enum</span> CarType { Sedan, StationWagon, Coupe, Roadster, Van, Pickup, Truck }\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">enum</span> CarBrand { Acura, Audi, BMW, Citroen, Ford, GMC, Honda, Lexus, Mercedes, \n         Mitsubishi, Nissan, Porshe, Suzuki, Toyota, VW, Volvo }\n\n    <span style=\"color:Blue;\">#region</span> Private fields\n    <span style=\"color:Blue;\">private</span> CarBrand _Brand;\n    <span style=\"color:Blue;\">private</span> CarType _CarType;\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span> _Model;\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">int</span> _Year;\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span> _Plate;\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">int</span> _Seats;\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">int</span> _Volume;\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">int</span> _Payload;\n    <span style=\"color:Blue;\">#endregion</span>\n\n    <span style=\"color:Blue;\">#region</span> Public Properties\n    [Category(<span style=\"color:#A31515;\">&quot;Classification&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> CarBrand Brand\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Brand; }\n        <span style=\"color:Blue;\">set</span> { _Brand = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Classification&quot;</span>)]\n    [ParenthesizePropertyName(<span style=\"color:Blue;\">true</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;Type&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> CarType TypeOfCar\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _CarType; }\n        <span style=\"color:Blue;\">set</span> { _CarType = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Classification&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Model\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Model; }\n        <span style=\"color:Blue;\">set</span> { _Model = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Identification&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;Manuf.Year&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Year\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Year; }\n        <span style=\"color:Blue;\">set</span> { _Year = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Identification&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;License Plate&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Plate\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Plate; }\n        <span style=\"color:Blue;\">set</span> { _Plate = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Capacity&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Seats\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Seats; }\n        <span style=\"color:Blue;\">set</span> { _Seats = value; }\n    }\n    <span style=\"color:Green;\">// Just for Pickup and Truck</span>\n    [Category(<span style=\"color:#A31515;\">&quot;Capacity&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;Volume (ft3)&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Volume\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Volume; }\n        <span style=\"color:Blue;\">set</span> { _Volume = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Capacity&quot;</span>)]\n    [DisplayName(<span style=\"color:#A31515;\">&quot;Payload (pnd)&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Payload\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Payload; }\n        <span style=\"color:Blue;\">set</span> { _Payload = value; }\n    }\n    <span style=\"color:Blue;\">#endregion</span>\n\n    <span style=\"color:Blue;\">#region</span> ICustomProperties Members\n    PropertyInfo[] PropertyGridCE.ICustomProperties.GetProperties()\n    {\n        List&lt;PropertyInfo&gt; props = \n        <span style=\"color:Blue;\">new</span> List&lt;PropertyInfo&gt;();\n\n        <span style=\"color:Blue;\">foreach</span> (System.Reflection.PropertyInfo info <span style=\"color:Blue;\">in</span> GetType().GetProperties())\n        {\n            <span style=\"color:Blue;\">if</span> ((info.Name == <span style=\"color:#A31515;\">&quot;Volume&quot;</span> || info.Name == <span style=\"color:#A31515;\">&quot;Payload&quot;</span>) &amp;&amp; \n                (<span style=\"color:Blue;\">this</span>._CarType != CarType.Pickup &amp;&amp; <span style=\"color:Blue;\">this</span>._CarType != CarType.Truck))\n                     <span style=\"color:Blue;\">continue</span>;\n\n            props.Add(info);\n        }\n        <span style=\"color:Blue;\">return</span> props.ToArray();\n    }\n    <span style=\"color:Blue;\">#endregion</span>\n}\r\n</pre></div><br /><img src=\"/projects/propertygridce/c3cf673f-6880-43cc-9fe7-5961f4ba94f0\" alt=\"2Vehicle.png\" title=\"2Vehicle.png\" />   <img src=\"/projects/propertygridce/d5768b36-b4c8-46c1-b295-985b9f97fc3e\" alt=\"2VehicleProps1.png\" title=\"2VehicleProps1.png\" />   <img src=\"/projects/propertygridce/617a08e5-4b7a-41dd-ba3c-ce87939fad4a\" alt=\"2VehicleProps2.png\" title=\"2VehicleProps2.png\" /><br /><br />Notice that the unique method needed to implement the PropertyGrideCE.ICustomProperties is GetProperties(). This method should return all the property names you want to expose as an array, depending on some conditions. In this example, if the car type is a Pick Up or Truck, the Volume and Payload properties will be exposed.<br />\n<h2>Custom Editors - Place Class</h2>\rCustom editors is the most powerful feature of this control. There are several tricks you can do with it. By default, the control will provide an editor for all the fundamental classes: int, float, double, etc., and also for strings and enumerations, the latter as a ComboBox. If you have a custom class&#39; object as a property, it will show the contents but just as readonly, because the grid control doesn&#39;t know how to edit it.<br />A custom editor must de declared by using the CustomEditor attribute, as shown in the following example. There are two kinds of custom editors: derived from Control, and derived from Form. The Place class implementation shows both. Despite the kind of editor, it has to inherit the ICustomEditor interface, as we will see in detail later.<br />The attribute declaration can be done in two places: before the class declaration, as with the CountryInfo class, or before the property itself, like with the Picture property. The first will have effect in every property of the class, the second will have effect only in the specific property; other properties of the same class will remain unaffected.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// Sample class with properties </span>\n<span style=\"color:Green;\">// with custom editors</span>\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> Place\n{\n    [CustomEditor(<span style=\"color:Blue;\">typeof</span>(CountryEditor))]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">struct</span> CountryInfo\n    {\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">enum</span> Continent { Africa=1, America=2, Asia=3, Europe=4, Oceania=5 }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">readonly</span> CountryInfo[] Countries = {\n            <span style=\"color:Green;\">// African countries</span>\n            <span style=\"color:Blue;\">new</span> CountryInfo( 1, <span style=\"color:#A31515;\">&quot;AO&quot;</span>, <span style=\"color:#A31515;\">&quot;ANGOLA&quot;</span> ),\n            <span style=\"color:Blue;\">new</span> CountryInfo( 1, <span style=\"color:#A31515;\">&quot;CM&quot;</span>, <span style=\"color:#A31515;\">&quot;CAMEROON&quot;</span> ),\n            <span style=\"color:Green;\">// American countries</span>\n            <span style=\"color:Blue;\">new</span> CountryInfo( 2, <span style=\"color:#A31515;\">&quot;BO&quot;</span>, <span style=\"color:#A31515;\">&quot;BOLIVIA&quot;</span> ),\n            <span style=\"color:Blue;\">new</span> CountryInfo( 2, <span style=\"color:#A31515;\">&quot;PE&quot;</span>, <span style=\"color:#A31515;\">&quot;PERU&quot;</span> ),\n            <span style=\"color:Green;\">// Asian countries</span>\n            <span style=\"color:Blue;\">new</span> CountryInfo( 3, <span style=\"color:#A31515;\">&quot;JP&quot;</span>, <span style=\"color:#A31515;\">&quot;JAPAN&quot;</span> ),\n            <span style=\"color:Blue;\">new</span> CountryInfo( 3, <span style=\"color:#A31515;\">&quot;MN&quot;</span>, <span style=\"color:#A31515;\">&quot;MONGOLIA&quot;</span> ),\n            <span style=\"color:Green;\">// European countries</span>\n            <span style=\"color:Blue;\">new</span> CountryInfo( 4, <span style=\"color:#A31515;\">&quot;DE&quot;</span>, <span style=\"color:#A31515;\">&quot;GERMANY&quot;</span> ),\n            <span style=\"color:Blue;\">new</span> CountryInfo( 4, <span style=\"color:#A31515;\">&quot;NL&quot;</span>, <span style=\"color:#A31515;\">&quot;NETHERLANDS&quot;</span> ),\n            <span style=\"color:Green;\">// Oceanian countries</span>\n            <span style=\"color:Blue;\">new</span> CountryInfo( 5, <span style=\"color:#A31515;\">&quot;AU&quot;</span>, <span style=\"color:#A31515;\">&quot;AUSTRALIA&quot;</span> ),\n            <span style=\"color:Blue;\">new</span> CountryInfo( 5, <span style=\"color:#A31515;\">&quot;NZ&quot;</span>, <span style=\"color:#A31515;\">&quot;NEW ZEALAND&quot;</span> )\n        };\n\n        <span style=\"color:Blue;\">public</span> Continent Contin;\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Abrev;\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name;\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">string</span> ToString()\n        {\n             <span style=\"color:Blue;\">return</span> Name;\n        }\n        <span style=\"color:Blue;\">public</span> CountryInfo(<span style=\"color:Blue;\">int</span> _continent,\n             <span style=\"color:Blue;\">string</span> _abrev, <span style=\"color:Blue;\">string</span> _name)\n        {\n            <span style=\"color:Blue;\">this</span>.Contin = (Continent)_continent;\n            <span style=\"color:Blue;\">this</span>.Abrev = _abrev;\n            <span style=\"color:Blue;\">this</span>.Name = _name;\n        }\n    }\n\n    <span style=\"color:Blue;\">#region</span> Private fields\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span>[] _Address = <span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">string</span>[4];\n    <span style=\"color:Blue;\">public</span> CountryInfo _Country;\n    <span style=\"color:Blue;\">private</span> Image _Picture;\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> _CurrentValue;\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> _Floors;\n    <span style=\"color:Blue;\">#endregion</span>\n\n    <span style=\"color:Blue;\">#region</span> Public properties\n    [Category(<span style=\"color:#A31515;\">&quot;Address&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Street\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Address[0]; }\n        <span style=\"color:Blue;\">set</span> { _Address[0] = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Address&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> City\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Address[1]; }\n        <span style=\"color:Blue;\">set</span> { _Address[1] = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Address&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Province\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Address[2]; }\n        <span style=\"color:Blue;\">set</span> { _Address[2] = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Address&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Postal\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Address[3]; }\n        <span style=\"color:Blue;\">set</span> { _Address[3] = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Address&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> CountryInfo Country\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Country; }\n        <span style=\"color:Blue;\">set</span> { _Country = value; }\n    }\n\n    [Category(<span style=\"color:#A31515;\">&quot;Characteristics&quot;</span>)]\n    [CustomEditor(<span style=\"color:Blue;\">typeof</span>(PictureEditor))]\n    <span style=\"color:Blue;\">public</span> Image Picture\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Picture; }\n        <span style=\"color:Blue;\">set</span> { _Picture = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Characteristics&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Floors\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _Floors; }\n        <span style=\"color:Blue;\">set</span> { _Floors = value; }\n    }\n    [Category(<span style=\"color:#A31515;\">&quot;Characteristics&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> CurrentValue\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _CurrentValue; }\n        <span style=\"color:Blue;\">set</span> { _CurrentValue = value; }\n    }\n    <span style=\"color:Blue;\">#endregion</span>\n\n    <span style=\"color:Blue;\">public</span> Place()\n    {\n        <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; _Address.Length; i++)\n            _Address[i] = <span style=\"color:#A31515;\">&quot;&quot;</span>;\n    }\n}\r\n</pre></div><br /><img src=\"/projects/propertygridce/7af6cb83-0090-40c2-8a89-cd4d0e2a1173\" alt=\"3Place.png\" title=\"3Place.png\" />   <img src=\"/projects/propertygridce/7c0b4ca0-dfff-4d9d-a2fa-67ded04428c1\" alt=\"3PlaceProps1.png\" title=\"3PlaceProps1.png\" />   <img src=\"/projects/propertygridce/4dae0f11-51f0-4965-b76d-820127858730\" alt=\"3PlaceProps2.png\" title=\"3PlaceProps2.png\" /><br /><br />The ICustomEditor interface provides some elements to allow the PropertyGridCE control to interact with the editor control. There are events, properties, and methods. It is declared as:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">interface</span> ICustomEditor\n{\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n    <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Fired when edited value was changed</span>\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n    <span style=\"color:Blue;\">event</span> EventHandler ValueChanged;\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n    <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Returns the editor style</span>\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n    EditorStyle Style { <span style=\"color:Blue;\">get</span>; }\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n    <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Get or set the edited value</span>\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n    <span style=\"color:Blue;\">object</span> Value { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n    <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Initializes editor control</span>\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n    <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;rect&quot;&gt;</span><span style=\"color:Green;\">Bounds of the right cell in the property grid&lt;/param&gt;</span>\n    <span style=\"color:Blue;\">void</span> Init(Rectangle rect);\n}\r\n</pre></div>As I mentioned, there are two examples of custom editor implementations in the Place class; the first one, CountryEditor, is a control editor. It asks you for a country with two ComboBoxes: one for Continent, and one for Country, as you can see in the screenshot. To avoid source code clutter, I will show just the partial implementation:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> CountryEditor : UserControl, PropertyGridCE.ICustomEditor\n{\n    <span style=\"color:Blue;\">#region</span> Private fields\n    <span style=\"color:Blue;\">private</span> Place.CountryInfo Info;\n\n    <span style=\"color:Blue;\">private</span> EventHandlerList ValueChangedColl = <span style=\"color:Blue;\">new</span> EventHandlerList();\n    <span style=\"color:Blue;\">private</span> EventArgs EventArguments = <span style=\"color:Blue;\">new</span> EventArgs();\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">object</span> ID = <span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">object</span>();\n    <span style=\"color:Blue;\">#endregion</span>\n\n    <span style=\"color:Blue;\">#region</span> ICustomEditor Members\n    <span style=\"color:Blue;\">event</span> EventHandler PropertyGridCE.ICustomEditor.ValueChanged\n    {\n        add { ValueChangedColl.AddHandler(ID, value); }\n        remove { ValueChangedColl.RemoveHandler(ID, value); }\n    }\n    PropertyGridCE.EditorStyle PropertyGridCE.ICustomEditor.Style\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> PropertyGridCE.EditorStyle.DropDown; }\n    }\n    <span style=\"color:Blue;\">object</span> PropertyGridCE.ICustomEditor.Value\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> Info; }\n        <span style=\"color:Blue;\">set</span>\n        {\n            <span style=\"color:Blue;\">if</span> (value <span style=\"color:Blue;\">is</span> Place.CountryInfo)\n            {\n                Info = (Place.CountryInfo)value;\n                <span style=\"color:Blue;\">this</span>.ComboContinent.SelectedItem = Info.Contin;\n                <span style=\"color:Blue;\">this</span>.ComboCountry.SelectedItem = Info;\n            }\n        }\n    }\n    <span style=\"color:Blue;\">void</span> PropertyGridCE.ICustomEditor.Init(Rectangle rect)\n    {\n        <span style=\"color:Blue;\">this</span>.Location = rect.Location;\n\n        ComboContinent.Items.Clear();\n        <span style=\"color:Blue;\">foreach</span> (FieldInfo info <span style=\"color:Blue;\">in</span> \n             <span style=\"color:Blue;\">typeof</span>(Place.CountryInfo.Continent).GetFields(BindingFlags.Public | BindingFlags.Static))\n        {\n            ComboContinent.Items.Add(Enum.Parse(<span style=\"color:Blue;\">typeof</span>(Place.CountryInfo.Continent), info.Name, <span style=\"color:Blue;\">false</span>));\n        }\n        ComboContinent.SelectedIndex = 0;\n        ComboContinent.SelectedIndexChanged += <span style=\"color:Blue;\">new</span> EventHandler(ComboContinent_SelectedIndexChanged);\n        ComboCountry.SelectedIndexChanged += <span style=\"color:Blue;\">new</span> EventHandler(ComboCountry_SelectedIndexChanged);\n    }\n    <span style=\"color:Blue;\">#endregion</span>\n}\r\n</pre></div>First, you have to declare the Style property; in this case, it has the DropDown value for this kind of control editor. Then, you have to implement the Value property; this will allow the PropertyGridCE control to set and get the value inside the editor control.<br />The Init method will pass the suggested place to show the control, it is the same as the rectangle containing the value at the grid. You should resize or relocate your control as pertinent. Also, you can do some private initialization here.<br />The ValueChanged event also is important to tell the PropertyGridCE control that the value of the property has been changed so it can update the selected object property properly. It has the same implementation as the example.<br />Also, it will be important to control the LostFocus event to allow the control to update the property value and close when the user taps the stylus outside the control. You will find an example in the full source code provided.<br />The second example of a custom editor is PictureEditor; it is a form editor, so it will occupy all the screen workable area. As in the previous example, I will show the class partially for abbreviation purposes:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> PictureEditor : Form, PropertyGridCE.ICustomEditor\n{\n    <span style=\"color:Blue;\">#region</span> Private fields\n    <span style=\"color:Blue;\">private</span> EventHandlerList ValueChangedColl = <span style=\"color:Blue;\">new</span> EventHandlerList();\n    <span style=\"color:Blue;\">private</span> EventArgs EventArguments = <span style=\"color:Blue;\">new</span> EventArgs();\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">object</span> ID = <span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">object</span>();\n    <span style=\"color:Blue;\">private</span> Size PictureBoxSize;\n    <span style=\"color:Blue;\">#endregion</span>\n\n    <span style=\"color:Blue;\">#region</span> ICustomEditor Members\n    <span style=\"color:Blue;\">event</span> EventHandler PropertyGridCE.ICustomEditor.ValueChanged\n    {\n        add { ValueChangedColl.AddHandler(ID, value); }\n        remove { ValueChangedColl.RemoveHandler(ID, value); }\n    }\n    PropertyGridCE.EditorStyle PropertyGridCE.ICustomEditor.Style\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> PropertyGridCE.EditorStyle.Modal; }\n    }\n    <span style=\"color:Blue;\">object</span> PropertyGridCE.ICustomEditor.Value\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> PictureBox1.Image; }\n        <span style=\"color:Blue;\">set</span>\n        {\n            PictureBox1.Image = (Image)value;\n            ScaleView();\n        }\n    }\n    <span style=\"color:Blue;\">void</span> PropertyGridCE.ICustomEditor.Init(Rectangle rect)\n    {\n        PictureBoxSize = PictureBox1.Size;\n    }\n    <span style=\"color:Blue;\">#endregion</span>\n}\r\n</pre></div>Notice this time, the Style property returns the Modal value, because it is a form control. Also, the rect parameter in the Init method is ignored.<br /><br />\n<h2>Disclaimer</h2>\rThe code/library supplied is totally free for either personal or commercial use, with no warranties. Please support the sustaining and improvement of it with a little donation (absolutely voluntarily).<br /><a href=\"https&#58;&#47;&#47;www.paypal.com&#47;cgi-bin&#47;webscr&#63;cmd&#61;_donations&#38;business&#61;jaime_olivares&#37;40hotmail&#37;2ecom&#38;lc&#61;PE&#38;item_name&#61;Jaime&#37;20Olivares&#38;item_number&#61;CODEPLEX&#38;currency_code&#61;USD&#38;bn&#61;PP&#37;2dDonationsBF&#37;3abtn_donateCC_LG&#37;2egif&#37;3aNonHosted\"><img src=\"/projects/propertygridce/928509cd-aee3-4e02-91e5-ad0401f4b9f1\" alt=\"Donate\" title=\"Donate\" /></a></div><div class=\"ClearBoth\"></div>",
  "TagList": "PropertyGrid,Windows CE,windows mobile,Compact Framework,winforms,Custom Controls,",
  "LastEdited": "2009-07-30T06:12:28.427-07:00"
}