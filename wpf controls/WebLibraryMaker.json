{
  "ProjectName": "WebLibraryMaker",
  "Title": "WebLibraryMaker - Create your asp.net user control libraries freely.",
  "Description": "Post-build tool transforming any WebApplication into a library containing .ascx controls. It is easy to use resulting library like a set of Custom Controls.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project description</b><br />Post-build tool transforming any WebApplication into a library containing .ascx controls. It is easy to use resulting library like a set of Custom Controls.<br /><br /><b>Project aims</b>\n<ul><li>Make it possible to create libraries containing *.ascx user controls</li>\n<li>Preserve designers, code generators, etc working within the library project</li>\n<li>It should be easy to use controls of the library in any other web application</li>\n<li>It should be easy to use controls of the library in other such libraries</li>\n<li>It should be easy to reuse controls of the library within itself</li>\n<li>It should be possible to reference the library as projects</li>\n<li>It should be possible to reference the library as DLL</li>\n<li>It should be possible to create new library in 30 seconds</li>\n<li>The library should consist of one file.</li>\n<li>The solution should work for .NET v2.0, v3.0, v3.5</li></ul>\nNow the project succeeds all points.<br /><br /><b>How to create new library</b>\n<ol><li>Extract WebLibraryMaker to somewhere on your PC</li>\n<li>Create new WebApplication project</li>\n<li>Select project root, press F4 and select <i>Always Start When Debugging = false</i></li>\n<li>Edit post-build step on property pages:  Input something like <i>&quot;$(MSBuildProjectDirectory)\\..\\WebLibraryMaker\\WebLibraryMaker.exe&quot; /net &quot; $(Framework20Dir) &quot; /name &quot; $(MSBuildProjectName) &quot; /prj &quot; $(MSBuildProjectDirectory) &quot; /obj &quot; $(IntermediateOutputPath) &quot; /out &quot; $(OutDir) &quot; /debug $(DebugSymbols)  /key &quot; $(AssemblyOriginatorKeyFile) &quot;</i> where <i>$(MSBuildProjectDirectory)\\..\\WebLibraryMaker\\WebLibraryMaker.exe</i> is path to your WebLibraryMaker directory</li>\n<li>Make sure you have directory mentioned in WebLibraryMaker.exe.config -&gt; TemporaryPath setting (C:\\temp\\ASP.NET.Tmp by default)</li>\n<li>Build the project</li></ol>\n<br /><b>How to use the library</b>\n<ol><li>Link the library to your target project\n<ol><li>Add reference to the library project</li>\n<li>OR add reference to the library dll</li></ol></li>\n<li>Use library controls like Custom Controls (control type names are equal to codebehind type names):\n<ol><li>Use &lt;% register assembly=&quot;your<i>assembly&quot; namespace=&quot;your</i>namespace&quot; tagPrefix=&quot;your_prefix&quot; %&gt; within <b>.ascx/</b>.aspx files</li>\n<li>Use new your<i>assembly.your</i>control within *.vb files.</li></ol></li></ol>\nRead the source example in case of any doubts<br /><br /><b>How to reuse controls within the same library</b>\n<ol><li>Use library controls like User Controls within <b>.ascx/</b>.aspx files \n<ol><li>Use &lt;% register src=&quot;~/your<i>path/your</i>control.ascx&quot; tagPrefix=&quot;your<i>prefix&quot; tagName=&quot;your</i>control&quot;%&gt;</li></ol></li>\n<li>Use Activator.CreateInstance() within *.vb files. It is not possible to use Control.LoadControl function. You can also use something like ControlLoader class from the source example to speed-up this operation.\n<ol><li>Use (Control)Activator.CreateInstance(Type.GetType(&quot;your_control&quot;))</li>\n<li>OR Use ControlLoader.LoadControl&lt;your_control&gt;</li></ol></li></ol>\nRead the source example in case of any doubts<br /><br /><b>How to sign my library (v 0.6 only)</b>\n<ol><li>Make sure that your post-build command contains following argument: /key &quot; $(AssemblyOriginatorKeyFile) &quot;</li>\n<li>Sign your library with the regular way</li>\n<li>Note: it is not possible to make project reference to signed library. Make reference to DLL file if you need.</li></ol>\n<br /><b>How to make delayed sign library (v 0.6 only)</b>\n<ol><li>Create public key, include it into the project</li>\n<li><u>Don&#39;t sign your library with the regular way</u></li>\n<li>Change &quot;/key&quot; argument of the post-build command to use real key name like /key &quot; publickey.snk &quot;</li>\n<li>Add following additional argument into the post-build command: /ds true</li></ol>\n<br /><b>Principle of operation</b>\n<ol><li>Depending of hash of the Dll: backup unchanged Dll OR restore it before processing (in order to prevent double processing of the same file)</li>\n<li>Call aspnet_compiler of .NET 2.0 </li>\n<li>Gather names of newly created Dlls</li>\n<li>Create &quot;interface&quot; Dll containing classes inherited from ASP.XX. These classes have names similiar to grandparents&#39; ones.</li>\n<li>Load special unmanaged resources from Dlls created by aspnet_compiler</li>\n<li>Merge all these Dlls into one file (interface Dll <u> Dlls created by aspnet_compiler </u> initial Dll) using <a href=\"http://research.microsoft.com/~mbarnett/ILMerge.aspx\">ILMerge tool</a></li>\n<li>Write special unmanaged resource into resulting Dll</li>\n<li>Overwrite Dll files within output and intermediate folders</li>\n<li>Calculate hash code of the Dll </li></ol>\n<br /><b>Known problems</b>\n<ul><li>You can see <i>&quot;Could not load type <a href=\"https://weblibrarymaker.codeplex.com/wikipage?title=strange%20type%20name&referringTitle=Home\">strange type name</a> from assembly <a href=\"https://weblibrarymaker.codeplex.com/wikipage?title=assemble%20name&referringTitle=Home\">assemble name</a>&quot;</i> error in runtime. It occures if you try to use members of an user control outside of the control. I.e. you can&#39;t create public properties/methods within your user controls. It is problem of the IlMerge tool. I can&#39;t fix it. But you can use following workaround: Create a base class for your user control and place all public members into the base class. See LibraryB.ControlC of the example.</li>\n<li>It is impossible to create project references to signed libraries. DLL references are available only. It occures because the tool replaces output library and new library has different public key.</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,ASP.NET,Library,User Controls,ascx,ILMerge,Aspnet_compiler,Aspnet_merge,Post-build,",
  "LastEdited": "2009-02-13T14:30:38.987-08:00"
}