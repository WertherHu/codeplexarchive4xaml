{
  "ProjectName": "autobuildversion",
  "Title": "Build Version Increment Add-In Visual Studio",
  "Description": "An addin for Visual Studio 2005/2008 to auto increment build versions of projects.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Build Version Increment Add-In Visual Studio</h1>\r\n<b>Project Description</b><br />An addin for Visual Studio 2005&#47;2008 to auto increment build versions of projects.<br />\n<ul><li><a href=\"http://autobuildversion.codeplex.com/releases/view/60932\">New version 2.4 (beta) with Visual Studio 2010 support</a>.</li></ul>\n<br />Somehow Visual Studio doesn&#39;t come with an option to only auto increment the build version of the AssemblyFileVersion attribute. Sure, by placing an * in the AssemblyVersion attribute and leaving the AssemblyFileVersion out, the compiler will auto generate build versions for both but this is a pain to maintain when you&#39;re releasing signed assemblies. Besides I don&#39;t feel like grabbing a calculator just to see when version 1.0.3394.25054 has been build. I needed a little more control.<br /><br />I tried alot of the addin&#39;s freely available on the web but didn&#39;t find one that satisfied my needs. Some were way too big, others required that the addin was installed by every person on the team and some simply didn&#39;t work. The only one I found to do the job was made by Yogesh Jagota, which I used until I had a little accident with it. After that I completely rewrote the addin. The base concepts are still the same as Yogesh&#39;s version.<br /><br />I&#39;ve tested the addin with Visual Studio 2005/2008 on C#, VB.NET and C++.NET projects under Windows XP/Vista SP1. <br />\n<h2>Functionality</h2>\r<ul><li>Different auto increment styles can be set per major, minor, build or revision number. <b>New!</b></li>\n<li>Supports C#, VB.NET and C++.NET projects.</li>\n<li>Not required to be installed by all project members. Configuration is shared via properties in the solution and project files. Developers who don&#39;t have the addin won&#39;t feel a thing.</li>\n<li>Automatically checks out required files if under source control.</li>\n<li>Can be configured per solution and/or per project.</li>\n<li>Can be configured to update only on certain configuration builds (debug, release, any or custom)</li>\n<li>Can update assembly attributes in an external source file instead of the default AssemblyInfo.</li>\n<li>Might help you becoming more successful ... but then again ... maybe not.</li></ul>\n\n<h2>How does it work?</h2>\rAfter you have installed the addin, fire off Visual Studio and open your favorite solution. Your tools menu should contain an entry for the increment settings. <i>The addin is not visible if no solution is open</i>.<br /><br /><img src=\"/projects/autobuildversion/00e7d1b8-070e-4d23-92f8-d09376898406\" alt=\"toolsMenu.gif\" title=\"toolsMenu.gif\" /> <br />Clicking on this will display a dialog containing a mini solution explorer. Here you can select the solution or one of the available projects and change it&#39;s auto versioning properties.<br /><br /><img src=\"/projects/autobuildversion/26f25249-8667-4e2f-ba1b-e4c787172d47\" alt=\"settingDialog.png\" title=\"settingDialog.png\" /> <br />The property grid contains the following values you can modify: <br />\n<ul><li><b>Versioning Style</b>. Here you can configure per version attribute the increment scheme you wish to use. Options are:\n<ul><li><b>None</b>: Don&#39;t update this attribute.</li>\n<li><b>Increment</b>: Simple +1 increment per build.</li>\n<li><b>TimeStamp</b>: Set the attribute to the current time. (HHMM)</li>\n<li><b>YearStamp</b>: Set the attribute to the current year. (YYYY)</li>\n<li><b>DeltaBaseDate</b>: Use the Yogesh increment scheme for this attribute.</li>\n<li><b>YearDayOfYear</b>: Set the attribute to the current year followed by the day of the year. (YYDDD)</li>\n<li><b>DeltaBaseYearDayOfYear</b>: Set the attribute to the delta base year including day of year. (YYDDD)</li>\n<li><b>DeltaBaseYear</b>: Set the attribute to the delta base year.</li>\n<li><b>YearDecadeStamp</b>: Set the attribute to build year.</li>\n<li><b>MonthStamp</b>: Set the attribute to build month.</li>\n<li><b>DayStamp</b>: Set the attribute to build day.</li>\n<li><b>MonthAndDayStamp</b>: Set the attribute to build month and day.</li></ul></li>\n<li><b>Update file version</b>. Setting this to <b>true</b> will update the AssemblyFileVersion attribute.</li>\n<li><b>Update assembly version</b>. Setting this to <b>true</b> will update the AssemblyVersion attribute.</li>\n<li><b>Assembly info filename</b>. If your project or solution isn&#39;t using the default AssemblyInfo.(cs|vb|cpp) file to set the assembly attributes, you can specify it here. Note that the path is stored relative so this also works for other project members.</li>\n<li><b>Configuration name</b>. Set this to the configuration name (Debug, Release, ...) which should be active.</li>\n<li><b>Start date</b>. Set this to a custom start date if you&#39;re using one of the delta versioning types.</li></ul>\n<br />Whenever one of the projects in the solution is modified, the addin kicks in and updates the required attributes. If the target file containing the attributes is under source control the addin will check it out.<br /><br /><i>Leave a note if something isn&#39;t working for you or check out Yogesh&#39;s version on <a href=\"http://www.codeproject.com/KB/macros/autobuildaddin.aspx\">codeproject</a>.</i><br />\n<h2>Yogesh Jagota&#39;s version</h2>\r\nThis project is actually a total rewrite of the Solution level Auto build increment Add-In found on CodeProject. Although it&#39;s a great plugin, I didn&#39;t feel very happy with it after it modified all project files in a very big solution which me and my colleagues are working on. Since I didn&#39;t noticed it at once, a few days later a colleague started to complain that one of the project assemblies failed to load on the testing environment because the the assembly version had been updated. Whoops ...  :S<br /><br />So next to some leaner and meaner code the big differences are:\n<ul><li>This addin does not touch any project file you didn&#39;t select for versioning.</li>\n<li>By default it doesn&#39;t update file and assembly version.</li></ul>\n<br /><b>Version Info</b><br /><br /><table><tr><th> Status </th><th> Version </th></tr>\n<tr><td> Stable </td><td> 2.1.10050.1458 </td></tr>\n<tr><td> Beta </td><td> 2.4.11046.2045 </td></tr></table><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "addin,C#,VB.NET,build,Visual Studio,Version Control,build tools,cool,versioning,Managed C++,kbp,Build Version,add-in,vb,Studio Add In,vs add ins,",
  "LastEdited": "2011-02-15T07:46:06.74-08:00"
}