{
  "ProjectName": "instancefactory",
  "Title": "Common Instance Factory",
  "Description": "Provides an abstraction over dependency injection and IoC containers using the abstract factory design pattern. It was created as an alternative to the Common Service Locator, but it does not use the service location anti-pattern and it provides support for releasing instances.\r\n\r\nAdapters are available for various dependency injection containers, such as Ninject and SimpleInjector, with more to come shortly. There are also WCF extensions available for decoupling services from DI containers.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br>\r\nProvides an abstraction over dependency injection and IoC containers using the abstract factory design pattern. It was created as an alternative to the\r\n<a href=\"http://commonservicelocator.codeplex.com/\">Common Service Locator</a>, but it does not use the\r\n<a href=\"http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx\">service location anti-pattern</a> and it provides support for\r\n<a href=\"http://blog.ploeh.dk/2010/09/29/TheRegisterResolveReleasePattern.aspx\">releasing</a> instances.&nbsp; See this\r\n<a href=\"http://blog.tonysneed.com/2012/05/23/use-common-instance-factory-to-abstract-away-the-dependency-injection-container/\">\r\nblog post</a> for more background information.<br>\r\n<br>\r\nAdapters are available for various dependency injection containers, such as <a href=\"http://www.ninject.org/\">\r\nNinject</a> and <a href=\"http://simpleinjector.codeplex.com/\">SimpleInjector</a>, with more to come shortly. There are also WCF extensions available for decoupling services from DI containers.<br>\r\n<br>\r\n<b>How to Get Common Instance Factory</b><br>\r\n<br>\r\nBinaries for the Common Instance Factory can be obtained from the <a href=\"https://nuget.org/packages?q=commonintancefactory\">\r\nNuGet</a> Gallery. First Install NuGet using the Visual Studio Extension Manager, then right-click on References and select &quot;Manage NuGet Packages.&quot; Find the Common Instance Factory by searching for &quot;commoninstancefactory&quot; then click Install.<br>\r\n<br>\r\n<b>Common Instance Factory Adapters</b><br>\r\n<br>\r\nNext, you will need to select one or more adapters for the Common Instance Factory. These can also be found in the\r\n<a href=\"https://nuget.org/packages?q=commonintancefactory\">NuGet</a> Gallery by searching for &quot;commoninstancefactory&quot;. Select an adapter for the dependency injection container you wish to use. To date there are adapters for Ninject and SimpleInjector - but\r\n there are more to come!<br>\r\n<br>\r\nTo use Common Instance Factory, first initialize the container you wish to use, then pass it to the constructor of the container-specific instance factory for the adapter you selected, specifying a type which has dependencies you wish to resolve using the container.\r\n That's it!&nbsp; Download the <a href=\"https://instancefactory.codeplex.com/releases/view/88235\">\r\nsamples</a> to see it all in action.<br>\r\n<br>\r\n<b>WCF Extensions</b><br>\r\n<br>\r\nIf you are using the Common Instance Factory to decouple WCF services from dependency injection containers, then be sure to get the WCF extensions for Common Instance Factory from NuGet, as well as one or more container-specific WCF adapters.<br>\r\n<br>\r\n<b>Samples</b><br>\r\n<br>\r\nFor a sample of using the Common Instance Factory, visit the <a href=\"https://instancefactory.codeplex.com/releases/view/88235\">\r\nDownload</a> page or download the source and samples.<br>\r\n<br>\r\n<b>Additional Information</b><br>\r\n<br>\r\nCheck back here for examples and tutorials. Also be sure to visit Tony Sneed's blog:\r\n<a href=\"http://blog.tonysneed.com\">http://blog.tonysneed.com</a>. </div><div class=\"ClearBoth\"></div>",
  "TagList": "dependency injection,Inversion of Control,wcf,",
  "LastEdited": "2012-05-23T10:23:07.113-07:00"
}