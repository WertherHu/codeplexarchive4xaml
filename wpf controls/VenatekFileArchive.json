{
  "ProjectName": "VenatekFileArchive",
  "Title": "Venatek SQL Server File Archive - Watched Folder Saves Files to Database",
  "Description": "One or more watched folders are defined. Each folder is given a category. A Windows service watches the folders. When a file is dropped into a folder, the system inserts it into a SQL Server table. Admin is done via a Windows forms app written using Developer Express controls. C#",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />One or more watched folders are defined. Each folder is given a category. A Windows service watches the folders. When a file is dropped into a folder, the system inserts it into a SQL Server table. Admin is done via a Windows forms app written using Developer Express controls. C&#35;<br /><br />\n<h1>Overview</h1>\r<h2>Administration - Windows Forms Application</h2>\rThe Windows Forms application is the general administrative tool for this system. Use it to create and manage categories and  watched folders. Also use this tool to search and view the application log, which is written to a SQL Server table. Note that all logged information is also written to the system event log. This Windows Forms application is also used to search for and to retrieve files which have been saved to the archive.<br />\n<h3>Category Search Results</h3>\r<img src=\"/projects/VenatekFileArchive/ebc09a1d-92d5-4950-bbb1-559591898d8f\" alt=\"Category&#32;Search&#32;Results\" title=\"Category&#32;Search&#32;Results\" /><br />\n<h3>Watched Folder Main Form</h3>\rNote that because Archived File is a child entity of Watched Folder, the archived file are available in a tab below the watched folder detail.<br /><img src=\"/projects/VenatekFileArchive/0c1de809-9e2b-4504-82b4-df08f4c4ed3b\" alt=\"Watched&#32;Folder&#32;Main&#32;Form\" title=\"Watched&#32;Folder&#32;Main&#32;Form\" /><br />\n<h2>Windows Service</h2>\rThe Windows service does the work of watching the folder and processing files. Each file that is dropped into a watched folder will be picked up by the service, inserted into the database and then removed from the file system. Each archived file record will be associated with both the folder where it was originally dropped and also the category that was assigned to that folder at the time that the file was processed.<br />\n<h3>Core Code of this Windows Service</h3>\r<pre>        protected void pollForFiles()\n        {\n            logEntry(&quot;Starting poll for files&quot;, EventLogEntryType.Information);\n\n            // Get a collection of all watched folders\n            WatchedFolderList watchedFolderList = (WatchedFolderList)sharedRepository.FindWatchedFolder(-1, null);\n\n            foreach (WatchedFolder watchedFolder in watchedFolderList)\n            {                                \n                string[] arrayOfFiles = new string[0];\n                try\n                {\n                    arrayOfFiles = System.IO.Directory.GetFiles(watchedFolder.UncOrLocalFolder, &quot;*.*&quot;, SearchOption.AllDirectories);\n                }\n                catch (Exception ex)\n                {\n                    logEntry(&quot;Error reading from folder &quot; + watchedFolder.UncOrLocalFolder + &quot; - &quot; + ex.Message, EventLogEntryType.Error);\n                }\n\n                int countOfFiles = arrayOfFiles.GetUpperBound(0) + 1;\n                if(countOfFiles &gt; 0)\n                    logEntry(&quot;Note: Count of files = &quot; + countOfFiles.ToString() + &quot; in and under folder &quot; + watchedFolder.UncOrLocalFolder, EventLogEntryType.Information);\n\n                foreach (string eachFileName in arrayOfFiles)\n                {\n                    string thisEachFileName = eachFileName.ToUpper();\n\n                    string fileNameOnly = &quot;&quot;;\n                    for (int i = thisEachFileName.Length-1; i &gt;= 0; i--)\n                    {\n                        if (thisEachFileName[i].ToString() == &quot;\\\\&quot;)\n                        {\n                            break;\n                        }\n                        else\n                        {\n                            fileNameOnly = thisEachFileName[i].ToString() + fileNameOnly;\n                        }\n                    }\n\n                    try\n                    {\n                        // Get the category\n                        ArchiveCategory theCategory = watchedFolder.ParentRelatedArchiveCategoryEntityObject;\n\n                        // Create a new Archived File record\n                        ArchivedFile newArchivedFile = theCategory.ChildRelatedArchivedFileList.AddNew();\n                        newArchivedFile.Description = fileNameOnly;\n                        FileAttachment fileAttachment = new FileAttachment(fileNameOnly,  readFileToByteArray(eachFileName));\n                        newArchivedFile.FileAttachment = fileAttachment;\n\n                        // Associate this new Archived File with the Watched Folder where it was dropped\n                        watchedFolder.ChildRelatedArchivedFileList.Add(newArchivedFile);\n\n                        // Save via Repository\n                        sharedRepository.SaveWatchedFolder(watchedFolder);\n                        sharedRepository.SaveArchiveCategory(theCategory);\n                        sharedRepository.SaveArchivedFile(newArchivedFile);\n\n                        logEntry(&quot;Sucessfully archived file &quot; + eachFileName, EventLogEntryType.Information);\n\n                        // Remove the file from the watched folder\n                        File.Delete(eachFileName);\n                    }\n                    catch (Exception ex)\n                    {\n                        logEntry(&quot;Failed to process file &quot; + eachFileName + &quot; - &quot; + ex.Message, EventLogEntryType.Error);\n                    }\n                }\n            }\n        }\n\n        public byte[] readFileToByteArray(string fileToRead) \n        { \n            FileStream fs = new FileStream(fileToRead, FileMode.Open, FileAccess.Read); \n            BinaryReader br = new BinaryReader(fs); \n            Byte[] allBytes = br.ReadBytes((Int32)fs.Length); \n            br.Close(); \n            fs.Close(); \n            return allBytes; \n        } \n\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": ".Net,c#,generator,service,winforms,Developer Express,",
  "LastEdited": "2009-11-26T08:25:02.853-08:00"
}