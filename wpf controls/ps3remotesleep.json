{
  "ProjectName": "ps3remotesleep",
  "Title": "Ps3RemoteSleep",
  "Description": "A workaround to place the Sony Playstation 3 (PS3) Blu-ray Remote Control in sleep/sniff mode using the integrated Microsoft Bluetooth stack. For use with EventGhost/XBMC\r\nWindows 7 32/64 compatible. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nPs3RemoteSleep is a workaround to place the Sony Playstation 3 (PS3) Blu-ray Remote Control in sleep/sniff mode using the integrated Microsoft Bluetooth stack. For use with EventGhost/XBMC<br>\r\nWindows 7 32/64 compatible. Requires .NET Framework v3.5 (you should be fine if you use Windows 7 since it comes pre-installed)&nbsp;<br>\r\n<br>\r\nThis application should be run as an Administrator or ideally UAC should be disabled.<br>\r\n<br>\r\nThis project uses InTheHand.Net.Personal, which &nbsp;is the primary library of the 32feet.NET project located on<br>\r\ncodeplex:<a href=\" http://32feet.codeplex.com/\">&nbsp;http://32feet.codeplex.com/</a>&nbsp;but the binary is included in all releases.</p>\r\n<p><br>\r\nTo put the remote a sleep, I use a rather crude method. Normally, the Playstation 3 will send some or other sleep command\r\n<br>\r\nto the remote, but unfortunately someone has yet to figure out how to do this using the Microsoft Bluetooth stack since<br>\r\nit seems to be a low level Bluetooth command.<br>\r\n<br>\r\nThe workaround I use is to disable the Human Interface Device Bluetooth service of the remote control and then re-enable it.<br>\r\nThe unfortunate side effect of this operation is that Windows redetects the device and plays its Hardware Removal and\r\n<br>\r\nInsertion sounds. The workaround here was to blank the registry keys for the Windows sounds for Hardware Removal and Hardware<br>\r\nInsertion and then place them back after delaying for about a second.<br>\r\n<br>\r\nAnother side effect is the Device Driver Installation balloon popup in the system tray that shows up during the process. Although<br>\r\nI did identify the registry key where the tray icon notifications control can be modified, modifications are only effective after\r\n<br>\r\na restart (or shell restart) and there isn't an API to control this. The only workaround if this bothers you is to set the driver<br>\r\ninstallation tray icon to &quot;Hide icon and notifications&quot;.<br>\r\n<br>\r\nThe last side effect is that the entire process takes some time. The Bluetooth device discovery takes a few seconds, checking if\r\n<br>\r\nthe device is already hiberated takes about 2-5 seconds, disabling and re-enabling takes a bit, and then I delay for about a\r\n<br>\r\nsecond to wait for Windows to detect the change and &quot;play&quot; the hardware sounds. After all of this, the sounds are restored back\r\n<br>\r\nto the registry, and the application closes.<br>\r\n<br>\r\nResults: After removing and reconnecting the batteries or pressing the PS button for about 5 seconds, the device is in a sleep state<br>\r\nand the current draw is about 190uA. When a button on the remote is pressed, current jumps to 19-22mA and stays there until the remote<br>\r\nis disconnected or hibernated again. Using Ps3RemoteSleep, the current draw is identical.<br>\r\n<br>\r\nSubsequent version will probably be more configurable using more command line arguments.<br>\r\n<br>\r\nCommand Line arguments:</p>\r\n<p>&nbsp;</p>\r\n<pre>/log     Shows the log window and waits for the user to close the application.</pre>\r\n<pre><img src=\"http://download.codeplex.com/Download/SourceControlFileDownload.ashx?ProjectName=ps3remotesleep&changeSetId=488d765fe04e&itemId=assets%2fPs3RemoteSleep_screenshot_logArgument.PNG\" alt=\"\" width=\"381\" height=\"290\"><br></pre>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-11-10T18:29:42.557-08:00"
}