{
  "ProjectName": "ptu",
  "Title": "Directed Perception Pan Tilt Controller (PTU) Library",
  "Description": "This is a library that offers a .NET API to control all current Directed Perception and FLIR Pan/Tilt units through the serial port.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This is a library that offers a .NET API to control all current Directed Perception and FLIR Pan&#47;Tilt units through the serial port.<br />\n<h1>Announcement</h1>\rI certainly wasn&#39;t expecting 160+ downloads in the first week of posting it. I&#39;d appreciate it if you could leave a note explaining who you are in the Discussions page, I&#39;m just curious.<br /><br />Anyway, more importantly I&#39;m currently working on Release 3 of the Bham.Ptu library. This adds ASCII command support, as well as a few other things. I&#39;ve also reorganised a few member functions so Release 3 will be a breaking change, but hopefully not too big a problem to re-integrate.<br /><br />I have posted my Qt 4.6 &quot;PTLib&quot; class library too. It isn&#39;t as complete or as tested as the C# version, but it should serve as a good starting point.<br />\n<h1>Solution Contents</h1>\r\nThe solution is developed in C# 3.0 (though it is 100% compatible with the .NET Framework 2.0) and is comprised of three projects:<br /><br />Bham.Ptu - A class library.<br />Bham.Ptu.UI - A WinForms GUI that can be used to control the speed and position of the PTU, it also provides for rudiminentary joystick support.<br />Bham.Ptu.Console - A simple console application that runs through some quick tests. Largely obsolete.<br /><br />There is also PTLib, a C++ library that makes heavy use of Qt and QSerialDevice. It is a separate download.<br />\n<h1>Using the library</h1>\r\nWhen consuming the Bham.Ptu library you only need to use the PTUnit class. The PTConnection class is used internally by PTUnit, though you&#39;re free to use it if you need to send custom commands down the pipe.<br /><br />Except where noted, all methods of the PTUnit class are non-blocking (that is, the PTU is expected to return a status code immediately) and should take no longer than 10ms to execute. The class is designed around a 1:1 mapping between methods and PTU operations. I opted for methods rather than properties because of their volatile nature and because the methods have side-effects. Feel free to wrap up PTUnit with a property-laden class if you wish.<br /><br />If you want to use PTUnit with a PropertyGrid (as shown in Bham.Ptu.UI) then make use of the PTUnitState class, which stores a snapshot of the current state of the unit (though everything is read-only).<br /><br />Some minor changes will need to be made to the PTConnection class if you&#39;re running this code on big-endian systems (i.e. Mono on PowerPC or ARM/RISC).<br />\n<h1>Code Sample </h1>\r<h2>C#</h2>\r<pre>\nif( PTUnit.GetFirmwareInfo(&quot;COM1&quot;) == null ) throw new ApplicationException(&quot;Device is not attached to COM1&quot;);\n\nusing(PTUnit unit = new PTUnit(&quot;COM1&quot;)) {\n\t\n\tunit.SetPanDesiredPosition( 0 );\n\tunit.AwaitCompletion();\n\tunit.SetPanDesiredPosition( 500 );\n\tunit.AwaitCompletion();\n\tunit.SetPanDesiredPosition( 0 );\n\tunit.AwaitCompletion();\n}\n\n</pre><br />\n<h2>VB</h2>\r<pre>\nIf PTUnit.GetFirmwareInfo(&quot;COM1&quot;) = Nothing Then Throw New ApplicationException(&quot;Device is not attached to COM1&quot;)\n\nUsing unit As New PTUnit(&quot;COM1&quot;)\n\t\n\tunit.SetPanDesiredPosition( 0 )\n\tunit.AwaitCompletion()\n\tunit.SetPanDesiredPosition( 500 )\n\tunit.AwaitCompletion()\n\tunit.SetPanDesiredPosition( 0 )\n\tunit.AwaitCompletion()\n\t\nEnd Using\n</pre><br />\n<h2>C++ / Qt</h2>\r<pre>\nPTUnit* unit = new PTUnit( deviceName );\n\nunit-&gt;setDesiredPositionAbs(Axis::Pan, 0);\nunit-&gt;awaitCompletion();\nunit-&gt;setDesiredPositionAbs(Axis::Pan, 500);\nunit-&gt;awaitCompletion();\nunit-&gt;setDesiredPositionAbs(Axis::Pan, 0);\nunit-&gt;awaitCompletion();\n\ndelete unit;\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "Library,",
  "LastEdited": "2010-10-20T02:25:06.387-07:00"
}