{
  "ProjectName": "AwaitableUI",
  "Title": "AwaitableUI",
  "Description": "AwaitableUI is a .NET library that adds async/await keyword support to controls to enable asynchronous UI using structured code instead of events.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />AwaitableUI is a .NET library that adds async&#47;await keyword support to controls to enable asynchronous UI using structured code instead of events.<br /><br /><b>Example use</b><br /><br />await myStoryboard.BeginAsync();<br />await button.WaitForClickAsync();<br /><br />Supports WinRT (for Windows 8 Consumer Preview), Silverlight 4.0, Silverlight for Windows Phone 7.1 (Mango) and WPF.<br /><br /><i>Note: The current version of the library for Windows 8 RTM is maintained as part of the <a href=\"http://bit.ly/WinRTXamlToolkit\">WinRT XAML Toolkit</a> project and includes some improvements</i><br /><br /><img src=\"/projects/AwaitableUI/7de34809-74fa-4ff3-9e57-bba377286b74\" alt=\"HelloAsyncAwait.png\" title=\"HelloAsyncAwait.png\" /><br /><br /><b>Goal</b><br />Reach the new height in simplicity of asynchronous UI development in WinRT, Silverlight and WPF.<br /><br /><b>Current state of the project</b><br />Current version only supports WinRT based on Windows 8 Consumer Preview as well as WPF, Silverlight and Windows Phone 7.1 (Mango) based on Async CTP3.<br /><br />Features\n<ul><li>EventAsync helper class that simplifies converting single-shot events into awaitable tasks</li>\n<li>Button.WaitForClickAsync() extension method- to wait for a click of a button or one of a collection of buttons</li>\n<li>Storyboard.BeginAsync() extension method - to begin a storyboard and wait for its completion</li>\n<li>FrameworkElement.WaitForLoadedAsync()/WaitForUnloadedAsync()/WaitForLayoutUpdateAsync() extension methods - to enable waiting for the associated events</li>\n<li>Selector.WaitForSelectionChangedAsync() extension method - to wait for a selection change in a ListBox, ListView and other Selectors</li>\n<li>Sample code for some of the above and an two implementations of a custom dialog class comparing the same functionality implemented with these extension methods + async/await keywords and using the classic event-driven pattern.</li></ul>\n<br /><b>How do I use it</b><br />You need to\n<ul><li>Download the source code.</li>\n<li>For WinRT code - you will need Windows 8 Consumer Preview with VS 11</li>\n<li>For anything else - VS 2010 <u> Async CTP3 </u> Silverlight and Windows Phone SDKs if you want to build these projects.</li></ul>\nThen just run the samples and browse the code and let me know what you think. Do you find it easy to use? Would you like to see more extension methods or samples?<br /><br /><b>Read more</b><br />The project started together with an article on <a href=\"http://labs.vectorform.com/2012/02/asynchronous-ui-development-in-winrt-silverlight-windows-phone-wpf-with-asyncawait-keywords-of-c-5-0/\">http://labs.vectorform.com</a> - read it to learn more about it.<br /><br /><b>TODO</b>\n<ul><li>The set of extension methods is rather limited to just prove the concept.</li>\n<li>Need a sample/library update to enable waiting for first/all of a selection of multiple types of tasks and cancel all others when done waiting.</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "Windows 8,",
  "LastEdited": "2012-09-24T21:05:56.83-07:00"
}