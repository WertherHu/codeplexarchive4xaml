{
  "ProjectName": "documentum",
  "Title": "Documentum Applications in Microsoft.NET",
  "Description": "The vision of this project is to provide examples of how Documentum can be customized using .NET and other Microsoft technologies.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">Many organizations have a requirement for interfacing Microsoft technologies with EMC Documentum.  I hope to provide sample code for some of the more common Documentum customizations involving Microsoft technologies and C# in particular.<br /><br />DOCUMENTUM AND MICROSOFT.NET DESIGN PATTERNS<br />1.  Value Assistance Management Without DAB <a href=\"http://derricksweng.blogspot.com/2009/01/value-assistance-management-without-dab.html\">(explanation)</a><br />Source control location: Trunk/D6/UpdateValueAssistance<br /><br />2.  Value Assistance Management using DFS (Just uploaded Sept. 10, 2009).  This is another implementation of the above design pattern, but this one uses DFS as a service context.  (Look in the code before running the app as the username and password are still hardcoded into the app.)<br />Source control location: Trunk/D6/D6<i>Value</i>Assistance_Manager<br /><br />3.  Value Assistance Management service written in Windows Communication Foundation (WCF) and using DFS to apply DQL queries to modify the value assistance of the custom type.<br />Source control location: Trunk/D6/dctmMiddleService<br /><br />4.  DFS (Documentum Foundation Services) Consumption Pattern  (A pattern which abstracts the calls to DFS so reusable code is put in one area.)<br />Source control location: Trunk/D6/DfsConsumer<br /><br /><br />DOCUMENTUM UTILITIES IN C#<br />1.  SyncToS4M<br />I have uploaded a new project called SyncToS4M, which basically reads data from an Excel spreadsheet, generates UPDATE DQL statements from them, and executes the statements against a repository.  It&#39;s a crude utility, but may come in useful for some operations tasks that come up.  It&#39;s also very easy to modify.<br />Source control location: Trunk/D6/SyncS4MToDctm<br /><br />2.  Media Streaming Client #1<br />This is an application that streams content from a Documentum repository to the Windows Media Player control.  This application uses DFS without the .NET productivity layer.<br />Source control location:  Trunk/Documentum/Documentum/StreamingClientSample<br /><br />3.  Media Streaming Client #2<br />Again it just streams content from a repository, except this one takes advantage of the .NET productivity layer.<br />Source control location:  Trunk/Documentum/Documentum/StreamingClient2<br /><br />4.  Count of Open Sessions<br />An application that issues a DQL query that returns the number of open sessions against a repository.  It uses the DFS Consumption pattern in its implementation.<br />Source control location:  Trunk/D6/SessionCountingApp<br /><br />5.  Retrieve Content URL<br />An application that uses the .NET productivity layer of DFS to test the API for retrieving an object&#39;s content URL.<br />Source control location: Trunk/Documentum/Documentum/CW<i>Apply</i>Permissions<br /><br />6.  Retrieve list of Excel documents<br />An application that grabs a list of all Excel content stored in a repository, using Documentum Foundation Classes (DFC) and the .NET Primary Interop Assemblies (PIA).<br />Source control location: Trunk/Documentum/Documentum/CW<i>Format</i>Guidelines<br /><br />7.  A general utility application, but using the deprecated DFC and PIA<br />a)  The method m<i>DoButton</i>Click gathers all the objects under one cabinet and moves them to another.<br />b)  The method m<i>ProcessExcelButton</i>Click loads information from an Excel spreadsheet which contains a range of cells named FormatGuidelinesTable and moves Documentum objects between folders based on the spreadsheetâ€™s information.<br />Source control location: Trunk/Documentum/Documentum/CW<i>Format</i>Guidelines2<br /><br />8.  Moving objects between cabinets<br />A sample Windows Presentation Foundation (WPF) application that moves objects from one cabinet to another.  It assumes a matching folder structure.<br />Source control location: Trunk/Documentum/Documentum/CW<i>Move</i>Format_Guidelines<br /><br />GAME CONTENT SERVICES<br />My submission to the EMC Developer Network&#39;s Monster Mash 2010 competition.  It provides a submission and retrieval workflow utilizing Documentum, xDB, Atmos online, WCF, C#.NET and XNA Framework.  It has also been published on this <a href=\"https://community.emc.com/docs/DOC-6533\">official EMC site.</a>.  This code also <b>won the grand prize and best Documentum xCP mashup prize at the EMC Developer Network Monster Mash 2010 Contest.</b><br />Source control location: Trunk/EDN<i>Monster</i>Mash_2010<br /><br />DOCUMENTUM DEVELOPMENT UTILITY<br />An utility to help developers write DQL queries and experiment with the syntax to tweak performance.<br />Source control location: Trunk/D6/Documentum<i>Dev</i>Utility<br /><br />TO DOWNLOADERS OF MY CODE:<br />Would you please add some feedback in the discussions area indicating why you are downloading my code?  It would help me improve and add more sample code valuable to you.</div><div class=\"ClearBoth\"></div>",
  "TagList": "Documentum,DFC,C#,WCF,WPF,DFS,Not good,",
  "LastEdited": "2010-11-07T17:39:48.463-08:00"
}