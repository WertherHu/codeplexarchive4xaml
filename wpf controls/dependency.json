{
  "ProjectName": "dependency",
  "Title": "Egg and Gherkin (DependencyAnalysis)",
  "Description": "DependencyAnalysis is a development tool intended to restrict the evolvement of software architecture. It is controlled by your favorite unit test framework.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>&nbsp;</p>\r\n<h2><a href=\"https://dependency.codeplex.com/documentation\" target=\"_self\">&gt;&gt; Documentation</a></h2>\r\n<p>&nbsp;</p>\r\n<h2><strong>Synopsis</strong></h2>\r\n<p>Egg and Gherkin is a development tool written in C# to qualify the evolvement of your software architecture within predefined limits. Controlled by the unit test framework of your choice, it gives immediate feedback when breaking architectural constraints.</p>\r\n<p><strong>Test output samples</strong></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre class=\"csharpcode\"><strong><span style=\"font-size:small\">AllowedNamespacesInCommonAddin</span></strong>\n\nDependencyAnalysis.DependencyException: Unapproved submodule: SubmoduleDescriptor: theeg.DependencyAnalysis.CommonAddin.Views\nUnapproved submodule: SubmoduleDescriptor: theeg.DependencyAnalysis.CommonAddin.resources\n\n   at DependencyAnalysis.VerifierUtilities.ThrowDependencyException(IEnumerable violations, String format) <span class=\"kwrd\">in</span> C:\\workspace\\Codeplex\\DependencyAnalysis\\DependencyAnalysis\\VerifierUtilities.cs:Line 39.#0\n   at DependencyAnalysis.Internal.Verifier.VerifySubmodulesInModule(ModuleDescriptor module, IEnumerable`1 allowedSubmodules) <span class=\"kwrd\">in</span> C:\\workspace\\Codeplex\\DependencyAnalysis\\DependencyAnalysis\\Internal\\Verifier.cs:Line 120.#1\n   at ArchitectureTests.ApprovedNamespacesTest.AllowedNamespacesInCommonAddin() <span class=\"kwrd\">in</span> C:\\workspace\\Codeplex\\DependencyAnalysis\\ArchitectureTests\\ApprovedNamespacesTest.cs:Line 47.#2\n\n<span style=\"font-size:small\"><strong>NumberOfParametersIsAtMost3</strong></span>\n\nDependencyAnalysis.DependencyException: theeg.DependencyAnalysis.CommonAddin.Models.ArchitectureGraphModel.&sect;Void BuildNodes(System.Collections.Generic.Dictionary`2[DependencyAnalysis.DataModel.ModuleDescriptor,System.Collections.Generic.ISet`1[DependencyAnalysis.DataModel.DependencyDescriptor]], Boolean, System.Collections.Generic.Dictionary`2[System.String,theeg.GraphWpf.Models.Node], theeg.DependencyAnalysis.CommonAddin.Models.GraphParameter) violates assumption 4\ntheeg.DependencyAnalysis.CommonAddin.Models.ArchitectureGraphModel.&sect;Void BuildModuleTransitions(System.Collections.Generic.Dictionary`2[DependencyAnalysis.DataModel.ModuleDescriptor,System.Collections.Generic.ISet`1[DependencyAnalysis.DataModel.DependencyDescriptor]], System.Collections.Generic.Dictionary`2[System.String,theeg.GraphWpf.Models.Node], System.Collections.Generic.Dictionary`2[System.String,theeg.GraphWpf.Models.Transition], theeg.DependencyAnalysis.CommonAddin.Models.GraphParameter) violates assumption 4\n\n   at DependencyAnalysis.Internal.Verifier.VerifyThat[T](Func`3 assumption, Predicate`1 whereClause) <span class=\"kwrd\">in</span> C:\\workspace\\Codeplex\\DependencyAnalysis\\DependencyAnalysis\\Internal\\Verifier.cs:Line 402.#0\n   at ArchitectureTests.MethodQualityTest.NumberOfParametersIsAtMost3() <span class=\"kwrd\">in</span> C:\\workspace\\Codeplex\\DependencyAnalysis\\ArchitectureTests\\MethodQualityTest.cs:Line 22.#1\n\n</pre>\r\n<p><strong>IDE Addin</strong></p>\r\n<p><a href=\"/projects/dependency/84b9ef7a-ed80-4b6b-b682-b3b457c5be0e\"><img title=\"overview_1\" src=\"/projects/dependency/b6e26639-6abc-4f74-b594-cd579f50030c\" alt=\"overview_1\" width=\"644\" height=\"388\" border=\"0\" style=\"padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-width:0px\"></a></p>\r\n<p><strong>Who are you?</strong><br>\r\n<br>\r\nYou are a software developer. You feel a special interest in test driven development, clean code and software architecture.</p>\r\n<p><strong>What do you want?</strong></p>\r\n<p><br>\r\nWhat you can see in your every day work, is the code quality level of classes in your IDE. Automated tests can be accessed, approved and extended right away.<br>\r\nThere are hurdles when surveying the software at the architectural level. It requires a tool first. There are quite some available. Now you have chosen for example CoolArchitecture2000 as the weapon of choice. It has a lot of features. But it has a drawback.\r\n Anytime you want to check something has changed to the architecture, you have to start that tool.</p>\r\n<p><strong>What is wrong?</strong></p>\r\n<p>We developers are the Montgomery Scotts of our software project. Our place is the machine deck (the IDE). If we had to use the turbolifts to the bridge several times a day to see the results of our work, how long will this process last until we skip the\r\n bridge visit? <br>\r\n<br>\r\n<strong>Who do you think is responsible for keeping a software architecture in shape?</strong></p>\r\n<p>1. The software architect?<br>\r\nWell the architect designs dependencies, has an overview of the whole project and bears a vision of the future structure. He suggests technologies to use. Often, he is not the one, who makes daily commits and actively changes the projects structure.</p>\r\n<p>2.Can a dedicated developer be the guardian of architecture?<br>\r\nThis will work for a prolonged time. Once he goes on holiday, no one else will invest the effort required to perform the task of keeping everything in shape. His team mates are not familiar with this task.</p>\r\n<p>3. The answer must be every developer of the team is responsible.<br>\r\nMore or less each team member has an insight at the meta-level of the project he is contributing. This is the source where the check-ins come from. And this is the only instance that can actually influence a growing sofware project.</p>\r\n<p>There is often one developer, who gives the pace, but everyone knows how to keep it going. There is often a software architect, who has the vision and defines the guidelines, but everyone contributes.<br>\r\nWhat our daily tasks require are easy to use tools. There are again FxCop, StyleCop, JDepend, NDepend, dotTest, ArchStudio among others. Either they are slow, verbose, or they have to be configured or they require you to start a tool other than your IDE. -\r\n To be honest, personally I like NDepend a lot - Now you want to verify architecture in the style of automated tests. No other tool. No need for configuration. Run inside the IDE and run the same test code during server side automated builds.<br>\r\nResponsiveness counts. As for any other kind of automated test the response time is vital, when you want the test to run on a regular basis. Developers need immediate feedback, whether they have broken some constraints they have not been aware of during the\r\n time of writing a change.<br>\r\nAutomated tests should be written in the mothers language of the developer - C&#43;&#43;, Java, C#, Scala, Groovy, Visual Basic, whatsoever. And in a manner they do not have to think that much - with a common test framework.<br>\r\n<br>\r\n&nbsp;This is the intention of this project. Create a static analysis tool for the architectural level of a software project. For CLR in first place, but later on ported to at least the Java Runtime. With your favorite unit test framework you setup the tests\r\n and validations, which then can be run during continuous integration builds. Thus feedback on changed architecture comes fast and often.</p>\r\n<p>Download via NuGet</p>\r\n<p><a href=\"https://www.nuget.org/packages/EggAndGherkin/\">https://www.nuget.org/packages/EggAndGherkin/</a></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Architecture,Dependency analysis,software testing,static analysis,duplicate detection,metrics,design principles,",
  "LastEdited": "2013-12-04T07:30:25.817-08:00"
}