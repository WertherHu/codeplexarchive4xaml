{
  "ProjectName": "genericqueryablerepository",
  "Title": "Generic Queryable Data Repository",
  "Description": "This is a .Net generic queryable repository that can be used in a variety of projects - most easily used with Entity Framework Database First.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Generic Queryable Repository</strong><br>\r\n<br>\r\n<br>\r\nThe enclosed solution represents a queryable reponsitory that can be integrated with any database back-end.&nbsp;</p>\r\n<p>The initial use for this project was in an OData, WebAPI and Entity Framework Project and Kendo UI - review here:&nbsp;<a title=\"OData, Kendo UI, Entity Framework\" href=\"http://www.whatsinyourlunch.com/odata-kendo-ui-entity-framework-webapi/\" target=\"_blank\">OData\r\n Using C#, MVC, WebAPI, Entity Framework, Dependency Injection (DI)/Inversion of Control (IoC) and Kendo UI</a>.</p>\r\n<p>A queryable repository was required in order to pass along OData query options along through with a unit of work as follows:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> This is the primary GET method for OData Requests to ~/api/Users</span>\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span>\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Server-driven Paging:  http://www.asp.net/web-api/overview/odata-support-in-aspnet-web-api/supporting-odata-query-options#server-paging</span>\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> To limit the # of records returned, use the PageSize attribute.  The response will contain a link to the next set of data.</span>\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span>\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:gray\">&lt;/returns&gt;</span>\n        <span style=\"color:green\">//[Queryable(AllowedQueryOptions = AllowedQueryOptions.All)]</span>\n        <span style=\"color:blue\">public</span> IEnumerable&lt;USER&gt; Get(ODataQueryOptions&lt;USER&gt; options)\n        {\n            <span style=\"color:blue\">var</span> unitOfWork = <span style=\"color:blue\">new</span> ATMS.Repository.UnitOfWork(_dbContext);\n\n            <span style=\"color:blue\">var</span> users = options.ApplyTo(unitOfWork.Repository&lt;USER&gt;().Queryable\n                                                  .Include(u =&gt; u.USERGROUPS)\n                                                  .OrderBy(order =&gt; order.USERNAME))\n                                                  .Cast&lt;USER&gt;().ToList();\n\n            unitOfWork.Save();      <span style=\"color:green\">// includes Dispose()</span>\n\n            <span style=\"color:blue\">return</span> users;\n        }\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>In using the&nbsp;<span style=\"font-family:Consolas,'Courier New',Courier,monospace; font-size:1em\">options.ApplyTo()</span><span style=\"font-size:10pt\">, the query string parameters used for filtering are then passed along through to Entity Framework to\r\n deliver an optimized data set, rather than an inflated payload then applying filtering later.</span></p>\r\n<p>If using this with Entity Framework, some code refactoring must be done to your EF project. &nbsp;Reference the link above for details.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "repository,unit of work,entity framework,inversion of control,di,IoC,queryable,c#,odata,mvc,",
  "LastEdited": "2013-08-13T08:38:58.007-07:00"
}