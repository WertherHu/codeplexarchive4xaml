{
  "ProjectName": "mugenmvvmtoolkit",
  "Title": "Mugen MVVM Toolkit",
  "Description": "Mugen MVVM Toolkit makes it easier to develop Silverlight, WPF, WinRT and WP applications using the Model-View-ViewModel design pattern.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>This project has moved to github for v3.0</h1>\r<h1><a href=\"https://github.com/MugenMvvmToolkit\">https://github.com/MugenMvvmToolkit</a></h1>\r\n<h1>Introduction</h1>\rMugen MVVM Toolkit makes it easier to develop cross-platform application using the Model-View-ViewModel design pattern. The Mugen MVVM Toolkit makes extensive use of Portable Class Libraries to provide maintainable cross platform C# native applications.<br />The Mugen MVVM Toolkit provides a cross-platform MVVM development framework built on top of:\n<ul><li>WinForms</li>\n<li>WPF</li>\n<li>Silverlight 5</li>\n<li>Silverlight for WP7.1, WP8, WP8.1</li>\n<li>Xamarin.Android</li>\n<li>Xamarin.iOS</li>\n<li>Xamarin.Forms</li>\n<li>WinRT XAML framework for Windows 8 Store apps</li></ul>\n\n<h1>Links:</h1>\r - <a href=\"http://www.nuget.org/packages?q=MugenMvvmToolkit\">Nuget</a><br /> - <a href=\"https://github.com/MugenMvvmToolkit/MugenMvvmToolkit.Samples\">Samples</a><br /> - <a href=\"https://github.com/MugenMvvmToolkit/MugenMvvmToolkit.Fody\">MugenMvvmToolkit.Fody plugin repository</a><br />\n<h1>Features:</h1>\rThe MVVM framework includes the following features that differs this project from other frameworks:\n<ul><li>Deep integration with each platform.</li>\n<li>Supports save/restore state for mobile platforms.</li>\n<li>Full Fragment support for Android, you do not need to worry about activity, fragments, sub-fragments or their state all this makes the framework.</li>\n<li>Solves the nested user controls problem in MVVM, all view models are dynamically created by you, using the <i>GetViewModel</i> and <i>GetViewModel&lt;TViewModel&gt;</i> methods and you do not need to use the <i>ViewModelLocator</i>.</li>\n<li>Supports all kinds of navigation like modal window, page navigation, tab navigation, back stack fragment navigation for android. You can also easily add a new kind of navigation.</li>\n<li>Navigation system works with view models and allows to expect the completion of the operation. You can pass any parameters between view models. An example of how to navigate looks in other frameworks:</li></ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\nNavigate&lt;DetailViewModel&gt;(<span style=\"color:Blue;\">new</span> DetailParameters() { Index = 2 });\r\n</pre></div><br />An example of how to navigate looks in MugenMvvmToolkit:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> (<span style=\"color:Blue;\">var</span> editorVm = GetViewModel&lt;ProductEditorViewModel&gt;())            \n{\n   <span style=\"color:Blue;\">var</span> productModel = <span style=\"color:Blue;\">new</span> ProductModel { Id = Guid.NewGuid() };\n   editorVm.InitializeEntity(productModel, <span style=\"color:Blue;\">true</span>);\n   <span style=\"color:Blue;\">if</span> (!await editorVm.ShowAsync())\n\t   <span style=\"color:Blue;\">return</span>;\n   <span style=\"color:Green;\">//Code that will be called after the completion of navigation, and yes, this code will be executed even if the application had been tombstoned and then restored.</span>\n}\r\n</pre></div>*<i>For WinRT and WP you should install the <a href=\"https://github.com/MugenMvvmToolkit/MugenMvvmToolkit.Fody\">https://github.com/MugenMvvmToolkit/MugenMvvmToolkit.Fody</a> plugin to support async operation restore.</i>\n<ul><li>Good design mode support, for xaml platforms supports the creation of design view model with any constructor parameters.</li>\n<li>Supports bindings on all platforms, all of the native binding features available for WPF platform available on all platforms and even more.</li>\n<li>Binding supports C# language expressions like Linq, Extension methods, method call, ternary operator (?:), coalescing operator (??), etc.</li></ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n(Text Items.First(x =&gt; x == Name).Value), (Text $<span style=\"color:Blue;\">string</span>.Format(<span style=\"color:#A31515;\">&#39;{0} {1}&#39;</span>, Prop1, Prop2))\r\n</pre></div><ul><li>Supports subscription to any control event.</li></ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n(TextChanged ViewModelMethod($args)), (DoubleClick Command)\r\n</pre></div> \n<ul><li>Built-in support for validation. </li></ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n(Text Prop1, Validate=True), (Text $GetErrors(Prop1).FirstOrDefault())\r\n</pre></div><ul><li>You can easily write their own extensions for bindings.</li></ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n(Text $i18.MyLocalizableString), (Text $MyCustomMethod(Prop1))\r\n</pre></div><ul><li>Supports attached members (properties, events, methods), you can extend any object as you want.</li>\n<li>Special editor for WinForms, you do not need to write code to create bindings.</li>\n<li>Binding parser builds syntax tree that allows you to easily change or extend the bindings, without manipulation of the raw text.</li>\n<li>Binding supports fluent syntax.</li>\n<li>Excellent performance.</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "MVVM,Toolkit,C#,Windows Phone 7,Silverlight,dependency injection,WPF,Model View ViewModel,WinRT,",
  "LastEdited": "2014-12-31T06:07:15.36-08:00"
}