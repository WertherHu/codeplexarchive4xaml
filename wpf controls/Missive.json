{
  "ProjectName": "Missive",
  "Title": "Missive",
  "Description": "Missive is a lightweight API that you use to send and handle messages in place of calling methods directly to achieve 3 goals:\r\n\r\n* Inversion of Control \r\n* Asynchronous execution\r\n* Stability through patterns (circuit breaker, message timeout, resource pooling)\r\n\r\nMissive looks a bit like a message bus, but it does not handle communication with out of process services, rather it makes it easier to implement the above patterns so that your code is better isolated from outside services.\r\n\r\nIt is written in C# .NET 4.0 using the Task Parallel libraries for the asynchronous operations.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>News</b><br /><br />11-March-2012<br /><br />I have been researching how I want to implement the timeout stability pattern.  Since doing async efficiently (esp. with timeout) is often very dependent on a lot of tech-specific factors, I have decided to provide a lot of specialized handlers for this.   Also I&#39;m starting a new job, so the updates may be slower than I had hoped, depending on how that goes.<br /><br />Specialized handlers with timeouts will include implementations around the FileStream, WebRequest, SqlCommand and networking and smtp related streams and classes and any other useful BCL classes I can find that implement the APM.<br /><br />In addition, a generic timeout handler option will be provided, which doesn&#39;t participate in any way in shutting down the action under timeout (just the same as the ThreadPool and Tasks APIs don&#39;t now).<br /><br />The idea is to remain a thin wrapper that provides guidance as to how to do things, not to try to do too much magic to make it work for the consumer (while taking on a lot of dangerous assumptions).<br /><br /><b>Project Description</b><br />Missive is a lightweight API that you use to send and handle messages in place of calling methods directly to achieve 3 goals&#58;<br /><br />&#42; Inversion of Control <br />&#42; Asynchronous execution<br />&#42; Stability through patterns &#40;circuit breaker, message timeout, resource pooling&#41;<br /><br />Missive looks a bit like a message bus, but it does not handle communication with out of process services, rather it makes it easier to implement the above patterns so that your code is better isolated from outside services.<br /><br />It is written in C&#35; .NET 4.0 using the Task Parallel libraries for the asynchronous operations.<br />\n<h1>Examples:</h1>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-03-11T18:24:01.593-07:00"
}