{
  "ProjectName": "mvcimproved",
  "Title": "Mvc Improved - Type Safe Controls",
  "Description": "Builds upon the success of ASP.NET MVC and adds some fundamental missing pieces, such as typesafe controls and an improved ModelBinder",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>What Is it?</h1>\r\nMvcImproved tries to add some things that are missing in MVC, including but not limited to:<br />\n<ul><li><b>Typesafe MVC controls</b>, based on the type of the Model and its members\n<ul><li>Repeater</li>\n<li>CheckBox</li>\n<li>Literal</li></ul></li>\n<li>An <b>improved DefaultModelBinder which binds more smartly to List&lt;&gt; and Dictionary&lt;&gt;</b>, not requiring index succession.  Additionaly, Dictionary&lt;&gt; will now parse the key value of the form parameter.</li></ul>\n\n<h1>Benefits</h1>\r\n<ul><li><b>Faster</b> - Instead of doing string lookups in dictionaries to get a member value, Lamda expressions are used</li>\n<li><b>Safer</b> - Type safety will blow up during compile time instead of runtime (but you must enable <b>MvcBuildViews</b>)</li></ul>\n<h1><a href=\"https://mvcimproved.codeplex.com/wikipage?title=Installation&referringTitle=Home\">Installation Instructions</a></h1>\r\n<h1>Usage</h1>\r\nGiven the following model:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">namespace</span> MvcImprovedTest.Models\n{\n\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> ProductExtra\n\t{\n\t\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> ExtraInfo1;\n\t\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> ExtraInfo2;\n\t}\n\n\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> Product\n\t{\n\t\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">long</span> ID;\n\t\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name;\n\t\t<span style=\"color:Blue;\">public</span> List&lt;ProductExtra&gt; Extra;\n\t}\n}\r\n</pre></div><br />We can define an ASPX page as follows:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"background-color:Yellow;\">&lt;%</span><span style=\"color:Blue;\">@</span> <span style=\"color:#A31515;\">Page</span> <span style=\"color:Red;\">Language</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;C#&quot;</span> <span style=\"color:Red;\">Inherits</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;MvcImproved.Generic.ViewPage&quot;</span> <span style=\"color:Red;\">ModelType</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;MvcImprovedTest.Models.Product&quot;</span> <span style=\"color:Red;\">MasterPageFile</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;~/Views/Shared/Site.Master&quot;</span> <span style=\"background-color:Yellow;\">%&gt;</span>\n\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">asp</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Content</span> <span style=\"color:Red;\">ID</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;Content1&quot;</span> <span style=\"color:Red;\">ContentPlaceHolderID</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;MainContent&quot;</span> <span style=\"color:Red;\">runat</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;server&quot;</span><span style=\"color:Blue;\">&gt;</span>\n\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">h2</span><span style=\"color:Blue;\">&gt;</span>Simple Product Test 2 - Using ModelType instead of generic declaration<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">h2</span><span style=\"color:Blue;\">&gt;</span>\n\n\t<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">mvcg</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Literal</span> <span style=\"color:Red;\">runat</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;server&quot;</span> <span style=\"color:Red;\">ValueMember</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;Name&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n\n\t<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">mvcg</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Repeater</span> <span style=\"color:Red;\">runat</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;server&quot;</span> <span style=\"color:Red;\">ValueMember</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;Extra&quot;</span><span style=\"color:Blue;\">&gt;</span>\n\t\t<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">ItemTemplate</span><span style=\"color:Blue;\">&gt;</span>\n\t\t\t<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">span</span><span style=\"color:Blue;\">&gt;</span>Info 1: <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">mvcg</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Literal</span> <span style=\"color:Red;\">runat</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;server&quot;</span> <span style=\"color:Red;\">ValueMember</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;ExtraInfo1&quot;</span> <span style=\"color:Blue;\">/&gt;</span><span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">span</span><span style=\"color:Blue;\">&gt;</span>\n\t\t\t<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">span</span><span style=\"color:Blue;\">&gt;</span>Info 2: <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">mvcg</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Literal</span> <span style=\"color:Red;\">runat</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;server&quot;</span> <span style=\"color:Red;\">ValueMember</span><span style=\"color:Blue;\">=</span><span style=\"color:Blue;\">&quot;ExtraInfo2&quot;</span> <span style=\"color:Blue;\">/&gt;</span><span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">span</span><span style=\"color:Blue;\">&gt;</span>\n\t\t<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">ItemTemplate</span><span style=\"color:Blue;\">&gt;</span>\n\t<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">mvcg</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Repeater</span><span style=\"color:Blue;\">&gt;</span>\n\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">asp</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Content</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div><br />Which will give us the following Intellisense:<br /><img src=\"/projects/mvcimproved/6a214f37-4f6b-4ff7-8379-c31ae460584c\" alt=\"Intellisense&#32;Sample\" title=\"Intellisense&#32;Sample\" /><br />\n<h1>Designer Mode</h1>\rOne of the greatest advantagtes to using controls instead of &lt;% %&gt; tags is their visibility in design mode.<br /><img src=\"/projects/mvcimproved/79360ee6-44a3-4f2e-9138-30aba792d636\" alt=\"Design&#32;Mode&#32;Sample\" title=\"Design&#32;Mode&#32;Sample\" /><br />\n<h1><a href=\"https://mvcimproved.codeplex.com/wikipage?title=MoreSamples&referringTitle=Home\">More Samples</a></h1>\r\n<h1><a href=\"https://mvcimproved.codeplex.com/wikipage?title=CustomControl&referringTitle=Home\">Write Your Own Type-Safe Control</a></h1>\r\n<h1>Future Work</h1>\r\nCurrently, only a handful of controls are implemented as generic type-safe controls. The most important part, however (parsing of generic controls) is complete.<br /><br />A list of TODO&#39;s:\n<ul><li>More controls (TextBox, RadioButton, etc.)</li>\n<li>At some later date, a custom PageParser that better handles generic types</li></ul>\n<br />Because of ASP.NET&#39;s poor and buggy implementation of the ControlBuilder classes, some of the code is quite hacky.  Hopefully in the near future there will be better support for custom page and control builders, and better support for generics.<br /><br /><b>Your contribution is requested and welcomed!</b></div><div class=\"ClearBoth\"></div>",
  "TagList": "mvc,MVC Framework,type safety,generic control,mvc controls,",
  "LastEdited": "2009-08-24T12:02:01.35-07:00"
}