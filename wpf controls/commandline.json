{
  "ProjectName": "commandline",
  "Title": "Command Line Parser Library",
  "Description": "The Command Line Parser Library offers to CLR applications an hassle free API constantly updated API since 2005. Unix-like, automatic help screen generation.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>The Command Line Parser Library offers to CLR applications a clean and concise API for manipulating command line arguments and related tasks. It allows you to display an help screen with an high degree of customization and a simple way to report syntax errors\r\n to the user. Everything that is boring and repetitive to be programmed stands up on library shoulders,&nbsp;letting you concentrate yourself on core logic.\r\n<strong>This library provides <em>hassle free</em>&nbsp;command line parsing with a&nbsp;<strong>constantly updated</strong>&nbsp;API since 2005.</strong></p>\r\n<p><img src=\"https://raw.github.com/gsscoder/commandline/master/art/CommandLineNuGet.png\" alt=\"Install-Package CommandLineParser\" width=\"740\" height=\"71\"></p>\r\n<p><strong>At glance</strong></p>\r\n<ul>\r\n<li>Library available via NuGet:\r\n<ul>\r\n<li>Latest stable: <strong>Install-Package CommandLineParser</strong>. </li><li>Latest release: <strong>Install-Package CommandLineParser -pre</strong>. </li></ul>\r\n</li><li>One line parsing using default singleton: <strong>CommandLine.Parser.Default.ParseArguments(...)</strong>.\r\n</li><li>One line help screen generator: <strong>HelpText.AutoBuild(...)</strong>. </li><li>Map command line arguments to <strong>IList&lt;string&gt;</strong>, <strong>arrays</strong>,\r\n<strong>enum</strong> or standard&nbsp;<strong>scalar types</strong>. </li><li><strong>Plug-In friendly</strong> architecture as explained&nbsp;<a href=\"https://github.com/gsscoder/commandline/wiki/Plug-in-Friendly-Architecture\">here</a>.\r\n</li><li>Define <a href=\"https://github.com/gsscoder/commandline/wiki/Verb-Commands\">verb commands</a> as\r\n<strong>git commit -a</strong>. </li><li>Create parser instance using lambda expressions. </li></ul>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Define a class to receive parsed values</span>\n<span style=\"color:blue\">class</span> Options {\n  [Option(<span style=\"color:#a31515\">'r'</span>, <span style=\"color:#a31515\">&quot;read&quot;</span>, Required = <span style=\"color:blue\">true</span>,\n    HelpText = <span style=\"color:#a31515\">&quot;Input file to be processed.&quot;</span>)]\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> InputFile { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n    \n  [Option(<span style=\"color:#a31515\">'v'</span>, <span style=\"color:#a31515\">&quot;verbose&quot;</span>, DefaultValue = <span style=\"color:blue\">true</span>,\n    HelpText = <span style=\"color:#a31515\">&quot;Prints all messages to standard output.&quot;</span>)]\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> Verbose { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n\n  [ParserState]\n  <span style=\"color:blue\">public</span> IParserState LastParserState { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n\n  [HelpOption]\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> GetUsage() {\n    <span style=\"color:blue\">return</span> HelpText.AutoBuild(<span style=\"color:blue\">this</span>,\n      (HelpText current) =&gt; HelpText.DefaultParsingErrorsHandler(<span style=\"color:blue\">this</span>, current));\n  }\n}\n\n<span style=\"color:green\">// Consume them</span>\n<span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Main(<span style=\"color:blue\">string</span>[] args) {\n  <span style=\"color:blue\">var</span> options = <span style=\"color:blue\">new</span> Options();\n  <span style=\"color:blue\">if</span> (CommandLine.Parser.Default.ParseArguments(args, options)) {\n    <span style=\"color:green\">// Values are available here</span>\n    <span style=\"color:blue\">if</span> (options.Verbose) Console.WriteLine(<span style=\"color:#a31515\">&quot;Filename: {0}&quot;</span>, options.InputFile);\n  }\n}</pre>\r\n</div>\r\n<p><strong>Overview</strong></p>\r\n<p>The command line input, read from the standard entry point as string array, is then pushed in an instance of a custom type decorated with library attributes. Just create this class with\r\n<span style=\"text-decoration:underline\">one field</span> for <span style=\"text-decoration:underline\">\r\neach option value</span> you want to make persistent (and a specialized attributes for&nbsp;<span style=\"text-decoration:underline\">non-option values</span>).\r\n<strong>Rules</strong> about <span style=\"text-decoration:underline\">command line options</span> are\r\n<em>engraved</em> in your custom type from <strong>library attributes</strong>.</p>\r\n<ul>\r\n<li><span style=\"font-size:10pt\">The </span><strong style=\"font-size:10pt\">library source code</strong><span style=\"font-size:10pt\"> contains a\r\n</span><a href=\"https://github.com/gsscoder/commandline/tree/master/src/demo\" style=\"font-size:10pt\">sample application</a><span style=\"font-size:10pt\"> that will clarify all told up to this moment. In this sample you'll not find how to use\r\n</span><strong style=\"font-size:10pt\">mutually exclusive options</strong><span style=\"font-size:10pt\">, please read this\r\n</span><a href=\"https://github.com/gsscoder/commandline/blob/master/src/tests/Unit/Parser/MutuallyExclusiveParsingFixture.cs\" style=\"font-size:10pt\">test source</a><span style=\"font-size:10pt\"> file (explore the code also looking at\r\n</span><a href=\"https://github.com/gsscoder/commandline/tree/master/src/tests/Fakes\" style=\"font-size:10pt\">this folder</a><span style=\"font-size:10pt\">).</span>\r\n</li><li><span style=\"font-size:10pt\">More informations on </span><a href=\"https://github.com/gsscoder/commandline/wiki\" style=\"font-size:10pt\">Project Wiki</a><span style=\"font-size:10pt\">.</span>\r\n</li></ul>\r\n<p><strong>Consuming The Code</strong></p>\r\n<p>The project is entirely <strong>written in C#</strong> and can also be included into another (C#) project (<strong>StyleCop</strong> compliant). Anyway you can reference the library as binary DLL file (<strong>CLSCompliant</strong> == true), consuming it\r\n from <strong>any .NET language</strong>. Depending on your IDE, it's possible to take advantage of\r\n<strong>documentation comments</strong> attached to any publicly visible member.</p>\r\n<p><strong>Versions</strong></p>\r\n<ul>\r\n<li>Latest available stable download:&nbsp;<strong>1.9.71.2 stable</strong>. </li><li>Latest available download:&nbsp;<strong>1.9.71.2 stable</strong>. </li><li>Latest available version on NuGet:&nbsp;<strong>1.9.71.2 stable</strong>. </li><li>Latest available version on&nbsp;<a href=\"https://github.com/gsscoder/commandline/tree/stable-1.9.71.2\">@github branch</a>:&nbsp;<strong><strong>1.9.71.2 stable</strong></strong>&nbsp;(27 Feb 2013).\r\n</li><li>Development <a href=\"https://github.com/gsscoder/commandline\">master @github</a>:\r\n<strong>2.0.7-pre</strong>&nbsp;(26 Jun 2015&nbsp;can be used, but support will be limited).\r\n</li><li><a href=\"https://github.com/gsscoder/commandline/wiki/Official-Roadmap\" style=\"font-size:10pt\">Roadmap</a><span style=\"font-size:10pt\">&nbsp;(</span><strong style=\"font-size:10pt\">recently published</strong><span style=\"font-size:10pt\">): it's not carved\r\n in the stone, say your!</span> </li></ul>\r\n<p><em>So, what version should you use?</em>&nbsp;At the moment use the latest stable. If you're interested in what's going on in development branch,\r\n<a href=\"https://github.com/gsscoder/commandline/issues/59\">read this</a>.</p>\r\n<p><strong>Input Specification</strong></p>\r\n<ul>\r\n<li>User can specify options with a high degree of freedom. This <a href=\"http://www.gnu.org/software/libc/manual/html_node/Getopt.html\">\r\nUnix-like specification</a> survives from years and years. </li><li>However, you can read all details about it here: <a href=\"/wikipage?title=Input%20Specification&referringTitle=Home\">\r\nInput Specification</a>&nbsp;and this <a href=\"https://github.com/gsscoder/commandline/wiki/Grammar-Details\">\r\nupdated guide</a>. </li><li>From <strong>1.9.4.91 beta</strong> you can take advantage of <a href=\"http://gsscoder.blogspot.it/2013/01/command-line-parser-library-verb.html\">\r\nverb commands</a> (e.g. <strong>yourapp verb1 --opt-1 --opt-2</strong>). </li></ul>\r\n<p><strong>Why Use, Why This</strong></p>\r\n<ol>\r\n<li>Remove from each application the code specific for command line parsing and hence p<span style=\"font-size:10pt\">romote\r\n<strong>code reuse</strong> through a consistent, clear and easy to use API.</span>\r\n</li><li>The API is <strong>lightweight</strong>, has no external dependencies and is easy to integrate within an application.\r\n</li><li>The library does <strong>not force you to implement interfaces</strong> or inherit from base classes (avoiding propagating its types into your hierarchies).\r\n</li><li>The <strong>project</strong> and its <strong>documentation</strong> are <strong>\r\ncontinuously updated</strong> and extended. </li><li>It has been used for years in many <strong>closed</strong> and <strong>open source projects</strong>.\r\n</li><li>This project has also grown through the interaction of <strong>enthusiastic users</strong> and from constructive criticism.\r\n</li><li><strong>Comments</strong> and various types of communication are <strong>taken seriously by the author</strong> (for question of time the author checks more frequently issues posted\r\n<a href=\"https://github.com/gsscoder/commandline/issues?sort=comments&state=open\">\r\nhere</a>). </li><li><strong>Warp speed</strong> start with <a href=\"https://github.com/gsscoder/commandline/tree/master/src/templates\">\r\ntemplates</a>. </li></ol>\r\n<p><strong>Compatibility</strong></p>\r\n<ul>\r\n<li>.NET Framework 3.5&#43; </li><li>Mono Profile 2.1&#43; </li></ul>\r\n<p>Each <em>stable release</em> is also tested under <strong>Windows&nbsp;</strong>and\r\n<strong>Mac OS X</strong>, while it's mainly developed using <strong>Ubuntu</strong>.&nbsp;This project contains unit tests from first release.</p>\r\n<p><strong>Acknowledgements</strong></p>\r\n<ul>\r\n<li>Thanks to&nbsp;<a href=\"http://www.jetbrains.com/\">JetBrains</a>&nbsp;for providing an open source license for&nbsp;<a href=\"http://www.jetbrains.com/resharper/\">ReSharper</a>.\r\n</li></ul>\r\n<p><strong>Main Contributor (alphabetical order)</strong></p>\r\n<ul>\r\n<li><strong><strong>Alexander Fast</strong>&nbsp;(<a href=\"https://github.com/mizipzor\">github</a>)<br>\r\n</strong></li><li><strong>Dan Nemec</strong>&nbsp;(<a href=\"https://github.com/nemec\">github</a>)\r\n</li><li><strong>Kevin Moore</strong> (<a href=\"https://github.com/gimmemoore\">github</a>)\r\n</li><li><strong>Steven Evans</strong>&nbsp;(<a href=\"http://sleeplessmonkey.blogspot.com/\">blog</a>)\r\n</li></ul>\r\n<p><strong>Few OSS using the project:</strong></p>\r\n<ul>\r\n<li><a href=\"http://sqlcecmd.codeplex.com/\">SQL Compact Command Line Tool</a> - from\r\n<strong>Erik Ejlskov Jensen</strong>. </li><li><a href=\"https://github.com/Vooban/MsBuilderific\">MsBuilderific</a> - from <strong>\r\nKevin Moore (Vooban)</strong>. </li><li><a href=\"http://cptree.codeplex.com/\">Copy Directory Tree Utility</a>&nbsp;- from the&nbsp;<strong>author</strong>.\r\n</li><li><a href=\"https://github.com/nemec/smartconf\">SmartConf</a> (with this <a href=\"https://github.com/nemec/smartconf.sources\">\r\nprovider</a>) from <strong>Dan Namec</strong>. </li></ul>\r\n<p>Do your project use this library? Contact me to be listed here (if you want).</p>\r\n<p><strong>Contacts</strong></p>\r\n<ul>\r\n<li><span style=\"font-size:10pt\">Announcements, tips and warning of important changes:\r\n<strong>t</strong></span><strong style=\"font-size:10pt\">witter</strong><span style=\"font-size:10pt\">&nbsp;</span><a href=\"http://twitter.com/gsscoder\" style=\"font-size:10pt\">@gsscoder</a>\r\n</li><li><span style=\"font-size:10pt\">For any communications like </span><strong style=\"font-size:10pt\">issues</strong><span style=\"font-size:10pt\"> or\r\n</span><strong style=\"font-size:10pt\">feature requests</strong><span style=\"font-size:10pt\">:&nbsp;</span><a href=\"https://github.com/gsscoder/commandline/issues?sort=comments&state=open\" style=\"font-size:10pt\">issue section</a>\r\n<ul>\r\n<li><strong>When you don't get a reply here, follow the link suggested above.</strong>\r\n</li></ul>\r\n</li><li><span style=\"font-size:10pt\">For anything else:&nbsp;</span><a href=\"mailto:gsscoder@gmail.com\" style=\"font-size:10pt\">write to me</a><span style=\"font-size:10pt\"> (gsscoder AT gmail DOT com)</span>\r\n</li></ul>\r\n<ul>\r\n<li>\r\n<p><span style=\"font-size:10pt\">read my blog&nbsp;(<strong>*new)</strong>:&nbsp;<a href=\"http://gsscoder.github.com/\">http://gsscoder.github.com/</a></span></p>\r\n</li></ul>\r\n<p><strong>Please Support</strong></p>\r\n<p>If you use and like this project and you want help the author to keep it updated, please&nbsp;help me stay awake after work\r\n<em>buying a cup of coffee for me</em>.<br>\r\nYou can do it via&nbsp;<a href=\"http://www.paypal.com/\">PayPal</a>&nbsp;by clicking the\r\n<em><strong>coffee cup</strong></em>&nbsp;below.</p>\r\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=Y3TSBJVNQ2GS6\" target=\"_self\"><img src=\"https://dl.dropbox.com/u/50740523/coffee.png\" alt=\"PayPal - The safer, easier way to pay online!\" style=\"border:0\"></a></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,C#,Controls,Line,parser,Command Line,Library,utility,cmd,CLI,CLR,Command,Command Line Parser,mono,unix,linux,windows,macosx,lightweight,CommandLineParser,",
  "LastEdited": "2015-06-25T22:16:08.3-07:00"
}