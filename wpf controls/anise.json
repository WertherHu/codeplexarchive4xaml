{
  "ProjectName": "anise",
  "Title": "Anise",
  "Description": "Anise is a dependency injection framework specifically written to make the developer's job as easy as possible.  You don't have to develop your code specifically for the framework, and it provides all features you'd expect along with simple and flexible configuration language.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">Dependency Injection is a software design pattern in which classes are written expecting to be told about their dependencies instead of containing code to resolve them on their own.  Some typical examples of this sort of dependency resolving code include:<br />\n<ul><li>Creating instances in a constructor or &quot;init&quot; method</li>\n<li>Reading config files</li>\n<li>Reading configuration data from a web service or database</li>\n<li>Accessing global variables (or static variables)</li></ul>\n<br />All of these methods of resolving dependencies have one or more of the following problems:<br />\n<ul><li>Creates tight coupling between the class and the specific implementation of an interface</li>\n<li>Creates tight coupling between the class and a remote resource</li>\n<li>Creates tight coupling between the class and the file system</li>\n<li>Makes it more difficult or impossible to isolate the class for testing</li>\n<li>Makes it difficult to change the number of instances of a given class (especially changing from a singleton to multiple instances)</li></ul>\n<br />Anise is a framework which helps you implement the Dependency Injection pattern by making it easy to:<br />\n<ul><li>Write each class with constructors and properties for accepting dependencies instead of code to resolve dependencies on their own</li>\n<li>Introduce dependencies into each class using a simple configuration file</li>\n<li>Configure any object using any constructor, property or method with no extra boilerplate</li>\n<li>Radically reconfigure your program using a simple configuration file</li>\n<li>Isolate any class for unit testing and provide stub objects</li></ul>\n<br />If you&#39;re familiar with other Dependency Injection frameworks (e.g., Unity, Spring, etc.), here are some of the major differences between Anise and other frameworks:<br />\n<ul><li>Anise uses an extremely simple language (similar to JSON) for specifying configuration files instead of XML.</li>\n<li>Anise allows objects to be declared inline anywhere a value is expected</li>\n<li>Anise allows <i>any</i> object to be referenced from anywhere in a configuration script</li>\n<li>Anise allows any script to be included from another script (similar to #include in C)</li>\n<li>Anise allows injection by constructors, properties, or methods</li>\n<li>Anise allows any property or method to be injected multiple times on the same object</li>\n<li>Anise provides detailed error messages including file, line number, and position for any exceptions</li>\n<li>Anise comes with a command-line program to either run your scripts, or to serve as an interactive shell</li>\n<li>Anise supports being embedded inside another program, and can use embedded resources for configuration scripts</li>\n<li>Read the User&#39;s Guide in the documentation section for more details!</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "dependency injection,Inversion of Control,C#,unity,Spring.NET,Ninject,Configuration,console application,Command Line,",
  "LastEdited": "2010-06-27T11:18:23.807-07:00"
}