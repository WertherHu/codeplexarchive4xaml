{
  "ProjectName": "healthvaultwp7",
  "Title": "Microsoft HealthVault Windows Phone Library",
  "Description": "HealthVault Windows Phone library enables developers to write Windows Phone applications which interact with a user's personally controlled health record.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nThe HealthVault team has recently added the capability to write applications that will run on Mobile Devices and connect directly to the HealthVault Service. HealthVault Windows Phone library enables developers to write Windows Phone applications which interact\r\n with a user's personally controlled health record.</p>\r\n<p>This wiki describes the process of connecting to the HealthVault pre-production environment. The &ldquo;go live&rdquo; process to deploy an application against the production HealthVault service can be found\r\n<a href=\"http://msdn.microsoft.com/en-us/healthvault/bb962148.aspx\">here</a>.</p>\r\n<p>Information about the API that the HealthVault service exposes can be in the documentation in\r\n<a href=\"http://www.microsoft.com/downloads/en/details.aspx?familyid=95E14343-FB98-4549-BD29-225A59423CC9&displaylang=en\">\r\nHealthVault .NET SDK</a>.</p>\r\n<h2>Architecture</h2>\r\n<p>The mobile support is built upon a capability we call SODA. The developer registers an master application using the\r\n<a href=\"https://config.healthvault-ppe.com/\">Application Configuration Center</a> and marks that application as a SODA application. This enables the mobile application to create child applications using this master application.</p>\r\n<p>The process of the mobile application getting set up to use the HealthVault service is known as &ldquo;provisioning&rdquo;, and consists of the following steps:</p>\r\n<h3>Obtaining child application information</h3>\r\n<p>The application calls the HealthVault service to obtain an identifier for the child application and a shared secret.</p>\r\n<h3>Creating and authorizing the application</h3>\r\n<p>The application sends the child application information to the HealthVault Shell web site. The user performs the following steps:</p>\r\n<ol>\r\n<li>Creates a HealthVault account, or authenticates if they already have an existing account\r\n</li><li>Indicates which record(s) should be accessible to the application, and grants access.\r\n</li></ol>\r\n<p>The HealthVault Shell then sends this information to the HealthVault Service, which creates the child application and stores the authorization information.</p>\r\n<h3>Connecting and obtaining user information</h3>\r\n<p>The mobile application can then call into the HealthVault service and obtain information about the user and record(s) that were authorized.</p>\r\n<p>When this operation has completed, the application may now access the record to read and write health data.</p>\r\n<h1>Using the library</h1>\r\n<p>To provide the most flexibility and the least resource consumption, any operations that talk to the HealthVault service are asynchronous.</p>\r\n<p>At startup, the application must create an instance of the HealthVaultService class, and call BeginCheckAuthentication before performing any HealthVault operations. When the completion handler is called it needs to set the CurrentRecord property if it has\r\n not already been set.</p>\r\n<p>To send a request to the HealthVault service, the application does the following:</p>\r\n<ol>\r\n<li>Creates an instance of the HealthVaultRequest class, which defines the method to be called, the information to be passed, and a completion handler to be called when the request is finished.\r\n</li><li>Call HealthVaultService.BeginSendRequest and pass in the request instance. </li><li>In the completion handler, check for errors by looking at the ErrorText property on the event arguments.\r\n</li><li>If the ErrorText property is null, the request was successful and the returned XML can be processed.\r\n</li></ol>\r\n<p>In C#, it will look something like this:</p>\r\n<blockquote>\r\n<p>void c_SaveWeight_Click(object sender, RoutedEventArgs e) <br>\r\n{ <br>\r\nstring thingXml = @&quot;&lt;info&gt;&lt;thing&gt; <br>\r\n&lt;type-id&gt;3d34d87e-7fc1-4153-800f-f56592cb0d17&lt;/type-id&gt; <br>\r\n&lt;thing-state&gt;Active&lt;/thing-state&gt; <br>\r\n&lt;flags&gt;0&lt;/flags&gt; <br>\r\n&lt;data-xml&gt; <br>\r\n&lt;weight&gt; <br>\r\n{0} <br>\r\n&lt;value&gt; <br>\r\n&lt;kg&gt;{1}&lt;/kg&gt; <br>\r\n&lt;display units=&quot;&quot;pounds&quot;&quot;&gt;{2}&lt;/display&gt; <br>\r\n&lt;/value&gt; <br>\r\n&lt;/weight&gt; <br>\r\n&lt;common/&gt; <br>\r\n&lt;/data-xml&gt; <br>\r\n&lt;/thing&gt;&lt;/info&gt;&quot;;</p>\r\n<p>double weight = Double.Parse(c_textWeight.Text); <br>\r\nstring whenString = GetDateTime(DateTime.Now, &quot;when&quot;); <br>\r\nstring xml = String.Format(thingXml, whenString, weight / 2.204, weight);</p>\r\n<p>XElement info = XElement.Parse(xml);</p>\r\n<p>HealthVaultRequest request = new HealthVaultRequest(&quot;PutThings&quot;, &quot;2&quot;, info, PutThingsCompleted);</p>\r\n<p>_service.BeginSendRequest(request); <br>\r\n}</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>void PutThingsCompleted(object sender, HealthVaultResponseEventArgs e) <br>\r\n{ <br>\r\nif (e.ErrorText != null) <br>\r\n{ <br>\r\n// handle error... <br>\r\n}</p>\r\n<p>XElement response = XElement.Parse(e.ResponseXml);</p>\r\n<p>XElement thingIdNode = response.Descendants(&quot;thing-id&quot;).Single();</p>\r\n<p>Guid thingId = new Guid(thingIdNode.Value);</p>\r\n<p>Guid versionStamp = new Guid(thingIdNode.Attribute(&quot;version-stamp&quot;).Value);</p>\r\n<p>}</p>\r\n</blockquote>\r\n<h2>Working with Data Types</h2>\r\n<p>There is a list of <a href=\"http://developer.healthvault.com/pages/types/types.aspx\">\r\nall the current data types</a> on the HealthVault developer center. You can use the schemas through whatever XML serialization your platform provides, or by hand-crafting the XML.</p>\r\n<p>If you have a windows box handy, you may find it helpful to write the actions you are wanting to perform in a web application and then examine the XML that is created through\r\n<a href=\"http://msdn.microsoft.com/en-us/healthvault/cc135993\">Request/Response tracing</a>.</p>\r\n<p><strong>Reference<br>\r\n</strong><a href=\"http://healthvaultwp7.codeplex.com/wikipage?title=Reference\">http://healthvaultwp7.codeplex.com/wikipage?title=Reference</a></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "WP7,SDK,Health,",
  "LastEdited": "2013-07-09T21:22:10.203-07:00"
}