{
  "ProjectName": "etudata",
  "Title": "ETU Data Layer Control - \"Easy To Use Data Layer Control\"",
  "Description": "The ETU Data Layer Control for SQL Server is designed with efficiency and rapid development in mind.  The control handles the opening and closing of the database connections, provides reusuable DataSet and DataReader methods, and allows output values from Stored Procedures.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>The ETU Data Layer Control stands for &quot;Easy To Use&quot; data layer. As simple as that, it is easy to use. It handles open/close of database connections and takes care of the mapping and plumbing of parameters passed into stored procedures, while providing reusable\r\n DataSet and DataReader methods. Below are samples of the data layer at work:<br>\r\n<br>\r\n<strong>1. Ensure the following connection string name is in your app/web.config file and the name must be &quot;ETU_<em>common_</em>Helper_Connection&quot; -- you can add as many connection strings as you want and use the connection string override, but this string\r\n must exist at least once.</strong></p>\r\n<p>&quot;&lt;add name=&quot;ETU_common_Helper_Connection&quot; connectionString=&quot;Data Source=xxxxx;Initial Catalog=xxxxx;Integrated Security=True&quot; providerName=&quot;System.Data.SqlClient&quot; /&gt;&quot;<br>\r\n<br>\r\n<strong>2. The data layer uses object arrays to pass in parameters to the underlying stored procedures. This provides flexibility in allowing many object types (string, integer, etc) to be passed into the data layer. Parameters must be passed in using the EXACT\r\n order of the stored procedure.</strong><br>\r\n<br>\r\n<strong>3. To Update, Delete, or Insert with NO RETURN VALUE use the following method (example taken from live production application):</strong><br>\r\n<br>\r\nint messageID = 1;<br>\r\nstring messageText = &quot;Test Application&quot;;<br>\r\nstring messageSubject = &quot;Test Subject&quot;;<br>\r\nDataBridgeConnector dbc = new DataBridgeConnector(string.Empty); //can pass in connection string here or use default\r\n<br>\r\nobject[] objDB = new object[<a href=\"/wikipage?title=3&referringTitle=Home\">3]</a>;<br>\r\nobjDB.SetValue(messageID, 0);<br>\r\nobjDB.SetValue(messageText, 1);<br>\r\nobjDB.SetValue(messageSubject, 2);<br>\r\ndbc.ExecuteSqlNonQuery(&quot;StoredProcedureNameHere&quot;, false, objDB); //second parameter is always false. it is to indicate whether the is an output parameter, however, there is a new method to handle output<br>\r\n<br>\r\n<strong>4. To Update, Delete, or Insert with RETURN VALUE use the following method (example taken from live production application):</strong><br>\r\n<br>\r\nDataBridgeConnector dbc = new DataBridgeConnector(string.Empty);<br>\r\nobject[] objArray = new object[<a href=\"/wikipage?title=4&referringTitle=Home\">4]</a>;<br>\r\nobjArray.SetValue(&quot;Jack&quot;, 0);<br>\r\nobjArray.SetValue(null, 1);<br>\r\nobjArray.SetValue(string.Empty, 2);<br>\r\nobjArray.SetValue(0, 3); //the last value shown here is a bigint output parameter from the stored procedure. set the output parameter to match the type of output, if string pass in &quot;string.Empty&quot;, if integer\r\n<br>\r\npass in an integer, etc<br>\r\n<br>\r\nobject[] outputQuery = dbc.ExecuteSQLNonQueryWithOutput(&quot;StoredProcedureNameHere&quot;, objArray); //use an object array to accept the results of the procedure, from this object you can access the result<br>\r\n<br>\r\nint messageID = Convert.ToInt32(outputQuery[<a href=\"/wikipage?title=0&referringTitle=Home\">0]</a>); //this is the result that was mapped to objArray, item 3 as shown above. if there are more output parameters, reference outputQuery[<a href=\"/wikipage?title=n&referringTitle=Home\">n]</a>\r\n on the right side</p>\r\n<p><strong>5.&nbsp; To return a DataSet, use the following method (example taken from live production application):</strong></p>\r\n<p>DataBridgeConnector dbc = new DataBridgeConnector(string.Empty);<br>\r\nobject[] objArray = new object[1];<br>\r\nobjArray.SetValue(&quot;UserName&quot;, 0);<br>\r\n<br>\r\nDataSet ds = dbc.GetSqlDataSet(&quot;StoredProcedureNameHere&quot;, objArray);<br>\r\ndgvUpdateRecords2.DataSource = ds.Tables[0].DefaultView;&nbsp;&nbsp; //dgvUpdateRecords2 is a GridView<br>\r\ndgvUpdateRecords2.DataBind();</p>\r\n<p>ds = null;</p>\r\n<p><strong>6.&nbsp; To return a DataReader, use the following method (example taken from live production application):</strong></p>\r\n<p>DataBridgeConnector dlc = new DataBridgeConnector(string.Empty);</p>\r\n<p>object[] obParam = new object[4];<br>\r\nobParam.SetValue(55, 0);<br>\r\nobParam.SetValue(&quot;SELECTPAGES&quot;, 1);<br>\r\nobParam.SetValue(&quot;&quot;, 2);<br>\r\nobParam.SetValue(&quot;&quot;, 3);<br>\r\n<br>\r\nSqlDataReader sdr = dlc.ExecuteReader(&quot;StoredProcedureNameHere&quot;, obParam);<br>\r\nwhile (sdr.Read())<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ListItem li = new ListItem();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; li.Text = sdr[&quot;PageName&quot;].ToString();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; li.Value = sdr[&quot;PageName&quot;].ToString();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ddlEdit.Items.Add(li);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ddlPageNameDelete.Items.Add(li);</p>\r\n<p>}</p>\r\n<p>sdr.Close();</p>\r\n<p>sdr.Dispose();</p>\r\n<p><strong>7.&nbsp; To use multiple connection strings directly in the DataBridgeConnector constructor, follow as below:</strong></p>\r\n<p>string connString = &quot;Connection String Settings Here:&quot;;</p>\r\n<p>DataBridgeConnector dlc = new DataBridgeConnector(connString);</p>\r\n<p><strong>8.&nbsp; Do NOT reuse DataBrideConnector objects without creating a new object instance, as it can result in memory leaks:</strong></p>\r\n<p>Incorrect --</p>\r\n<p>DataBridgeConnector dlc = new DataBridgeConnector(string.Empty);</p>\r\n<p>dlc.ExecuteNonQuery();</p>\r\n<p>dlc.ExecuteNonQuery();</p>\r\n<p>Correct --</p>\r\n<p>DataBridgeConnector dlc = new DataBridgeConnector(string.Empty);</p>\r\n<p>dlc.ExecuteNonQuery();</p>\r\n<p>dlc = new DataBridgeConnector(string.Empty);</p>\r\n<p>dlc.ExecuteNonQuery();</p>\r\n<p><strong>&nbsp;</strong></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-11-20T09:34:46.597-08:00"
}