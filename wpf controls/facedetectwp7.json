{
  "ProjectName": "facedetectwp7",
  "Title": "Face Detection For Windows Phone 7",
  "Description": "A library for performing face detection on windows phone 7. This library uses the same algorithms and detection models as OpenCV and is written in C# and built for the Windows Phone. Also includes a camera user control that supports automated taking of photos and showing camera preview.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />A library for performing face detection on windows phone 7. This library uses the same algorithms and detection models as OpenCV and is written in C&#35; and built for the Windows Phone. Also includes a camera user control that supports automated taking of photos and showing camera preview.<br /><br />Note: this library can actually detect objects of any type, provided you give it the correct model files, since all it does is read existing, learned models. You can find model files on OpenCV&#39;s website.<br /><br /><b>Bonus: User Control for interfacing with camera</b><br />I just wanted to let folks know that the latest release also includes a nice user control (under WP7Controls) that allows you to easily interface with the windows phone 7 camera. You can view the camera preview and easily save images to the camera roll using this control.<br /><br /><b>How to Use the Library</b><br />This library is built for Windows Phone 7 and is intended to be used only for Windows Phone 7.<br /><br />To use the library:\n<ol><li>Download the FaceDetectionWinPhone solution from the Downloads page</li>\n<li>Either add the FaceDetectionWinPhone Project to your project or build/add the FaceDetectionWinPhone dll</li>\n<li>Add a models/ folder to your project and add xml model files as found under FaceDetectionWinPhone/Sample/models or in the downloads section. I would recommend using haarcascade<i>frontalface</i>alt.xml (this is the only one tested).</li>\n<li>Make sure you have a reference to System.Xml.Linq</li>\n<li>Create a detector: FaceDetectionWinPhone.Detector detector = new FaceDetectionWinPhone.Detector(XDocument.Load(MODEL_FILE));</li>\n<li>You can use the detector by passing in either a string (path to image file), a WriteableBitmap, or an int array, width and height. Here&#39;s how to detect faces by passing in an int array:</li></ol>\n<br />List&lt;FaceDetectionWinPhone.Rectangle&gt; faces = m<i>detector.getFaces(pixelDataInt, m</i>cameraWidth / m<i>downsampleFactor, m</i>cameraHeight / m_downsampleFactor, 2f, 1.25f, 0.1f, 1, false);<br /><br /><b>Sample Code</b><br />I&#39;ve included a sample project which overlays the camera stream with rectangles represented recognized faces. The source code that&#39;s under version control is a solution that contains the library and the sample project.<br /><br />Alternatively, if you don&#39;t want to use version control, you can go to the Downloads page and download the entire sample as well.<br /><br /><b>Running in Emulator</b><br />To get the sample to run in the emulator, you need to remove the following line of code:<br />m<i>camera.Resolution = m</i>camera.AvailableResolutions.First();<br /><br /><b>Acknowledgements</b><br />This library is largely based off of the Java-based library at http://code.google.com/p/jviolajones/. Thank you very much for the developers of this library for making their code open source!<br /><br /><b>Special Request</b><br />If you built something cool using the toolkit, could you please post a link to what you made in the Discussions board? I would love to see what people have made with this.<br /><br /><b>More Info/Contact</b><br />You can read more about the project at <a href=\"http://www.codingbeta.com/?p=204\">http://www.codingbeta.com/?p=204</a>, and contact me by posting a comment on that post.</div><div class=\"ClearBoth\"></div>",
  "TagList": "face detection,Windows Phone 7,windows phone,AI,recognition,image processing,",
  "LastEdited": "2012-04-18T13:08:26.427-07:00"
}