{
  "ProjectName": "windowsphonemvp",
  "Title": "Windows Phone MVP",
  "Description": "WindowsPhoneMvp is an MVP implementation for Windows Phone, the MVP pattern works well on Windows Phone because of its testability and flexibility. Use WindowsPhoneMvp to take back control of development and focus on creating great apps.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Installation</h2>\r<b>Install the Project Template from the Visual Studio Gallery</b><br /><a href=\"http://visualstudiogallery.msdn.microsoft.com/5da795d1-30eb-4f46-9bd0-7442d505720d\">http://visualstudiogallery.msdn.microsoft.com/5da795d1-30eb-4f46-9bd0-7442d505720d</a><br /><br /><b>Install the Libraries from Nuget</b><br />Add it to your project with nuget: <i>Install-Package WindowsPhoneMvp</i><br /><a href=\"http://nuget.org/List/Packages/WindowsPhoneMvp\">http://nuget.org/List/Packages/WindowsPhoneMvp</a><br />\n<h2>Project Description</h2>\rWindowsPhoneMvp is an MVP implementation for Windows Phone, the MVP pattern works well on Windows Phone because of its testability and flexibility. Use WindowsPhoneMvp to take back control of development and focus on creating great apps.<br /><br />When developing projects for WindowsPhone7 you may have noticed that without the proper binding support found in WPF, ViewModels quickly become a dumping ground, growing to an unmanageable size and doing more then they should, so take a step back, rediscover MVP.<br /><br />This project is based on the implementation of the MVP pattern  from <a href=\"http://webformsmvp.codeplex.com/\">webformsmvp</a>, but written to fully integrate with WindowsPhone.<br />\n<h2>Documentation</h2>\rVisit the <a href=\"https://windowsphonemvp.codeplex.com/documentation?referringTitle=Home\">documentation</a> section.<br />And also the <a href=\"http://windowsphonemvp.net/documentation/\">online api documentation.</a> (IE Only)<br />\n<h2>Some of the benefits:</h2>\r\n<b>Keep Beloved Designer Support</b><br /><br /><img src=\"/projects/windowsphonemvp/b0390b89-3bed-4d73-873f-15a3e48357e4\" alt=\"designer&#32;support.png\" title=\"designer&#32;support.png\" /><br /><br /><b>Easy wireup</b><br /><br />Inside the App.xaml.cs file, we simply hook into some of the phone navigation and activation events.<br /><br /><pre>\nprivate void InitializePhoneApplication()\n{\n    if (phoneApplicationInitialized)\n        return;\n\n    // Create the frame but don&#39;t set it as RootVisual yet; this allows the splash\n    // screen to remain active until the application is ready to render.\n    RootFrame = new PhoneApplicationFrame();\n    RootFrame.Navigated += CompleteInitializePhoneApplication;\n\n    // Handle navigation failures\n    RootFrame.NavigationFailed += RootFrame_NavigationFailed;\n\n    _container = Bootstrap();\n\n    var navigationHook = _container.Resolve&lt;INavigationServiceContext&gt;();\n    navigationHook.Setup();\n    PresenterBinder.Factory = new AutofacPresenterFactory(_container);\n\n    // Ensure we don&#39;t initialize again\n    phoneApplicationInitialized = true;\n}\n</pre><br /><br /><b>Simple binding of presenters to your views</b><br /><br /><img src=\"/projects/windowsphonemvp/5cf6209d-7f47-4670-a6d1-dbe410b707f9\" alt=\"wire_up.png\" title=\"wire_up.png\" /><br /><br /><b>Easy persistence of transient properties</b><br /><br /><pre>\npublic MainPresenter(IMainView view)\n    : base(view)\n{\n    //Transient properties anywhere\n    Transient(() =&gt; this).Property(x =&gt; x.PersistMe);\n    //Easy built in support to give properties on the viewmodel transient state\n    Transient(x =&gt; x.PersistMeToo);\n}\n</pre><br /><br /><b>Access a Navigation service from your Presenters</b><br /><br />Navigate to the strongly typed views, or view interfaces.<br /><pre>\nNavigate.ToView&lt;ISecondView&gt;();\n</pre><br />Easily setup an ICommand property for navigation.<br /><pre>\nModel.NavigatingToViewTwo = Navigate.ByCommand&lt;ISecondView&gt;();\n</pre><br /><br />Pass parameters with style:<br /><pre>\nNavigate.ToView&lt;IGpsView&gt;(x =&gt; x.With(&quot;Activity&quot;, Model.SelectedActivity.Name)\n    .With(&quot;Parameter2&quot;, hasParameter.ToString()));\n</pre><br /><br /><b>Simple access to parameters that have been passed to your view</b><br />\n<ul><li>Via Params[] collection</li>\n<li>Via OnNavigatedTo() method</li></ul>\n<pre>\npublic class GpsRecorderPresenter : Presenter&lt;IGpsRecorderView, GpsRecorderViewModel&gt;\n{\n    public GpsRecorderPresenter(IGpsRecorderView view) : base(view)\n    {\n        View.Load += View_Load;\n    }\n\n    void View_Load(object sender, EventArgs e)\n    {\n        var activity = Params[&quot;Activity&quot;];\n        //Code that does things with activity\n    }\n\n    public override void OnNavigationTo(NavigationData navigationData)\n    {\n        //Do navigated things\n    }\n}\n</pre><br /><br />Download the code, take a look for yourself and see if it works for you.</div><div class=\"ClearBoth\"></div>",
  "TagList": "WP7,Framework,Windows Phone 7,MVP,",
  "LastEdited": "2011-05-14T04:49:04.49-07:00"
}