{
  "ProjectName": "fFastInjector",
  "Title": "fFastInjector",
  "Description": "fFastInjector is a high-performing dependency injector, service locator, and/or IOC (inversion of control) container.",
  "MovedLink": "https://github.com/Grax32/fFastInjector",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nfFastInjector is a high-performing dependency injector, service locator, and/or IOC (inversion of control) container.<br>\r\n<br>\r\nIt is designed to be very efficient in both lines of code and in actual operations.</p>\r\n<p>See also my&nbsp;<a href=\"http://g.grax.com/10owfFF\">blog - coding.grax.com</a>&nbsp;and\r\n<a href=\"http://g.grax.com/11xRLKr\">www.grax.com</a></p>\r\n<p><strong>Quick Start For MVC</strong></p>\r\n<p>Install via NuGet. &nbsp;This command will install both the fFastInjector and the fFastInjector-MVC packages</p>\r\n<p><code>install-package fFastInjector-MVC</code></p>\r\n<p>Add the following line to your Application_Start method</p>\r\n<p><code>fFastInjector.fFastInjectorControllerFactory.RegisterControllerFactory();</code></p>\r\n<p><code>follow the instructions below to set up resolution for your interfaces.</code></p>\r\n<p><strong>Quick Start Instructions</strong></p>\r\n<p>Set resolver for interface</p>\r\n<p><code>fFastInjector.Injector.SetResolver&lt;MyInterface,&nbsp;MyConcreteClass&gt;();</code></p>\r\n<p>Resolve interface. &nbsp;If no resolver is set for an interface, an exception is thrown.</p>\r\n<p><code>var&nbsp;result&nbsp;=&nbsp;Injector.Resolve&lt;MyInterface&gt;(); </code>\r\n</p>\r\n<p>Resolve concrete class. &nbsp;If no resolver is set for a concrete class, this class will be resolved by looking for the constructor with the fewest parameters (preference given to the parameterless constructor). &nbsp;If there are parameters, fFastInjector\r\n will attempt to resolve them as well. &nbsp;If they cause an infinite loop with their dependencies, fFastInjector will throw an exception.</p>\r\n<p><code>var&nbsp;result&nbsp;=&nbsp;Injector.Resolve&lt;MyConcreteClass&gt;();</code></p>\r\n<p>Resolve class or interface and additionally set a property. &nbsp;This first method will simply use fFastInjector to resolve the value for MyProperty based on the type of MyProperty.</p>\r\n<p><code>fFastInjector.Injector<br>\r\n&nbsp; &nbsp; &nbsp;.SetResolver&lt;MyInterface,&nbsp;MyTestClass&gt;()<br>\r\n&nbsp; &nbsp; &nbsp;.AddPropertyInjector(v&nbsp;=&gt;&nbsp;v.MyProperty);<br>\r\n</code></p>\r\n<p>Resolve class or interface and additionally set a property. &nbsp;This second method allows you to specify and expression that will be evaluated to set MyProperty.</p>\r\n<p><code>fFastInjector.Injector<br>\r\n&nbsp; &nbsp; &nbsp; .SetResolver&lt;MyInterface,&nbsp;MyTestClass&gt;() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AddPropertyInjector(v&nbsp;=&gt;&nbsp;v.MyOtherProperty,&nbsp;()&nbsp;=&gt;&nbsp;new&nbsp;MyPropertyClass());<br>\r\n</code></p>\r\n<p>&nbsp;</p>\r\n<p><code>See also <a href=\"/documentation\">fFastInjector Documentation</a></code></p>\r\n<p>&nbsp;</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2015-01-18T07:02:28.923-08:00"
}