{
  "ProjectName": "boincguirpc",
  "Title": "BoincGuiRpc.Net",
  "Description": "This is a .Net implementation of a basic Boinc Gui RPC client, which is capable to connect to and manage Boinc. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>What is this?</b><br /><br />This is a .Net implementation of a basic <a href=\"http://boinc.berkeley.edu/trac/wiki/GuiRpc\">Boinc Gui RPC</a> client, which is capable of connecting to and manage <a href=\"http://boinc.berkeley.edu/\">Boinc</a>.<br />The project is intentionally implemented in .NET 2.0, so it can be run with mono.<br /><br /><b>Usage Example - Basic</b><br /><br />This example shows how basic Boinc functions can be accessed and called. <br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n\n<span style=\"color:Green;\">//Creates a new Boinc Gui RPC client for the local host </span>\nBoinc.BoincClient b = <span style=\"color:Blue;\">new</span> Boinc.BoincClient();\n\n<span style=\"color:Green;\">//Connect. Find the password for connecting automatically. </span>\nb.Connect();\n\n<span style=\"color:Green;\">//Attaches to a project</span>\n<span style=\"color:Green;\">//b.AttachToProject(&quot;http://www.worldcommunitygrid.org&quot;, &quot;PROJECT TOKEN HERE&quot;, &quot;WCG&quot;);</span>\n\n<span style=\"color:Green;\">//Gets and lists current projects</span>\nConsole.WriteLine(<span style=\"color:#A31515;\">&quot;Current projects:&quot;</span>);\nConsole.WriteLine();\n<span style=\"color:Blue;\">foreach</span>(Project p <span style=\"color:Blue;\">in</span> b.GetProjects()) {\n    Console.WriteLine(<span style=\"color:#A31515;\">&quot;{0} ({1})&quot;</span>, p.ProjectName, p.MasterUrl);\n    Console.WriteLine(<span style=\"color:#A31515;\">&quot;Disk Usage: {0} MB&quot;</span>, p.DiskUsage);\n    <span style=\"color:Blue;\">if</span> (p.Suspended)\n        Console.WriteLine(<span style=\"color:#A31515;\">&quot;Suspended via gui&quot;</span>);\n    <span style=\"color:Blue;\">if</span> (p.MoreWorkAllowed)\n        Console.WriteLine(<span style=\"color:#A31515;\">&quot;Allow more work&quot;</span>);\n    <span style=\"color:Blue;\">if</span> (p.HasEnded)\n        Console.WriteLine(<span style=\"color:#A31515;\">&quot;Project has ended&quot;</span>);\n    \n    <span style=\"color:Green;\">//Resume or suspend project. </span>\n    <span style=\"color:Green;\">//p.Suspend();</span>\n    <span style=\"color:Green;\">//p.Resume();</span>\n}\n\n<span style=\"color:Green;\">//Gets the client version</span>\nConsole.WriteLine(<span style=\"color:#A31515;\">&quot;Client version: {0}&quot;</span>, b.GetVersion());\n\n<span style=\"color:Green;\">//Gets results, proxy settings and preferences</span>\nIEnumerable&lt;Result&gt; results = b.GetResults();\nProxySettings prox = b.GetProxySettings();\nPreferences pref = b.GetPreferences();\n\n<span style=\"color:Green;\">//Sets preferences</span>\nb.SetPreferences(<span style=\"color:Blue;\">new</span> Preferences(<span style=\"color:Blue;\">false</span>, <span style=\"color:Blue;\">false</span>, 50, 10, 1));\n\n<span style=\"color:Green;\">//Closes the connection</span>\nb.Close();\r\n</pre></div><br /><b>Usage Example - Event Driven</b><br /><br />This example shows how the BoincWatcher class can be used to work with Boinc using events for state changes. <br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nBoincClient client;\nBoincWatcher watcher;\n\n<span style=\"color:Green;\">//Call this method to initialize the system. </span>\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> Initialize() \n{\n      client = <span style=\"color:Blue;\">new</span> BoincClient();     \n      client.Connect();\n\n      <span style=\"color:Green;\">//Create a new watcher.</span>\n      watcher = <span style=\"color:Blue;\">new</span> BoincWatcher(b);\n\n      <span style=\"color:Green;\">//Register events of choice.</span>\n      watcher.ProjectAdded += <span style=\"color:Blue;\">new</span> EventHandler&lt;CollectionModifiedEventArgs&lt;Project&gt;&gt;(watcher_ProjectAdded);\n      watcher.ProjectRemoved += <span style=\"color:Blue;\">new</span> EventHandler&lt;CollectionModifiedEventArgs&lt;Project&gt;&gt;(watcher_ProjectRemoved);\n     watcher.TaskAdded += <span style=\"color:Blue;\">new</span> EventHandler&lt;CollectionModifiedEventArgs&lt;Result&gt;&gt;(watcher_TaskAdded);\n     watcher.TaskRemoved += <span style=\"color:Blue;\">new</span> EventHandler&lt;CollectionModifiedEventArgs&lt;Result&gt;&gt;(watcher_TaskRemoved);\n     watcher.TaskStateChanged += <span style=\"color:Blue;\">new</span> EventHandler&lt;TaskStateChangedEventArgs&gt;(watcher_TaskStateChanged);\n}\n\n<span style=\"color:Green;\">//Call this method periodically, using a timer or similar. </span>\n<span style=\"color:Green;\">//Take care about thread synchronization.</span>\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> Refresh() \n{\n      <span style=\"color:Green;\">//Query new information from Boinc and raise events, if applicable. </span>\n      watcher.RefreshState();\n}\n\n<span style=\"color:Green;\">//Event handlers</span>\n<span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> watcher_TaskStateChanged(<span style=\"color:Blue;\">object</span> sender, TaskStateChangedEventArgs e)\n{\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;Task Changed: &quot;</span> + e.NewState.Name);\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;     Percentage: &quot;</span> + e.NewState.FractionDone);\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;     Remaining Time: &quot;</span> + e.NewState.EstimatedCpuTimeRemaining);\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;     Ready To Report: &quot;</span> + e.NewState.ReadyToReport);\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;     Ack: &quot;</span> + e.NewState.Acknowledged);\n}\n\n<span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> watcher_TaskRemoved(<span style=\"color:Blue;\">object</span> sender, CollectionModifiedEventArgs&lt;Result&gt; e)\n{\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;Task Removed: &quot;</span> + e.ModifiedItem.Name);\n}\n\n<span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> watcher_TaskAdded(<span style=\"color:Blue;\">object</span> sender, CollectionModifiedEventArgs&lt;Result&gt; e)\n{\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;Task Added: &quot;</span> + e.ModifiedItem.Name);\n}\n\n<span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> watcher_ProjectRemoved(<span style=\"color:Blue;\">object</span> sender, CollectionModifiedEventArgs&lt;Project&gt; e)\n{\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;Project Removed: &quot;</span> + e.ModifiedItem.ProjectName);\n}\n\n<span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> watcher_ProjectAdded(<span style=\"color:Blue;\">object</span> sender, CollectionModifiedEventArgs&lt;Project&gt; e)\n{\n      Console.WriteLine(<span style=\"color:#A31515;\">&quot;Project Added: &quot;</span> + e.ModifiedItem.ProjectName);\n}\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "Boinc,Boinc Gui Rpc,Rpc,Gui,API,Boinc API,C#,.Net,Controlling,Watching,Grid Computing,Grid,",
  "LastEdited": "2013-08-14T15:57:16.267-07:00"
}