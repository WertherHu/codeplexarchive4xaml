{
  "ProjectName": "exportexcelgridview",
  "Title": "Export Data and Images from an Excel file and View in ASP.NET GridView",
  "Description": "This project gives a working solution of exporting images and data from excel file and showing them to an ASP.NET gridvew control using Aspose.Cells for .NET.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This project gives a working solution of exporting images and data from excel file and showing them to an ASP.NET gridvew control using Aspose.Cells for .NET.<br /><br />A very common scenario we come across regarding Excel data manipulation is when we have a bulk of data in Excel file and we need some mechanism to either import it to a database or just simply use the Excel file as data source and display the data to the users. <br /><br />This project demonstrates the use of <a href=\"http://www.aspose.com/.net/excel-component.aspx\">Aspose.Cells for .NET API</a> to <a href=\"http://www.aspose.com/docs/display/cellsnet/Exporting+Data+from+Worksheets\">fetch the data</a> and images from an Excel file and display it in a GridView control on an ASP.NET Webpage. Exporting data from Excel file to GridView may seem a simple process, but when your data contains images as well, it gets a little complicated. However, Aspose.Cells facilitates it&#39;s users to achieve this task rather easily. <br /><br />We are using  the following input Excel file with 4 data columns and one image column. <br /><br /><img src=\"https://raw.githubusercontent.com/nausherwan/excel-export/master/Screenshots/excel.jpg\" /><br /><br />To achieve our desired result, we will follow the steps mentioned below:<br />\n<ul><li>First, we will <a href=\"http://www.aspose.com/docs/display/cellsnet/Opening+Files\">open the Excel file</a> and <a href=\"http://www.aspose.com/docs/display/cellsnet/Exporting+Data+from+Worksheets\">export the data to a data table</a> using the simple Cells.ExportDataTable method by providing it the range of cells from which to import the data.</li></ul>\n<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">//Instantiating a Workbook object and open the uploaded file</span>\nWorkbook workbook = <span style=\"color:Blue;\">new</span> Workbook(Server.MapPath(<span style=\"color:#A31515;\">&quot;~/Data/book1.xlsx&quot;</span>));\n\n<span style=\"color:Green;\">//Obtaining the reference of first worksheet by passing its sheet index</span>\nWorksheet worksheet = workbook.Worksheets[0];\n\n<span style=\"color:Blue;\">int</span> firstRow = 0;\n<span style=\"color:Blue;\">int</span> firstColumn = 1;\n<span style=\"color:Blue;\">int</span> lastRow = 6;\n<span style=\"color:Blue;\">int</span> lastColumn = 5;\n<span style=\"color:Blue;\">int</span> imageColumn = 4;\n\n<span style=\"color:Green;\">//Exporting the contents to DataTable</span>\nDataTable dataTable = worksheet.Cells.ExportDataTable(firstRow, firstColumn, lastRow, lastColumn, <span style=\"color:Blue;\">true</span>);\n\r\n</pre></div>\n<ul><li>Second, we will extract pictures / images from the Excel file using the <a href=\"http://www.aspose.com/docs/display/cellsnet/Adding+Pictures\">Worksheet&#39;s Pictures collection</a> and store them to the same data table. </li></ul>\n<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">//Get the images from Worksheet Pictures collection and add to data table</span>\nMemoryStream ms = <span style=\"color:Blue;\">new</span> MemoryStream();\n<span style=\"color:Blue;\">int</span> i = 0;\nPicture pic = <span style=\"color:Blue;\">null</span>;\n<span style=\"color:Blue;\">foreach</span> (DataRow dr <span style=\"color:Blue;\">in</span> dataTable.Rows)\n{\n    <span style=\"color:Green;\">/*Next step and GetPicture method is used if images in the collection are not in correct order\n    GetPicture method will look for the image associated with the particular row / cell and return it\n    Incase the pictures are inserted in excel file in order, no need to execute this\n    simply use the index to load the pictures to datatable*/</span>\n    pic = GetPicture(worksheet.Pictures, i);\n\n    <span style=\"color:Green;\">//Convert picture to stream</span>\n    pic.ToImage(ms, <span style=\"color:Blue;\">new</span> Aspose.Cells.Rendering.ImageOrPrintOptions());\n    ms.Position = 0;\n    Byte[] bytes = ms.ToArray();\n\n    <span style=\"color:Green;\">//Convert the image stream to Base64 string and include that in the datatable&#39;s image column</span>\n    <span style=\"color:Blue;\">string</span> base64String = Convert.ToBase64String(bytes, 0, bytes.Length);\n    dr[imageColumn] = <span style=\"color:#A31515;\">&quot;data:image/png;base64,&quot;</span> + base64String;\n    i++;\n}\n\ndataTable.AcceptChanges();\n\r\n</pre></div> \n<ul><li>Now, when we are extracting the pictures / images, we need to keep this in mind that it is possible that image/ picture in the collection are not in proper order. So, we have written a small function to get the image / picture which is associated with the particular data row.</li></ul>\n<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n<span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> This function is used to get the picture image based on the associated cell</span>\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;pictureCollection&quot;&gt;</span><span style=\"color:Gray;\">&lt;/param&gt;</span>\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;row&quot;&gt;</span><span style=\"color:Gray;\">&lt;/param&gt;</span>\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;returns&gt;</span><span style=\"color:Gray;\">&lt;/returns&gt;</span>\n<span style=\"color:Blue;\">private</span> Picture GetPicture(PictureCollection pictureCollection, <span style=\"color:Blue;\">int</span> row)\n{\n    Picture returnPic = <span style=\"color:Blue;\">null</span>;\n    <span style=\"color:Blue;\">foreach</span> (Picture pic <span style=\"color:Blue;\">in</span> pictureCollection)\n    {\n        <span style=\"color:Blue;\">if</span> (pic.UpperLeftRow == row + 1)\n        {\n            returnPic = pic;\n            <span style=\"color:Blue;\">break</span>;\n        }\n    }\n    <span style=\"color:Blue;\">return</span> returnPic;\n\n}\n\r\n</pre></div>\n<ul><li>Finally we will bind the data table with the gridview we have already designed in our ASP.NET webpage.</li></ul>\n<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">//Set table as data source of the grid and bind it</span>\nGridView1.DataSource = dataTable;\nGridView1.DataBind();\r\n</pre></div>\n<ul><li>To load the images to the gridview, we need to handle the RowDataBound event of the Gridview</li></ul>\n<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n<span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> This event handler is used to bind the images with gridview image control</span>\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;sender&quot;&gt;</span><span style=\"color:Gray;\">&lt;/param&gt;</span>\n<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;e&quot;&gt;</span><span style=\"color:Gray;\">&lt;/param&gt;</span>\n<span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">void</span> GridView1_RowDataBound(<span style=\"color:Blue;\">object</span> sender, GridViewRowEventArgs e)\n{\n    <span style=\"color:Blue;\">if</span> (e.Row.RowType == DataControlRowType.DataRow)\n    {\n        System.Web.UI.WebControls.Image img1 = (System.Web.UI.WebControls.Image)e.Row.FindControl(<span style=\"color:#A31515;\">&quot;Image1&quot;</span>);\n        <span style=\"color:Blue;\">string</span> imgStr = (<span style=\"color:Blue;\">string</span>)DataBinder.Eval(e.Row.DataItem, <span style=\"color:#A31515;\">&quot;Logo&quot;</span>);\n        img1.ImageUrl = imgStr;\n    }\n}\r\n</pre></div><br /> Following is the screenshot of the output webpage with data and image in a GridView control.<br /><br /><img src=\"https://raw.githubusercontent.com/nausherwan/excel-export/master/Screenshots/output.jpg\" /><br /><br /><a href=\"http://www.aspose.com/.net/excel-component.aspx\">Aspose.Cells for .NET</a> is fast and reliable API. It saves time and effort compared to developing your own spreadsheet manipulation solution or using Microsoft Automation. You can check the <a href=\"http://www.aspose.com/.net/excel-component.aspx\">Product Page</a> to get an idea about the features supported in Aspose.Cells for .NET.</div><div class=\"ClearBoth\"></div>",
  "TagList": "Excel,Aspose.Cells,Gridview,Images,Aspose,",
  "LastEdited": "2014-03-25T08:31:10.537-07:00"
}