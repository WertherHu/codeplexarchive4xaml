{
  "ProjectName": "xbrowser",
  "Title": "XBrowser - Headless Browser for .Net",
  "Description": "XBrowser is a \"headless\" web browser written for .Net applications using C#. It is designed to allow automated, remote controlled and test-based browsing sessions without any actual rendering overhead.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>We&#39;ve Moved to GitHub</h2>\r<b>THIS PROJECT HAS MOVED TO GITHUB - PLEASE UPDATE YOUR LINKS</b><br />New Address: <a href=\"http://github.com/axefrog/XBrowser\">http://github.com/axefrog/XBrowser</a>\n<hr />\n<br />XBrowser is a &#34;headless&#34; web browser written for .Net applications using C&#35;. It is designed to allow automated, remote controlled and test-based browsing sessions without any actual rendering overhead.<br /><br />Whilst this is a new codeplex project, it is based on what I learned developing an older version which was actually used privately throughout several commercial projects. That version is included in the source code to be used while XBrowser is under development. It has a good amount of maturity and debugging already behind it, so should server as a solid fill-in until XBrowser is ready for practical use. Note that the legacy version (XHtmlHttpBrowser) has no support for JavaScript; it is purely and simply HTML-based with session/cookies persistence, GET and POST operations, HTML parsing and an internal LINQ-to-XML-based document querying system.<br /><br />The XBrowser project is being built on the .Net 4 framework, now that it has been officially released by Microsoft. There are no plans to support .Net 3.5 or earlier.<br />\n<h2>Requirements</h2>\r\nChecking out the source for this project also requires a checkout of the source for the project <a href=\"http://axefrogcore.codeplex.com\">axefrogcore</a>. Both projects should be checked out side by side in the same parent directory. e.g.<br /><br />/XBrowser-Project<br />/XBrowser-Project/axefrogcore<br />/XBrowser-Project/xbrowser<br /><br />The dependency on axefrogcore will hopefully be removed in a future release once XBrowser completely replaces the functionality of the legacy XHtmlHttpBrowser class that is also included in the source code.<br />\n<h2>Current Status (27-Apr-2010)</h2>\r\n<ul><li>The HTML5 W3C specification is being used as the basis for the browser. Noncompliant pages are &quot;upgraded&quot; to HTML5 during parsing as needed.</li>\n<li>A new highly-permissive parser is partially complete that does a more correct job of processing broken HTML than either HtmlTidy or HtmlAgilityPack. In the initial version, DTD&#39;s are discarded as there are very few use cases I can think of for this type of browser where it would be advantageous to preserve legacy HTML functionality.</li>\n<li>I&#39;ve created the full skeleton of HTML5 Element classes and am currently working on filling out the code surrounding loading the elements of a page. Pages are parsed completely (previously using HtmlAgilityPack, though shortly being replaced by an internal parser) and mapped side-by-side with both an XDocument structure and a native structure that uses XBrowser&#39;s internal set of HTML-specific elements, which will be complete with their own context-relevant methods, events and properties. A document structure can be navigated using LINQ-to-XML and most individual XElements are annotated with the XBrowserElement instance they are mapped to. Likewise, any XBrowserElement exposes the XElement object it is mapped to.</li>\n<li>A jQuery (SizzleCS) compatible selector engine is partially complete for querying the elements of a page from .Net code, which will make it very easy to locate specific elements in a page for manipulation. Queries such as <b><i>body &gt; ul:first &gt; li[myclass~=test]</i></b> will be possible.</li>\n<li>The browser is aware of multiple &quot;windows&quot; that it can create and can thus pretend to be a tabbed browser and/or a browser with popup windows. Each window will have knowledge of the central cookie store and cache for the parent XBrowser instance. The window design is also such that it will cater for contained windows such as in framesets and iframes, when they are implemented.</li>\n<li>The browser can now navigate asynchronously to a web address and properly handles temporary and permanent redirects. Events exist to hook completion of the navigation (or to detect if an exception is thrown). Secondary external resources such as scripts, images and so forth are not yet loaded.</li>\n<li>The cookie store can now parse cookie headers completely, which is half the job. The other half is to write out cookies for a given request and also to maintain the store throughout a browser session. Later I&#39;ll implement an option to persist the store for future browser sessions.</li></ul>\n<br /><b>NOTE</b>: The Actual XBrowser class is not yet complete enough to be used for anything practical. In the mean time, use the legacy XHtmlHttpBrowser class which does all the basics without JavaScript support.<br />\n<h2>To Do List</h2>\r<ul><li>Create a custom cookie management implementation to replace use of CookieContainer, which is horribly, horribly broken - <b>Partially Complete</b></li>\n<li>Replace HtmlAgilityPack with a better HTML parser to overcome issues with displaced form elements - <b>In Progress</b></li>\n<li>Integrate the JINT project to begin basic javascript support, or preferably, if complete enough, the <a href=\"http://github.com/fholm/IronJS\">IronJs</a> project, which looks to have much better performance than JINT.</li>\n<li>Implement JavaScript hooks for HTML elements as per W3C recommendations - <b>In Progress</b></li>\n<li>Create a list of tests that the browser must pass on simple, intermediate and complex websites - <b>In Progress As Needed</b></li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2010-08-02T07:29:50.5-07:00"
}