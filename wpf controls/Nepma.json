{
  "ProjectName": "Nepma",
  "Title": ".NET Engine for Parallel Multitasked Applications.",
  "Description": "Nepma can control execution of parallel or sequential tasks using multithreaded approach. It can group tasks and insert pauses between them according to parameter defined by the developer. It has been initially designed to automate redondant tasks originaly executed by human hands.\r\nThe first release can execute an arbitrary set of tasks.\r\nThe goal is to be able to write only the code for the tasks and focus only on this code, rather than on the way to execute and control these tasks.\r\n\r\nThe demo project contains a simple fake program that defines 5 tasks partially parallelized, and a GUI to monitor their execution.\r\n\r\nEach tasks contains an attribute used to tell the engine if it must paused the execution after the task is finished.\r\nAll exceptions are trapped in each tasks, and an event is raised when exceptions are thrown.\r\nTasks sharing the same group number are executed in multiple thread at the same time, unless the task is explicitly marked as not parallelizable.\r\n\r\nTasks are subclasses of a base class named TaskBase, you only need to define a few properties in your constructor (by calling the base constructor for example). The specific code for your task is contained is the override of the base Process() method. Process() is executed in a separate thread by the engine.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Nepma can control execution of parallel or sequential tasks using multithreaded approach. It can group tasks and insert pauses between them according to parameter defined by the developer. It has been initially designed to automate redondant tasks originaly executed by human hands.<br />The first release can execute an arbitrary set of tasks.<br />The goal is to be able to write only the code for the tasks and focus only on this code, rather than on the way to execute and control these tasks.<br /><br />The demo project contains a simple fake program that defines 5 tasks partially parallelized, and a GUI to monitor their execution.<br /><br />Each tasks contains an attribute used to tell the engine if it must paused the execution after the task is finished.<br />All exceptions are trapped in each tasks, and an event is raised when exceptions are thrown.<br />Tasks sharing the same group number are executed in multiple thread at the same time, unless the task is explicitly marked as not parallelizable.<br /><br />Tasks are subclasses of a base class named TaskBase, you only need to define a few properties in your constructor &#40;by calling the base constructor for example&#41;. The specific code for your task is contained is the override of the base Process&#40;&#41; method. Process&#40;&#41; is executed in a separate thread by the engine.<br /><br /><b>Recent changes</b><br />Source code has been moved to allow easier integration of addins for the main engine.<br />A monitoring window is available, it allows user to see the current state of the tasks and to select which tasks will be executed.<br /><br /><b>Future enhancements</b><br />\n<ul><li>A statistics module is being developped for the TaskManager. It will provide several informations about execution of the different tasks. <i>It is planned to be released in the version 0.7.0.0.</i></li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "engine,.NET 2.0,C# 2.0,Threading,Parallel Programming,Engin for parallel,",
  "LastEdited": "2007-07-23T01:16:52.6-07:00"
}