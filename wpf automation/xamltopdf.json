{
  "ProjectName": "xamltopdf",
  "Title": "Xaml FlowDocument or XPS to PDF Converter",
  "Description": "Simple FlowDocument to PDF Converter with paging, header and footer",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nSimple FlowDocument to PDF Converter with paging, header and footer<br>\r\n<strong>&nbsp;</strong></p>\r\n<p>Project was created to convert FlowDocument to PDF, that enables inbuilt paging supported by WPF Xaml Engine. Target is to use this inside ASP.NET project to generate reports.</p>\r\n<p>Code:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">//xamlText contains XAML FlowDocument in text form</span>\n<span style=\"color:blue\">byte</span>[] data = <span style=\"color:blue\">null</span>;\nNeuroSpeech.XamlToPDF.Xaml.XamlPdfWriter writer \n\t= <span style=\"color:blue\">new</span> NeuroSpeech.XamlToPDF.Xaml.XamlPdfWriter();<br><span style=\"color:blue\">using</span> (MemoryStream stream = <span style=\"color:blue\">new</span> MemoryStream())\n{\n    writer.Write(xamlText, stream);\n    data = stream.ToArray();\n}\n\n<span style=\"color:green\">// ASP.NET</span>\nResponse.AddHeader(<span style=\"color:#a31515\">&quot;content-disposition&quot;</span>, <span style=\"color:#a31515\">&quot;attachment;filename=\\&quot;PDF.pdf\\&quot;&quot;</span>);\nResponse.ContentType = <span style=\"color:#a31515\">&quot;application/pdf&quot;</span>;\nResponse.OutputStream.Write(data, 0, data.Length);\n\n<span style=\"color:green\">//ASP.NET MVC</span>\n<span style=\"color:blue\">return</span> File(data, <span style=\"color:#a31515\">&quot;application/pdf&quot;</span>, fileName);\t\t\t\n</pre>\r\n</div>\r\n<p>Sample Project containing Text, Font style and image works correctly.</p>\r\n<p><strong>Known Limitations</strong></p>\r\n<p>Due to memory leaks in WPF itself, process using this library eats up more memory per pdf conversion. Following is only workaround.</p>\r\n<ol>\r\n<li><span style=\"font-size:10pt\">Create a different process like console app and invoke it from your process. After console app exists, all memory is released automatically.</span>\r\n</li><li><span style=\"font-size:10pt\">In case of IIS, you can create a new website with a web service which you can invoke from other web sites, and keep this website with application pool to recycle after every 100 or 1000 requests.</span>\r\n</li><li>In case of IIS, if you are using this library directly in your website, then make sure your application pool recycles after every few request.\r\n</li></ol>\r\n<p><strong>Code Organization</strong></p>\r\n<p>This project is organized as following,</p>\r\n<ul>\r\n<li>PDF Objects\r\n<ul>\r\n<li>PDF objects are PDF file objects as specified in the PDF specs. Given FlowDocument is converted to PDF objects, and they are written to fie.\r\n</li><li>Most important object is PDFPage object and its ContentStream. </li></ul>\r\n</li><li>FlowDocument Paginator returns FixedDocument Sequence which contains Page Visuals, and we are navigating page visual tree. For each page, we create one PDFPage and we write contents into PDFPage while navigating visual tree.\r\n</li><li>XamlPdfWriter navigates visual tree and converts objects into corresponding PDF objects.\r\n</li></ul>\r\n<p>Features in development</p>\r\n<ul>\r\n<li>Cirlce/Arcs </li></ul>\r\n<p>Only standard fonts are supported as of now, font embedding is not supported.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "xaml,PDF,PDF Converter,FlowDocument,C#,FixedDocument,XamlPDFWriter,WPF,XPS,",
  "LastEdited": "2013-05-05T00:45:19.683-07:00"
}