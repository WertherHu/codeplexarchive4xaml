{
  "ProjectName": "excelautomationrunner",
  "Title": "Excel Automation Runner",
  "Description": "Library for working Excel automation which ensures the automation object is released.  Includes some ready to use functionality.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Library for working Excel automation which ensures the automation object is released.  Includes some ready to use functionality.<br /><br />Working with large Excel files is problematic.  After reading an article by Joel Spolsky which advocated using Excel to work with Excel files because nobody else has put in everything necessary to optimize the experience like the real thing, I decided to try it out.  It turns out that the Excel automation object is difficult to work with, but does some amazing things.  It was able to copy/paste columns of data in huge files (200K rows) around fast while not spiking memory at all.  The same operation using EPPlus brought the server down.<br /><br />Relative to running on the server, <a href=\"http://stackoverflow.com/questions/14037412/cannot-access-excel-file\">there are some caveats</a>, but I believe if you test a process and it works, it will be fine.  You can&#39;t run Excel automation under a service and do just anything.<br /><br />This has never actually been in production, but has gone through a fair amount of testing - the main concern always being whether it&#39;s leaving the automation object behind (it seems to clean up consistently).<br /><br />There is the obvious dependency on Excel being installed on the machine where executing.<br /><br />You can use this as your wrapper for the automation object and do anything Excel does, but unfortunately I can&#39;t expose that directly, e.g., I can&#39;t expose a function that provides you with a live automation application object that will be closed when finished because you can&#39;t expose a COM object across library bounds.  In order to build your own functionality you will have to descend your own class from ExcelApplicationBase, but built in are these functions:\n<ul><li>ColumnReorder (as mentioned above): new ColumnReorderer().Reorder( newPath, &lt;string list of columns the way you want ordered&gt; )</li>\n<li>Sort: new Sorter().SortByColumn( columnIndex, path )</li>\n<li>CSV to XLSX: new CSV<i>to</i>XLSX<i>Converter().CSV</i>to_XLSX( path )</li>\n<li>XLSX to CSV: new XLSX<i>to</i>CSV<i>Converter().XLSX</i>to_CSV( path )</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2015-11-23T06:40:31.797-08:00"
}