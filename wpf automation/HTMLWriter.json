{
  "ProjectName": "HTMLWriter",
  "Title": "HTMLWriter",
  "Description": "HTMLWriter is a utility library for generating html fragments or documents based on the StringBuilder class. It is intended for generating raw html text that could be used for reporting or displaying inside a WebBrowser control (in Winforms or WPF).",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1><span style=\"color:#800000\">About HTMLWriter</span></h1>\r\n<p>This little utility library was created to generate raw html fragments or documents that could be used inside other applications for displaying things like reports or provide a means to have printing functionality etc.<br>\r\nIt is a very lightweight library and based on the .Net StringBuilder class - thus very fast and optimized for creating large html fragments if needed.</p>\r\n<h1><span style=\"color:#800000\">Features</span></h1>\r\n<p>The HTMLWriter class allows you to build up the html fragment tag (html tag) by tag and optionally to specify html attributes.</p>\r\n<ul>\r\n<li>Some tags have predefined attributes that almost always has to be specified - like &lt;a&gt; has the url attribute, so the methods to add the anchor tag all the url as a parameter. Another common attribute on most tags is the class name (CSS class name).\r\n Most methods have multiple overloads to make it easier to use. </li><li>There are also a couple of helper classes - one to help with custom html attributes and another to help with DataTable formatting.\r\n</li><li>There is a set of extension methods to facilitate passing a whole DataTable (like in DataSets) in and have a whole html table generated based on the content - complete with alternating rows and even an 'editing page link' if needed.\r\n</li><li>It supports some limited html formatting functionality. Some tags can automatically be placed on a new line and the indentation level changed - like 'blockquote' or 'tr'.\r\n</li><li>Stylesheet definitions (all the stuff between &lt;style&gt; and &lt;/style&gt;) are handled separately and only get merged when the final fragment/document is generated. Both internal and external stylesheets are supported.\r\n</li><li>It has a built-in method for saving the generated html to a file - making it easier to use inside a WebBrowser control. It does not force you what directory to use - although it is recommended to use a user/data directory e.g. System.Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\r\n</li><li>It is easily extendable - you can easily add more html tags or more overloads to meet your needs. The main HTMLWriter and base class are separated so that you can even create your own html or other markup language writer.\r\n</li><li>It provides static methods for getting or escaping html special characters. </li></ul>\r\n<h1><span style=\"color:#800000\">Examples</span></h1>\r\n<p>// Usage example</p>\r\n<pre>            <span style=\"color:#0000ff\">HTMLWriter</span> h = <span style=\"color:#0000ff\">new HTMLWriter</span>(&quot;Test&quot;, true);\n            h.AppendStyle(&quot;body&quot;, &quot;font-family:Arial;&quot;);\n            h.AppendStyle(&quot;mycssclass&quot;, &quot;font-family:Verdana;&quot;);\n            h.AppendHeading(1, &quot;Heading 1&quot;);\n            h.AppendHorisontalLine();\n            h.AppendBlockquoteStart()\n                .AppendParagraph(&quot;Hello paragraph&quot;, &quot;mycssclass&quot;)\n                .AppendUnOrderedListStart(&quot;mylist&quot;)\n                    .AppendListItem(&quot;Item 1&quot;)\n                    .AppendListItem(&quot;Item 2&quot;)\n                    .AppendListItem(&quot;Item 3&quot;)\n                .AppendTagEnd(2); //blockquote\n            h.AppendTableStart(&quot;main&quot;, new CustomAttribute(&quot;border&quot;, &quot;0&quot;))\n                .AppendTableHeadStart()\n                .AppendTableRowStart()\n                .AppendTableCellStart(&quot;&quot;, new CustomAttribute(&quot;colspan&quot;, &quot;2&quot;))\n                .AppendText(&quot;Header&quot;)\n                .AppendTagEnd(3) //cell, row and thead\n                .AppendTableFootStart()\n                .AppendTableRowStart()\n                .AppendTableCell(&quot;Footer&quot;, &quot;&quot;, new CustomAttribute(&quot;colspan&quot;, &quot;2&quot;))\n                .AppendTagEnd(2) //row and tfoot\n                .AppendTableRowStart()\n                .AppendTableHeaderCellStart()\n                .AppendText(&quot;Name&quot;)\n                .AppendTagEnd() //cell\n                .AppendTableHeaderCellStart()\n                .AppendText(&quot;Surname&quot;)\n                .AppendTagEnd(2) //cell, row\n                .AppendTableRowStart()\n                .AppendTableCell(&quot;Luke&quot;)\n                .AppendTableCell(&quot;Skywalker&quot;)\n                .AppendAllEndTagsUntil(&quot;table&quot;); //cell, row, table\n            <span style=\"color:#0000ff\">Console</span>.WriteLine(h.ToString());\n</pre>\r\n<p><br>\r\nThe output would look like this:</p>\r\n<pre>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Test&lt;/title&gt;\n&lt;style type=&quot;text/css&quot;&gt;\nbody\n{font-family:Arial;}\nmycssclass\n{font-family:Verdana;}\n\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Heading 1&lt;/h1&gt;\n&lt;hr /&gt;\n&lt;blockquote&gt;\n  &lt;p class=&quot;mycssclass&quot;&gt;Hello paragraph&lt;/p&gt;\n  &lt;ul class=&quot;mylist&quot;&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;li&gt;Item 3&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;table class=&quot;main&quot; border=&quot;0&quot;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;td colspan=&quot;2&quot;&gt;Header&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tfoot&gt;\n    &lt;tr&gt;\n      &lt;td colspan=&quot;2&quot;&gt;Footer&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tfoot&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Name&lt;/th&gt;\n    &lt;th&gt;Surname&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Luke&lt;/td&gt;\n    &lt;td&gt;Skywalker&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\r\n<p><br>\r\nFor more examples how to use the library see the source code as hosted on CodePlex or have a look at the original blog entries:</p>\r\n<ul>\r\n<li><a href=\"http://hen.co.za/blog/2011/04/htmlwriter\">HTMLWriter</a> </li><li><a href=\"http://hen.co.za/blog/2011/05/htmlwriter-1-1\">HTMLWriter 1.1</a> </li><li><a href=\"http://hen.co.za/blog/2011/05/htmlwriter-1-2\">HTMLWriter 1.2</a> </li><li><a href=\"http://hen.co.za/blog/2011/05/htmlwriter-1-3\">HTMLWriter 1.3</a> </li><li><a title=\"HTMLWriter 1.5\" href=\"http://hen.co.za/blog/2012/03/htmlwriter-1-5/\" target=\"_blank\">HTMLWriter 1.5</a>\r\n</li></ul>\r\n<h1><span style=\"color:#800000\">Comment and suggestions</span></h1>\r\n<p>Comments and suggestion for more extensions are welcome - but keep in mind this was and is suppose to be a 'lightweight' utility library :)</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "html,stream,writer,Library,utility,parser,",
  "LastEdited": "2012-03-07T23:15:43.187-08:00"
}