{
  "ProjectName": "JSense",
  "Title": "JSense - IntelliSense for JavaScript",
  "Description": "JSense provides JavaScript IntelliSense meta-automation for Visual Studio 2010 projects",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><span style=\"color:#000000\"><strong>IntelliSense for JavaScript</strong></span></p>\r\n<p><span>JavaScript IntelliSense in Visual Studio 2010 provides coding choices based on all script that is relevant to your current programming context. This includes scripting elements in the current file. It also includes any code that is referenced directly\r\n or indirectly from your script, such as script file references, assembly script references, service references, and page-associated references.</span></p>\r\n<p><strong>The JSense way</strong></p>\r\n<p>The JSense extension helps you keep your script file references up do date by searching for script files (.js), services (.asmx) and pages (.aspx) in your project and adding them to a common meta base file.</p>\r\n<p>Simply<strong> right-click </strong>your project and select <strong>JSense </strong>\r\nand your script references for IntelliSense are up-to-date!</p>\r\n<p><strong>Visual Studio 2010 vs. Visual Studio 11</strong></p>\r\n<p>This extension was initially developed for Visual Studio 11 Beta where IntelliSense for JavaScript is far more mature. JSense for VS2010 WILL provide some help with IntelliSense but will not make up for the basic shortcomings of VS2010 IntelliSense.</p>\r\n<p>I recommend trying Visual Studio 11 Beta with JSense for a much more user friendly experience.</p>\r\n<p><strong>Running JSense for the first time</strong></p>\r\n<p>When JSensing a project for the first time a file named @JSense.js will be created in the project root. This is your reference meta base that contains all script file references and exclusions.</p>\r\n<p>By default JSense will exclude minified script files (.min.js) services (.asmx) and pages (.aspx). To include these in the meta base simply remove the\r\n<span style=\"color:#008000\"><em>/// &lt;JSense exclude=&quot;...&quot; /&gt;</em> </span>tags and re-run JSensing.</p>\r\n<p>If you examine you script files in VS 2010 you will notice that the following tag has been added to the top of the script:</p>\r\n<p><span style=\"color:#008000\"><em>/// &lt;reference path=&quot;/@JSense.js&quot; /&gt;&nbsp;</em></span></p>\r\n<p>This tag will tell Visual Studio to look in the meta base for references that should be included in IntelliSense for the current script file.</p>\r\n<p>In Visual Studio 11 JSense adds an implicit reference to @JSense.js in the IntelliSense configuration thus removing the need for references in each individual script file.</p>\r\n<p><strong>Working with exclusions</strong></p>\r\n<p>Sometimes you wish to exclude specific files, file types or entire directories from IntelliSense. To do this you may add your own exclusion tags to the meta base. An exclusion tag evaluates a\r\n<strong>.Net Regular Expression</strong> on the full file path and name. If the expression evaluates\r\n<strong>true</strong> the file is excluded.</p>\r\n<p>For example consider&nbsp;a script in the <em>\\scripts\\foo</em> directory called\r\n<em>foo.js</em> with the full path <em>/scripts/foo/bar.js</em></p>\r\n<p>Exclude bar.js:<span style=\"color:#008000\"> /// &lt;JSense exclude=&quot;/scripts/foo/bar\\.js&quot; /&gt;</span></p>\r\n<p>Exclude all files (and sub dirs) in foo:<span style=\"color:#008000\"> /// &lt;JSense exclude=&quot;/scripts/foo/.*&quot; /&gt;</span></p>\r\n<p>Exclude all script files NOT marked <em>debug</em>:&nbsp;<span style=\"color:#008000\">&lt;JSense&nbsp;exclude=&quot;.*[^\\.debug]\\.js&quot;&nbsp;/&gt;</span></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "javascript,intellisense,Visual Studio 2010,visual studio 11,Visual Studio,",
  "LastEdited": "2012-06-01T04:35:49.32-07:00"
}