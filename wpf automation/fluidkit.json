{
  "ProjectName": "fluidkit",
  "Title": "FluidKit",
  "Description": "This is a WPF library containing  a powerhouse of controls, frameworks, helpers, tools, etc. for productive WPF development.\nIf you have ever heard of Drag and Drop with Attached properties, ElementFlow, GlassWindow, this is the library that will contain all such goodies. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This is a WPF library containing  a powerhouse of controls, frameworks, helpers, tools, etc. for productive WPF development.<br />If you have ever heard of Drag and Drop with Attached properties, ElementFlow, GlassWindow, this is the library that will contain all such goodies. <br />Here is the introductory <a href=\"http://blog.pixelingene.com/?p=137\">blog post</a><br /><br />At this time the library is in a <b><i>Source Only</i></b> form and requires <b>.Net Framework 3.5 SP1</b> or later. To build this project on your machine, you need to have <b>VS2010</b>.<br /><br /><b>The library so far ...</b>\n<ul><li>ImageButton</li>\n<li>DragDropManager</li>\n<li>GlassWindow</li>\n<li>BalloonDecorator</li>\n<li>ItemSkimmingPanel + SkimmingContextAdorner</li>\n<li>PennerDoubleAnimation</li>\n<li>ElementFlow</li>\n<li>TransitionPresenter</li>\n<li>GenieAnimation</li>\n<li>WarpEffect using Pixel Shaders</li>\n<li><b>Simple 3D Engine</b> <i>( New )</i></li>\n<li><b>HalfCirclePanel</b> <i>( New )</i></li></ul>\n<br /><b>Contributions</b>\n<ul><li>CogWheelShape, PolygonShape &lt;Boris Tschirner&gt;</li></ul>\n<br /><i>If you wish to contribute or share ideas please direct your mail to</i> <a href=\"mailto:pavan@pixelingene.com\">pavan@pixelingene.com</a><br /><br /><b>Screenshots</b><br />Here is a quick way to know what  these controls look like: <a href=\"https://fluidkit.codeplex.com/wikipage?title=Screenshots&referringTitle=Home\">Screenshots</a><br /><br /><br /><b>Team</b>\n<ul><li>Pavan Podila ( <a href=\"http://blog.pixelingene.com\">Blog</a> )</li></ul>\n<br /><div class=\"rss\"><div class=\"accentbar\"><span class=\"left\">&nbsp;</span>Pixel in Gene News Feed<span class=\"right\">&nbsp;</span></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/fRxLxQ7lqys/\">The Common Patterns of React</a></div><div class=\"moreinfo\"><span class=\"date\">Tuesday, September 05, 2017</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2017-09-06-the-common-patterns-of-react/react-logo.svg\"<br />         width=\"256\"<br />          /><br /></div><br /><br /><br /><p>The <strong>React</strong> framework has been used by a wide variety of teams and several folks have written about their own experiences using React. This post compiles a list of the various design patterns that have been observed while building React Components.</p><br /><br /><p>React itself allows you to shape the <em>Component Tree</em> the way you want, but certain recurring patterns have made this an easier and more manageable task. The overarching principles are around:</p><br />\n<ul><br /><li>Separation of concerns between components</li>\n<li>Uni-directional data flow</li>\n<li>Crisp communication via callbacks.</li>\n</ul>\n<br /><p></p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=fRxLxQ7lqys:kffULUcBPaQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=fRxLxQ7lqys:kffULUcBPaQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=fRxLxQ7lqys:kffULUcBPaQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=fRxLxQ7lqys:kffULUcBPaQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=fRxLxQ7lqys:kffULUcBPaQ:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/fRxLxQ7lqys\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/IcMIwlKEpYc/\">Effective MobX Patterns (Part 3)</a></div><div class=\"moreinfo\"><span class=\"date\">Friday, October 28, 2016</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>The previous two parts (<a href=\"http://blog.pixelingene.com/2016/10/effective-mobx-patterns-part-1\">Part 1</a>, <a href=\"http://blog.pixelingene.com/2016/10/effective-mobx-patterns-part-2\">Part 2</a>) focused on the fundamental building blocks of MobX. With those blocks in hand we can now start solving some real-world scenarios through the lens of MobX. This post is going to be a series of examples that applies the concepts we have seen so far.</p><br /><br /><p>Of course, this is not an exhaustive list but should give you a taste of the kind of <em>mental-shift</em> you have to make to apply the <strong><em>MobX</em></strong> lens. All of the examples have been created without the <code>@decorator</code> syntax. This allows you to try this out inside Chrome Console, Node REPL or in an IDE like WebStorm that supports <em>scratch files</em>.</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-10-29-effective-mobx-patterns-part-3/mobx.png\"<br />         <br />          /><br /></div><br /><br /><br /><p></p><br />\n<ul><br /><li><a href=\"http://blog.pixelingene.com/2016/10/effective-mobx-patterns-part-1\">Part 1 - Shaping the observables</a></li>\n<li><a href=\"http://blog.pixelingene.com/2016/10/effective-mobx-patterns-part-2\">Part 2 - Reacting to changes</a></li>\n<li><strong>Part 3 - A Cookbook of use cases</strong></li>\n</ul>\n<br /><h3 id=\"no-tldr\">No TLDR?</h3><br /><br /><p>This is a long post. Sorry, no TLDR here. I have <span class=\"badge\">4</span> examples and it should get faster and easier to read after <em>Example 2</em>. I think :-).</p><br />\n<ol><br /><li><a href=\"#1\">Send analytics for important actions</a></li>\n<li><a href=\"#2\">Kick off operations as part of a workflow</a></li>\n<li><a href=\"#3\">Perform form validation as inputs change</a></li>\n<li><a href=\"#4\">Track if all registered components have loaded</a></li>\n</ol>\n<br /><h2 id=\"making-the-shift-in-thinking\">Making the shift in thinking</h2><br /><br /><p>When you learn the theory behind some library or framework and try to apply it to your own problems, you may draw a blank initially. It happens to an average guy like me and even to the best folks out there. The writing world calls it the <em>&ldquo;Writer&rsquo;s block&rdquo;</em> and in the artist&rsquo;s world, it&rsquo;s the <em>&ldquo;Painter&rsquo;s block&rdquo;</em>.</p><br /><br /><p>What we need are examples from simple to complex to shape our thinking style. It is only by seeing the applications, can we start to imagine the solutions to our own problems.</p><br /><br /><p>For MobX, it starts by understanding the fact that you have a reactive object-graph. Some parts of the tree may depend on other parts. As the tree mutates, the connected parts will react and update to reflect the changes.</p><br /><br /><blockquote><br /><p>The shift in thinking is about envisioning the system at hand as a set of reactive mutations + a set of corresponding effects.</p>\n</blockquote>\n<br /><p>Effects can be anything that produce output as a result of the reactive change. Let&rsquo;s explore a variety of real-world examples and see how we can model and express them with MobX.</p><br /><br /><p><a name=\"1\"></a></p><br /><br /><h3 id=\"example-1-send-analytics-for-important-actions\">Example 1: Send analytics for important actions</h3><br /><br /><p><div class=\"badge outline\">Problem</div> We have certain <em>one-time</em> actions in the app that have to be logged to the server. We want to track when these actions are performed and send analytics.<br /><br></p><br /><br /><p><div class=\"badge\">Solution</div><br /><br></p><br /><br /><p><div class=\"badge\">1</div> The first step is to model the state. Our actions are limited and we only care when it is performed once. We can model with a map of <em>action-name</em> to a boolean. This is our observable state.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">const</span> <span class=\"nx\">actionMap</span> <span class=\"o\">=</span> <span class=\"nx\">observable</span><span class=\"p\">({</span>\n    <span class=\"nx\">login</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nx\">logout</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nx\">forgotPassword</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nx\">changePassword</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nx\">loginFailed</span><span class=\"o\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">});</span>\n</code></pre></div><br /><br /><p><div class=\"badge\">2</div> Next we have to react to changes happening to these action states. Since they only happen once during the lifetime, we are not going to use long-running effects like <code>autorun()</code> or <code>reaction()</code>. We also don&rsquo;t want these effects lying around after they execute. Well, that leaves us with only one option: &hellip;.</p><br /><br /><p>&hellip;.<br><br />&hellip;.<br><br />&hellip;.<br><br />&hellip;.<br><br />&hellip;.<br></p><br /><br /><p><a href=\"https://mobxjs.github.io/mobx/refguide/when.html\"><code>when()</code></a>.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">actionMap</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">key</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">when</span><span class=\"p\">(</span>\n            <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">actionMap</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">],</span>\n            <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">reportAnalyticsForAction</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">)</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">reportAnalyticsForAction</span><span class=\"p\">(</span><span class=\"nx\">actionName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Reporting: &#39;</span><span class=\"p\">,</span> <span class=\"nx\">actionName</span><span class=\"p\">);</span>\n\n    <span class=\"cm\">/* ... JSON API Request ... */</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p>In the above code, we are simply looping over the keys in our <code>actionMap</code> and setting up a <code>when()</code> side-effect for each key. The side-effect will run when the <em>tracker-function</em> (the first argument) returns <code>true</code>. After running the <em>effect-function</em> (second argument), <code>when()</code> will <em>auto-dispose</em>. So there is no issue of multiple reports being sent out from the app!</p><br /><br /><p><div class=\"badge\">3</div> We will also need a <em>MobX action</em> to change the <em>observable</em> state. <strong><em>Remember:</em></strong> never modify your observables directly. Always do it through an <a href=\"https://mobxjs.github.io/mobx/refguide/action.html\"><code>action</code></a>.</p><br /><br /><p>For us, this looks as below:</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">const</span> <span class=\"nx\">markActionComplete</span> <span class=\"o\">=</span> <span class=\"nx\">action</span><span class=\"p\">((</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">actionMap</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">markActionComplete</span><span class=\"p\">(</span><span class=\"s1\">&#39;login&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">markActionComplete</span><span class=\"p\">(</span><span class=\"s1\">&#39;logout&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">markActionComplete</span><span class=\"p\">(</span><span class=\"s1\">&#39;login&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// [LOG] Reporting:  login</span>\n<span class=\"c1\">// [LOG] Reporting:  logout</span>\n</code></pre></div><br /><br /><p>Note that, even though I am marking the <strong><em>login</em></strong> action twice, there is no reporting happening. Perfect. That is exactly the behavior we need.</p><br /><br /><p>It works for two reasons:</p><br />\n<ol><br /><li>The <code>login</code> flag is already true, so there is no change in value</li>\n<li>Also the <code>when()</code> side-effect has been disposed so there is no tracking happening anymore.</li>\n</ol>\n<br /><p><a name=\"2\"></a></p><br /><br /><h3 id=\"example-2-kick-off-operations-as-part-of-a-workflow\">Example 2: Kick off operations as part of a workflow</h3><br /><br /><p><div class=\"badge outline\">Problem</div> We have a workflow that consists of several states. Each state is mapped to certain tasks, which are performed when the workflow reaches that state.<br /><br></p><br /><br /><p><div class=\"badge\">Solution</div><br /><br></p><br /><br /><p><div class=\"badge\">1</div>From the description above, it seems that the only value that is observable is the <em>state</em> of the Workflow. The tasks that need to run for each state, can be stored as a simple map. With this we can model our workflow like so:</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">class</span> <span class=\"nx\">Workflow</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">taskMap</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">taskMap</span> <span class=\"o\">=</span> <span class=\"nx\">taskMap</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">observable</span><span class=\"p\">({</span>\n            <span class=\"nx\">previous</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nx\">next</span><span class=\"o\">:</span> <span class=\"kc\">null</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">transitionTo</span> <span class=\"o\">=</span> <span class=\"nx\">action</span><span class=\"p\">((</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">previous</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">;</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">next</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">monitorWorkflow</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">monitorWorkflow</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"cm\">/* ... */</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Usage</span>\n<span class=\"kr\">const</span> <span class=\"nx\">workflow</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Workflow</span><span class=\"p\">({</span>\n    <span class=\"nx\">start</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Running START&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nx\">process</span><span class=\"p\">(){</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Running PROCESS&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nx\">approve</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Running APPROVE&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nx\">finalize</span><span class=\"p\">(</span><span class=\"nx\">workflow</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Running FINALIZE&#39;</span><span class=\"p\">);</span>\n\n        <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span><span class=\"o\">=&gt;</span><span class=\"p\">{</span>\n            <span class=\"nx\">workflow</span><span class=\"p\">.</span><span class=\"nx\">transitionTo</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">);</span>\n        <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nx\">end</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Running END&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div><br /><br /><p>Note that we are storing an instance variable called <code>state</code> that tracks the current and previous state of the Workflow. We are also passing the map of <em>state-&gt;task</em>, stored as <em>taskMap</em>.</p><br /><br /><p><div class=\"badge\">2</div> Now the interesting part is about <em>monitoring</em> the workflow. In this case, we don&rsquo;t have a one-time action like the previous example. A Workflow is usually long-running, possibly for the lifetime of the application. This calls for either <code>autorun()</code> or <code>reaction()</code>.</p><br /><br /><p>The tasks for a state are only performed when you transition into the state. So we need to wait for a change on <code>this.state.next</code> before we can run any side-effects (tasks). Waiting for a change indicates the use of <a href=\"https://mobxjs.github.io/mobx/refguide/reaction.html\"><code>reaction()</code></a> as it will run only when the tracked observable changes value. So our monitoring code will look like so:</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">class</span> <span class=\"nx\">Workflow</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* ... */</span>\n\n    <span class=\"nx\">monitorWorkflow</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">reaction</span><span class=\"p\">(</span>\n            <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">,</span>\n            <span class=\"p\">(</span><span class=\"nx\">nextState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"kr\">const</span> <span class=\"nx\">task</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">taskMap</span><span class=\"p\">[</span><span class=\"nx\">nextState</span><span class=\"p\">];</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">task</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">task</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p>The first argument to <code>reaction()</code> is the <em>tracking-function</em>, which in this case simply returns <strong><em>this.state.next</em></strong>. When the return value of the <em>tracking-function</em> changes, it will trigger the <em>effect-function</em>. The <em>effect-function</em> looks at the current state, looks up the task from <strong><em>this.taskMap</em></strong> and simply invokes it.</p><br /><br /><p>Note that we are also passing the instance of the Workflow into the task. This can be used to transition the workflow into other states.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"nx\">workflow</span><span class=\"p\">.</span><span class=\"nx\">transitionTo</span><span class=\"p\">(</span><span class=\"s1\">&#39;start&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">workflow</span><span class=\"p\">.</span><span class=\"nx\">transitionTo</span><span class=\"p\">(</span><span class=\"s1\">&#39;finalize&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// [LOG] Running START</span>\n<span class=\"c1\">// [LOG] Running FINALIZE</span>\n<span class=\"cm\">/* ... after 500ms ... */</span>\n<span class=\"c1\">// [LOG] Running END</span>\n</code></pre></div><br /><br /><p>Interestingly, this technique of storing a simple observable, like <code>this.state.next</code> and using a <code>reaction()</code> to trigger side-effects, can also be used for:</p><br />\n<ul><br /><li>Routing via <a href=\"https://github.com/ReactTraining/react-router\">react-router</a></li>\n<li>Navigating within a presentation app</li>\n<li>Switching between different views based on a mode</li>\n</ul>\n<br /><p><em>I&rsquo;ll leave it as a reader-exercise to try this out. Feel free to leave comments if you hit any road blocks.</em></p><br /><br /><p><a name=\"3\"></a></p><br /><br /><h3 id=\"example-3-perform-form-validation-as-inputs-change\">Example 3: Perform form validation as inputs change</h3><br /><br /><p><div class=\"badge outline\">Problem</div> This is a classic Web form use case where you have a bunch of inputs that need to be validated. When they are valid, you can allow submission of the form.<br /><br></p><br /><br /><p><div class=\"badge\">Solution</div><br /><br></p><br /><br /><p><div class=\"badge\">1</div> Let&rsquo;s model this with a simple form-data class whose fields have to be validated.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">class</span> <span class=\"nx\">FormData</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">extendObservable</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"nx\">firstName</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">lastName</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">email</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">acceptTerms</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n\n            <span class=\"nx\">errors</span><span class=\"o\">:</span> <span class=\"p\">{},</span>\n\n            <span class=\"nx\">valid</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// this becomes a computed() property</span>\n                <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setupValidation</span><span class=\"p\">();</span> <span class=\"c1\">// We will look at this below</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p>The <a href=\"https://mobxjs.github.io/mobx/refguide/extend-observable.html\"><code>extendObservable()</code></a> API is something we haven&rsquo;t seen before. By applying it on our class instance (<code>this</code>), we get an ES5 equivalent of making an <code>@observable</code> class property.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">class</span> <span class=\"nx\">FormData</span> <span class=\"p\">{</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n    <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p><div class=\"badge\">2</div> Next we need to monitor when any of those fields change and run some validation logic. If the validation goes through we can mark the entity as valid and allow submission. The validity itself is being tracked with a computed property: <code>valid</code>.</p><br /><br /><p>Since the validation logic needs to run for the lifetime of <em>FormData</em>, we are going to use <a href=\"https://mobxjs.github.io/mobx/refguide/autorun.html\"><code>autorun()</code></a>. We could have used <code>reaction()</code> as well but we want to run validation immediately instead of waiting for the first change.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">class</span> <span class=\"nx\">FormData</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setupValidation</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">autorun</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Dereferencing observables for tracking</span>\n            <span class=\"kr\">const</span> <span class=\"p\">{</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">email</span><span class=\"p\">,</span> <span class=\"nx\">acceptTerms</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">props</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"nx\">firstName</span><span class=\"p\">,</span>\n                <span class=\"nx\">lastName</span><span class=\"p\">,</span>\n                <span class=\"nx\">email</span><span class=\"p\">,</span>\n                <span class=\"nx\">acceptTerms</span>\n            <span class=\"p\">};</span>\n\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">runValidation</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"cm\">/* ... */</span><span class=\"p\">})</span>\n                <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span> <span class=\"o\">=</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n                <span class=\"p\">})</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">runValidation</span><span class=\"p\">(</span><span class=\"nx\">propertyMap</span><span class=\"p\">,</span> <span class=\"nx\">rules</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kr\">const</span> <span class=\"p\">{</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">email</span><span class=\"p\">,</span> <span class=\"nx\">acceptTerms</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">propertyMap</span><span class=\"p\">;</span>\n\n            <span class=\"kr\">const</span> <span class=\"nx\">isValid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">firstName</span> <span class=\"o\">!==</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">lastName</span> <span class=\"o\">!==</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">email</span> <span class=\"o\">!==</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">acceptTerms</span> <span class=\"o\">===</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n            <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">isValid</span> <span class=\"o\">?</span> <span class=\"kc\">null</span> <span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"cm\">/* ... map of errors ... */</span><span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p>In the above code, the <code>autorun()</code> will automatically trigger anytime there is a change to the tracked observables. Note that for MobX to properly track your observables, you <a href=\"https://mobxjs.github.io/mobx/best/react.html\">have to use dereferencing</a>.</p><br /><br /><p><code>runValidation()</code> is an async call, which is why we are returning a promise. In the example above, it does not matter but in the real-world you will probably make a server call for some special validation. When the result comes back we will set the <code>error</code> observable, which will in turn update the <code>valid</code> computed property.</p><br /><br /><p>If you have an expensive validation logic, you can even use <a href=\"https://mobxjs.github.io/mobx/refguide/autorun-async.html\"><code>autorunAsync()</code></a>, which has an argument to <em>debounce the execution with some delay</em>.</p><br /><br /><p><div class=\"badge\">3</div> Alright, lets put our code into action. We will setup a simple console logger (via <code>autorun()</code>) and track the <code>valid</code> computed property.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">const</span> <span class=\"nx\">instance</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FormData</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// Simple console logger</span>\n<span class=\"nx\">autorun</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// tracking this so autorun() runs for every input change</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">validation</span> <span class=\"o\">=</span> <span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`Valid = </span><span class=\"si\">${</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">valid</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">valid</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;--- Form Submitted ---&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// Let&#39;s change the fields</span>\n<span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Pavan&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Podila&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">email</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pavan@pixelingene.com&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">acceptTerms</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n</code></pre></div><br /><br /><p>This is the logged output:</p><br /><br /><div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\"><span></span><span class=\"lineno\">1 </span><span class=\"hll\">Valid = false\n</span><span class=\"lineno\">2 </span><span class=\"hll\">Valid = false\n</span><span class=\"lineno\">3 </span>Valid = false\n<span class=\"lineno\">4 </span>Valid = false\n<span class=\"lineno\">5 </span>Valid = false\n<span class=\"lineno\">6 </span>Valid = true\n<span class=\"lineno\">7 </span>--- Form Submitted ---\n</code></pre></div><br /><br /><br /><p>Since <code>autorun()</code> runs immediately, you will see the two extra logs in the beginning, one for <code>instance.errors</code> and one for <code>instance.valid</code>, lines 1-2. The remaining four lines (3-6) are for each change in the field.</p><br /><br /><p>Each field change triggers <em>runValidation()</em>, which internally returns a new <em>error object</em> each time. This causes a change in reference for <code>instance.errors</code> and then trigges our <code>autorun()</code> to log the <em>valid</em> flag. Finally when we have set all the fields, <code>instance.errors</code> becomes <strong><em>null</em></strong> (again change in reference) and that logs the final <em>&ldquo;Valid = true&rdquo;</em>.</p><br /><br /><p><div class=\"badge\">4</div><br />So in short, we are doing form validation by making the form fields observable. We also add an extra <code>errors</code> property and a <code>valid</code> computed property to keep track of the validity. <code>autorun()</code> saves the day by tying everything together.</p><br /><br /><p><a name=\"4\"></a></p><br /><br /><h3 id=\"example-4-track-if-all-registered-components-have-loaded\">Example 4: Track if all registered components have loaded</h3><br /><br /><p><div class=\"badge outline\">Problem</div> We have a set of registered components and we want to keep track when all of them get loaded. Every component will expose a <code>load()</code> method that returns a promise. If the promise resolves, we mark the component as <strong><em>loaded</em></strong>. If it rejects, we mark it as <strong><em>failed</em></strong>. When all of them finish loading, we will report if the entire set <em>loaded</em> or <em>failed</em>.</p><br /><br /><p><div class=\"badge\">Solution</div><br /><br></p><br /><br /><p><div class=\"badge\">1</div><br />Let&rsquo;s first look at the components we are dealing with. We are creating a set of components that randomly report their load status. Also note that some are async.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">const</span> <span class=\"nx\">components</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;first&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">load</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.5</span> <span class=\"o\">?</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;second&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">load</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.5</span> <span class=\"o\">?</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n                <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;third&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">load</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.25</span> <span class=\"o\">?</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n                <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">];</span>\n</code></pre></div><br /><br /><p><div class=\"badge\">2</div><br />The next step is to design the observable state for the <code>Tracker</code>. The <code>load()</code> of the components will not complete in a specific order. So we need an observable array to store the <code>loaded</code> state of each component. We will also track the <code>reported</code> state of each component.</p><br /><br /><p>When all components have <code>reported</code>, we can notify the final <code>loaded</code> state of the set of components. The below code sets up the observables.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">class</span> <span class=\"nx\">Tracker</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">constructor</span><span class=\"p\">(</span><span class=\"nx\">components</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">components</span> <span class=\"o\">=</span> <span class=\"nx\">components</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">extendObservable</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n\n            <span class=\"c1\">// Create an observable array of state objects,</span>\n            <span class=\"c1\">// one per component</span>\n            <span class=\"nx\">states</span><span class=\"o\">:</span> <span class=\"nx\">components</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(({</span><span class=\"nx\">name</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">name</span><span class=\"p\">,</span>\n                    <span class=\"nx\">reported</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n                    <span class=\"nx\">loaded</span><span class=\"o\">:</span> <span class=\"kc\">undefined</span>\n                <span class=\"p\">};</span>\n            <span class=\"p\">}),</span>\n\n            <span class=\"c1\">// computed property that derives if all components have reported</span>\n            <span class=\"nx\">reported</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">states</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">flag</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"nx\">flag</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">reported</span><span class=\"p\">;</span>\n                <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n            <span class=\"p\">},</span>\n\n            <span class=\"c1\">// computed property that derives the final loaded state </span>\n            <span class=\"c1\">// of all components</span>\n            <span class=\"nx\">loaded</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">states</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">flag</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"nx\">flag</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!!</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loaded</span><span class=\"p\">;</span>\n                <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n            <span class=\"p\">},</span>\n\n            <span class=\"c1\">// An action method to mark reported + loaded</span>\n            <span class=\"nx\">mark</span><span class=\"o\">:</span> <span class=\"nx\">action</span><span class=\"p\">((</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">loaded</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"kr\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">states</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">===</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n\n                <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">reported</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loaded</span> <span class=\"o\">=</span> <span class=\"nx\">loaded</span><span class=\"p\">;</span>\n            <span class=\"p\">})</span>\n\n        <span class=\"p\">});</span>\n\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p>We are back to using <a href=\"https://mobxjs.github.io/mobx/refguide/extend-observable.html\"><code>extendObservable()</code></a> for setting up our observable state. The <code>reported</code> and <code>loaded</code> computed properties track as and when the components complete their load. <code>mark()</code> is our action-method to mutate the observable state.</p><br /><br /><p><div class=\"badge\">3</div> To kick off the tracking, we will create a <code>track()</code> method on the <code>Tracker</code>. This will fire off the <code>load()</code> of each component and wait for the returned Promise to <em>resolve/reject</em>. Based on that it will mark the load state of the component.</p><br /><br /><p><code>when()</code> all the components have <code>reported</code>, the tracker can report the final <code>loaded</code> state. We use <code>when</code> here since we are waiting on a condition to become true (<code>this.reported</code>). The side-effect of reporting back needs to happen only once, a perfect fit for <a href=\"https://mobxjs.github.io/mobx/refguide/when.html\"><code>when()</code></a>.</p><br /><br /><p>The code below takes care of the above:</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">class</span> <span class=\"nx\">Tracker</span> <span class=\"p\">{</span>\n\n    <span class=\"cm\">/* ... */</span> \n\n    <span class=\"nx\">track</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">when</span><span class=\"p\">(</span>\n            <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">reported</span><span class=\"p\">,</span>\n            <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"nx\">done</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">loaded</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">components</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(({</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">load</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"nx\">load</span><span class=\"p\">()</span>\n                <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">mark</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n                <span class=\"p\">})</span>\n                <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">mark</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n                <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">setupLogger</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">autorun</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">loaded</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">states</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(({</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">loaded</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">: </span><span class=\"si\">${</span><span class=\"nx\">loaded</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">loaded</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;, &#39;</span><span class=\"p\">));</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p><code>setupLogger()</code> is not really part of the solution but is used to log the reporting. It&rsquo;s a good way to know if our solution works.</p><br /><br /><p><div class=\"badge\">4</div> Now comes the part where we try this out:</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">const</span> <span class=\"nx\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Tracker</span><span class=\"p\">(</span><span class=\"nx\">components</span><span class=\"p\">);</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">setupLogger</span><span class=\"p\">();</span>\n<span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">track</span><span class=\"p\">((</span><span class=\"nx\">loaded</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;All Components Loaded = &#39;</span><span class=\"p\">,</span> <span class=\"nx\">loaded</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><br /><br /><p>And the logged output shows its working as expected. As the components report, we log the current <code>loaded</code> state of each component. When all of them report, <code>this.reported</code> becomes true, and we see the <em>&ldquo;All Components Loaded&rdquo;</em> message.</p><br /><br /><div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\"><span></span><span class=\"lineno\">1 </span>first: undefined, second: undefined, third: undefined\n<span class=\"lineno\">2 </span>first: true, second: undefined, third: undefined\n<span class=\"lineno\">3 </span>first: true, second: undefined, third: true\n<span class=\"lineno\">4 </span>All Components Loaded =  false\n<span class=\"lineno\">5 </span>first: true, second: false, third: true\n</code></pre></div><br /><br /><br /><h2 id=\"did-the-mental-shift-happen\">Did the Mental Shift happen?</h2><br /><br /><p>Hope the above set of examples gave you a taste of thinking in MobX.</p><br /><br /><blockquote><br /><p>Its all about side-effects on an observable data-graph.</p>\n</blockquote>\n\n<ol><br /><li>Design the <strong><em>observable state</em></strong></li>\n<li>Setup <strong><em>mutating</em></strong> <code>action</code> <strong><em>methods</em></strong> to change the observable state</li>\n<li>Put in a <strong><em>tracking function</em></strong> (<code>when</code>, <code>autorun</code>, <code>reaction</code>) to respond to changes on the observable state</li>\n</ol>\n<br /><p>The above formula should work even for complex scenarios where you need to track something after something changes, which can result in repeat of steps <strong><em>1-3</em></strong>.</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-10-29-effective-mobx-patterns-part-3/formula.png\"<br />         <br />          /><br /></div><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=IcMIwlKEpYc:BE_nlR_jhqM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=IcMIwlKEpYc:BE_nlR_jhqM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=IcMIwlKEpYc:BE_nlR_jhqM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=IcMIwlKEpYc:BE_nlR_jhqM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=IcMIwlKEpYc:BE_nlR_jhqM:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/IcMIwlKEpYc\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/0MVQrMWcHZ4/\">Effective Mobx Patterns (Part 2)</a></div><div class=\"moreinfo\"><span class=\"date\">Tuesday, October 18, 2016</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>In the <a href=\"http://blog.pixelingene.com/2016/10/effective-mobx-patterns-part-1\">previous part</a> we looked at how you can setup a MobX state tree and make it observable. With that in place, the next step is to start reacting to changes. Frankly this is where the fun begins!</p><br /><br /><p></p><br />\n<ul><br /><li>Part 1 - <a href=\"http://blog.pixelingene.com/2016/10/effective-mobx-patterns-part-1\">Shaping the observables</a></li>\n<li><strong>Part 2 - Reacting to changes</strong></li>\n<li>Part 3 - <a href=\"http://blog.pixelingene.com/2016/10/effective-mobx-patterns-part-3\">A Cookbook of common use cases</a></li>\n</ul>\n<br /><p>MobX guarantees that whenever there is a change in your reactive data-graph, the parts that are dependent on the <code>observable</code> properties are automatically synced up. This means you can now focus on reacting to changes and causing side-effects rather than worrying about data synchronization.</p><br /><br /><p>Let&rsquo;s look at some of the ways in which you can take action.</p><br /><br /><h2 id=\"using-action-as-an-entry-point\">Using <code>@action</code> as an entry point</h2><br /><br /><p>By default when you modify observables, MobX will detect and keep other depending observables in sync. This happens synchronously. However there may be times when you want to modify multiple observables in the same method. This can result in several notifications being fired and may even slow down your app. A better way to do this is to wrap the method you are invoking in an <code>action()</code>. This creates a transaction boundary around your method and all affected observables will be kept in sync after your method executes. Note that this works only for observables in the current function scope. If you have async actions which modify more observables, you will have to wrap them in <code>runInAction()</code>.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">class</span> <span class=\"nx\">Person</span> <span class=\"p\">{</span>\n\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">firstName</span><span class=\"p\">;</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">lastName</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">changeName</span><span class=\"p\">(</span><span class=\"nx\">first</span><span class=\"p\">,</span> <span class=\"nx\">last</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"nx\">first</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"nx\">last</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><h2 id=\"using-autorun-to-trigger-side-effects\">Using <code>autorun</code> to trigger side-effects</h2><br /><br /><h2 id=\"using-reactions-to-trigger-side-effects-after-first-change\">Using <code>reactions</code> to trigger side-effects after first change</h2><br /><br /><h2 id=\"using-when-to-trigger-one-time-side-effects\">Using <code>when</code> to trigger one-time side-effects</h2><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-10-19-effective-mobx-patterns-part-2/empty.png\"<br />         <br />          /><br /></div><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=0MVQrMWcHZ4:ypjYGBeOOsE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=0MVQrMWcHZ4:ypjYGBeOOsE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=0MVQrMWcHZ4:ypjYGBeOOsE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=0MVQrMWcHZ4:ypjYGBeOOsE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=0MVQrMWcHZ4:ypjYGBeOOsE:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/0MVQrMWcHZ4\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/xybVJJwXsCQ/\">Effective MobX patterns (Part 1)</a></div><div class=\"moreinfo\"><span class=\"date\">Sunday, October 16, 2016</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p><a href=\"https://mobxjs.github.io/mobx/\">MobX</a> provides a simple and powerful approach to managing client side state. It uses a technique called <em><strong>T</strong>ransparent <strong>F</strong>unctional <strong>R</strong>eactive <strong>P</strong>rogramming</em> (TFRP) wherein it automatically computes a derived value if any of the dependent values change. Behind the scenes, it <strong><em>transparently</em></strong> sets up a dependency graph and tracks the values as they change.</p><br /><br /><p>MobX causes a <em><strong>shift in mindset</strong></em> (for the better) and changes your mental model around managing client side state.</p><br /><br /><p>After having used it for more than 6+ months on multiple React projects, I find certain patterns of usage recurring very frequently. This post is a compilation of various techniques I&rsquo;ve been using to manage client state with MobX. This is not an introductory post but assumes some familiarity with MobX.</p><br /><br /><p></p><br /><br /><p>This is going to be a <em>3-part</em> series. In this first part we will look at shaping the MobX State Tree.</p><br />\n<ol><br /><li><strong>Shaping the observables</strong></li>\n<li>Reacting to changes</li>\n<li>A Cookbook of common use cases</li>\n</ol>\n<br /><h2 id=\"shaping-the-observables\">Shaping the observables</h2><br /><br /><blockquote><br /><p>This the part where you sculpt the shape of your Store.</p>\n</blockquote>\n<br /><p>Modeling the client-state is probably the first step when starting with MobX. This is most likely a direct reflection of your domain-model that is being rendered on the client. Now, when I say client-state, I am really talking about the &ldquo;<strong>Store</strong>&rdquo;, a concept you may be familiar with if you are coming from a <em>Redux</em> background. Although you only have one Store, it is internally composed of many <em>sub-Stores</em> that handle the various features of your application.</p><br /><br /><p>The easiest way to get started is to annotate properties of your <code>Store</code> that <em><strong>will keep changing</strong></em> as <a href=\"https://mobxjs.github.io/mobx/refguide/observable.html\"><code>@observable</code></a>. <em>Note that I am using the decorator syntax but the same can be achieved with simple ES5 function wrappers.</em></p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">observable</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;mobx&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">AlbumStore</span> <span class=\"p\">{</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">date</span><span class=\"p\">;</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">description</span><span class=\"p\">;</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">author</span><span class=\"p\">;</span>\n    \n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">photos</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><h3 id=\"pruning-the-observability\">Pruning the observability</h3><br /><br /><p>By marking an object as <code>@observable</code>, you automatically observe all of its nested properties. Now this may be something you want but many a time its better to limit the observability. You can do that with a few <a href=\"https://mobxjs.github.io/mobx/refguide/modifiers.html\">MobX modifiers</a>:</p><br />\n<ul><br /><li><p><strong><code>asReference</code></strong>: This will turn off observing the property completely. This is useful when there are certain properties that will never change.</p></li>\n<br /><li><p><strong><code>asFlat</code></strong>: This is slightly more loose than <em>asReference</em>. <code>asFlat</code> allows the property itself to be observable but not any of its children. The typical usage is for arrays where you only want to observe the <em>array instance</em> but not its items.</p></li>\n</ul>\n<br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-10-17-effective-mobx-patterns-part-1/prune.png\"<br />         <br />          /><br /></div><br /><br /><br /><p><span class=\"badge\">Tip</span> Start off by making everything <code>@observable</code> and then apply the <code>asReference</code> and <code>asFlat</code> modifiers to prune the observability.</p><br /><br /><p>This kind of pruning is something you discover as you go deeper into implementing the various features of your app. It may not be obvious when you start out, and that is perfectly OK! Just make sure to revisit your Store as and when you recognize properties that don&rsquo;t need deep observability. It can have a positive impact on your app&rsquo;s performance.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">observable</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;mobx&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">AlbumStore</span> <span class=\"p\">{</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n    \n    <span class=\"c1\">// No need to observe date</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">date</span> <span class=\"o\">=</span> <span class=\"nx\">asReference</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span> \n    \n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">description</span><span class=\"p\">;</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">author</span><span class=\"p\">;</span>\n    \n    <span class=\"c1\">// Only observing the photos array, not the individual photos</span>\n    <span class=\"err\">@</span><span class=\"nx\">observable</span> <span class=\"nx\">photos</span> <span class=\"o\">=</span> <span class=\"nx\">asFlat</span><span class=\"p\">([]);</span> \n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><h3 id=\"expanding-the-observability\">Expanding the observability</h3><br /><br /><p>This is the symmetric opposite of pruning the observables. Instead of removing observability you can expand the scope/behavior of observability on the object. Here you have three modifiers that can control this:</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-10-17-effective-mobx-patterns-part-1/structure.png\"<br />         <br />          /><br /></div><br /><br />\n<ul><br /><li><p><strong><code>asStructure</code></strong>: This modifies the way equality checks are done when a new value is assigned to an observable. By default only reference changes are considered as a <em>change</em>. If you prefer to compare based on an internal structure, you can use this modifier. This is essentially for <em>value-types</em> (aka structs) that are equal only if their values match.</p></li>\n<br /><li><p><strong><code>asMap</code></strong>: By default when you mark an object as observable, it can only track the properties initially defined on the object. If you add new properties, those are not tracked. With <a href=\"https://mobxjs.github.io/mobx/refguide/map.html\">asMap</a>, you can make even the newly added properties observable.</p></li>\n</ul>\n<br /><p>Instead of using this modifier, you can also achieve the same effect by starting with a regular observable object. You can then add more observable properties using the <code>extendObservable()</code> API.</p><br />\n<ul><br /><li><strong><code>computed</code></strong>: This is such a powerful concept that its importance cannot be emphasized enough. A <code>computed</code> property is not a real property of your domain, rather it is derived (aka computed) using real properties. A classic example is the <em>fullName</em> property of a person instance. It is derived from the <em>firstName</em> and <em>lastName</em> properties.</li>\n</ul>\n<br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-10-17-effective-mobx-patterns-part-1/expand.png\"<br />         <br />          /><br /></div><br /><br /><br /><p><em><strong>Shaping the observable</strong></em> tree is an essential aspect of using MobX. This is sets up MobX to <em>start tracking</em> the parts of your Store that are interesting and change-worthy!</p><br /><br /><h2 id=\"to-be-continued\">To be continued&hellip;</h2><br /><br /><p>In Part 2 we will look at how you can take <code>@action</code> when your observables change. These are the side effects of your application!</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xybVJJwXsCQ:PpoxaVUqabY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xybVJJwXsCQ:PpoxaVUqabY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=xybVJJwXsCQ:PpoxaVUqabY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xybVJJwXsCQ:PpoxaVUqabY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=xybVJJwXsCQ:PpoxaVUqabY:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/xybVJJwXsCQ\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/Ekdt30Q7iPg/\">Unit Testing on any UI Project</a></div><div class=\"moreinfo\"><span class=\"date\">Tuesday, August 02, 2016</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>Unit Testing is one of those aspects of a UI project that is often ignored. Not because nobody wants to do it, just that the cost<br /> of setup and maintenance can be taxing for a small team. Even on a large team, it can be ignored during those looming deadlines.<br /> Testing takes far greater discipline and rigor to <em>do it right</em> and to <em>keep doing it right</em>.</p><br /><br /><p>This post is not a panacea for Unit Testing but rather distilling the process of Unit Testing to a few key areas. Also, note that we<br /> are just focusing on Unit Testing and not on other kinds of testing like Integration (aka end-to-end), Acceptance, Stress/Chaos testing, etc.<br /> I&rsquo;ll also limit myself to Web UI but the ideas are applicable to other UI platforms.</p><br /><br /><p>I&rsquo;ll get it out right now and state it boldly:</p><br /><br /><blockquote><br /><p><strong>Unit Testing is Hard</strong></p>\n</blockquote>\n<br /><p>With familiarity, it will become easier, but it is still a multi-step process before you are in cruising mode.</p><br /><br /><h1 id=\"why-is-it-hard\">Why is it hard?</h1><br /><br /><p><span class=\"badge\">1</span> <strong>Setup can be challenging</strong>:</p><br />\n<ul><br /><li>You have to first pick a testing framework such as Jasmine, Mocha. You may also have to pick other libraries for framework specific testing.</li>\n<li>Pick a build tool like Gulp, Browserify, Webpack or plain NPM.</li>\n<li>Configure the build to run in test mode</li>\n<li>Setup harness like Karma and related plugins</li>\n<li>Setup Coverage and reporting</li>\n<li>Makes sure it works on your Continuous Integration Server such as Jenkins, or TeamCity</li>\n</ul>\n<br /><p>On every project I worked on there was always a bit of fiddling with the settings and doing things differently based on the available infrastructure.</p><br /><br /><p><span class=\"badge\">2</span> <strong>Devising a test for certain scenarios</strong> can be hard. This can require lot of mocking or changing the code to become more explicit about dependencies. This is<br />     probably the <strong>best part of testing</strong> but can be demotivating sometimes. The end result can be cleaner code and most likely results in better understanding.</p><br /><br /><p><span class=\"badge\">3</span> Sometimes it makes more sense to do <code>Test-Driven development</code> instead of <code>Test-First</code> but requires more experience to know when to pick between the two.<br />A Test-First approach may not be as rewarding and has a longer lead-time to gratification.<br />Instead, seeing working code with manual testing can be more gratifying. Adding unit-tests at that point will also be more meaningful.</p><br /><br /><p>On a separate note, <code>Test First Development</code> works great when doing <em>API Design</em>.</p><br /><br /><p><span class=\"badge\">4</span> Once you are in the middle of the project, <strong>a breaking test can result in lot of investigation</strong>.<br />This is part of the <strong>pain</strong> of software development but manifests more with a failing test! Of course, <em>those same tests</em> will help you later when doing<br />serious refactoring.</p><br /><br /><p>The above is a decent real-world representation of what you have to go through. At least I&rsquo;ve never had a <code>silk road experience</code> yet :-)</p><br /><br /><h1 id=\"stereotypes\">Stereotypes</h1><br /><br /><p>Luckily things will get brighter. As you do more Unit Testing, you will start seeing the patterns emerge. After a few projects doing testing,<br /> you will realize the repetition that is happening. It will be the same kind of tests being done, possibly with different frameworks or libraries.<br /> The key is that the types of tests are quite limited. The following is a representative list of all the possible unit-tests you will ever write:</p><br />\n<ol><br /><li>Algorithmic / State-based</li>\n<li>Form Validation</li>\n<li>Interaction</li>\n<li>Network related</li>\n<li>Time/Clock based</li>\n<li>Async testing</li>\n</ol>\n<br /><h2 id=\"1-algorithmic-state-based-tests\">1. Algorithmic / State-based tests</h2><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-08-03-unit-testing-on-any-ui-project/algorithm.png\"<br />         <br />          /><br /></div><br /><br /><br /><p>These tests are purely logic and have no UI involvement. Most likely these tests focus on the business-logic<br />of your application. For example, you may have a very specific way of parsing the JSON payload from a network request.<br />In this case, you will have a separate module, say <code>parseEntity.js</code> that knows how to consume this payload<br />and make it usable on the client side.</p><br /><br /><p>The kind of tests you will write will include the following:</p><br />\n<ul><br /><li>Parsing for empty payloads</li>\n<li>Parsing for really large payloads</li>\n<li>Parsing for malformed payloads</li>\n<li>Parsing for various types of payloads</li>\n</ul>\n<br /><p>As you can see, its purely logic based and runs through a variety of situations to ensure the parsing module<br />produces the correct results. There is one clear advantage to doing Algorithmic tests, which is they can<br />all be done as <strong>data-driven tests</strong>. You can define a giant list of <code>input</code> &mdash; <code>output</code> cases and simply<br />run through them. You can even keep this list separately in a JSON file or even a Database! As you find<br />more edge-cases, you can craft a specific data-test, include in your list, and ensure your module works correctly.</p><br /><br /><aside class=\"aside  left \"><br /><br />    <br />        <h3 class=\"aside-header\">Data-driven tests</h3><br />    <br /><br />    <div class=\"aside-content\"><br />        <p>Data-driven tests rely on the fact that the only thing changing in the test are the inputs and outputs. This means<br />you can keep a list of input-output pairs and simply run through them one by one. Every test would read the input,<br />perform the operation and check if the result matches the corresponding output.</p><br /><br /><p>Note that the inputs and outputs can be fairly complex. If you have a large set of input-output pairs,<br />you can even store them externally, say in a JSON file, CSV or a NoSQL DB!</p><br /><div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\"><span></span>Operation = Math.pow(2, input)\n\n| Input | Output |\n|-------|--------|\n| 1     | 2      |\n| 2     | 4      |\n| 3     | 8      |\n</code></pre></div><br /><br />    </div><br /></aside><br /><br /><br /><p>Other examples of logic-based testing could be for:</p><br />\n<ul><br /><li>Mathematical Calculations</li>\n<li>Data transformations (such as map, sort, filter, group)</li>\n<li>Search algorithms, Regex</li>\n<li>Correct translations of strings based on locale</li>\n<li>Testing services used in the app (eg: persistence, preferences)</li>\n</ul>\n<br /><h2 id=\"2-form-validation-tests\">2. Form Validation tests</h2><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-08-03-unit-testing-on-any-ui-project/form-validation.png\"<br />         <br />          /><br /></div><br /><br /><br /><p>Technically this type of test falls under the Algorithmic category. However this use case is quite frequent on<br />UI apps that it demands its own category. Here again you can have a data-table for all the input-output pairs.<br />The types of things you will test include:</p><br />\n<ul><br /><li>Validation of field values against a set of constraints. This can be encoded as a data-driven test.</li>\n<li>Testing for the proper error messages for failed validations</li>\n<li>Testing for any success messages for successful validations</li>\n<li>UI feedback for messages and errors</li>\n<li>Ensuring various form field are in the correct state (visibility, enabled, etc.)</li>\n</ul>\n<br /><h2 id=\"3-ui-interaction-tests\">3. UI interaction tests</h2><br /><br /><p>This category is probably the easiest to explain. These tests are for the UI components of your<br />application where you test the behavior and visual feedback. For example, if you had a <code>SearchBar</code> component,<br />you would have tests such as:</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-08-03-unit-testing-on-any-ui-project/search-bar.png\"<br />         <br />          /><br /></div><br /><br />\n<ul><br /><li>Ensuring the textbox has a placeholder text</li>\n<li>Search button is disabled if there is no text</li>\n<li>On focus, the style of the textbox changes</li>\n<li>Entering text, enables the search button</li>\n<li>Hitting the <code>Return</code> key fires the search callback. Same holds for clicking on the search button.</li>\n</ul>\n<br /><p>These tests can also get very tricky for certain scenarios. For example, <strong>drag-and-drop</strong> is not an easy one. So is<br />testing for a combination of hot-keys and mouse/touch operations. For such tests, its probably best to wrap the core logic<br />in a <code>service</code> and expect the service to change the internal state correctly. By reducing these user interactions to<br />some known, expected state, you can simplify your testing. It essentially becomes a <strong>state-based</strong> test at that point.</p><br /><br /><p>If you rather test this more explicitly, you can simulate events via <code>jquery</code> and check if the callbacks are getting<br />fired. Of course, you also need to check if the correct state is being reflected via proper visual feedback.</p><br /><br /><h2 id=\"4-network-related-tests\">4. Network related tests</h2><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-08-03-unit-testing-on-any-ui-project/network.png\"<br />         <br />          /><br /></div><br /><br /><br /><p>These tests can also be treated as service-tests. Usually the network related activity is performed by the data-layer<br />of your application, usually wrapped as a service. Making a real network request is not a responsibility of the Unit Test,<br />neither is it feasible.<br />This is where you will mock the network backend and ensure the proper call and parameters are being sent.</p><br /><br /><p>This test usually involves firing a service method and ensuring the proper network request is being made. You can also<br />mock the response to return <strong>valid / error</strong> payloads and ensure the service layer behaves as expected.</p><br /><br /><h2 id=\"5-time-based-tests\">5. Time based tests</h2><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-08-03-unit-testing-on-any-ui-project/clock.png\"<br />         <br />          /><br /></div><br /><br /><br /><p>If you have some functionality in your app where you are relying on <code>setTimeout()</code> or <code>setInterval()</code>, you have to do a time-based test.<br />However simulating or even waiting for the specific period is not feasible as it can slow down your tests. This is the case for<br />&ldquo;<strong>Mock the Clock</strong>&rdquo;! Yes, literally. Before you can run the test you have to hijack (normally via a library) the <code>window.setTimeout()</code> and <code>window.setInterval()</code><br />methods.</p><br /><br /><p>Your <code>mock</code> will provide methods to advance the clock by the required time. This is the way to forward time in your test. At this point<br />you can check your behavior to see if it has performed the required set of operations.</p><br /><br /><h2 id=\"6-async-testing\">6. Async testing</h2><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-08-03-unit-testing-on-any-ui-project/async.png\"<br />         <br />          /><br /></div><br /><br /><br /><p>Most UI code these days relies on <code>async</code>/<code>await</code>, <code>Promises</code> or <code>callback</code>-based asynchronicity. This requires some change in the way you test the functionality.<br />All testing libraries run synchronously, so they provide hooks for your test to signal back (with a <code>done</code> callback) when it is ready.<br />Once you signal <code>done</code>, the test will check the expectations and pass / fail the test.</p><br /><br /><h1 id=\"mechanics-of-a-unit-test\">Mechanics of a Unit Test</h1><br /><br /><p>Every unit test follows a standard 3-step process:</p><br />\n<ul><br /><li>Prepare the context and environment for the test</li>\n<li>Run the test code</li>\n<li>Assert things are working as expected</li>\n</ul>\n<br /><p>Libraries (<a href=\"https://mochajs.org/\">Mocha</a>, <a href=\"http://jasmine.github.io/\">Jasmine</a>) will provide you APIs for these 3 parts of testing. The popular libraries follow a Behavior-Driven approach.<br />This means the API is more english-like and focuses on User-level behavior for the test cases.</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-08-03-unit-testing-on-any-ui-project/describe.png\"<br />         <br />          /><br /></div><br /><br />\n<ul><br /><li><code>describe</code> - used to create a test-suite or a group of test-cases</li>\n<li><code>it</code> - run a single test-case</li>\n<li><code>before</code> - called once to setup the context for the test suite</li>\n<li><code>after</code> - called after completion of the test suite</li>\n<li><code>beforeEach</code> - called before each test case</li>\n<li><code>afterEach</code> - called after completion of each test case</li>\n</ul>\n<br /><p>The important thing to note in BDD frameworks is that you can nest the <code>describe</code> and <code>it</code>. This creates nested context so the inner-most<br /><code>it</code> accumulates the state from all of the parent <code>describe</code>.</p><br /><br /><p>To help you during the test execution part, there are few more helpers that you can use. These include:</p><br />\n<ul><br /><li><strong>Mocks</strong>: Help you simulate time-consuming dependencies like Network, Database, Services, etc.</li>\n<li><strong>Stubs</strong>: Help you provide canned responses for certain API dependencies</li>\n<li><strong>Spies</strong>: Help you <em>spy</em> on dependencies to ensure they are getting called correctly and in a timely fashion</li>\n</ul>\n<br /><p>Finally the aforementioned libraries also have APIs to assert your expectations for a test. These assertions will result in <em>passing</em> or <em>failing</em><br />the test. This is the last part of the test, where you check that the behavior was correctly performed and as per <em>expectations</em>.</p><br /><br /><p>There are also specialized libraries (<a href=\"http://chaijs.com/\">Chai</a>) that offer more fluent-APIs for performing assertions.</p><br /><br /><h1 id=\"principles-of-good-unit-tests\">Principles of good Unit tests</h1><br /><br /><p>Irrespective of the kind of tests you write, there are some golden rules to adhere for all Unit Tests. Violating these rules will only<br />make it difficult to scale your codebase as you add more features. They will also degrade your overall <strong>Developer Experience</strong>. So always<br />strive to meet these rules!</p><br />\n<ul><br /><li>Should run fast. Use mocks where necessary to speed up slow running dependencies (eg: Network)</li>\n<li>Should be isolated and run independently</li>\n<li>Keep the assertions limited and focused. Create separate tests if the assertions are different.</li>\n<li>Give very specific names for your tests. Good naming is monumental.</li>\n<li>Do not test library code, even if done indirectly!</li>\n<li>Test the happy path</li>\n<li>Test the boundary conditions</li>\n<li>Test the failure conditions</li>\n</ul>\n<br /><h2 id=\"summary\">Summary</h2><br /><br /><p>Testing is hard and takes experience to get it right. By following the above principles and remembering that: <em>&ldquo;there are only a limited types of tests&rdquo;</em>,<br />you can keep the pain of testing to a minimum.</p><br /><br /><p><strong>Next Step</strong>: <code>M</code>ake <code>T</code>esting <code>F</code>un (MTF) :-)</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Ekdt30Q7iPg:kcPbnGwUMr8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Ekdt30Q7iPg:kcPbnGwUMr8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=Ekdt30Q7iPg:kcPbnGwUMr8:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Ekdt30Q7iPg:kcPbnGwUMr8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=Ekdt30Q7iPg:kcPbnGwUMr8:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/Ekdt30Q7iPg\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/Cz4ZDAttodw/\">Patterns of Higher-Order-Components (HOC) in React</a></div><div class=\"moreinfo\"><span class=\"date\">Tuesday, July 12, 2016</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-07-13-patterns-of-higher-order-components-in-react/react-logo.svg\"<br />         <br />         height=\"128\" /><br /></div><br /><br /><br /><p><strong>Higher Order Components</strong> (<em>HOC</em>) are a direct translation of Higher Order Functions from functional languages. A HOC extends the <em>state</em> / <em>behavior</em> of the inner component in a composable way, so you can add many more extensions without the knowledge of the inner component.</p><br /><br /><p>React is particularly suited to support this with minimum friction. The tag structure of JSX also helps in visualizing this in text.</p><br /><br /><p>In this blog post, we&rsquo;ll take a look at many of the use-cases for HOCs. They are all from real projects so you are assured of its practicality!</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2016-07-13-patterns-of-higher-order-components-in-react/hoc.png\"<br />         <br />          /><br /></div><br /><br /><br /><h2 id=\"creating-hocs\">Creating HOCs</h2><br /><br /><p>HOCs can be created in couple of ways:</p><br />\n<ol><br /><li>Stateless functions that return a wrapper <code>class</code>, rendering the inner-component via <code>props.children</code></li>\n<li>Stateless functions that render the component passed via <code>props.children</code></li>\n<li>Regular classes that render the component passed via <code>props.children</code></li>\n<li>Using the <code>@decorator</code> language extension</li>\n</ol>\n<br /><p>The code below shows these ways of constructing an HOC for a Guard Component (which we will cover in the next section).</p><br /><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"lineno\"> 1 </span><span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 2 </span>\n<span class=\"lineno\"> 3 </span><span class=\"c1\">// 1. Wrapper function returning a class</span>\n<span class=\"lineno\"> 4 </span><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">guardedComponentFunction</span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">,</span> <span class=\"nx\">Component</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 5 </span>    <span class=\"k\">return</span> <span class=\"kr\">class</span> <span class=\"nx\">Guarded</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 6 </span>        <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 7 </span>            <span class=\"k\">return</span> <span class=\"nx\">condition</span> <span class=\"o\">?</span> <span class=\"o\">&lt;</span><span class=\"nx\">Component</span> <span class=\"p\">{...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 8 </span>        <span class=\"p\">}</span>\n<span class=\"lineno\"> 9 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">10 </span><span class=\"p\">}</span>\n<span class=\"lineno\">11 </span>\n<span class=\"lineno\">12 </span><span class=\"c1\">// 2. Wrapper function</span>\n<span class=\"lineno\">13 </span><span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"nx\">GuardedComponent</span> <span class=\"o\">=</span> <span class=\"p\">({</span><span class=\"nx\">condition</span><span class=\"p\">,</span> <span class=\"nx\">children</span><span class=\"p\">})</span><span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"lineno\">14 </span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">condition</span> <span class=\"o\">?</span> <span class=\"nx\">children</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n<span class=\"lineno\">15 </span><span class=\"p\">};</span>\n<span class=\"lineno\">16 </span>\n<span class=\"lineno\">17 </span><span class=\"c1\">// 3. Class that wraps the component via props.children</span>\n<span class=\"lineno\">18 </span><span class=\"kr\">export</span> <span class=\"kr\">class</span> <span class=\"nx\">GuardedComponentClass</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n<span class=\"lineno\">19 </span>\n<span class=\"lineno\">20 </span>    <span class=\"kr\">static</span> <span class=\"nx\">get</span> <span class=\"nx\">defaultProps</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">21 </span>        <span class=\"k\">return</span> <span class=\"p\">{</span>\n<span class=\"lineno\">22 </span>            <span class=\"nx\">condition</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n<span class=\"lineno\">23 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">24 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">25 </span>\n<span class=\"lineno\">26 </span>    <span class=\"kr\">static</span> <span class=\"nx\">get</span> <span class=\"nx\">propTypes</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">27 </span>        <span class=\"k\">return</span> <span class=\"p\">{</span>\n<span class=\"lineno\">28 </span>            <span class=\"nx\">condition</span><span class=\"o\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">bool</span>\n<span class=\"lineno\">29 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">30 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">31 </span>\n<span class=\"lineno\">32 </span>    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">33 </span>\n<span class=\"lineno\">34 </span>        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">condition</span> <span class=\"o\">?</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n<span class=\"lineno\">35 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">36 </span><span class=\"p\">}</span>\n<span class=\"lineno\">37 </span>\n<span class=\"lineno\">38 </span><span class=\"c1\">// 4. As a @decorator</span>\n<span class=\"lineno\">39 </span><span class=\"kd\">function</span> <span class=\"nx\">guardWith</span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">40 </span>    <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">Component</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">41 </span>        <span class=\"k\">return</span> <span class=\"nx\">guardedComponentFunction</span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">,</span> <span class=\"nx\">Component</span><span class=\"p\">);</span>\n<span class=\"lineno\">42 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">43 </span><span class=\"p\">}</span>\n<span class=\"lineno\">44 </span>\n<span class=\"lineno\">45 </span><span class=\"err\">@</span><span class=\"nx\">guardWith</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"lineno\">46 </span><span class=\"kr\">class</span> <span class=\"nx\">ComponentToGuard</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n<span class=\"lineno\">47 </span>    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">48 </span>        <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">h2</span><span class=\"o\">&gt;</span><span class=\"nx\">Advanced</span> <span class=\"nx\">Admin</span> <span class=\"nx\">Component</span><span class=\"o\">&lt;</span><span class=\"err\">/h2&gt;;</span>\n<span class=\"lineno\">49 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">50 </span><span class=\"p\">}</span>\n</code></pre></div><br /><br /><br /><br /><br /><h2 id=\"the-possibilities\">The possibilities&hellip;</h2><br /><br /><h4 id=\"1-guard-components\">1. Guard components</h4><br /><br /><p>Guard components are most useful when you want to render a component only if a certain condition matches. For example, if you have the Admin area which should only be visible to logged-in admin users, you can protect it with a Guard component. Other names for this type of component are <code>Protected</code> or <code>Conditional</code> or <code>Toggle</code>.</p><br /><br /><p><script async src=\"https://jsfiddle.net/pavanpodila/rf3tf9Lk/8/embed/js,result/\"></script><br /></p><br /><br /><h4 id=\"2-if-else-components\">2. If/Else components</h4><br /><br /><p>This is an extension of the Guard component and adds the ability to handle both true and false conditions. You can also treat this as a <code>Toggle</code> wrapper that shows one or the other depending on the condition. I&rsquo;ve used this in cases where I&rsquo;ll show the list of items when the number of items are &gt; 0 and an empty message when = 0.</p><br /><br /><p>The code below shows the use of an <code>IfElse</code> component. It is fairly simple and uses the first child as the <strong>&ldquo;true&rdquo;</strong> component and the second one as the <strong>&ldquo;false&rdquo;</strong> component.</p><br /><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"lineno\"> 1 </span><span class=\"c1\">// if-else.jsx</span>\n<span class=\"lineno\"> 2 </span>\n<span class=\"lineno\"> 3 </span><span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 4 </span>\n<span class=\"lineno\"> 5 </span><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">IfElse</span><span class=\"p\">({</span><span class=\"nx\">condition</span><span class=\"p\">,</span> <span class=\"nx\">children</span><span class=\"p\">})</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 6 </span>    <span class=\"kr\">const</span> <span class=\"nx\">childrenArray</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Children</span><span class=\"p\">.</span><span class=\"nx\">toArray</span><span class=\"p\">(</span><span class=\"nx\">children</span><span class=\"p\">);</span>\n<span class=\"lineno\"> 7 </span>\n<span class=\"lineno\"> 8 </span>    <span class=\"kr\">const</span> <span class=\"nx\">trueChild</span> <span class=\"o\">=</span> <span class=\"nx\">childrenArray</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"lineno\"> 9 </span>        <span class=\"nx\">falseChild</span> <span class=\"o\">=</span> <span class=\"nx\">childrenArray</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"lineno\">10 </span>\n<span class=\"lineno\">11 </span>    <span class=\"k\">return</span> <span class=\"nx\">condition</span> <span class=\"o\">?</span> <span class=\"nx\">trueChild</span> <span class=\"o\">:</span> <span class=\"nx\">falseChild</span><span class=\"p\">;</span>\n<span class=\"lineno\">12 </span><span class=\"p\">}</span>\n<span class=\"lineno\">13 </span>\n<span class=\"lineno\">14 </span>\n<span class=\"lineno\">15 </span>\n<span class=\"lineno\">16 </span><span class=\"c1\">// Somewhere in the app</span>\n<span class=\"lineno\">17 </span>\n<span class=\"lineno\">18 </span><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">IfElse</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./if-else&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\">19 </span><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">ListOfItems</span><span class=\"p\">,</span> <span class=\"nx\">EmptyList</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./list-components&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\">20 </span>\n<span class=\"lineno\">21 </span><span class=\"kr\">class</span> <span class=\"nx\">SomeAppComponent</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n<span class=\"lineno\">22 </span>    <span class=\"c1\">// ...</span>\n<span class=\"lineno\">23 </span>\n<span class=\"lineno\">24 </span>    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">25 </span>        <span class=\"kr\">const</span> <span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">;</span>\n<span class=\"lineno\">26 </span>\n<span class=\"lineno\">27 </span>        <span class=\"k\">return</span> <span class=\"p\">(</span>\n<span class=\"lineno\">28 </span>            <span class=\"o\">&lt;</span><span class=\"nx\">IfElse</span> <span class=\"nx\">condition</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">items</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n<span class=\"lineno\">29 </span>                <span class=\"o\">&lt;</span><span class=\"nx\">ListOfItems</span> <span class=\"nx\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">}</span><span class=\"o\">/&gt;</span>\n<span class=\"lineno\">30 </span>                <span class=\"o\">&lt;</span><span class=\"nx\">EmptyList</span> <span class=\"nx\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;There are no items in the list&quot;</span><span class=\"o\">/&gt;</span>\n<span class=\"lineno\">31 </span>            <span class=\"o\">&lt;</span><span class=\"err\">/IfElse&gt;</span>\n<span class=\"lineno\">32 </span>        <span class=\"p\">);</span>\n<span class=\"lineno\">33 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">34 </span>\n<span class=\"lineno\">35 </span>    <span class=\"c1\">// ...</span>\n<span class=\"lineno\">36 </span>\n<span class=\"lineno\">37 </span><span class=\"p\">}</span>\n</code></pre></div><br /><br /><br /><br /><br /><p><strong>Note</strong>: You can also extend the <code>IfElse</code> component to be more general with a <code>SwitchCase</code> component! I&rsquo;ll leave that as a <em>reader exercise</em> :-)<br />If you feel more adventurous, you can even create looping-constructs as HOCs! Think <code>WhileComponent</code>, <code>ForComponent</code>, etc.</p><br /><br /><h4 id=\"3-provider-components\">3. Provider components</h4><br /><br /><p><code>Provider</code> components (or <em>wrapper functions</em>) allow you to mixin behavior and state and make it available as props on the wrapped component.</p><br /><br /><p>If you have used <em>Redux</em> or <em>MobX</em>, the <code>connect()</code> and <code>observer</code>, respectively, work as a Providers (or wrappers). They abstract the details about the connection to the store and make it available as props on the wrapped inner component.</p><br /><br /><p>The <em>React-Router</em> is yet another example where a Provider component (<code>RouterContext</code>) takes care of instantiating the inner component(s) and passing the Router details.</p><br /><br /><p>The provider component is probably the most versatile of all HOC and can do a variety of things like:</p><br />\n<ul><br /><li>Swapping out components based on the Viewport size (enabling responsive components)</li>\n<li>Handling Authentication and passing credentials to inner components</li>\n<li>Perform logging or support debug behaviors based on certain lifecycle events or app-specific events</li>\n<li>Handling analytics and reporting user behaviors</li>\n<li>Doing dependency injection and passing shared services or data to inner components</li>\n</ul>\n<br /><h3 id=\"to-be-continued\">To be continued&hellip;</h3><br /><br /><p>Provide JSFiddles for the examples above.</p><br /><br /><p>If you already have examples of the above, I will be happy to link it here.</p><br /><br /><h2 id=\"summary\">Summary</h2><br /><br /><p><strong>HOC</strong>s are a powerful concept derived from functional languages. It allows you to create <em>composable</em> components that abstract details and make the component tree more <em>declarative</em>. Hope the examples above give you some ideas to extend, discover your own patterns of HOC in your application.</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Cz4ZDAttodw:Rtt3b18Ed6U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Cz4ZDAttodw:Rtt3b18Ed6U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=Cz4ZDAttodw:Rtt3b18Ed6U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Cz4ZDAttodw:Rtt3b18Ed6U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=Cz4ZDAttodw:Rtt3b18Ed6U:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/Cz4ZDAttodw\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/295aOcyQXBo/\">Consuming Browserify bundles with Webpack</a></div><div class=\"moreinfo\"><span class=\"date\">Sunday, July 10, 2016</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>If you are <strong>only</strong> using <code>Browserify</code> or <strong>only</strong> <code>Webpack</code> in your project, you don&rsquo;t have to worry about consuming external bundles.<br />Either of them will take care of it for you. However if you are in a situation like mine where you have legacy code in the application,<br />bundled by <strong>Browserify</strong> and <em>newer shiny code</em> bundled with <strong>Webpack</strong>, then this post is all for you!</p><br /><br /><blockquote><br /><p>In Short: We will consume the <em>Browserify-bundled</em> code as <code>externals</code> within Webpack.</p>\n</blockquote>\n<br /><h2 id=\"how-do-we-do-it\">How do we do it?</h2><br /><br /><p>Now the general idea we are going for is to treat the browserify-bundles as <code>externals</code> to our Webpack build.<br />If you read the <a href=\"http://webpack.github.io/docs/configuration.html#externals\">documentation for <code>externals</code></a>, it has options like</p><br />\n<ul><br /><li>string</li>\n<li>object</li>\n<li><strong>function: <code>function(context, request, callback)</code></strong></li>\n<li>RegExp</li>\n<li>array</li>\n</ul>\n<br /><p>which tell you how your <strong>external</strong> bundle should be resolved at runtime.</p><br /><br /><p>In my case, the <strong>function</strong>-based option was exactly what I needed.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"cm\">/* ... */</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p>With a function, you get to decide how the <code>request</code> should be resolved. For the other types of <code>externals</code>,<br />Webpack will look at the value for <code>output.libraryTarget</code>.</p><br /><br /><aside class='aside'><br /><br />    <br />        <h3 class=\"aside-header\">output.libraryTarget</h3><br />    <br /><br />    <div class=\"aside-content\"><br />        <p><code>output.libraryTarget</code> has a bunch of different options like:</p><br />\n<ul><br /><li><code>var</code></li>\n<li><code>this</code></li>\n<li><code>commonjs</code></li>\n<li><code>amd</code></li>\n<li><code>umd</code></li>\n</ul>\n<br /><p>After a bunch of trial and error, <code>commonjs</code> appeared like the right value. But &hellip; in vain. It resulted in a runtime error:</p><br /><br /><pre>\n<span style=\"color: red\">Uncaught ReferenceError: exports is not defined</span>\n</pre><br /><br /><p><code>function</code>-based <em>external</em> was my only remaining hope.</p><br /><br />    </div><br /></aside><br /><br /><br /><h2 id=\"function-based-external\"><code>function</code>-based external</h2><br /><br /><p>Since Browserify provides CommonJS-style behavior on the browser, it also shims a handy utility: the <code>require</code> function, on the <code>window</code> object.<br />Luckily, this is our savior when trying to load browserify-bundles with Webpack.</p><br /><br /><p>If we go with the <code>function</code>-based approach to resolving the external, we will end up with a function like so.</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"kr\">const</span> <span class=\"nx\">BROWSERIFY_BUNDLE_PATTERN</span> <span class=\"o\">=</span> <span class=\"sr\">/core|services|helpers|(^.*\\.bundle)/</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">BROWSERIFY_BUNDLE_PATTERN</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"sb\">`require(&#39;</span><span class=\"si\">${</span><span class=\"nx\">request</span><span class=\"si\">}</span><span class=\"sb\">&#39;)`</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">callback</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div><br /><br /><p>Since we know that browserify will put the <code>require</code> function on <code>window</code>, we can use that to do the resolution of the bundle (aka <code>request</code>) at runtime.<br />Note how I am passing the <code>require statement</code> in the <code>callback()</code>. If the <code>request</code> matches the known set of bundle patterns, we will resolve them with the<br /><code>require</code> statement.</p><br /><br /><p>In the webpack-generated bundle, we will see some lines like so:</p><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span></span><span class=\"c1\">// ...</span>\n\n<span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">module</span><span class=\"p\">,</span> <span class=\"nx\">exports</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello.bundle&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n</code></pre></div><br /><br /><p>where <code>hello.bundle</code> is an external browserify-bundle.</p><br /><br /><p>And that&rsquo;s how we consume <em>browserify</em> bundles with <strong>webpack</strong>!</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=295aOcyQXBo:VlfjiXmEOXE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=295aOcyQXBo:VlfjiXmEOXE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=295aOcyQXBo:VlfjiXmEOXE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=295aOcyQXBo:VlfjiXmEOXE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=295aOcyQXBo:VlfjiXmEOXE:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/295aOcyQXBo\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/ZNPgLHLEaEA/\">Building Courses for Tuts+</a></div><div class=\"moreinfo\"><span class=\"date\">Monday, May 30, 2016</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>Over the past few months I&rsquo;ve spent a lot of time building video courses. It&rsquo;s actually quite a long process given<br />my client commitments but the end results are rewarding.</p><br /><br /><p>There is a lot of research required to understand and explain concepts in the best possible way. This means reading a ton of code on Github, blog posts by other folks and finally getting down to structuring the content in a meaningful way.</p><br /><br /><p>Luckily I have great support from the Editors at Tuts+ and they help me in reducing scope, cleaning up my narrations and adding the required polish. So far I&rsquo;ve published a <a href=\"http://tutsplus.com/authors/pavan-podila\">few courses</a>, but this year has been more busy with:</p><br />\n<ul><br /><li><a href=\"http://code.tutsplus.com/courses/react-deep-dive-build-a-react-app-with-webpack\">React Deep Dive</a> (<code>published</code>)</li>\n<li>Refactoring JavaScript using ES2015 (<code>waiting to be published</code>)</li>\n<li>Angular 2 Deep Dive (<code>under development</code>)</li>\n</ul>\n<br /><h3 id=\"process:8b9b34ab668cae02ec6fcc4ccec3ed37\">Process</h3><br /><br /><p><span class=\"badge\">1</span> The process starts out by first proposing a topic on the <strong>Trello</strong> Board. If there is sufficent interest, it will be moved to an assigned state, from where on development begins</p><br /><br /><p><span class=\"badge\">2</span> <strong>Basecamp</strong> is the chosen communication platform for developing the course. There is a fixed template for every course and it starts out by first creating a outline. This is a required step to carve out the scope and ensure the topic stays sufficiently focused.</p><br /><br /><p>Recently Tuts+ has started with two kinds of course formats: <strong>Long</strong> and <strong>Coffeebreak</strong>. All of my earlier courses were in the <em>long</em> format, which is roughly 1.5 hours. The <em>coffee-break</em> format is a shorter format and involves just an intro video followed by a single 15-min lesson.</p><br /><br /><p><span class=\"badge\">3</span> Since most of my courses are <em>code-based</em>, I first create a Github repo and finish <strong>building the course material</strong>. I then break it down by lessons and start recording.</p><br /><br /><p><span class=\"badge\">4</span> I use <strong>ScreenFlow</strong> for recording all the lessons. There are some strict requirements around the screen resolution and pace of the video and they are all outlined in the instructor site for Tuts+.</p><br /><br /><p><span class=\"badge\">5</span> After screen-recording its time for the <strong>voiceover</strong>. Some folks tend to record and narrate at the same time. I find that a little restrictive since you don&rsquo;t always have the best sentences to say while writing code! Keeping these two activities (recording + voiceover) separate gives me the flexibility to pause the video, slow it down, add additional context or even speed up the video while I narrate the relevant text. I have been following this technique for all my lessons and so far I am happy with this approach.</p><br /><br /><p>I use <em>Final Cut Pro X</em> for doing the editing and narration. The magnetic timeline of FCPX makes the whole editing process a breeze. Early on I had to decide between ScreenFlow, Premiere Pro and FCPX for editing the video. I am glad I chose FCPX and the time I spent learning it has been worthwhile.</p><br /><br /><p>I post the videos on Basecamp as and when I complete them. My editor would chime in occasionally and give some guidance around the content, narration style or other pointers to watch out.</p><br /><br /><p><span class=\"badge\">6</span> Once all the recording and voiceovers are done, its time to prepare the <strong>Intro lesson</strong>. This is usually done last to take bits and pieces of all the recordings and add preview footage.</p><br /><br /><p><span class=\"badge\">7</span> Finally the last step is to prepare the course notes, descriptions of each lesson and also an overall description of the course. At this stage, the finish line is close. It normally takes a month or so for the course to go live. Tuts+ does some post-production like adding watermarks, animations and preparing the course site.</p><br /><br /><h3 id=\"takes-time:8b9b34ab668cae02ec6fcc4ccec3ed37\">Takes time</h3><br /><br /><p>As you can tell, the process is time consuming and requires significant effort. However doing it a few times, makes it seem less so. I have become comfortable recording and narrating without redoing too many times. The editing process has also become quick with sufficient practice. Between the long and coffee-break formats, I am leaning towards the shorter one.</p><br /><br /><p>The first time you start doing these courses, it will seem like an eternity to finish. However its also lot of fun going through the process. There are some side benefits as well:</p><br />\n<ul><br /><li>You become an effective communicator</li>\n<li>You learn to prioritize and structure content</li>\n<li>You pick up skills at Editing video, Narration and overall course production</li>\n<li>You learn a LOT. In fact, this is the biggest reason I do these courses!</li>\n<li>You get a sense of achievement when a course goes live! This is hard to describe in words but you will know the feeling is great.</li>\n</ul>\n<br /><h3 id=\"you-should-try-it-out:8b9b34ab668cae02ec6fcc4ccec3ed37\">You should try it out!</h3><br /><br /><p>If you are passionate about a topic and would like to share your viewpoint, you should try building video courses. You can start out with simple, short videos on <strong>YouTube</strong> and then get into serious course production. It doesn&rsquo;t hurt to have more people explain topics their own way :-)</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=ZNPgLHLEaEA:ewAFEkU_J1Q:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=ZNPgLHLEaEA:ewAFEkU_J1Q:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=ZNPgLHLEaEA:ewAFEkU_J1Q:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=ZNPgLHLEaEA:ewAFEkU_J1Q:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=ZNPgLHLEaEA:ewAFEkU_J1Q:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/ZNPgLHLEaEA\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/lR63bb6Wkp8/\">Communication Strategies in AngularJS 1.x</a></div><div class=\"moreinfo\"><span class=\"date\">Sunday, August 16, 2015</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>As the application scales in size, controlling communication between components requires enough thought to ensure there isn&rsquo;t too much or too little of it. In this post we will look at the various ways of communicating in <strong>AngularJS 1.x</strong>. Some of these techniques may still apply in the <em>Angular 2</em> world (eg: Events), however the actual mechanics will be different.</p><br /><br /><h3 id=\"the-different-ways-of-communication:9dcee9d4b136a699a62ddeadfbe194cd\">The different ways of communication</h3><br /><br /><p><em>AngularJS 1.x</em> offers several ways of communicating between components. These are based on the core abstractions that Angular provides, namely: <em>Services</em>, <em>Directives</em>, <em>Controllers</em> and of course the <em>Scope</em>.</p><br /><br /><p>Below, we explore these alternatives with some simple examples.</p><br />\n<ul><br /><li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#proto-scope\">Implicit Prototypical Scope</a></li>\n<li><a href=\"#controllers\">Controllers</a></li>\n<li><a href=\"#services\">Services</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#outside-angular\">Outside Angular</a></li>\n</ul>\n<br /><p><a name=\"scope\"></a></p><br /><br /><h4 id=\"communicating-via-scope:9dcee9d4b136a699a62ddeadfbe194cd\">Communicating via Scope</h4><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-08-17-communication-strategies-in-angular/scope.png\"  /><br /></div><br /><br /><br /><p>Data binding was the pivotal feature of Angular that got its initial popularity. By having a scope (<em>the model</em>) bound to a template you are able to replace placeholder mustache-like strings <code>{{ model.prop }}</code> with their actual values from the scope (<em>aka model</em>). This way of expanding templates to build pages is very convenient and productive. Here, <em>Scope</em> acts as the binding glue to fill in values for the mustache-strings. At the same time, scope also has references to event-handlers that can be invoked by interacting with the DOM.</p><br /><br /><p>Note that these placeholders automatically create a two-way binding between the model and the DOM. This is possible, as you already know, via the <em>watchers</em>. Also worth mentioning is that with <em>Angular 1.3</em>, you can create <em>one-time bindings</em> with <code>{{ ::model.prop }}</code> syntax. Make sure you put the <code>::</code>.</p><br /><br /><p>The example below shows the controller and its usage in the template. The key part here is the use of scope (<em>the binding glue</em>) to read model values as well provide interaction.</p><br /><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"lineno\">1 </span><span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"s1\">&#39;exemplar&#39;</span><span class=\"p\">)</span>\n<span class=\"lineno\">2 </span>    <span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s1\">&#39;MidLevelController&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">3 </span>\n<span class=\"lineno\">4 </span>        <span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">midLevelLabel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Call Mid Level&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\">5 </span>        <span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">midLevelMethod</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">6 </span>            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Mid Level called&#39;</span><span class=\"p\">);</span>\n<span class=\"lineno\">7 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">8 </span>    <span class=\"p\">});</span>\n</code></pre></div><br /><br /><br /><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"lineno\">1 </span>    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;panel mid-level&quot;</span> <span class=\"na\">ng-controller=</span><span class=\"s\">&quot;MidLevelController&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"lineno\">2 </span>        Mid Level Panel\n<span class=\"lineno\">3 </span>\n<span class=\"lineno\">4 </span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;panel bottom-level&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"lineno\">5 </span>            <span class=\"nt\">&lt;button</span> <span class=\"na\">ng-click=</span><span class=\"s\">&quot;callMidLevelMethod()&quot;</span><span class=\"nt\">&gt;</span>{{ midLevelLabel }}<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"lineno\">6 </span>        <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"lineno\">7 </span>    <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div><br /><br /><br /><p><a name=\"proto-scope\"></a></p><br /><br /><h4 id=\"communicating-implicitly-via-the-prototypical-scope:9dcee9d4b136a699a62ddeadfbe194cd\">Communicating implicitly via the Prototypical Scope</h4><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-08-17-communication-strategies-in-angular/prototypical-scope.png\"  /><br /></div><br /><br /><br /><p>Scopes in Angular directives (and Controllers) prototypically inherit from the parent scopes. This means a child-directive (or Controller) is able to reference and use properties of its parent scope just by knowing the properties. <em>Although not a recommended approach</em>, this can work well for simple directives that are not using <em>Isolate Scopes</em>. Here there is an implicit contract between the parent and child directives (or Controllers) to share a few properties.</p><br /><br /><p>In the example below, you can see that the <code>BottomLevelController</code> is able to invoke a method on the <code>TopLevelController</code> purely because of the prototypical scope.</p><br /><br /><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"lineno\"> 1 </span><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;panel top-level&quot;</span> <span class=\"na\">ng-controller=</span><span class=\"s\">&quot;TopLevelController&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"lineno\"> 2 </span>    Top Level Panel\n<span class=\"lineno\"> 3 </span>    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;panel mid-level&quot;</span> <span class=\"na\">ng-controller=</span><span class=\"s\">&quot;MidLevelController&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"lineno\"> 4 </span>        Mid Level Panel\n<span class=\"lineno\"> 5 </span>\n<span class=\"lineno\"> 6 </span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;panel bottom-level&quot;</span> <span class=\"na\">ng-controller=</span><span class=\"s\">&quot;BottomLevelController&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"lineno\"> 7 </span>            <span class=\"nt\">&lt;button</span> <span class=\"na\">ng-click=</span><span class=\"s\">&quot;callMidLevelMethod()&quot;</span><span class=\"nt\">&gt;</span>{{ midLevelLabel }}<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"lineno\"> 8 </span>            <span class=\"nt\">&lt;button</span> <span class=\"na\">ng-click=</span><span class=\"s\">&quot;topLevelMethod(&#39;Bottom Level&#39;)&quot;</span><span class=\"nt\">&gt;</span>Call Top Level<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"lineno\"> 9 </span>        <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"lineno\">10 </span>    <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"lineno\">11 </span><span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div><br /><br /><br /><p>And here are the controllers:</p><br /><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"lineno\"> 1 </span><span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"s1\">&#39;exemplar&#39;</span><span class=\"p\">)</span>\n<span class=\"lineno\"> 2 </span>    <span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s1\">&#39;TopLevelController&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 3 </span>\n<span class=\"lineno\"> 4 </span>        <span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">topLevelMethod</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sender</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 5 </span>            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Top Level called by : &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">sender</span><span class=\"p\">);</span>\n<span class=\"lineno\"> 6 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\"> 7 </span>    <span class=\"p\">})</span>\n<span class=\"lineno\"> 8 </span>    <span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s1\">&#39;MidLevelController&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 9 </span>\n<span class=\"lineno\">10 </span>        <span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">midLevelLabel</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Call Mid Level&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\">11 </span>        <span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">midLevelMethod</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sender</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">12 </span>            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Mid Level called by: &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">sender</span><span class=\"p\">);</span>\n<span class=\"lineno\">13 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">14 </span>    <span class=\"p\">})</span>\n<span class=\"lineno\">15 </span>    <span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s1\">&#39;BottomLevelController&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">16 </span>\n<span class=\"lineno\">17 </span>        <span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">callMidLevelMethod</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">18 </span>            <span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">midLevelMethod</span><span class=\"p\">(</span><span class=\"s1\">&#39;bottom-level&#39;</span><span class=\"p\">);</span>\n<span class=\"lineno\">19 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">20 </span>    <span class=\"p\">});</span>\n</code></pre></div><br /><br /><br /><p><a name=\"controllers\"></a></p><br /><br /><h4 id=\"communicating-via-controllers:9dcee9d4b136a699a62ddeadfbe194cd\">Communicating via Controllers</h4><br /><br /><p><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-08-17-communication-strategies-in-angular/controllers.png\"  /><br /></div><br /></p><br /><br /><p><figure class='quote'><br />    <blockquote><br />        <p><p>When there is a natural, nested relationship with directives, it is possible to communicate between them by having the child depend on the parent&rsquo;s Controller. This is generally done within the child-directive by providing a <code>link()</code> function and a dependency on the parent directive&rsquo;s controller. The dependency is established using the <code>require</code> attribute of the child&rsquo;s <em>directive-definition-object</em>. You can even depend on more controllers from the parent chain by using the array syntax. They all show up as the fourth parameter in the <code>link()</code> function. {&rdquo; Note, for this to work, the parent-directive must have a Controller defined. &ldquo;}</p><br /></p><br />    </blockquote>\n    <br /></figure></p><br /><br /><p>Consider the example below where we have nested directive structure:</p><br /><br /><p><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"lineno\">1 </span><span class=\"nt\">&lt;parent-component&gt;</span>\n<span class=\"lineno\">2 </span>    <span class=\"nt\">&lt;child-component&gt;&lt;/child-component&gt;</span>\n<span class=\"lineno\">3 </span><span class=\"nt\">&lt;/parent-component&gt;</span>\n</code></pre></div><br /></p><br /><br /><p>Here we can wire the <code>&lt;child-component&gt;</code> and <code>&lt;parent-component&gt;</code> with the following directives. Note <em>line#23</em> where we <code>require</code> the parent controller and <em>line#25</em> where we take in the instance in the <code>link</code> function.</p><br /><br /><p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"lineno\"> 1 </span><span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"s1\">&#39;exemplar&#39;</span><span class=\"p\">)</span>\n<span class=\"lineno\"> 2 </span>    <span class=\"p\">.</span><span class=\"nx\">directive</span><span class=\"p\">(</span><span class=\"s1\">&#39;parentComponent&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 3 </span>\n<span class=\"lineno\"> 4 </span>        <span class=\"k\">return</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 5 </span>            <span class=\"nx\">restrict</span><span class=\"o\">:</span> <span class=\"s1\">&#39;E&#39;</span><span class=\"p\">,</span>\n<span class=\"lineno\"> 6 </span>            <span class=\"nx\">templateUrl</span><span class=\"o\">:</span> <span class=\"s1\">&#39;parent-child-directive/parent-component.template.html&#39;</span><span class=\"p\">,</span>\n<span class=\"lineno\"> 7 </span>            <span class=\"nx\">transclude</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"lineno\"> 8 </span>            <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"nx\">ParentComponentController</span>\n<span class=\"lineno\"> 9 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">10 </span>\n<span class=\"lineno\">11 </span>        <span class=\"kd\">function</span> <span class=\"nx\">ParentComponentController</span><span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">12 </span>\n<span class=\"lineno\">13 </span>            <span class=\"kd\">var</span> <span class=\"nx\">vm</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n<span class=\"lineno\">14 </span>            <span class=\"nx\">vm</span><span class=\"p\">.</span><span class=\"nx\">takeAction</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">15 </span>                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;The &lt;child-component&gt; called me&#39;</span><span class=\"p\">);</span>\n<span class=\"lineno\">16 </span>            <span class=\"p\">}</span>\n<span class=\"lineno\">17 </span>        <span class=\"p\">}</span>\n<span class=\"lineno\">18 </span>    <span class=\"p\">})</span>\n<span class=\"lineno\">19 </span>    <span class=\"p\">.</span><span class=\"nx\">directive</span><span class=\"p\">(</span><span class=\"s1\">&#39;childComponent&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">20 </span>\n<span class=\"lineno\">21 </span>        <span class=\"k\">return</span> <span class=\"p\">{</span>\n<span class=\"lineno\">22 </span>            <span class=\"nx\">restrict</span><span class=\"o\">:</span> <span class=\"s1\">&#39;E&#39;</span><span class=\"p\">,</span>\n<span class=\"lineno\">23 </span>            <span class=\"nx\">require</span><span class=\"o\">:</span> <span class=\"s1\">&#39;^parentComponent&#39;</span><span class=\"p\">,</span>\n<span class=\"lineno\">24 </span>            <span class=\"nx\">templateUrl</span><span class=\"o\">:</span> <span class=\"s1\">&#39;parent-child-directive/child-component.template.html&#39;</span><span class=\"p\">,</span>\n<span class=\"lineno\">25 </span>            <span class=\"nx\">link</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">scope</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">attrs</span><span class=\"p\">,</span> <span class=\"nx\">parentController</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">26 </span>\n<span class=\"lineno\">27 </span>                <span class=\"nx\">scope</span><span class=\"p\">.</span><span class=\"nx\">notifyParent</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">28 </span>                    <span class=\"nx\">parentController</span><span class=\"p\">.</span><span class=\"nx\">takeAction</span><span class=\"p\">();</span>\n<span class=\"lineno\">29 </span>                <span class=\"p\">}</span>\n<span class=\"lineno\">30 </span>            <span class=\"p\">}</span>\n<span class=\"lineno\">31 </span>        <span class=\"p\">}</span>\n<span class=\"lineno\">32 </span>    <span class=\"p\">});</span>\n</code></pre></div><br /></p><br /><br /><p><a name=\"services\"></a></p><br /><br /><h4 id=\"communicating-via-services:9dcee9d4b136a699a62ddeadfbe194cd\">Communicating via Services</h4><br /><br /><p><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-08-17-communication-strategies-in-angular/services.png\"  /><br /></div><br /></p><br /><br /><p>Services are the singletons of Angular that are used to capture behavior. However by the virtue of being singletons, they also act as shared storage and can be used to aid communication between disparate components (Directives). The communicating parties depend on the shared service and use the methods on the service to do the communication.</p><br /><br /><p>In the example below, you can see a simple <code>clipboardService</code> that provides a shared storage for the <code>copyButton</code> and <code>pasteButton</code> directives.</p><br /><br /><p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"lineno\"> 1 </span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 2 </span>    <span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"s1\">&#39;exemplar&#39;</span><span class=\"p\">)</span>\n<span class=\"lineno\"> 3 </span>        <span class=\"p\">.</span><span class=\"nx\">factory</span><span class=\"p\">(</span><span class=\"s1\">&#39;clipboardService&#39;</span><span class=\"p\">,</span> <span class=\"nx\">serviceFunction</span><span class=\"p\">);</span>\n<span class=\"lineno\"> 4 </span>\n<span class=\"lineno\"> 5 </span>    <span class=\"kd\">function</span> <span class=\"nx\">serviceFunction</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 6 </span>\n<span class=\"lineno\"> 7 </span>        <span class=\"kd\">var</span> <span class=\"nx\">clipboard</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"lineno\"> 8 </span>\n<span class=\"lineno\"> 9 </span>        <span class=\"k\">return</span> <span class=\"p\">{</span>\n<span class=\"lineno\">10 </span>            <span class=\"nx\">copy</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">},</span>\n<span class=\"lineno\">11 </span>            <span class=\"nx\">get</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span>\n<span class=\"lineno\">12 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">13 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">14 </span><span class=\"p\">})();</span>\n</code></pre></div><br /></p><br /><br /><p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"lineno\"> 1 </span><span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"s1\">&#39;exemplar&#39;</span><span class=\"p\">)</span>\n<span class=\"lineno\"> 2 </span>    <span class=\"p\">.</span><span class=\"nx\">directive</span><span class=\"p\">(</span><span class=\"s1\">&#39;copyButton&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">clipboardService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 3 </span>\n<span class=\"lineno\"> 4 </span>        <span class=\"k\">return</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 5 </span>            <span class=\"nx\">restrict</span><span class=\"o\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span>\n<span class=\"lineno\"> 6 </span>            <span class=\"nx\">link</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">scope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 7 </span>\n<span class=\"lineno\"> 8 </span>                <span class=\"nx\">scope</span><span class=\"p\">.</span><span class=\"nx\">performCopy</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 9 </span>                    <span class=\"c1\">// Invoke Copy</span>\n<span class=\"lineno\">10 </span>                    <span class=\"nx\">clipboardService</span><span class=\"p\">.</span><span class=\"nx\">copy</span><span class=\"p\">({},</span> <span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">);</span>\n<span class=\"lineno\">11 </span>                <span class=\"p\">};</span>\n<span class=\"lineno\">12 </span>            <span class=\"p\">}</span>\n<span class=\"lineno\">13 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">14 </span>    <span class=\"p\">})</span>\n<span class=\"lineno\">15 </span>    <span class=\"p\">.</span><span class=\"nx\">directive</span><span class=\"p\">(</span><span class=\"s1\">&#39;pasteButton&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">clipboardService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">16 </span>\n<span class=\"lineno\">17 </span>        <span class=\"k\">return</span> <span class=\"p\">{</span>\n<span class=\"lineno\">18 </span>            <span class=\"nx\">restrict</span><span class=\"o\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span>\n<span class=\"lineno\">19 </span>            <span class=\"nx\">link</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">scope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">20 </span>\n<span class=\"lineno\">21 </span>                <span class=\"nx\">scope</span><span class=\"p\">.</span><span class=\"nx\">performPaste</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">22 </span>                    <span class=\"c1\">// Fetch from clipboard</span>\n<span class=\"lineno\">23 </span>                    <span class=\"kd\">var</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">clipboardService</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">);</span>\n<span class=\"lineno\">24 </span>\n<span class=\"lineno\">25 </span>                    <span class=\"cm\">/* ... Handle the clipboard data ... */</span>\n<span class=\"lineno\">26 </span>                <span class=\"p\">};</span>\n<span class=\"lineno\">27 </span>            <span class=\"p\">}</span>\n<span class=\"lineno\">28 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\">29 </span>    <span class=\"p\">});</span>\n</code></pre></div><br /></p><br /><br /><p><a name=\"events\"></a></p><br /><br /><h4 id=\"communicating-via-events:9dcee9d4b136a699a62ddeadfbe194cd\">Communicating via Events</h4><br /><br /><p><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-08-17-communication-strategies-in-angular/events.png\"  /><br /></div><br /></p><br /><br /><p>Events are the cornerstones of all UI Frameworks (or any event-driven framework). Angular gives you two ways to communicate up and down the UI tree. Communicate with parents or ancestors via <code>$emit()</code>. Talk to children or descendants via <code>$broadcast()</code>.</p><br /><br /><p>As an extension, you can talk to every component in the app via <code>$rootScope.$broadcast()</code>. This is a great way to relay global events.</p><br /><br /><p>On the other hand, a more focused <code>$rootScope.$emit()</code> is useful for directed communication. Here <code>$rootScope</code> acts like a shared service. Communicating with events is more like message-passing where you establish the event-strings and the corresponding data that you want to send with that event. With the right protocol (using some event-string convention) you can open up a bi-directional channel to communicate up and down the UI tree.</p><br /><br /><p>In the example below, you can see two controllers (<code>DeepChildController</code> and <code>RootController</code>) which communicate using the <code>$rootScope</code>. With <code>$rootScope</code>, you get a built-in shared service to allow any child component to communicate with the root.</p><br /><br /><p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"lineno\"> 1 </span><span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">module</span><span class=\"p\">(</span><span class=\"s1\">&#39;exemplar&#39;</span><span class=\"p\">)</span>\n<span class=\"lineno\"> 2 </span>    <span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s1\">&#39;DeepChildController&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">,</span> <span class=\"nx\">$rootScope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 3 </span>\n<span class=\"lineno\"> 4 </span>        <span class=\"nx\">$scope</span><span class=\"p\">.</span><span class=\"nx\">notifyOnRoot</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 5 </span>            <span class=\"nx\">$rootScope</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"s1\">&#39;app.action&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;deep-child&#39;</span><span class=\"p\">});</span>\n<span class=\"lineno\"> 6 </span>        <span class=\"p\">};</span>\n<span class=\"lineno\"> 7 </span>    <span class=\"p\">})</span>\n<span class=\"lineno\"> 8 </span>    <span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">(</span><span class=\"s1\">&#39;RootController&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">$scope</span><span class=\"p\">,</span> <span class=\"nx\">$rootScope</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 9 </span>\n<span class=\"lineno\">10 </span>        <span class=\"nx\">$rootScope</span><span class=\"p\">.</span><span class=\"nx\">$on</span><span class=\"p\">(</span><span class=\"s1\">&#39;app.action&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">11 </span>            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Received app.action from: &#39;</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"lineno\">12 </span>        <span class=\"p\">});</span>\n<span class=\"lineno\">13 </span>    <span class=\"p\">});</span>\n</code></pre></div><br /></p><br /><br /><p><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"lineno\"> 1 </span>    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;root&quot;</span> <span class=\"na\">ng-controller=</span><span class=\"s\">&quot;RootController&quot;</span><span class=\"nt\">&gt;</span>\n<span class=\"lineno\"> 2 </span>    <span class=\"c\">&lt;!-- Some where deep inside the bowels of the app --&gt;</span>\n<span class=\"lineno\"> 3 </span>        <span class=\"nt\">&lt;ul&gt;</span>\n<span class=\"lineno\"> 4 </span>            <span class=\"nt\">&lt;li&gt;</span>One<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"lineno\"> 5 </span>            <span class=\"nt\">&lt;li&gt;</span>Two<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"lineno\"> 6 </span>            <span class=\"nt\">&lt;li</span> <span class=\"na\">ng-controller=</span><span class=\"s\">&quot;DeepChildController&quot;</span><span class=\"nt\">&gt;</span>Three has\n<span class=\"lineno\"> 7 </span>                <span class=\"nt\">&lt;button</span> <span class=\"na\">ng-click=</span><span class=\"s\">&quot;notifyOnRoot()&quot;</span><span class=\"nt\">&gt;</span>Talk to Root<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"lineno\"> 8 </span>            <span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"lineno\"> 9 </span>        <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"lineno\">10 </span>    <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div><br /></p><br /><br /><p><a name=\"outside-angular\"></a></p><br /><br /><h4 id=\"communication-outside-angular:9dcee9d4b136a699a62ddeadfbe194cd\">Communication outside Angular</h4><br /><br /><p><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-08-17-communication-strategies-in-angular/outside-angular.png\"  /><br /></div><br /></p><br /><br /><p>Although you may be using Angular, you are not limited to doing everything the angular way. You can even have side communication outside of Angular using a shared bus from the <strong>PubSub</strong> model. You could also use <strong>WebWorkers</strong> for running intensive operations and showing the results via Angular.</p><br /><br /><p>The catch here is that once you want to display results on the DOM, you will have to enter the Angular context. This is easily done with a call to <code>$rootScope.apply()</code> at some point where you obtain the results.</p><br /><br /><p>Now the question is how do you get the $rootScope outside of angular. Well, below is the snippet. Here we are assuming your <em>ng-app</em> is rooted on <code>document.body</code>.</p><br /><br /><p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"lineno\">1 </span><span class=\"c1\">// Get $rootScope</span>\n<span class=\"lineno\">2 </span><span class=\"kd\">var</span> <span class=\"nx\">rootScope</span> <span class=\"o\">=</span> <span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">).</span><span class=\"nx\">injector</span><span class=\"p\">().</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;$rootScope&#39;</span><span class=\"p\">);</span>\n<span class=\"lineno\">3 </span>\n<span class=\"lineno\">4 </span><span class=\"c1\">// Trigger a $digest</span>\n<span class=\"lineno\">5 </span><span class=\"nx\">rootScope</span><span class=\"p\">.</span><span class=\"nx\">$apply</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n<span class=\"lineno\">6 </span>    <span class=\"c1\">// Set scope variables for DOM update</span>\n<span class=\"lineno\">7 </span><span class=\"p\">});</span>\n</code></pre></div><br /></p><br /><br /><h3 id=\"performance-gotchas-in-communication:9dcee9d4b136a699a62ddeadfbe194cd\">Performance Gotchas in communication</h3><br /><br /><p>Communicating at scale (inside your app) comes with a few gotchas and can seriously affect performance. For example, if you are listening to a streaming server that is pumping market data every second, you may be running <code>$scope.$digest()</code> or <code>$rootScope.$digest()</code> every second!. You can imagine the turmoil it will cause in terms of performance. End result: An <em>ultra-sluggish</em> app.</p><br /><br /><p><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-08-17-communication-strategies-in-angular/debounce.png\"  /><br /></div><br /></p><br /><br /><p>One of the most popular techniques to handle high volume communication is to <code>debounce</code> the handler. This ensures that the actual event is only handled once in a defined time interval. So for the duration of the interval, events are ignored. <strong>Debouncing</strong> can be introduced at various places in your data-pipeline to control the burst of events.</p><br /><br /><p><em>Note</em>: If you don&rsquo;t want to ignore the data in an event, you can buffer it for use at the end of the interval. In general, <strong>batching</strong> is universal for controlling volume. It is much more efficient to combine several small activities into one <em>batched-activity</em>.</p><br /><br /><h3 id=\"in-summary:9dcee9d4b136a699a62ddeadfbe194cd\">In Summary</h3><br /><br /><p>Communication within an application, just like building software, is a mixture of <em>Art + Science</em>. The <em>science</em> part is the mechanics of communication, many of which we have seen above. The <em>art</em> is knowing when to employ the right one! Using the right methods can make a big difference to the maintainability, stability and overall performance of your application.</p><br /><br /><p>Although we have used Angular as a pretext to discuss these communication styles, many of them are universal and apply to any JavaScript application. I&rsquo;ll leave it as an exercise for you to map to your own favorite framework.</p><br /><br /><p><strong>Question</strong>: Have I missed out any particular technique here? Something that you have used effectively? Please do share in comments.</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=lR63bb6Wkp8:7964P60eH88:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=lR63bb6Wkp8:7964P60eH88:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=lR63bb6Wkp8:7964P60eH88:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=lR63bb6Wkp8:7964P60eH88:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=lR63bb6Wkp8:7964P60eH88:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/lR63bb6Wkp8\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/xEyvFqfQIW0/\">Using Angular as a Template expander</a></div><div class=\"moreinfo\"><span class=\"date\">Sunday, March 29, 2015</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>Now we all know <a href=\"https://angularjs.org\">AngularJS</a> is an awesome framework to build large <em>Single Page Applications</em>. At the core of <em>angular</em> is a little thing called the <em>HTML Compiler</em>. It takes text as input (most likely from your templates) and transforms it into DOM elements. In the process it also does a bunch of things like:</p><br />\n<ul><br /><li>Directive detection</li>\n<li>Expression interpolation</li>\n<li>Template expansion</li>\n<li>Setting up data-bindings, etc.</li>\n</ul>\n<br /><p>Let me drive your attention to one area: <strong>Template Expansion</strong>. I was curious to know if AngularJS could be used <strong>purely</strong> as a template expander. Something akin to <a href=\"http://handlebarsjs.com/\">Handlebars</a> or <a href=\"http://underscorejs.org/#template\">Underscore templates</a>. Is it possible? Can we take that aspect of Angular and use it independently?</p><br /><br /><p>Well, it turns out, it&rsquo;s not that straightforward. But hey, this is an experiment and we are on a path to discover something!</p><br /><br /><h2 id=\"but-why:db9987a7000be2201cf4c73e9c402800\">But Why?</h2><br /><br /><p>A valid question. <strong>YMMV</strong>: <strong>Y</strong>our <strong>M</strong>otivations <strong>M</strong>ay <strong>V</strong>ary. For me it was about:</p><br />\n<ul><br /><li>Using it as an Isomorphic library on both client and server</li>\n<li>Use it in a custom control (in non-Angular projects) where you need to expand a template</li>\n<li>Just for fun</li>\n<li>Learning something new!</li>\n</ul>\n<br /><p><code>Disclaimer</code> Now, if you were to ask me point-blank: <em>&ldquo;Should I be doing this in my project?&rdquo;</em>, I will say <strong>&ldquo;NO&rdquo;</strong>, without blinking an eyelid.</p><br /><br /><h2 id=\"elements-of-angular:db9987a7000be2201cf4c73e9c402800\">Elements of Angular</h2><br /><br /><p>Templates are the fundamental building blocks of modern-day web apps. It enables better structuring by keeping your view separate from the domain logic. It also gives you composability where you can compose the UI by combining a set of templates. This is of course better than one giant, monolithic HTML file. So there are real, practical benefits to using templates.</p><br /><br /><p>Angular definitely gives you this capability but does so with a few key abstractions:</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-03-using-angular-as-a-template-expander/template-expansion.png\"  /><br /></div><br /><br /><br /><p>Let&rsquo;s see them in turn.</p><br />\n<ul><br /><li><strong>$templateRequest</strong>: Does the <code>$http</code> request to fetch the template from a URL. Before it does that, it checks the <code>$templateCache</code> if it&rsquo;s already available. If not, it goes out to get it.</li>\n<li><strong>$templateCache</strong>: This is the cache of all your templates. Why make a second request when you can cache it, right?</li>\n<li><strong>$compile</strong>: Does the hard part of converting text to a function. Calling the function with a <code>scope</code> will generate the jqLite element (DOM)</li>\n<li><strong>$digest()</strong>: The <code>scope</code> from the previous step must have <code>$digest</code> invoked to do the real <em>&ldquo;template expansion&rdquo;</em>. The <code>$digest</code> is the necessary syncing mechanism between the scope and the DOM.</li>\n</ul>\n<br /><h2 id=\"extracting-text:db9987a7000be2201cf4c73e9c402800\">Extracting Text</h2><br /><br /><p>At the end of <strong>step 5</strong>, we should have a jqLite <code>element</code> bound to the right data from the <code>scope</code>. Now, the reason why we are doing this is to generate a template-expanded text. So we really need the <strong>text</strong> part.</p><br /><br /><p>This can be done by reading the <code>element</code>&rsquo;s <code>outerHTML</code> property, like so: <code>element[0].outerHTML</code>. Finally, we have what we started out to get. It was a little round-about but we used a template and expanded it to real text by supplying a <code>scope</code> (the context for the template). All with AngularJS.</p><br /><br /><h2 id=\"few-gotchas:db9987a7000be2201cf4c73e9c402800\">Few gotchas</h2><br /><br /><p>I must admit, the above is not the complete picture to generate template-expanded text. In order to use the services such as <code>$templateRequest</code>, <code>$templateCache</code> and <code>$compile</code>, you have to rely on Angular&rsquo;s <code>$injector</code>. Additonally the scope has to be an instance of the angular <code>Scope</code>. It can&rsquo;t be a plain JavaScript object! To create a scope you have to rely on <code>$rootScope</code>, which you also get from <code>$injector</code>.</p><br /><br /><p><strong>[Aside]</strong>: If you try using a simple object, you will see exceptions being thrown. Also we need to call <code>$digest()</code> to bind the data. As you guessed, we can&rsquo;t do that on a simple js-object.</p><br /><br /><p>The code below is a working example of using Angular to expand a template. You can copy and paste it as a snippet in <strong>Chrome DevTools</strong>, and execute to see the results. Make sure you run on a web-page that uses the AngularJS library. <a href=\"https://angularjs.org\">AngularJS.org</a> is a decent bet.</p><br /><br /><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"lineno\"> 1 </span><span class=\"c1\">// The injector knows about all the angular services</span>\n<span class=\"lineno\"> 2 </span><span class=\"kd\">var</span> <span class=\"nx\">injector</span> <span class=\"o\">=</span> <span class=\"nx\">angular</span><span class=\"p\">.</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">injector</span><span class=\"p\">();</span>\n<span class=\"lineno\"> 3 </span>\n<span class=\"lineno\"> 4 </span><span class=\"c1\">// This template could have been fetched with a $templateRequest</span>\n<span class=\"lineno\"> 5 </span><span class=\"c1\">// We are inlining it here for this snippet</span>\n<span class=\"lineno\"> 6 </span><span class=\"kd\">var</span> <span class=\"nx\">template</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;div&gt;{{ ::firstName }} -- {{ ::lastName }}&lt;/div&gt;&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 7 </span>\n<span class=\"lineno\"> 8 </span><span class=\"c1\">// $compile creates a template-function that can be invoked with the scope</span>\n<span class=\"lineno\"> 9 </span><span class=\"c1\">// to expand the template</span>\n<span class=\"lineno\">10 </span><span class=\"kd\">var</span> <span class=\"nx\">templateFunction</span> <span class=\"o\">=</span> <span class=\"nx\">injector</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;$compile&#39;</span><span class=\"p\">)(</span><span class=\"nx\">template</span><span class=\"p\">);</span>\n<span class=\"lineno\">11 </span>\n<span class=\"lineno\">12 </span><span class=\"c1\">// Create the scope. </span>\n<span class=\"lineno\">13 </span><span class=\"c1\">// Note: this has to be a real angular Scope and not a plain js-object</span>\n<span class=\"lineno\">14 </span><span class=\"kd\">var</span> <span class=\"nx\">scope</span> <span class=\"o\">=</span> <span class=\"nx\">injector</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;$rootScope&#39;</span><span class=\"p\">).</span><span class=\"nx\">$new</span><span class=\"p\">();</span>\n<span class=\"lineno\">15 </span>\n<span class=\"lineno\">16 </span><span class=\"c1\">// Set some properties</span>\n<span class=\"lineno\">17 </span><span class=\"nx\">scope</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Pavan&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\">18 </span><span class=\"nx\">scope</span><span class=\"p\">.</span><span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Podila&#39;</span><span class=\"p\">;</span>\n<span class=\"lineno\">19 </span>\n<span class=\"lineno\">20 </span><span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"nx\">templateFunction</span><span class=\"p\">(</span><span class=\"nx\">scope</span><span class=\"p\">);</span>\n<span class=\"lineno\">21 </span><span class=\"nx\">scope</span><span class=\"p\">.</span><span class=\"nx\">$digest</span><span class=\"p\">();</span>\n<span class=\"lineno\">22 </span>\n<span class=\"lineno\">23 </span><span class=\"c1\">// Remove the noise around the generated element. This can be disabled</span>\n<span class=\"lineno\">24 </span><span class=\"c1\">// by configuring the $compileProvider.debugInfoEnabled()</span>\n<span class=\"lineno\">25 </span><span class=\"c1\">// Here we take the easy way out</span>\n<span class=\"lineno\">26 </span><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">&#39;ng-scope ng-binding&#39;</span><span class=\"p\">);</span>\n<span class=\"lineno\">27 </span>\n<span class=\"lineno\">28 </span><span class=\"c1\">// -------- GRAND FINALE ---------</span>\n<span class=\"lineno\">29 </span><span class=\"c1\">// The expanded template as TEXT</span>\n<span class=\"lineno\">30 </span><span class=\"c1\">// -------------------------------</span>\n<span class=\"lineno\">31 </span><span class=\"kd\">var</span> <span class=\"nx\">expandedText</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">outerHTML</span><span class=\"p\">;</span> \n<span class=\"lineno\">32 </span>\n<span class=\"lineno\">33 </span><span class=\"c1\">// Output: </span>\n<span class=\"lineno\">34 </span><span class=\"c1\">// &lt;div class=&quot;&quot;&gt;Pavan -- Podila&lt;/div&gt;</span>\n</code></pre></div><br /><br /><br /><h2 id=\"grey-matter:db9987a7000be2201cf4c73e9c402800\">Grey Matter</h2><br /><br /><p>As you can see, it is quite round about. Definitely not suggested for a real project. If you need such capability, you are better off with <a href=\"http://handlebarsjs.com/\">Handlebars</a> or <a href=\"http://underscorejs.org/#template\">Underscore templates</a>. But if you have read this far, hopefully you have put an additional fold in your Angular grey matter!</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xEyvFqfQIW0:tZTHjTMCeyc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xEyvFqfQIW0:tZTHjTMCeyc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=xEyvFqfQIW0:tZTHjTMCeyc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xEyvFqfQIW0:tZTHjTMCeyc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=xEyvFqfQIW0:tZTHjTMCeyc:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/xEyvFqfQIW0\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/9c3o_DKYSvo/\">Takeaways From NgConf 2015</a></div><div class=\"moreinfo\"><span class=\"date\">Friday, March 06, 2015</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>On March 5th and 6th I attended <a href=\"http://www.ng-conf.org/\">ng-conf 2015</a>, which was held in Salt Lake City, Utah. It was great to meet several people building Angular apps as well as speaking first hand to the people <em>behind</em> <code>Angular</code> and <code>TypeScript</code>. On the technical front, I found a few resounding themes throughout the conference:</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-03-07-takeaways-from-ngconf-2015/word-cloud.jpg\" width=\"600\" /><br /></div><br /><br /><br /><p>Many of these themes are covered in this <a href=\"https://www.youtube.com/watch?v=QHulaj5ZxbI\">Welcome talk</a> on Day 1.</p><br /><br /><h4 id=\"typescript:d5d221510cf4bc5eaef3dc3bce01d9ce\">TypeScript</h4><br />\n<ul><br /><li>What was originally called <em>AtScript</em> has now merged with <strong>TypeScript</strong>. No more AtScript. It is all <strong>TypeScript</strong> from now on. In fact, Google and Microsoft are collaborating closely on building TypeScript.</li>\n<li>TS will be a superset of ES6</li>\n<li>Angular 2 apps can be written in ES5, ES6 or TypeScript. Writing apps in TypeScript is definitely the <em>recommended approach</em>.</li>\n<li>Jonathan Turner, from Microsoft, did a great job describing <a href=\"https://www.youtube.com/watch?v=Xw93oketp18\">TypeScript and Angular 2.0</a></li>\n</ul>\n<br /><h4 id=\"webcomponents:d5d221510cf4bc5eaef3dc3bce01d9ce\">WebComponents</h4><br />\n<ul><br /><li>The team from OpenTable gave a very <a href=\"https://www.youtube.com/watch?v=AbunztfV5vU\">compelling presentation</a> about the benefits of WebComponents. It is definitely a solid approach to scale large apps.</li>\n<li>Moving forward, most apps will be composed of components and can be visualized as a component-tree.</li>\n</ul>\n<br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-03-07-takeaways-from-ngconf-2015/component-tree.jpg\" width=\"500\" /><br /></div><br /><br />\n<ul><br /><li>It is the evolution of the Angular 1.x Directives</li>\n</ul>\n<br /><h4 id=\"performance:d5d221510cf4bc5eaef3dc3bce01d9ce\">Performance</h4><br />\n<ul><br /><li>Several improvements have been made in the change detection algorithm which dramatically improves the <code>$digest</code> cycle. Some of these include: use of <strong>Immutable Data Structures</strong>, <strong>Unidirectional Change Detection</strong> which always completes in one iteration and <strong>View Caching</strong>.</li>\n<li><em>View Caching</em> will lead to faster render</li>\n<li>Dave Smith did a more in-depth exploration of Angular 2, comparing it to React in <a href=\"https://www.youtube.com/watch?v=LgshdUnTNPc\">this talk</a>. You will be surprised at the results.</li>\n<li>More details can be seen in <a href=\"https://angular.io/docs/js/latest/resources.html\">these blog posts</a></li>\n<li>There is a new framework called <a href=\"https://github.com/angular/angular/blob/master/modules/benchpress/README.js.md\">Benchpress</a> for doing E2E performance testing. Jeff Cross covers it in his talk on <a href=\"https://www.youtube.com/watch?v=x1PJn5qMUT4\">Fast from the Start</a></li>\n</ul>\n<br /><h4 id=\"material-design:d5d221510cf4bc5eaef3dc3bce01d9ce\">Material Design</h4><br />\n<ul><br /><li>The new Design language from Google will be part of all Angular-based Web Components</li>\n<li><a href=\"https://material.angularjs.org/#/\">Angular-Material</a> will codify all that</li>\n<li>Thomas and Naomi <a href=\"https://www.youtube.com/watch?v=Qi31oO5u33U\">talked about building an Angular app using Material Design</a>.</li>\n</ul>\n<br /><h4 id=\"e2e-testing-with-protractor:d5d221510cf4bc5eaef3dc3bce01d9ce\">E2E Testing with Protractor</h4><br />\n<ul><br /><li>Custom plugins can be added to hook into various lifecycle<br />events of the protractor harness</li>\n</ul>\n<br /><h4 id=\"observables:d5d221510cf4bc5eaef3dc3bce01d9ce\">Observables</h4><br />\n<ul><br /><li>The concept inspired from the <a href=\"https://msdn.microsoft.com/en-us/data/gg577609.aspx\">Rx.Net</a> will be part of TC39 and also Angular 2. Although there is already a perf boost just by using Angular 2, the use of <code>Observables</code> as data structures helps in boosting the <code>$digest</code> even more.</li>\n<li>Using the design principles of Rx Observables, one can create <em>reactive</em>, <em>data-intensive</em> applications far more easily. The Netflix team is relying heavily on this approach to build their internal tools.</li>\n<li>The Netflix team also unveiled <a href=\"http://techblog.netflix.com/2013/01/reactive-programming-at-netflix.html\">Falcor</a>, which is an evolution of the MVC model for the cloud. <a href=\"https://www.youtube.com/watch?v=WiO1f6h15c8\">The talk by Jafar Husain</a> is worth watching.</li>\n<li>This <a href=\"https://www.youtube.com/watch?v=zbBVG8bOoXk\">talk about using Rx</a> gives a more practical example</li>\n</ul>\n<br /><h4 id=\"community-and-collaboration:d5d221510cf4bc5eaef3dc3bce01d9ce\">Community and Collaboration</h4><br /><br /><p>There seems to be a greater push to collaborate than compete.</p><br />\n<ul><br /><li>We saw an example where Google and Microsoft are collaborating on the TypeScript language</li>\n<li>The Angular team is also working with the Ember team and taking tips from the Ember-CLI implementation</li>\n<li>In the Day 2 Panel meeting, we saw Igor mention that they want to consolidate NG-Inspector and Batarang extensions into one.</li>\n<li>Of course, this means we all benefit from the best work done by various teams, both within and outside Google.</li>\n</ul>\n<br /><h2 id=\"angular-2-syntax-philosophy:d5d221510cf4bc5eaef3dc3bce01d9ce\">Angular 2 Syntax philosophy</h2><br />\n<ul><br /><li>The main aim of this syntax change is to make it more consistent and compatible with the HTML spec. Because of this change several directives are no longer needed and removed from Angular 2.0.</li>\n<li>Attribute syntax is now <code>[property]=&quot;expression&quot;</code>. This eliminates a bunch of directives like <em>ng-bind</em>, <em>ng-bind-html</em></li>\n<li>Event syntax is now <code>(event)=&quot;statement&quot;</code>. This eliminates a bunch of directives such as <em>ng-mouse*</em>, <em>ng-key*</em> and most of the event related directives.</li>\n<li>A new reference syntax allows you to reference tags and variables.</li>\n</ul>\n<br /><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"lineno\">1 </span><span class=\"nt\">&lt;div</span> <span class=\"na\">click=</span><span class=\"s\">&quot;input.focus()&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"lineno\">2 </span><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">input</span> <span class=\"na\">type=</span><span class=\"s\">&quot;text&quot;</span><span class=\"nt\">&gt;</span>\n</code></pre></div><br /><br /><br /><p>Note the <code>#input</code> which sets a reference to the input control. It<br />can now be <em>referenced</em> from the statement above: <code>input.focus()</code>.</p><br />\n<ul><br /><li>With a fixed set of syntax choices, angular templates are more amenable for tooling and introspection</li>\n<li>We should expect some tooling that can do static analysis of templates and catch compile-time issues, especially if <em>TypeScript</em> is the primary language.</li>\n<li>Do watch the <a href=\"https://www.youtube.com/watch?v=-dMBcqwvYA0\">keynote by Misko</a> where he describes more about the philosophy of Angular 2 syntax</li>\n</ul>\n<br /><h2 id=\"chuckles:d5d221510cf4bc5eaef3dc3bce01d9ce\">Chuckles</h2><br /><br /><p><figure class='quote'><br />    <blockquote><br />        <p><br />I like to write CoffeeScript. Write some JavaScript and then get Coffee while the script finishes<br /></p><br />    </blockquote>\n    <br />        <figcaption class='quote-source'><br />            <br />                <a href='https://twitter.com/bahmutov' class='quote-author'>Dr. Gleb Bahmutov</a><br />            <br />        </figcaption><br />    <br /></figure></p><br /><br /><p><a href=\"link to video\">ng-wat?</a> was the funniest talk. Period.</p><br /><br /><h2 id=\"keep-an-eye-on:d5d221510cf4bc5eaef3dc3bce01d9ce\">Keep an eye on</h2><br /><br /><p>New Website for Angular: <a href=\"https://angular.io/\">Angular.io</a>. This is the place where there will be lot more information about the future of Angular!</p><br /><br /><p>For all the ng-conf videos, checkout this <a href=\"https://www.youtube.com/user/ngconfvideos\">YouTube Channel</a>.</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=9c3o_DKYSvo:z-u0xGtTwXY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=9c3o_DKYSvo:z-u0xGtTwXY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=9c3o_DKYSvo:z-u0xGtTwXY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=9c3o_DKYSvo:z-u0xGtTwXY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=9c3o_DKYSvo:z-u0xGtTwXY:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/9c3o_DKYSvo\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/Dy9AB5qYqx8/\">QuickLens - A Year in the making</a></div><div class=\"moreinfo\"><span class=\"date\">Saturday, February 28, 2015</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>If you see my <a href=\"http://blog.pixelingene.com/archive\">Archive</a> page, you will notice a complete void for 2014, a year where I did not post at all. So what happened? Well, besides taking those much needed sleep-breaks, I was busy building [QuickLens][quicklens]: a Mac App that provides a set of tools to explore User Interfaces.</p><br /><br /><figure class='quote'><br />    <blockquote><br />        <p><p>The app was mostly built on the <em>Nights and Weekends</em> plan.</p><br /></p><br />    </blockquote>\n    <br /></figure><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/shared/icon_256x256.png\"  /><br /></div><br /><br /><br /><h2 id=\"a-brief-history:5b74896fe3504aa1cffceb23dfb61db3\">A Brief History</h2><br /><br /><p>QuickLens started its life around <code>April 2013</code>. It was an app born out of pure need, with features built around my own workflow. You see, back in early 2013, I was creating video courses and training videos on Web Development. I wanted an app that could help me highlight areas of the screen and possibly dim rest of the screen. That would be useful to highlight snippets of code in real-time.</p><br /><br /><p>Being on the Mac, I found one: <a href=\"http://www.omnigroup.com/more\">OmniDazzle</a>. The description seemed to fit my exact need. Sadly, it was not supported for Mavericks and above. I tried my best to make it work but it was futile. After struggling with it for few days, I decided to take the next step: <em>Build it myself</em>.</p><br /><br /><p>And thus, QuickLens was born. The name <strong>&ldquo;QuickLens&rdquo;</strong>, itself was a cue at moving a <strong>lens</strong> around the screen&hellip;<strong>quickly</strong>! I thought I will have this tool ready in few days, so I could use it in my presentations. That estimate of course went overboard by <em>365 days</em>. Yes, it took me a complete year to build it and release it on the Mac App Store.</p><br /><br /><h4 id=\"year-long:5b74896fe3504aa1cffceb23dfb61db3\">Year-long</h4><br /><br /><p>&ldquo;What? an year just to create a little app to highlight an area!&rdquo; Well, what started as a simple exercise, ended up in a fairly sophisticated app with a suite of 7 tools. And it does lot more than just highlighting an area. QuickLens became a <strong>tool-set</strong> for</p><br />\n<ul><br /><li>Magnifying areas</li>\n<li>Sampling / Exporting colors</li>\n<li>Inspecting alignments and layouts</li>\n<li>Measuring dimensions</li>\n<li>Overlaying Grids</li>\n<li>Taking snapshots</li>\n<li>Simulating vision defects and so much more</li>\n</ul>\n<br /><p>Sometimes the path you take opens up a world of detours!</p><br /><br /><h2 id=\"it-was-monocle:5b74896fe3504aa1cffceb23dfb61db3\">It was Monocle</h2><br /><br /><p>If you have seen QuickLens, you know it has 7 tools:</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-03-01-quicklens-a-year-in-the-making/tool-palette-detail.jpg\" width=\"450\" /><br /></div><br /><br />\n<ul><br /><li>Lens</li>\n<li>Ruler</li>\n<li>Frame</li>\n<li>Guide</li>\n<li>Tape</li>\n<li>Monocle</li>\n<li>Crosshair</li>\n</ul>\n<br /><p>The tool I originally started building was <strong>Monocle</strong>.</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-03-01-quicklens-a-year-in-the-making/monocle-1.png\" width=\"600\" /><br /></div><br /><br /><br /><h4 id=\"tools-to-test-tools:5b74896fe3504aa1cffceb23dfb61db3\">Tools to test Tools</h4><br /><br /><p>Although Monocle looks simple, it required a monumental effort to test and ensure every pixel is rendered correctly with precise positioning and alignments. That need forced me to build a bunch of ancillary tools that helped in testing it.</p><br />\n<ul><br /><li><strong>Lens</strong> was extremely useful to ensure the lines were always pixel-aligned</li>\n<li><strong>Ruler</strong> made sure I wasn&rsquo;t drawing extra pixels outside of the boundaries</li>\n<li><strong>Guide</strong> was needed to check alignment of controls within a tool</li>\n<li><strong>Tape</strong> was great to check the angle of zoom-labels inside the monocle</li>\n<li><strong>Crosshair</strong> helped in getting the mouse and pixel position on the screen</li>\n<li>The above tools were also used <strong>in combination</strong> for some extreme testing</li>\n</ul>\n<br /><p>QuickLens in its current state includes all those tools and features. I personally found them super useful while building the Monocle. I think these tools are generally useful and applicable in lots of different areas. If you are a UI Designer/Developer, you owe it to yourself to try [QuickLens][quicklens]!</p><br /><br /><h2 id=\"dynamic-theming:5b74896fe3504aa1cffceb23dfb61db3\">Dynamic Theming</h2><br /><br /><p>There are several features of QuickLens that stand out compared to other apps that do similar things. Today, I want to just focus on one feature that I haven&rsquo;t seen other apps do: <strong>dynamic theming</strong>.</p><br /><br /><p>Since QuickLens works on top of all your apps, it is always visible and easy to access. Sometimes, the design/UI you are working with provides very little contrast against the color of the tool. This makes it hard to work effectively against the backdrop of a similarly colored design. Take a look at the screenshot below and you&rsquo;ll see what I mean. You can barely separate the <strong>Guide</strong> tool from the underlying design. The <strong>White</strong> theme for the tools is not helping here!</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-03-01-quicklens-a-year-in-the-making/no-constrast.png\" width=\"500\" /><br /></div><br /><br /><br /><p>To address this, we have dynamic theming that allows you to switch the colors of the app <em>on the fly</em>. Using the shortcut <code>Command+E</code> you can flip through various colors and then pick the one which gives you the most contrast. Use the tool-palette to see all of the choices quickly.</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-03-01-quicklens-a-year-in-the-making/color-choices.png\" width=\"500\" /><br /></div><br /><br /><br /><p>If you are not happy with the choices, you can also pick a custom color! Surely you will find a color in the 16-million choices provided by the color-wheel :-)</p><br /><br /><p>With proper contrast, you can see the tools more clearly.</p><br /><br /><div class=\"align-center\"><br />    <img src=\"http://blog.pixelingene.com/images/2015-03-01-quicklens-a-year-in-the-making/with-contrast.png\" width=\"500\" /><br /></div><br /><br /><br /><p><blockquote class=\"twitter-tweet\" lang=\"en\"><p>Switch tool colors on the fly to get the best contrast on your designs. ⌘E works too. <a href=\"http://t.co/LOgOKlaHRL\">pic.twitter.com/LOgOKlaHRL</a></p>&mdash; QuickLens App (@QuickLensApp) <a href=\"https://twitter.com/QuickLensApp/status/482299691728916480\">June 26, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p><br /><br /><h2 id=\"last-mile-to-app-store:5b74896fe3504aa1cffceb23dfb61db3\">Last mile to App Store</h2><br /><br /><p>When I first started in <code>April 2013</code>, I did not expect a ramp up of a year to get to a <em>release</em> state. A significant amount of time was spent in polishing and the overall fit and finish. Its crazy how the <em>80-20 rule</em> plays out in reality. The last <em>20%</em> is always the part where you sweat the most!</p><br /><br /><p>I was ready by early <code>April 2014</code>, a year after I started. The next month was spent in designing the product website, twitter, App Icon and finalizing some legal stuff. After some late nights and burnt weekends, I was ready to submit the app for review.</p><br /><br /><p>Here is my experience with the App Store approval process:</p><br />\n<ul><br /><li><code>May 22, 2014</code> App <em>submitted</em> for review</li>\n<li><code>May 25, 2014</code> <em>Rejected</em>: wrong folder used for storing the snapshots</li>\n<li><code>May 26, 2014</code> Fixed and <em>resubmitted</em> for review</li>\n<li><code>June 04, 2014</code> App <em>Approved</em></li>\n<li><code>June 15, 2014</code> App <em>released</em> to public</li>\n</ul>\n<br /><p>The next several months was spent in promotions, advertising on Twitter, talking at local User Groups and improving the website. I was also prepping the next version (v1.5), which incorporated a ton of feedback I got from Designers and Developers.</p><br /><br /><h2 id=\"free-trial:5b74896fe3504aa1cffceb23dfb61db3\">Free Trial</h2><br /><br /><p>It is quite natural for people to try out someting new before buying. It took me a year to realize that! Yes, some lessons are learnt the hard, long way. So without further ado:</p><br /><br /><p>You can now download a [7-Day Free Full-featured Trial][quicklens]</p><br /><br /><p>I hope you will give it a shot. You never know, it might just fill the need you have in your design/development workflow!</p><br /><br /><p>[quicklens]: <a href=\"http://www.quicklensapp.com\">http://www.quicklensapp.com</a></p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Dy9AB5qYqx8:NcCDQMC206I:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Dy9AB5qYqx8:NcCDQMC206I:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=Dy9AB5qYqx8:NcCDQMC206I:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Dy9AB5qYqx8:NcCDQMC206I:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=Dy9AB5qYqx8:NcCDQMC206I:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/Dy9AB5qYqx8\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/v6nf2qaGb1w/\">RubyMotion Features QuickLens</a></div><div class=\"moreinfo\"><span class=\"date\">Wednesday, February 04, 2015</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>It&rsquo;s no secret that QuickLens is built using <a href=\"http://www.rubymotion.com\">RubyMotion</a>.</p><br /><br /><blockquote><br /><p>RubyMotion is a fantastic toolset to build your iOS and Mac Apps using the Ruby tool chain. It compiles down to the Objective-C runtime and has no interpreter overhead. The performance profile is also great.</p>\n</blockquote>\n<br /><p>It&rsquo;s an <em>honor</em> to be <a href=\"http://www.rubymotion.com/news/2015/02/05/rubymotion-success-story-quicklens.html\">featured as a Success Story</a> on RubyMotion&rsquo;s website.</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=v6nf2qaGb1w:ljdc05LG7HY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=v6nf2qaGb1w:ljdc05LG7HY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=v6nf2qaGb1w:ljdc05LG7HY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=v6nf2qaGb1w:ljdc05LG7HY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=v6nf2qaGb1w:ljdc05LG7HY:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/v6nf2qaGb1w\" height=\"1\" width=\"1\" alt=\"\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/Jv29SagZ1Ks/\">More Writing on NetTuts+</a></div><div class=\"moreinfo\"><span class=\"date\">Sunday, May 12, 2013</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>Alright, this blog has been quiet for a few months. But that doesn&rsquo;t mean that I have stopped writing.</p><br /><br /><p><img src=\"http://blog.pixelingene.com/images/2013-05-12-more-writing-on-nettuts-plus/nettuts.png\" alt=\"NetTuts+\" /></p><br /><br /><p>On the contrary, I am doing more of it as a contributing author at <a href=\"http://net.tutsplus.com/author/pavanpodila/\">NetTuts+</a>. The topics are quite varying but are all related to Web Development in one form or other. A sampling of my articles so far include:</p><br />\n<ul><br /><li><a href=\"http://net.tutsplus.com/articles/general/10-tips-for-learning-a-new-technology/\">10 Tips for Learning a New Technology</a></li>\n<li><a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/promise-based-validation/\">Promise based approach to Client side Validations</a></li>\n<li>HTTP : A Protocol every Web Developer Must Know (<a href=\"http://net.tutsplus.com/tutorials/tools-and-tips/http-the-protocol-every-web-developer-must-know-part-1/\">Part 1</a>, <a href=\"http://net.tutsplus.com/tutorials/tools-and-tips/http-the-protocol-every-web-developer-must-know-part-2/\">Part 2</a>)</li>\n<li><a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/an-in-depth-review-of-jquerys-widget-factory/\">jQuery Widget Factory</a></li>\n</ul>\n<br /><br /><p>Thanks to my editor, <a href=\"http://net.tutsplus.com/author/jeffreyway/\">Jeffrey Way</a>, I was also given the opportunity to create a Video course on the latest JS technologies like NodeJS, MongoDB, EmberJS, RequireJS, etc. This should be live soon and I&rsquo;ll tweet the link once it is prime.</p><br /><br /><p>So, if you find this place a little quiet, be sure to check out <a href=\"http://net.tutsplus.com/author/pavanpodila/\">NetTuts+</a>.</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Jv29SagZ1Ks:AX7VVTYgml4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Jv29SagZ1Ks:AX7VVTYgml4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=Jv29SagZ1Ks:AX7VVTYgml4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=Jv29SagZ1Ks:AX7VVTYgml4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=Jv29SagZ1Ks:AX7VVTYgml4:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/Jv29SagZ1Ks\" height=\"1\" width=\"1\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/VvU5jBxD7qM/\">My Key Takeaways from SMACSS</a></div><div class=\"moreinfo\"><span class=\"date\">Saturday, December 22, 2012</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>A seemingly simple language yet a tangled mess of complexity. If you are picturing a giant CSS file from your website, you are on the right track. Yes, CSS can start out as a really simple language to learn but can be hard to master. The CSS chaos starts slowly and seems innocuous at first. Overtime as you accumulate features and more variations on your website, you see the CSS explode and you are soon fighting with the spaghetti monster.</p><br /><br /><p><img src=\"http://blog.pixelingene.com/images/2012-12-23-my-key-takeaways-from-smacss/css-monster.png\" alt=\"CSS Monster\" /></p><br /><br /><p>Luckily this complexity can be brought under control. By following a few simple rules, you can bring order and structure to your growing pile of CSS rules.</p><br /><br /><p><img src=\"http://blog.pixelingene.com/images/2012-12-23-my-key-takeaways-from-smacss/smacss.png\" alt=\"CSS Monster\" /></p><br /><br /><p>These rules, as laid down by Scalable Modular Architecture for CSS (<a href=\"http://smacss.com/\">SMACSS</a>), have a guiding philosophy:</p><br />\n<ol><br /><li>Do one thing well</li>\n<li>Be context-free (as far as possible)</li>\n<li>Think in terms of the entire website/system instead of a single page</li>\n<li>Separate layout from style</li>\n<li>Isolate the major concerns for a webpage into <em>layout</em>, <em>modules</em> and <em>states</em></li>\n<li>Follow naming conventions</li>\n<li>Be consistent</li>\n</ol>\n<br />\n<h3>SMACSS in action</h3><br /><br /><p>The above principles can be translated in the following ways:</p><br />\n<ol><br /><li><strong>Avoid id-selectors</strong> since you can only have one ID on a page. Rely on class, attribute and pseudo selectors</li>\n<li><strong>Avoid namespacing classes</strong> under an ID. Doing so limits those rules only to that section of the page. If the same rules needs to be applied on other sections, you will end up adding more selectors to the rule. This seems harmless at the outset but soon becomes a habit. Avoid it with vengeance.</li>\n<li><strong>Modules</strong> help in isolating pieces of content on the page. Modules are identified by classes and can be extended with sub-modules. By relying on the fact that you can apply multiple classes to a HTML tag, you can mix rules from modules and sub-modules into a tag.</li>\n<li>The page starts out as a big layout container, which is then broken down into smaller <strong>layout containers</strong> such as <code>header</code>, <code>footer</code>, <code>navigation</code>, <code>sidebar</code>, <code>content</code>. This can go as deep as you wish. For example, the <code>content</code> area will be broken down further on most websites. When defining a layout rule make sure you don&#8217;t mix presentation rules such as fonts, colors, backgrounds or borders. Layout rules should only contain box-model properties like margins, padding, positioning, width, height, etc.,</li>\n<li>The content inside a layout container is described via <strong>modules</strong>. Modules <em>can change containers</em> but always <em>retain</em> their default style. Variations in modules are handled as <em>states</em> and <em>sub-modules</em>. States are applied via class selectors, pseudo selectors or attribute selectors. Sub-modules are handled purely via class selectors.</li>\n<li><strong>Naming conventions</strong> such as below make it easier to identify the type of rule: <em>layout, module, sub-module or state</em><br />\n<ul><br /><li>layout: <code>.l-*</code></li>\n<li>state: <code>.is-*</code></li>\n<li>module: <code>.&lt;name&gt;</code></li>\n<li>sub module: <code>.&lt;name&gt; .&lt;name&gt;-&lt;state&gt;</code></li>\n</ul>\n</li>\n<li>Be conscious of <strong>Depth of applicability</strong>. Making the rule deeply nested will tie the CSS to your HTML structure making it harder to reuse and increasing duplicate rules.</li>\n</ol>\n<br />\n<h3>An example to tie it all together</h3><br /><br /><p>Alright, there are lot of abstract ideas in here. Let&#8217;s do something concrete and build a simple webpage that needs to show a bunch of contact cards, like below:</p><br /><br /><p><a href=\"http://blog.pixelingene.com/demos/smacss/index.html\"><img src=\"http://blog.pixelingene.com/images/2012-12-23-my-key-takeaways-from-smacss/cards.png\" alt=\"Cards\" /></a></p><br /><br /><p><a href=\"http://blog.pixelingene.com/demos/smacss/index.html\">Demo</a></p><br /><br /><p>There are few things to note here:</p><br />\n<ul><br /><li>There are 4 modules: <code>card</code>, <code>pic</code>, <code>company-info</code> and <code>contact-info</code></li>\n<li>The <code>card</code> module has a sub-module: <code>card-gov</code>, for contacts who work for the government</li>\n<li>The <code>card</code> and <code>contact-info</code> module change layouts via <em>media queries</em>.</li>\n</ul>\n<br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /><span class='line-number'>24</span><br /><span class='line-number'>25</span><br /><span class='line-number'>26</span><br /><span class='line-number'>27</span><br /><span class='line-number'>28</span><br /></pre></td><td class='code'><pre><code class='css'><span class='line'><span class=\"c\">/* ----- Picture ----- */</span>\n</span><span class='line'><span class=\"nc\">.pic</span> <span class=\"p\">{}</span>\n</span><span class='line'><span class=\"nc\">.pic-right</span> <span class=\"p\">{}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"c\">/* ----- Card ----- */</span>\n</span><span class='line'><span class=\"nc\">.card</span> <span class=\"p\">{}</span>\n</span><span class='line'><span class=\"k\">@media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-width</span><span class=\"o\">:</span> <span class=\"nt\">640px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"nc\">.card</span> <span class=\"p\">{</span>  <span class=\"p\">}</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'><span class=\"nc\">.card</span> <span class=\"nt\">h4</span> <span class=\"p\">{}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"nc\">.card-gov</span> <span class=\"p\">{}</span>\n</span><span class='line'><span class=\"nc\">.card-gov</span> <span class=\"nc\">.contact-info</span> <span class=\"p\">{}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"c\">/* ----- Company Info ----- */</span>\n</span><span class='line'><span class=\"nc\">.company-info</span> <span class=\"p\">{}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"nc\">.company-info-title</span> <span class=\"p\">{}</span>\n</span><span class='line'><span class=\"nc\">.company-info-name</span> <span class=\"p\">{}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"c\">/* ----- Contact Info ----- */</span>\n</span><span class='line'><span class=\"nc\">.contact-info</span> <span class=\"p\">{}</span>\n</span><span class='line'><span class=\"k\">@media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">max-width</span><span class=\"o\">:</span> <span class=\"nt\">640px</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"nc\">.contact-info</span> <span class=\"p\">{</span>  <span class=\"p\">}</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"nc\">.contact-info-field</span> <span class=\"p\">{}</span>\n</span><span class='line'><span class=\"nc\">.contact-info-field</span><span class=\"nd\">:after</span> <span class=\"p\">{}</span>\n</span></code></pre></td></tr></table></div></figure><br /><br />\n<h3>Parallels to OO languages</h3><br /><br /><p>To me the whole idea of SMACSS seems like an application of some of the ideas from OO languages. Here is a quick comparison:</p><br />\n<ul><br /><li>Minimize or avoid Singletons: <em>minimize or avoid #id selectors</em></li>\n<li>Instances: <em>tags in html which have a class applied</em></li>\n<li>Single inheritance: <em>Modules and Sub-modules</em></li>\n<li>Mixins: <em>context free rules via states and layouts</em></li>\n</ul>\n<br />\n<h3>Summary</h3><br /><br /><p>SMACSS can save you a lot of maintenance headache by following few simple rules. It may seem a little alien at first but after you do a simple project, it will become more natural. In the end,<br />its all about increasing productivity and having a worry-free sleep ;-)</p><br /><br /><p>Some resources to learn more about SMACSS:</p><br />\n<ul><br /><li><a href=\"http://smacss.com/\">The SMACSS website</a></li>\n<li><a href=\"http://webdesign.tutsplus.com/articles/workflow/weekend-presentation-smacss/\">Presentation</a> by Jonathan Snook about SMACSS</li>\n<li><a href=\"https://speakerdeck.com/snookca/fromthefront-state-based-design\">State based Design</a></li>\n</ul><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=VvU5jBxD7qM:eKI-4pFMoOY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=VvU5jBxD7qM:eKI-4pFMoOY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=VvU5jBxD7qM:eKI-4pFMoOY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=VvU5jBxD7qM:eKI-4pFMoOY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=VvU5jBxD7qM:eKI-4pFMoOY:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/VvU5jBxD7qM\" height=\"1\" width=\"1\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/paxq_BBcFok/\">Common Idioms in JavaScript development</a></div><div class=\"moreinfo\"><span class=\"date\">Sunday, October 07, 2012</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>These are some of the common idioms I find myself using again and again. I am going to keep this as a live document and will update as I discover more useful idioms.</p><br /><br /><p><code>Disclaimer</code>: I&#8217;ll be using the <a href=\"http://underscorejs.org/\">Underscore</a> library in all of my examples</p><br />\n<ul><br /><li><a href=\"#array-join\">Array.join to concatenate strings</a></li>\n<li><a href=\"#object-hash\">Minimize use of if/else blocks by creating object hashes</a></li>\n<li><a href=\"#any-type\">Make the paramter value be of any type: string | number | array | function</a></li>\n<li><a href=\"#iife\">Use IIFE to compute values on the fly</a></li>\n</ul>\n<br /><br /><p><a name=\"array-join\"></a></p><br />\n<h4>Use Array.join to concatenate strings</h4><br /><br /><p>It is quite common to build html in strings, especially when you are writing a custom formatter or just plain building simple views in code. Lets say you want to output the html for 3 buttons:</p><br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /></pre></td><td class='code'><pre><code class='js'><span class='line'><span class=\"kd\">var</span> <span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;div class=&quot;button-set&quot;&gt;&#39;</span> <span class=\"o\">+</span>\n</span><span class='line'>  <span class=\"s1\">&#39;&lt;span class=&quot;button&quot;&gt;OK&lt;/span&gt;&#39;</span> <span class=\"o\">+</span>\n</span><span class='line'>  <span class=\"s1\">&#39;&lt;span class=&quot;button&quot;&gt;Apply&lt;/span&gt;&#39;</span> <span class=\"o\">+</span>\n</span><span class='line'>  <span class=\"s1\">&#39;&lt;span class=&quot;button&quot;&gt;Cancel&lt;/span&gt;&#39;</span> <span class=\"o\">+</span>\n</span><span class='line'><span class=\"s1\">&#39;&lt;/div&gt;&#39;</span><span class=\"p\">;</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>This works, but consider the alternate version, where you build the strings as elements of an array and join them using <code>Array.join()</code>.</p><br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /></pre></td><td class='code'><pre><code class='js'><span class='line'><span class=\"kd\">var</span> <span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n</span><span class='line'>  <span class=\"s1\">&#39;&lt;div class=&quot;button-set&quot;&gt;&#39;</span>\n</span><span class='line'>      <span class=\"s1\">&#39;&lt;span class=&quot;button&quot;&gt;OK&lt;/span&gt;&#39;</span><span class=\"p\">,</span>\n</span><span class='line'>      <span class=\"s1\">&#39;&lt;span class=&quot;button&quot;&gt;Apply&lt;/span&gt;&#39;</span><span class=\"p\">,</span>\n</span><span class='line'>      <span class=\"s1\">&#39;&lt;span class=&quot;button&quot;&gt;Cancel&lt;/span&gt;&#39;</span><span class=\"p\">,</span>\n</span><span class='line'>  <span class=\"s1\">&#39;&lt;/div&gt;&#39;</span>\n</span><span class='line'><span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">);</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>It reads a little better and can almost look like real-html with the identation ;)</p><br /><br /><p><a name=\"object-hash\"></a></p><br />\n<h4>Minimize use of if/else blocks by creating object hashes</h4><br /><br /><p>Lets say you want perform a bunch of different actions based on the value of a certain parameter. For example, if you want to show different views based on the weather condition received via an AJAX request, you could do something like below:</p><br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /><span class='line-number'>24</span><br /></pre></td><td class='code'><pre><code class='js'><span class='line'><span class=\"kd\">function</span> <span class=\"nx\">showView</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"c1\">// read object structure and prepare view</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">isString</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"c1\">// validate string and show the view</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"kd\">function</span> <span class=\"nx\">showWeatherView</span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">){</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">condition</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;sunny&#39;</span><span class=\"p\">)</span> <span class=\"nx\">showView</span><span class=\"p\">(</span><span class=\"s1\">&#39;sunny-01&#39;</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">condition</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;partly sunny&#39;</span><span class=\"p\">)</span> <span class=\"nx\">showView</span><span class=\"p\">(</span><span class=\"s1\">&#39;sunny-02&#39;</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">condition</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;cloudy&#39;</span><span class=\"p\">)</span> <span class=\"nx\">showView</span><span class=\"p\">(</span><span class=\"s1\">&#39;cloudy-01&#39;</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">condition</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;rain&#39;</span><span class=\"p\">)</span> <span class=\"nx\">showView</span><span class=\"p\">({</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;rain-01&#39;</span><span class=\"p\">,</span> <span class=\"nx\">style</span><span class=\"o\">:</span><span class=\"s1\">&#39;dark&#39;</span> <span class=\"p\">})</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;http://myapp.com/weather/today&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">){</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"kd\">var</span> <span class=\"nx\">condition</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">condition</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"c1\">// Show view based on this condition</span>\n</span><span class='line'>  <span class=\"nx\">showWeatherView</span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">);</span>\n</span><span class='line'><span class=\"p\">});</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>You will notice in <code>showWeatherView()</code>, there is lot of imperative noise with if/else statements. This can be removed with an object hash:</p><br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /></pre></td><td class='code'><pre><code class='js'><span class='line'><span class=\"kd\">function</span> <span class=\"nx\">showWeatherView</span><span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">){</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"kd\">var</span> <span class=\"nx\">viewMap</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"s1\">&#39;sunny&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;sunny-01&#39;</span><span class=\"p\">,</span>\n</span><span class='line'>      <span class=\"s1\">&#39;partly sunny&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;sunny-02&#39;</span><span class=\"p\">,</span>\n</span><span class='line'>      <span class=\"s1\">&#39;cloudy&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;cloudy-01&#39;</span><span class=\"p\">,</span>\n</span><span class='line'>      <span class=\"s1\">&#39;rain&#39;</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;rain-01&#39;</span><span class=\"p\">,</span> <span class=\"nx\">style</span><span class=\"o\">:</span><span class=\"s1\">&#39;dark&#39;</span> <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"p\">};</span>   \n</span><span class='line'>\n</span><span class='line'>  <span class=\"nx\">showView</span><span class=\"p\">(</span><span class=\"nx\">viewMap</span><span class=\"p\">[</span><span class=\"nx\">condition</span><span class=\"p\">]);</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>If you want to support more views, it should be easier to add it to the <code>viewMap</code> hash. The general idea is to look at a piece of code and think in terms of <code>data</code> + <code>code</code>. What part is pure data and what part is pure code. If you can make the separation, you can easily capture the <code>data</code> part as an object-hash and write simple <code>code</code> to loop/process the data.</p><br /><br /><p>As a side note, if you want to eliminate the use of <code>if/else</code>, <code>switch</code> statements, you can have Haskell-style pattern-matching with the <a href=\"https://github.com/natefaubion/matches.js\">matches</a> library.</p><br /><br /><p><a name=\"any-type\"></a></p><br />\n<h4>Make the parameter value be of any-type</h4><br /><br /><p>When you are building a simple utility library/module, it is good to expose an option that can be any of <code>string</code>, <code>number</code>, <code>array</code> or <code>function</code> type. This makes the option more versatile and allows for some logic to be executed each time the option value is needed. I first saw this pattern used in libraries like <a href=\"http://www.highcharts.com/\">HighCharts</a> and <a href=\"https://github.com/mleibman/SlickGrid\">SlickGrid</a> and found it very natural.</p><br /><br /><p>Let&#8217;s say you want to build a simple formatter. It can accept a string to be formatted using one of the pre-defined formats or use a custom formatter. It can also apply a chain of formatters, when passed as an array. You can have the API for the formatter as below:</p><br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /><span class='line-number'>24</span><br /><span class='line-number'>25</span><br /><span class='line-number'>26</span><br /><span class='line-number'>27</span><br /><span class='line-number'>28</span><br /><span class='line-number'>29</span><br /><span class='line-number'>30</span><br /><span class='line-number'>31</span><br /></pre></td><td class='code'><pre><code class='js'><span class='line'><span class=\"kd\">function</span> <span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"nx\">formatter</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"kd\">var</span> <span class=\"nx\">knownFormatters</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"s1\">&#39;###,#&#39;</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{},</span>\n</span><span class='line'>      <span class=\"s1\">&#39;mm/dd/yyyy&#39;</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{},</span>\n</span><span class='line'>      <span class=\"s1\">&#39;HH:MM:ss&#39;</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n</span><span class='line'>  <span class=\"p\">},</span>\n</span><span class='line'>      <span class=\"nx\">formattedValue</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">isString</span><span class=\"p\">(</span><span class=\"nx\">formatter</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"c1\">// Lookup the formatter from list of known formatters</span>\n</span><span class='line'>      <span class=\"nx\">formattedValue</span> <span class=\"o\">=</span> <span class=\"nx\">knownFormatters</span><span class=\"p\">[</span><span class=\"nx\">formatter</span><span class=\"p\">](</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">isFunction</span><span class=\"p\">(</span><span class=\"nx\">formatter</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"nx\">formattedValue</span> <span class=\"o\">=</span> <span class=\"nx\">formatter</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">formatter</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"c1\">// This could be a chain of formatters</span>\n</span><span class='line'>      <span class=\"nx\">formattedValue</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">each</span><span class=\"p\">(</span><span class=\"nx\">formatter</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"nx\">formattedValue</span> <span class=\"o\">=</span> <span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"nx\">formattedValue</span><span class=\"p\">);</span> <span class=\"c1\">// Note the recursive use format()</span>\n</span><span class='line'>      <span class=\"p\">});</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"nx\">formattedValue</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>As an addendum to a multi-type parameter, it is also common to normalize the parameter value to an object hash and remove type differences.</p><br /><br /><p><a name=\"iife\"></a></p><br />\n<h4>Use IIFE to compute on the fly</h4><br /><br /><p>Sometimes you just need a little bit of code to set the value of an option. You can either do it by computing the value separately or do it inline by writing an <em>Immediately Invoked Function Expression</em> <strong>(IIFE)</strong>:</p><br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /></pre></td><td class='code'><pre><code class='js'><span class='line'><span class=\"kd\">var</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n</span><span class='line'>      <span class=\"kd\">var</span> <span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;h1&gt;&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">titleText</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&lt;/h1&gt;&#39;</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"kd\">var</span> <span class=\"nx\">icons</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;div class=&quot;icon-set&quot;&gt;&lt;span class=&quot;icon-gear&quot;&gt;&lt;/span&gt;&lt;/div&gt;&#39;</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"k\">return</span> <span class=\"nx\">html</span> <span class=\"o\">+</span> <span class=\"nx\">icons</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"p\">})(),</span>\n</span><span class='line'>  <span class=\"nx\">buttons</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Apply&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Cancel&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">]</span>\n</span><span class='line'><span class=\"p\">};</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>In the above code there is little bit of computation for the title text. For simple code like above it is sometimes best to have the logic right in there for improved readability.</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=paxq_BBcFok:0bGUssr6JD4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=paxq_BBcFok:0bGUssr6JD4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=paxq_BBcFok:0bGUssr6JD4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=paxq_BBcFok:0bGUssr6JD4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=paxq_BBcFok:0bGUssr6JD4:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/paxq_BBcFok\" height=\"1\" width=\"1\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/xHsGviAFPcc/\">A simple organization scheme for handling routes in ExpressJS apps</a></div><div class=\"moreinfo\"><span class=\"date\">Thursday, June 14, 2012</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>The <a href=\"http://expressjs.com\">ExpressJS</a> framework is one of the simpler yet very powerful web frameworks for NodeJS.<br />It provides a simple way to expose <code>GET</code> / <code>POST</code> endpoints on your web application, which then serves<br /> the appropriate response. Getting started with ExpressJS is easy and the <a href=\"http://expressjs.com\">Guides</a> on the<br /><a href=\"http://expressjs.com\">ExpressJS</a> website are very well written to make you effective in short order.</p><br />\n<h3>Moving towards a flexible app structure</h3><br /><br /><p>When you have a simple app with a few endpoints, it is easy to keep everything<br />self-contained right inside of the top-level <code>app.js</code>. However as you start<br />buliding up more <code>GET</code> / <code>POST</code> endpoints, you need to have an organization scheme<br />to help you manage the complexity. As a simple rule,</p><br /><br /><blockquote><blockquote><p>When things get bigger, they need to be made smaller ;-)</p></blockquote></blockquote>\n<br /><p>Fortunately, several smart folks have figured this out earlier and have come up<br />with approaches that are wildly successful. Yes, I am talking about Rails and<br />the principle of <strong>&#8220;Convention over Configuration&#8221;</strong>. So lets apply them to our<br />constantly growing app.</p><br />\n<h3>Route management</h3><br /><br /><p>Most of the routes (aka restful endpoints) that you<br />expose on your app can be logically grouped together, based on a feature. For<br />example, if you have some endpoints such as:</p><br />\n<ul><br /><li>/login</li>\n<li>/login/signup</li>\n<li>/login/signup/success</li>\n<li>/login/lostpassword</li>\n<li>/login/forgotusername</li>\n</ul>\n<br /><br /><p>&#8230; you can try grouping them under the &#8220;login&#8221; feature. Similarly you may have other endpoints<br />dedicated to handle other workflows in your app, like uploading content, creating users, editing<br />content, etc. These kind of routes naturally fit into a group and <strong>that&#8217;s the first cue for<br />breaking them apart</strong>. As a first step, you can put the logically related <code>GET</code> / <code>POST</code> endpoints in<br />their own file, eg: login.js. Since you may have several groups of routes, you will end up with<br />lots of route files.</p><br /><br /><p>Putting all of these files at the top-level is definitely going to cause a<br />clutter. So to simplify this further, put all of these files into a sub-folder, eg: /routes. The project structure now looks more clean:</p><br /><br /><figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /></pre></td><td class='code'><pre><code class=''><span class='line'>project\n</span><span class='line'>  |- routes\n</span><span class='line'>  |   |- login.js\n</span><span class='line'>  |   |- create_users.js\n</span><span class='line'>  |   |- upload.js\n</span><span class='line'>  |   |- edit_users.js\n</span><span class='line'>  |- app.js</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p> Since we are working with NodeJS, each file becomes a module and the objects in the module can be<br /> exposed via the <code>exports</code> object. We can establish a simple protocol that each route module must<br /> have an <code>init</code> function which we call from app.js, passing in the necessary context for the route.<br /> In case of the login this could look like so:</p><br /><br /><figure class='code'><figcaption><span>Routes in login.js </span></figcaption><br /> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /></pre></td><td class='code'><pre><code class='js'><span class='line'><span class=\"kd\">function</span> <span class=\"nx\">init</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/login&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">});</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/login/signup&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">});</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/login/signup/success&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">});</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/login/lostpassword&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">});</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/login/forgotusername&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">){</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"p\">});</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>If you are using a recent version of ExpressJS, <code>2.5.8</code> as of this writing, the command-line<br />interface provides a way to quickly generate the express app. If you type <code>express [options]<br />name-of-the-app</code>, it will generate a folder named <code>name-of-the-app</code> in the current working directory. Not surprisingly, express creates the <strong>/routes</strong> folder for you, which is already taking you in the right direction. I only learnt this recently and have so far been doing the hard work of starting from scratch each time. Sometimes spending a little more time on the manual helps! <em>RTFM FTW</em>.</p><br /><br /><p>Once we have the route files as described, it is easy to load them from <code>app.js</code>. Using the <code>filesystem</code> module we can quickly load each module and call <code>init()</code> on each one of them. We do this before the app is started. The <code>app.js</code> skeleton looks like so:</p><br /><br /><figure class='code'><figcaption><span>App skeleton app.js </span></figcaption><br /> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /></pre></td><td class='code'><pre><code class='js'><span class='line'><span class=\"kd\">var</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">),</span>\n</span><span class='line'>    <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"kd\">var</span> <span class=\"nx\">RouteDir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;routes&#39;</span><span class=\"p\">,</span>\n</span><span class='line'>    <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readdirSync</span><span class=\"p\">(</span><span class=\"nx\">RouteDir</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"kd\">var</span> <span class=\"nx\">filePath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"s1\">&#39;./&#39;</span><span class=\"p\">,</span> <span class=\"nx\">RouteDir</span><span class=\"p\">,</span> <span class=\"nx\">file</span><span class=\"p\">),</span>\n</span><span class='line'>        <span class=\"nx\">route</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"nx\">filePath</span><span class=\"p\">);</span>\n</span><span class='line'>    <span class=\"nx\">route</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n</span><span class='line'><span class=\"p\">});</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>Now we can just keep adding more routes, grouped in their own file and continue to build several endpoints without severerly complicating the app.js. The app.js file now follows the <strong>Open-Closed-Principle</strong> (app.js is open for extension but closed for modification).</p><br />\n<h3>In short&#8230;</h3><br /><br /><p>As you can see, it is actually a simple idea, but when applied to other parts of your application, it can substantially reduce the maintenance overhead. So in summary:</p><br />\n<ul><br /><li>Establish conventions to standardize a certain aspect of the program. In our case it was routes.</li>\n<li>Group related items into their own module</li>\n<li>Collect the modules into a logical folder and load from that folder</li>\n</ul><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xHsGviAFPcc:ShP3DtZ0S-g:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xHsGviAFPcc:ShP3DtZ0S-g:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=xHsGviAFPcc:ShP3DtZ0S-g:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=xHsGviAFPcc:ShP3DtZ0S-g:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=xHsGviAFPcc:ShP3DtZ0S-g:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/xHsGviAFPcc\" height=\"1\" width=\"1\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/ida5DmdTROA/\">Quick sketching using SketchBook Pro + Wacom Intuos 4</a></div><div class=\"moreinfo\"><span class=\"date\">Sunday, May 06, 2012</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>Its been a while since I posted anything on this blog. Thought I&#8217;ll break the calm with a quick post about my recent sketch.</p><br /><br /><p>I generally use <a href=\"http://itunes.apple.com/us/app/sketchbook-pro/id404243548?mt=12\">Autodesk SketchBook Pro</a> (SBP) on my Mac for the intial doodling. I then develop a fairly finished sketch before importing it into Photoshop for any post-processing. Luckily SBP saves the files in PSD format, making it easy to do the Photoshop import. The following sketch was entirely done in SBP:</p><br /><br /><p><img src=\"http://blog.pixelingene.com/images/2012-05-06-quick-sketching-using-sketchbook-pro-plus-wacom-intuos-4/rain_and_tears.png\" alt=\"Rain and Tears\" /></p><br /><br /><p>This was done in about 30 mins as a quick sketch to demonstrate the use of SBP and a Wacom tablet to a close friend. He was quite impressed and immediately ordered a bunch of items, including a <a href=\"http://www.wacom.com/en/Products/Bamboo/BambooStylus.aspx\">Wacom Bamboo stylus for the iPad</a>. I guess <code>marketing</code> wouldn&#8217;t be a bad alternate career!</p><br /><br /><p>BTW, the sketch is called <strong>Rain and Tears</strong>.<br /><img src=\"http://blog.pixelingene.com/images/2012-05-06-quick-sketching-using-sketchbook-pro-plus-wacom-intuos-4/tiles.jpg\" alt=\"Rain and Tears - Tiles\" /></p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=ida5DmdTROA:xuCz__cw80E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=ida5DmdTROA:xuCz__cw80E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=ida5DmdTROA:xuCz__cw80E:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=ida5DmdTROA:xuCz__cw80E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=ida5DmdTROA:xuCz__cw80E:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/ida5DmdTROA\" height=\"1\" width=\"1\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/TGwU-yWWDEs/\">Animating Pie Slices using a custom CALayer</a></div><div class=\"moreinfo\"><span class=\"date\">Tuesday, February 21, 2012</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>It&#8217;s going to be a rather long post, so if you want to jump around, here are your way points:</p><br />\n<ol><br /><li><a href=\"#A\"><strong>First steps</strong></a><br />\n<ol><br /><li><a href=\"#A1\">A path for the slice</a></li>\n<li><a href=\"#A2\">Animating the pie-slice</a></li>\n</ol>\n</li>\n<li><a href=\"#B\"><strong>Raising the level of abstraction</strong></a><br />\n<ol><br /><li><a href=\"#B1\">Custom CALayer, the PieSliceLayer</a></li>\n<li><a href=\"#B2\">Rendering the PieSliceLayer</a></li>\n</ol>\n</li>\n<li><a href=\"#C\"><strong>It all comes together in PieView</strong></a><br />\n<ol><br /><li><a href=\"#C1\">Managing the slices</a></li>\n</ol>\n</li>\n<li><a href=\"#D\"><strong>Demo and Source code</strong></a></li>\n</ol>\n<br /><br /><p>With a powerful platform like iOS, it is not surprising to have a variety of options for drawing. Picking the one that works best may sometimes require a bit of experimentation. <em>Case in point: a pie chart whose slices had to be animated as the values changed over time. </em>In this blog post, I would like to take you through various stages of my design process before I ended up with something close to what I wanted. So lets get started.</p><br /><br /><p><a name=\"A\" id=\"A\"></a></p><br />\n<h3>First steps</h3><br /><br /><p>Lets quickly look at the array of options that we have for building up graphics in iOS:</p><br />\n<ul><br /><li>Use the standard Views and Controls in <code>UIKit</code> and create a view hierarchy</li>\n<li>Use the <code>UIAppearance</code> protocol to customize standard controls</li>\n<li>Use <code>UIWebView</code> and render some complex layouts in HTML + JS. This is a surprisingly viable option for certain kinds of views</li>\n<li>Use <code>UIImageView</code> and show a pre-rendered image. This is sometimes the best way to show a complex graphic instead of building up a series of vectors. Images can be used more liberally in iOS and many of the standard controls even accept an image as parameter.</li>\n<li>Create a custom <code>UIView</code> and override <code>drawRect:</code>. This is like the chain-saw in our toolbelt. Used wisely it can clear dense forests of UI challenges.</li>\n<li>Apply masking (a.k.a. clipping) on vector graphics or images. Masking is often underrated in most toolkits but it does come very handy.</li>\n<li>Use Core Animation Layers: <code>CALayer</code> with shadows, cornerRadius or masks. Use <code>CAGradientLayer</code>, <code>CAShapeLayer</code> or <code>CATiledLayer</code></li>\n<li>Create a custom <code>UIView</code> and render a <code>CALayer</code> hierarchy</li>\n</ul>\n<br /><br /><p>As you can see there are several ways in which we can create an interactive UI control. Each of these options sit at a different level of abstraction in the UI stack. Choosing the right combination can thus be an interesting thought-exercise. As one gains more experience, picking the right combination will become more obvious and also be a lot faster.</p><br /><br /><p><a name=\"A1\" id=\"A1\"></a></p><br />\n<h4>A path for the slice</h4><br /><br /><p>With that quick overview of the UI options in iOS, lets get back to our problem of building an animated Pie Chart. Since we are talking about animation, it is natural to think about Core Animation and CALayers. In fact, the choice of a <code>CAShapeLayer</code> with a path for the pie-slice is a good first step. Using the <code>UIBezierPath</code> class, it is easier than using a bunch of CGPathXXX calls.</p><br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /></pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"n\">CAShapeLayer</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nf\">createPieSlice</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"n\">CAShapeLayer</span> <span class=\"o\">*</span><span class=\"n\">slice</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CAShapeLayer</span> <span class=\"n\">layer</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">fillColor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"n\">redColor</span><span class=\"p\">].</span><span class=\"n\">CGColor</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">strokeColor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"n\">blackColor</span><span class=\"p\">].</span><span class=\"n\">CGColor</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">lineWidth</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span><span class=\"p\">;</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">CGFloat</span> <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">DEG2RAD</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">60.0</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">CGPoint</span> <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"mf\">100.0</span><span class=\"p\">,</span> <span class=\"mf\">100.0</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">CGFloat</span> <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">100.0</span><span class=\"p\">;</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">UIBezierPath</span> <span class=\"o\">*</span><span class=\"n\">piePath</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIBezierPath</span> <span class=\"n\">bezierPath</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">piePath</span> <span class=\"nl\">moveToPoint:</span><span class=\"n\">center</span><span class=\"p\">];</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">piePath</span> <span class=\"nl\">addLineToPoint:</span><span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">radius</span> <span class=\"o\">*</span> <span class=\"n\">cosf</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">),</span> <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">radius</span> <span class=\"o\">*</span> <span class=\"n\">sinf</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"p\">))];</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">piePath</span> <span class=\"nl\">addArcWithCenter:</span><span class=\"n\">center</span> <span class=\"nl\">radius:</span><span class=\"n\">radius</span> <span class=\"nl\">startAngle:</span><span class=\"n\">angle</span> <span class=\"nl\">endAngle:</span><span class=\"n\">DEG2RAD</span><span class=\"p\">(</span><span class=\"mf\">60.0</span><span class=\"p\">)</span> <span class=\"nl\">clockwise:</span><span class=\"n\">YES</span><span class=\"p\">];</span>\n</span><span class='line'>  \n</span><span class='line'><span class=\"c1\">//   [piePath addLineToPoint:center];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">piePath</span> <span class=\"n\">closePath</span><span class=\"p\">];</span> <span class=\"c1\">// this will automatically add a straight line to the center</span>\n</span><span class='line'>  <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">piePath</span><span class=\"p\">.</span><span class=\"n\">CGPath</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"n\">slice</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure><br /><br />\n<ul><br /><li>The path consists of two radial lines originating at the center of the cirlce, with an arc between the end-points of the lines</li>\n<li>The angles in the call to <code>addArcWithCenter</code> use the following unit-coordinate system:</li>\n</ul>\n<br /><br /><p><img src=\"http://blog.pixelingene.com/images/latest-post/unit-coordinates.png\" alt=\"Unit Coordinates\" /></p><br />\n<ul><br /><li><code>DEG2RAD</code> is a simple macro that converts from degrees to radians</li>\n<li>When rendered the pie slice looks like below. The background gray circle was  added to put the slice in the context of the whole circle.</li>\n</ul>\n<br /><br /><p><img src=\"http://blog.pixelingene.com/images/latest-post/uibezierpath-render.png\" alt=\"UIBezierPath Render\" /></p><br /><br /><p><a name=\"A2\" id=\"A2\"></a></p><br />\n<h4>Animating the pie-slice</h4><br /><br /><p>Now that we know how to render a pie-slice, we can start looking at animating it. When the angle of the pie-slice changes we would like to smoothly animate to the new slice. Effectively the pie-slice will grow or shrink in size, like a radial fan of cards spreading or collapsing. This can be considered as a change in the <code>path</code> of the <code>CAShapeLayer</code>. Since <code>CAShapeLayer</code> naturally animates changes to the <code>path</code> property, we can give it a shot and see if that works. So, let&#8217;s say, we want to animate from the current slice to a horizontally-flipped slice, like so:</p><br /><br /><p><img src=\"http://blog.pixelingene.com/images/latest-post/uibezierpath-render-flipped.png\" alt=\"UIBezierPath Render\" /></p><br /><br /><p>To achieve that, lets refactor the code a bit and move the path creation into its own method.</p><br /><br /><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /><span class='line-number'>24</span><br /><span class='line-number'>25</span><br /><span class='line-number'>26</span><br /><span class='line-number'>27</span><br /><span class='line-number'>28</span><br /><span class='line-number'>29</span><br /><span class='line-number'>30</span><br /><span class='line-number'>31</span><br /><span class='line-number'>32</span><br /><span class='line-number'>33</span><br /><span class='line-number'>34</span><br /><span class='line-number'>35</span><br /><span class='line-number'>36</span><br /><span class='line-number'>37</span><br /><span class='line-number'>38</span><br /><span class='line-number'>39</span><br /><span class='line-number'>40</span><br /><span class='line-number'>41</span><br /><span class='line-number'>42</span><br /><span class='line-number'>43</span><br /><span class='line-number'>44</span><br /><span class='line-number'>45</span><br /></pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"n\">CGPathRef</span><span class=\"p\">)</span><span class=\"nf\">createPieSliceWithCenter:</span><span class=\"p\">(</span><span class=\"n\">CGPoint</span><span class=\"p\">)</span><span class=\"nv\">center</span>\n</span><span class='line'>              <span class=\"nf\">radius:</span><span class=\"p\">(</span><span class=\"n\">CGFloat</span><span class=\"p\">)</span><span class=\"nv\">radius</span>\n</span><span class='line'>              <span class=\"nf\">startAngle:</span><span class=\"p\">(</span><span class=\"n\">CGFloat</span><span class=\"p\">)</span><span class=\"nv\">degStartAngle</span>\n</span><span class='line'>              <span class=\"nf\">endAngle:</span><span class=\"p\">(</span><span class=\"n\">CGFloat</span><span class=\"p\">)</span><span class=\"nv\">degEndAngle</span> <span class=\"p\">{</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">UIBezierPath</span> <span class=\"o\">*</span><span class=\"n\">piePath</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIBezierPath</span> <span class=\"n\">bezierPath</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">piePath</span> <span class=\"nl\">moveToPoint:</span><span class=\"n\">center</span><span class=\"p\">];</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">piePath</span> <span class=\"nl\">addLineToPoint:</span><span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">radius</span> <span class=\"o\">*</span> <span class=\"n\">cosf</span><span class=\"p\">(</span><span class=\"n\">DEG2RAD</span><span class=\"p\">(</span><span class=\"n\">degStartAngle</span><span class=\"p\">)),</span> <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">radius</span> <span class=\"o\">*</span> <span class=\"n\">sinf</span><span class=\"p\">(</span><span class=\"n\">DEG2RAD</span><span class=\"p\">(</span><span class=\"n\">degStartAngle</span><span class=\"p\">)))];</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">piePath</span> <span class=\"nl\">addArcWithCenter:</span><span class=\"n\">center</span> <span class=\"nl\">radius:</span><span class=\"n\">radius</span> <span class=\"nl\">startAngle:</span><span class=\"n\">DEG2RAD</span><span class=\"p\">(</span><span class=\"n\">degStartAngle</span><span class=\"p\">)</span> <span class=\"nl\">endAngle:</span><span class=\"n\">DEG2RAD</span><span class=\"p\">(</span><span class=\"n\">degEndAngle</span><span class=\"p\">)</span> <span class=\"nl\">clockwise:</span><span class=\"n\">YES</span><span class=\"p\">];</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// [piePath addLineToPoint:center];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">piePath</span> <span class=\"n\">closePath</span><span class=\"p\">];</span> <span class=\"c1\">// this will automatically add a straight line to the center</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"n\">piePath</span><span class=\"p\">.</span><span class=\"n\">CGPath</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"n\">CAShapeLayer</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nf\">createPieSlice</span> <span class=\"p\">{</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">CGPoint</span> <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"mf\">100.0</span><span class=\"p\">,</span> <span class=\"mf\">100.0</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">CGFloat</span> <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">100.0</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">CGPathRef</span> <span class=\"n\">fromPath</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">createPieSliceWithCenter:</span><span class=\"n\">center</span> <span class=\"nl\">radius:</span><span class=\"n\">radius</span> <span class=\"nl\">startAngle:</span><span class=\"o\">-</span><span class=\"mf\">60.0</span> <span class=\"nl\">endAngle:</span><span class=\"mf\">60.0</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">CGPathRef</span> <span class=\"n\">toPath</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">createPieSliceWithCenter:</span><span class=\"n\">center</span> <span class=\"nl\">radius:</span><span class=\"n\">radius</span> <span class=\"nl\">startAngle:</span><span class=\"mf\">120.0</span> <span class=\"nl\">endAngle:</span><span class=\"o\">-</span><span class=\"mf\">120.0</span><span class=\"p\">];</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">CAShapeLayer</span> <span class=\"o\">*</span><span class=\"n\">slice</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CAShapeLayer</span> <span class=\"n\">layer</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">fillColor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"n\">redColor</span><span class=\"p\">].</span><span class=\"n\">CGColor</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">strokeColor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"n\">blackColor</span><span class=\"p\">].</span><span class=\"n\">CGColor</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">lineWidth</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">fromPath</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">CABasicAnimation</span> <span class=\"o\">*</span><span class=\"n\">anim</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CABasicAnimation</span> <span class=\"nl\">animationWithKeyPath:</span><span class=\"s\">@&quot;path&quot;</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"n\">anim</span><span class=\"p\">.</span><span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"p\">;</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// flip the path</span>\n</span><span class='line'>  <span class=\"n\">anim</span><span class=\"p\">.</span><span class=\"n\">fromValue</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">__bridge</span> <span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"n\">fromPath</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">anim</span><span class=\"p\">.</span><span class=\"n\">toValue</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">__bridge</span> <span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"n\">toPath</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">anim</span><span class=\"p\">.</span><span class=\"n\">removedOnCompletion</span> <span class=\"o\">=</span> <span class=\"n\">NO</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">anim</span><span class=\"p\">.</span><span class=\"n\">fillMode</span> <span class=\"o\">=</span> <span class=\"n\">kCAFillModeForwards</span><span class=\"p\">;</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">slice</span> <span class=\"nl\">addAnimation:</span><span class=\"n\">anim</span> <span class=\"nl\">forKey:</span><span class=\"nb\">nil</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"n\">slice</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>In the refactored code, <code>createPieSlice:</code> just calls the <code>createPieSliceWithCenter:radius:startAngle:endAngle</code> function for the from and to-paths and sets up an animation between these two paths. In action, this looks like so:</p><br /><br /><p><img src=\"http://blog.pixelingene.com/images/latest-post/path-animation-sequence.png\" alt=\"Path Animation\" /></p><br /><br /><p><strong>Yikes!</strong> That is definitely not what we expected. <code>CAShapeLayer</code> is morphing the paths rather than growing or shrinking the pie slices. Of course, this means we need to adopt more stricter measures for animating the pie slices.</p><br /><br /><p><a name=\"B\" id=\"B\"></a></p><br />\n<h3>Raising the level of abstraction</h3><br /><br /><p>Clearly CAShapeLayer doesn&#8217;t understand pie-slices and has no clue about how to animate a slice in a natural manner. We definitely need more control around how the pie slice changes. Luckily we have an API that gives a hint at the kind of abstraction we need: a pie slice described in terms of <code>{startAngle, endAngle}</code>. This way our parameters are more strict and not as flexible as the points of a bezier path. By making these parameters animatable, we should be able to animate the pie-slices just the way we want.</p><br /><br /><p>Applying this idea to our previous animation example, the path can be said to be changing from <code>{-60.0, 60.0}</code> to <code>{120.0, -120.0}</code>. By animating the <code>startAngle</code> and <code>endAngle</code>, we should be able to make the animation more natural. In general, if you find yourself tackling a tricky problem like this, take a step back and check if you are at the <strong>right level of abstraction</strong>.</p><br /><br /><p><a name=\"B1\" id=\"B1\"></a></p><br />\n<h4>Custom CALayer, the <code>PieSliceLayer</code></h4><br /><br /><p>If a CAShapeLayer can&#8217;t do it, we probably need our own custom <code>CALayer</code>. Let&#8217;s call it the <code>PieSliceLayer</code> and give it two properties: &#8230; you guessed it&#8230; <code>startAngle</code> and <code>endAngle</code>. Any change to these properties will cause the custom layer to redraw and also animate the change. This requires following a few standard procedures as prescribed by Core Animation Framework.</p><br />\n<ul><br /><li>Firstly don&#8217;t <code>@synthesize</code> the animatable properties and instead mark them as <code>@dynamic</code>. This is required because Core Animation does some magic under the hood to track changes to these properties and call appropriate methods on your layer.</li>\n</ul>\n<br /><br /><figure class='code'><figcaption><span>PieSliceLayer.h</span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /></pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class=\"cp\">#import &lt;QuartzCore/QuartzCore.h&gt;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@interface</span> <span class=\"nc\">PieSliceLayer</span> : <span class=\"nc\">CALayer</span>\n</span><span class='line'>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">nonatomic</span><span class=\"p\">)</span> <span class=\"n\">CGFloat</span> <span class=\"n\">startAngle</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">nonatomic</span><span class=\"p\">)</span> <span class=\"n\">CGFloat</span> <span class=\"n\">endAngle</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">nonatomic</span><span class=\"p\">,</span> <span class=\"n\">strong</span><span class=\"p\">)</span> <span class=\"n\">UIColor</span> <span class=\"o\">*</span><span class=\"n\">fillColor</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">nonatomic</span><span class=\"p\">)</span> <span class=\"n\">CGFloat</span> <span class=\"n\">strokeWidth</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">nonatomic</span><span class=\"p\">,</span> <span class=\"n\">strong</span><span class=\"p\">)</span> <span class=\"n\">UIColor</span> <span class=\"o\">*</span><span class=\"n\">strokeColor</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"k\">@end</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><br /><br /><figure class='code'><figcaption><span>PieSliceLayer.m</span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /></pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class=\"cp\">#import &quot;PieSliceLayer.h&quot;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@implementation</span> <span class=\"nc\">PieSliceLayer</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@dynamic</span> <span class=\"n\">startAngle</span><span class=\"p\">,</span> <span class=\"n\">endAngle</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"k\">@synthesize</span> <span class=\"n\">fillColor</span><span class=\"p\">,</span> <span class=\"n\">strokeColor</span><span class=\"p\">,</span> <span class=\"n\">strokeWidth</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"p\">...</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@end</span>\n</span></code></pre></td></tr></table></div></figure><br /><br />\n<ul><br /><li><p>Override <code>actionForKey:</code> and return a <code>CAAnimation</code> that prepares the animation for that property. In our case, we will return an animation for the <code>startAngle</code> and <code>endAngle</code> properties.</p></li>\n<li><p>Override <code>initWithLayer:</code> to copy the properties into the new layer. This method gets called for each frame of animation. Core Animation makes a copy of the <code>presentationLayer</code> for each frame of the animation. By overriding this method we make sure our custom properties are correctly transferred to the copied-layer.</p></li>\n<li><p>Finally we also need to override <code>needsDisplayForKey:</code> to tell Core Animation that changes to our <code>startAngle</code> and <code>endAngle</code> properties will require a redraw.</p></li>\n</ul>\n<br /><br /><figure class='code'><figcaption><span>PieSliceLayer.m</span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /><span class='line-number'>24</span><br /><span class='line-number'>25</span><br /><span class='line-number'>26</span><br /><span class='line-number'>27</span><br /><span class='line-number'>28</span><br /><span class='line-number'>29</span><br /><span class='line-number'>30</span><br /><span class='line-number'>31</span><br /><span class='line-number'>32</span><br /></pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"o\">&lt;</span><span class=\"n\">CAAction</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"nf\">actionForKey:</span><span class=\"p\">(</span><span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">event</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">event</span> <span class=\"nl\">isEqualToString:</span><span class=\"s\">@&quot;startAngle&quot;</span><span class=\"p\">]</span> <span class=\"o\">||</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">event</span> <span class=\"nl\">isEqualToString:</span><span class=\"s\">@&quot;endAngle&quot;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nl\">makeAnimationForKey:</span><span class=\"n\">event</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">super</span> <span class=\"nl\">actionForKey:</span><span class=\"n\">event</span><span class=\"p\">];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"nf\">initWithLayer:</span><span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"nv\">layer</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">self</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">super</span> <span class=\"nl\">initWithLayer:</span><span class=\"n\">layer</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">layer</span> <span class=\"nl\">isKindOfClass:</span><span class=\"p\">[</span><span class=\"n\">PieSliceLayer</span> <span class=\"n\">class</span><span class=\"p\">]])</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"n\">PieSliceLayer</span> <span class=\"o\">*</span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">PieSliceLayer</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">layer</span><span class=\"p\">;</span>\n</span><span class='line'>          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">startAngle</span> <span class=\"o\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">startAngle</span><span class=\"p\">;</span>\n</span><span class='line'>          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">endAngle</span> <span class=\"o\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">endAngle</span><span class=\"p\">;</span>\n</span><span class='line'>          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fillColor</span> <span class=\"o\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">fillColor</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">strokeColor</span> <span class=\"o\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">strokeColor</span><span class=\"p\">;</span>\n</span><span class='line'>          <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">strokeWidth</span> <span class=\"o\">=</span> <span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">strokeWidth</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"kt\">BOOL</span><span class=\"p\">)</span><span class=\"nf\">needsDisplayForKey:</span><span class=\"p\">(</span><span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">key</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">key</span> <span class=\"nl\">isEqualToString:</span><span class=\"s\">@&quot;startAngle&quot;</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"p\">[</span><span class=\"n\">key</span> <span class=\"nl\">isEqualToString:</span><span class=\"s\">@&quot;endAngle&quot;</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"k\">return</span> <span class=\"n\">YES</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">super</span> <span class=\"nl\">needsDisplayForKey:</span><span class=\"n\">key</span><span class=\"p\">];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>With that we now have a custom PieSliceLayer that animates changes to the angle-properties. However the layer does not display any visual content. For this we will override the <code>drawInContext:</code> method.</p><br /><br /><p><a name=\"B2\" id=\"B2\"></a></p><br />\n<h4>Rendering the PieSliceLayer</h4><br /><br /><p>Here we draw the slice just the way we did earlier. Instead of using <code>UIBezierPath</code>, we now go with the Core Graphics calls. Since the <code>startAngle</code> and <code>endAngle</code> properties are animatable and also marked for redraw, this layer will be rendered each frame of the animation. This will give us the desired animation when the slice changes its inscribed angle.</p><br /><br /><figure class='code'><figcaption><span>PieSliceLayer.m</span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /><span class='line-number'>24</span><br /></pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nf\">drawInContext:</span><span class=\"p\">(</span><span class=\"n\">CGContextRef</span><span class=\"p\">)</span><span class=\"nv\">ctx</span> <span class=\"p\">{</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// Create the path</span>\n</span><span class='line'>  <span class=\"n\">CGPoint</span> <span class=\"n\">center</span> <span class=\"o\">=</span> <span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">bounds</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">bounds</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">CGFloat</span> <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"n\">MIN</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">);</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">CGContextBeginPath</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">CGContextMoveToPoint</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">);</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">CGPoint</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">CGPointMake</span><span class=\"p\">(</span><span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">radius</span> <span class=\"o\">*</span> <span class=\"n\">cosf</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">startAngle</span><span class=\"p\">),</span> <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">radius</span> <span class=\"o\">*</span> <span class=\"n\">sinf</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">startAngle</span><span class=\"p\">));</span>\n</span><span class='line'>  <span class=\"n\">CGContextAddLineToPoint</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"kt\">int</span> <span class=\"n\">clockwise</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">startAngle</span> <span class=\"o\">&gt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">endAngle</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">CGContextAddArc</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">center</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">startAngle</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">endAngle</span><span class=\"p\">,</span> <span class=\"n\">clockwise</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">CGContextClosePath</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">);</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// Color it</span>\n</span><span class='line'>  <span class=\"n\">CGContextSetFillColorWithColor</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fillColor</span><span class=\"p\">.</span><span class=\"n\">CGColor</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">CGContextSetStrokeColorWithColor</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">strokeColor</span><span class=\"p\">.</span><span class=\"n\">CGColor</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">CGContextSetLineWidth</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">strokeWidth</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">CGContextDrawPath</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">kCGPathFillStroke</span><span class=\"p\">);</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p><a name=\"C\" id=\"C\"></a></p><br />\n<h3>It all comes together in PieView</h3><br /><br /><p>When we originally started, we wanted to build a Pie Chart that animated changes to its slices. After some speed bumps we got to a stage where a single slice could be described in terms of start/end angles and have any changes animated.</p><br /><br /><p>If we can do one slice, we can do multiples! A Pie Chart is a visualization for an array of numbers, where each numbers is an instance of the <code>PieSliceLayer</code>. The size of a slice depends on its relative value within the array. An easy way to get the relative value is to normalize the array and use the normal value <code>[0, 1]</code> to arrive at the angle of the slice, ie. <code>normal * 2 * M_PI</code>. For example, if the normal value is 0.5, the angle of the slice will be <code>M_PI</code> or 180&deg;.</p><br /><br /><p><a name=\"C1\" id=\"C1\"></a></p><br />\n<h4>Managing the slices</h4><br /><br /><p>The <code>PieView</code> manages the slices in a way that makes sense for a Pie Chart. Given an array of numbers, the <code>PieView</code> takes care of normalizing the numbers, creating the right number of slices and positioning them correctly in the pie. Since <code>PieView</code> will be a subclass of UIView, we also have the option to introduce some touch interaction later. Having a UIView that hosts a bunch of CALayers is a common approach when dealing with an interactive element like the PieChart.</p><br /><br /><p>The <code>PieView</code> exposes a <code>sliceValues</code> property which is an <code>NSArray</code> of numbers. When this property changes, <code>PieView</code> manages the CRUD around the <code>PieSliceLayers</code>. If there are more numbers than slices, <code>PieView</code> will add the missing slices. If there are fewer numbers than slices, it removes the excess. All the existing slices are updated with the new numbers. All of this happens in the <code>updateSlices</code> method.</p><br /><br /><figure class='code'><figcaption><span>PieView.h</span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /></pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class=\"cp\">#import &lt;UIKit/UIKit.h&gt;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@interface</span> <span class=\"nc\">PieView</span> : <span class=\"nc\">UIView</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">nonatomic</span><span class=\"p\">,</span> <span class=\"n\">strong</span><span class=\"p\">)</span> <span class=\"n\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">sliceValues</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"nf\">initWithSliceValues:</span><span class=\"p\">(</span><span class=\"n\">NSArray</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">sliceValues</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"k\">@end</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><br /><br /><figure class='code'><figcaption><span>PieView.m</span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /><span class='line-number'>11</span><br /><span class='line-number'>12</span><br /><span class='line-number'>13</span><br /><span class='line-number'>14</span><br /><span class='line-number'>15</span><br /><span class='line-number'>16</span><br /><span class='line-number'>17</span><br /><span class='line-number'>18</span><br /><span class='line-number'>19</span><br /><span class='line-number'>20</span><br /><span class='line-number'>21</span><br /><span class='line-number'>22</span><br /><span class='line-number'>23</span><br /><span class='line-number'>24</span><br /><span class='line-number'>25</span><br /><span class='line-number'>26</span><br /><span class='line-number'>27</span><br /><span class='line-number'>28</span><br /><span class='line-number'>29</span><br /><span class='line-number'>30</span><br /><span class='line-number'>31</span><br /><span class='line-number'>32</span><br /><span class='line-number'>33</span><br /><span class='line-number'>34</span><br /><span class='line-number'>35</span><br /><span class='line-number'>36</span><br /><span class='line-number'>37</span><br /><span class='line-number'>38</span><br /><span class='line-number'>39</span><br /><span class='line-number'>40</span><br /><span class='line-number'>41</span><br /><span class='line-number'>42</span><br /><span class='line-number'>43</span><br /><span class='line-number'>44</span><br /><span class='line-number'>45</span><br /><span class='line-number'>46</span><br /><span class='line-number'>47</span><br /><span class='line-number'>48</span><br /><span class='line-number'>49</span><br /><span class='line-number'>50</span><br /><span class='line-number'>51</span><br /><span class='line-number'>52</span><br /><span class='line-number'>53</span><br /><span class='line-number'>54</span><br /><span class='line-number'>55</span><br /><span class='line-number'>56</span><br /><span class='line-number'>57</span><br /><span class='line-number'>58</span><br /><span class='line-number'>59</span><br /><span class='line-number'>60</span><br /><span class='line-number'>61</span><br /><span class='line-number'>62</span><br /><span class='line-number'>63</span><br /><span class='line-number'>64</span><br /><span class='line-number'>65</span><br /><span class='line-number'>66</span><br /><span class='line-number'>67</span><br /><span class='line-number'>68</span><br /><span class='line-number'>69</span><br /><span class='line-number'>70</span><br /><span class='line-number'>71</span><br /><span class='line-number'>72</span><br /><span class='line-number'>73</span><br /><span class='line-number'>74</span><br /><span class='line-number'>75</span><br /><span class='line-number'>76</span><br /><span class='line-number'>77</span><br /><span class='line-number'>78</span><br /><span class='line-number'>79</span><br /><span class='line-number'>80</span><br /><span class='line-number'>81</span><br /><span class='line-number'>82</span><br /><span class='line-number'>83</span><br /><span class='line-number'>84</span><br /><span class='line-number'>85</span><br /><span class='line-number'>86</span><br /><span class='line-number'>87</span><br /><span class='line-number'>88</span><br /><span class='line-number'>89</span><br /><span class='line-number'>90</span><br /><span class='line-number'>91</span><br /><span class='line-number'>92</span><br /><span class='line-number'>93</span><br /><span class='line-number'>94</span><br /><span class='line-number'>95</span><br /><span class='line-number'>96</span><br /><span class='line-number'>97</span><br /><span class='line-number'>98</span><br /><span class='line-number'>99</span><br /><span class='line-number'>100</span><br /><span class='line-number'>101</span><br /><span class='line-number'>102</span><br /><span class='line-number'>103</span><br /><span class='line-number'>104</span><br /><span class='line-number'>105</span><br /><span class='line-number'>106</span><br /><span class='line-number'>107</span><br /><span class='line-number'>108</span><br /><span class='line-number'>109</span><br /><span class='line-number'>110</span><br /><span class='line-number'>111</span><br /><span class='line-number'>112</span><br /><span class='line-number'>113</span><br /><span class='line-number'>114</span><br /><span class='line-number'>115</span><br /><span class='line-number'>116</span><br /></pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class=\"cp\">#import &quot;PieView.h&quot;</span>\n</span><span class='line'><span class=\"cp\">#import &quot;PieSliceLayer.h&quot;</span>\n</span><span class='line'><span class=\"cp\">#import &lt;QuartzCore/QuartzCore.h&gt;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"cp\">#define DEG2RAD(angle) angle*M_PI/180.0</span>\n</span><span class='line'>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@interface</span> <span class=\"nc\">PieView</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"n\">NSMutableArray</span> <span class=\"o\">*</span><span class=\"n\">_normalizedValues</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">CALayer</span> <span class=\"o\">*</span><span class=\"n\">_containerLayer</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">updateSlices</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"k\">@end</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">@implementation</span> <span class=\"nc\">PieView</span>\n</span><span class='line'><span class=\"k\">@synthesize</span> <span class=\"n\">sliceValues</span> <span class=\"o\">=</span> <span class=\"n\">_sliceValues</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nf\">doInitialSetup</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"n\">_containerLayer</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">CALayer</span> <span class=\"n\">layer</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">layer</span> <span class=\"nl\">addSublayer:</span><span class=\"n\">_containerLayer</span><span class=\"p\">];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"nf\">initWithFrame:</span><span class=\"p\">(</span><span class=\"n\">CGRect</span><span class=\"p\">)</span><span class=\"nv\">frame</span>\n</span><span class='line'><span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"n\">self</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">super</span> <span class=\"nl\">initWithFrame:</span><span class=\"n\">frame</span><span class=\"p\">];</span>\n</span><span class='line'>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"n\">doInitialSetup</span><span class=\"p\">];</span>\n</span><span class='line'>    <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>    <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"nf\">initWithCoder:</span><span class=\"p\">(</span><span class=\"n\">NSCoder</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">aDecoder</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">self</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">super</span> <span class=\"nl\">initWithCoder:</span><span class=\"n\">aDecoder</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"n\">doInitialSetup</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"kt\">id</span><span class=\"p\">)</span><span class=\"nf\">initWithSliceValues:</span><span class=\"p\">(</span><span class=\"n\">NSArray</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">sliceValues</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"n\">doInitialSetup</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">sliceValues</span> <span class=\"o\">=</span> <span class=\"n\">sliceValues</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nf\">setSliceValues:</span><span class=\"p\">(</span><span class=\"n\">NSArray</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">sliceValues</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"n\">_sliceValues</span> <span class=\"o\">=</span> <span class=\"n\">sliceValues</span><span class=\"p\">;</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">_normalizedValues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">NSMutableArray</span> <span class=\"n\">array</span><span class=\"p\">];</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sliceValues</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"c1\">// total</span>\n</span><span class='line'>      <span class=\"n\">CGFloat</span> <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">NSNumber</span> <span class=\"o\">*</span><span class=\"n\">num</span> <span class=\"k\">in</span> <span class=\"n\">sliceValues</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">num</span><span class=\"p\">.</span><span class=\"n\">floatValue</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>      \n</span><span class='line'>      <span class=\"c1\">// normalize</span>\n</span><span class='line'>      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">NSNumber</span> <span class=\"o\">*</span><span class=\"n\">num</span> <span class=\"k\">in</span> <span class=\"n\">sliceValues</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"p\">[</span><span class=\"n\">_normalizedValues</span> <span class=\"nl\">addObject:</span><span class=\"p\">[</span><span class=\"n\">NSNumber</span> <span class=\"nl\">numberWithFloat:</span><span class=\"n\">num</span><span class=\"p\">.</span><span class=\"n\">floatValue</span><span class=\"o\">/</span><span class=\"n\">total</span><span class=\"p\">]];</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"n\">updateSlices</span><span class=\"p\">];</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">-</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"nf\">updateSlices</span> <span class=\"p\">{</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"n\">_containerLayer</span><span class=\"p\">.</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">bounds</span><span class=\"p\">;</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// Adjust number of slices</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_normalizedValues</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"n\">_containerLayer</span><span class=\"p\">.</span><span class=\"n\">sublayers</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      \n</span><span class='line'>      <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">_normalizedValues</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">_containerLayer</span><span class=\"p\">.</span><span class=\"n\">sublayers</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"n\">PieSliceLayer</span> <span class=\"o\">*</span><span class=\"n\">slice</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">PieSliceLayer</span> <span class=\"n\">layer</span><span class=\"p\">];</span>\n</span><span class='line'>          <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">strokeColor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"nl\">colorWithWhite:</span><span class=\"mf\">0.25</span> <span class=\"nl\">alpha:</span><span class=\"mf\">1.0</span><span class=\"p\">];</span>\n</span><span class='line'>          <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">strokeWidth</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span><span class=\"p\">;</span>\n</span><span class='line'>          <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">bounds</span><span class=\"p\">;</span>\n</span><span class='line'>          \n</span><span class='line'>          <span class=\"p\">[</span><span class=\"n\">_containerLayer</span> <span class=\"nl\">addSublayer:</span><span class=\"n\">slice</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_normalizedValues</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"n\">_containerLayer</span><span class=\"p\">.</span><span class=\"n\">sublayers</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">_containerLayer</span><span class=\"p\">.</span><span class=\"n\">sublayers</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">_normalizedValues</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"p\">[[</span><span class=\"n\">_containerLayer</span><span class=\"p\">.</span><span class=\"n\">sublayers</span> <span class=\"nl\">objectAtIndex:</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"n\">removeFromSuperlayer</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// Set the angles on the slices</span>\n</span><span class='line'>  <span class=\"n\">CGFloat</span> <span class=\"n\">startAngle</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">CGFloat</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">_normalizedValues</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">NSNumber</span> <span class=\"o\">*</span><span class=\"n\">num</span> <span class=\"k\">in</span> <span class=\"n\">_normalizedValues</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"n\">CGFloat</span> <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"p\">.</span><span class=\"n\">floatValue</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">M_PI</span><span class=\"p\">;</span>\n</span><span class='line'>      \n</span><span class='line'>      <span class=\"n\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@&quot;Angle = %f&quot;</span><span class=\"p\">,</span> <span class=\"n\">angle</span><span class=\"p\">);</span>\n</span><span class='line'>      \n</span><span class='line'>      <span class=\"n\">PieSliceLayer</span> <span class=\"o\">*</span><span class=\"n\">slice</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_containerLayer</span><span class=\"p\">.</span><span class=\"n\">sublayers</span> <span class=\"nl\">objectAtIndex:</span><span class=\"n\">index</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">fillColor</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"nl\">colorWithHue:</span><span class=\"n\">index</span><span class=\"o\">/</span><span class=\"n\">count</span> <span class=\"nl\">saturation:</span><span class=\"mf\">0.5</span> <span class=\"nl\">brightness:</span><span class=\"mf\">0.75</span> <span class=\"nl\">alpha:</span><span class=\"mf\">1.0</span><span class=\"p\">];</span>\n</span><span class='line'>      <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">startAngle</span> <span class=\"o\">=</span> <span class=\"n\">startAngle</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">endAngle</span> <span class=\"o\">=</span> <span class=\"n\">startAngle</span> <span class=\"o\">+</span> <span class=\"n\">angle</span><span class=\"p\">;</span>\n</span><span class='line'>      \n</span><span class='line'>      <span class=\"n\">startAngle</span> <span class=\"o\">+=</span> <span class=\"n\">angle</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"n\">index</span><span class=\"o\">++</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"n\">hue</span> <span class=\"o\">+=</span> <span class=\"n\">num</span><span class=\"p\">.</span><span class=\"n\">floatValue</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span><span class='line'><span class=\"k\">@end</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>There is one thing we didn&#8217;t do yet, which is enabling some touch interaction. I&#8217;ll leave that as a reader exercise for now.</p><br /><br /><p><a name=\"D\" id=\"D\"></a></p><br />\n<h3>Demo and Source code</h3><br /><br /><p>With all that reading you did so far, your eyes are probably thirsty for some visuals. Well, treat yourself with the YouTube video and the <a href=\"https://github.com/pavanpodila/PieChart\">github source</a> on the side.</p><br /><br /><iframe width='560' <br />        height='315' <br />        src='http://www.youtube.com/embed/4gydqa5lAJA' <br />        frameborder='0' allowfullscreen=''><br />        </iframe><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=TGwU-yWWDEs:WzWYiu7lzTY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=TGwU-yWWDEs:WzWYiu7lzTY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=TGwU-yWWDEs:WzWYiu7lzTY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=TGwU-yWWDEs:WzWYiu7lzTY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=TGwU-yWWDEs:WzWYiu7lzTY:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/TGwU-yWWDEs\" height=\"1\" width=\"1\"/></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://feedproxy.google.com/~r/Pixel-In-Gene/~3/czKdsz6iIs4/\">Simple helper method for async testing with Jasmine and RequireJS</a></div><div class=\"moreinfo\"><span class=\"date\">Wednesday, December 14, 2011</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://feeds2.feedburner.com/Pixel-In-Gene\">Pixel in Gene</a></span></div><p><p>Unit testing in Javascript, especially with <a href=\"http://requirejs.org/\">RequireJS</a> can be a bit of challenge. Jasmine, which is our unit testing framework does not have any out of the box support for RequireJS. I have seen a few ways of integrating RequireJS but that requires hacking the SpecRunner.html file, the main test harness that executes all jasmine tests. That wasn&#8217;t really an option for us as we were using a ruby gem called <a href=\"https://github.com/pivotal/jasmine-gem\">jasmine</a> to auto generate this html file from our spec files. There is however an <a href=\"https://github.com/pivotal/jasmine-gem/pull/34\">experimental gem</a> created by Brendan Jerwin that provides RequireJS integration. We did consider that option before ruling it out for lack of official support. After a bit of flailing around, we finally hit upon a little nugget in the core jasmine framework that seemed to provide a solution.</p><br />\n<h3>Async tests in Jasmine</h3><br /><br /><p>For a long time, most of our tests used the standard prescribed procedure in jasmine, which is <code>describe()</code> with a bunch of <code>it()</code>s. This worked well for the most part until we switched to RequireJS as our script loader. Then there was only <code style=\"background:#FF8080;color:maroon;\">blood red</code> on our test pages.</p><br /><br /><p>Clearly jasmine and RequireJS have no mutual contract, but there is a way to run async tests in jasmine with methods like <a href=\"https://github.com/pivotal/jasmine/wiki/Asynchronous-specs\">runs(), waits() and waitsFor()</a>. Out of these, <code>runs()</code> and <code>waitsFor()</code> were the real nuggets, which complement each other when running async tests.</p><br /><br /><p><code>waitsFor()</code> takes in a function that should return a boolean when the work item has completed. Jasmine will keep calling this function until it returns true, with a default timeout of 5 seconds. If the worker function doesn&#8217;t complete by that time, the test will be marked as a failure. You can change the error message and the timeout period by passing in additional arguments to <code>waitsFor()</code>.</p><br /><br /><p><code>runs()</code> takes in a function that is called whenever it is ready. If a runs() is preceded by a waitsFor(), it will execute only when the waitsFor() has completed. This is great since it is exactly what we need to make our RequireJS based tests to run correctly. In code, the usage of waitsFor() and runs() looks as shown below. Note that I am using <a href=\"http://coffeescript.org/\">CoffeeScript</a> here for easier readability.</p><br /><br /><p style=\"border:1px solid #6B0000; border-radius:5px; background: #E5EEFF; padding:5px;font-size:0.8em;\"><br /><strong>&#8212; Short CoffeeScript Primer &#8212;</strong><br><br />In CoffeeScript, the <code>-></code> (arrow operator) translates to a <code>function(){}</code> block. Functions can be invoked without the parenthesis,eg: <code>foo args</code> is similar to <code>foo(args)</code>. The last statement of a function is considered as the return value. Thus, <code>() -> 100</code> would become <code>function(){ return 100; }</code><br /><span style=\"font-style:italic;display:block;margin-top:20px;\">&#8220;With this primer, you should be able to follow the code snippet below.&#8221;</span><br /></p><br /><br /><br /><br /><br /><figure class='code'><figcaption><span>waitsFor() and runs() </span></figcaption><br /> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /></pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>    <span class=\"nx\">it</span> <span class=\"s\">&quot;should do something nice&quot;</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span>\n</span><span class='line'>        <span class=\"nx\">waitsFor</span> <span class=\"o\">-&gt;</span>\n</span><span class='line'>          <span class=\"nx\">isWorkCompleted</span><span class=\"p\">()</span>\n</span><span class='line'>\n</span><span class='line'>        <span class=\"nx\">runs</span> <span class=\"o\">-&gt;</span>\n</span><span class='line'>            <span class=\"nx\">completedWork</span><span class=\"p\">().</span><span class=\"nx\">doSomethingNice</span><span class=\"p\">()</span>\n</span><span class='line'>  \n</span></code></pre></td></tr></table></div></figure><br /><br />\n<h3>Jasmine meets RequireJS</h3><br /><br /><p><img src=\"http://blog.pixelingene.com/images/2011-12-14-simple-helper-method-for-async-testing-with-jasmine/jasmine-meets-requirejs.jpg\"></p><br /><br /><p><strong>waitsFor()</strong> along with <strong>runs()</strong> holds the key to running our RequireJS based tests. Within <code>waitsFor()</code> we wait for the RequireJS modules to load and return true whenever those modules are available. In <code>runs()</code> we take those modules and execute our test code. Since this pattern of writing tests was becoming so common, I decided to capture that into a helper method, called <code>ait()</code>.</p><br /><br /><figure class='code'><figcaption><span>Helper method for running RequireJS tests </span></figcaption><br /> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /><span class='line-number'>8</span><br /><span class='line-number'>9</span><br /><span class='line-number'>10</span><br /></pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class=\"nv\">ait = </span><span class=\"nf\">(description, modules, testFn)-&gt;</span>\n</span><span class='line'>    <span class=\"nx\">it</span> <span class=\"nx\">description</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span>\n</span><span class='line'>        <span class=\"nv\">readyModules = </span><span class=\"p\">[]</span>\n</span><span class='line'>        <span class=\"nx\">waitsFor</span> <span class=\"o\">-&gt;</span>\n</span><span class='line'>            <span class=\"nx\">require</span> <span class=\"nx\">modules</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">readyModules = </span><span class=\"nx\">arguments</span>\n</span><span class='line'>            <span class=\"nx\">readyModules</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">is</span> <span class=\"nx\">modules</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"c1\"># return true only if all modules are ready</span>\n</span><span class='line'>\n</span><span class='line'>        <span class=\"nx\">runs</span> <span class=\"o\">-&gt;</span>\n</span><span class='line'>            <span class=\"nv\">arrayOfModules = </span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">.</span><span class=\"nx\">call</span> <span class=\"nx\">readyModules</span>\n</span><span class='line'>            <span class=\"nx\">testFn</span><span class=\"p\">(</span><span class=\"nx\">arrayOfModules</span><span class=\"p\">...)</span>\n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p><strong>If are wondering why the name <code>ait()</code></strong>, it is just to keep up with the spirit of jasmine methods like <code>it</code> for the test case and <code>xit</code> for ignored test case. Hence <code>ait</code>, which stands for &#8220;async <code>it</code>&#8221;. This method takes care of waiting for the RequireJS modules to load (which are passed in the <code>modules</code> argument) and then proceeding with the call to the <code>testFn</code> in <code>runs()</code>, which has the real test code. The testFn takes the modules as individual arguments. Note the special CoffeeScript syntax <code>arrayOfModules...</code> for the expansion of an array into individual elements.</p><br /><br /><blockquote><blockquote><p>The  <code>ait</code> method really reads as: <code>it</code> <code>waitsFor()</code> the RequireJS modules to load and then <code>runs()</code> the test code</p></blockquote></blockquote>\n<br /><p>To make things a little clear, here is an example usage:</p><br /><br /><figure class='code'><figcaption><span>Example usage of ait() </span></figcaption><br /> <div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span><br /><span class='line-number'>2</span><br /><span class='line-number'>3</span><br /><span class='line-number'>4</span><br /><span class='line-number'>5</span><br /><span class='line-number'>6</span><br /><span class='line-number'>7</span><br /></pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class=\"nx\">describe</span> <span class=\"s\">&#39;My obedient Model&#39;</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"nx\">ait</span> <span class=\"s\">&#39;should do something nice&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">&#39;obedient_model&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;sub_model&#39;</span><span class=\"p\">],</span> <span class=\"nf\">(ObedientModel, SubModel)-&gt;</span>\n</span><span class='line'>        <span class=\"nv\">subModel = </span><span class=\"k\">new</span> <span class=\"nx\">SubModel</span>\n</span><span class='line'>        <span class=\"nv\">model = </span><span class=\"k\">new</span> <span class=\"nx\">ObedientModel</span><span class=\"p\">(</span><span class=\"nx\">subModel</span><span class=\"p\">)</span>\n</span><span class='line'>        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">doSomethingNice</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span> <span class=\"s\">&quot;Just did something really nice!&quot;</span>\n</span><span class='line'>      \n</span></code></pre></td></tr></table></div></figure><br /><br /><br /><p>The test case <strong>should do something nice</strong>, takes in two modules: <em>obedient_model</em> and <em>sub_model</em>, which resolve to the arguments: <code>ObedientModel</code> and <code>SubModel</code>, and then executes the test code. Note that I am relying on the default timeout for <code>the waitsFor()</code> method. So far this works great, but that may change as we build up more tests.</p><div class=\"feedflare\"><br /><a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=czKdsz6iIs4:pC7zG187wpw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=czKdsz6iIs4:pC7zG187wpw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=czKdsz6iIs4:pC7zG187wpw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?a=czKdsz6iIs4:pC7zG187wpw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Pixel-In-Gene?i=czKdsz6iIs4:pC7zG187wpw:V_sGLiPBpWU\" border=\"0\"></img></a><br /></div><img src=\"http://feeds.feedburner.com/~r/Pixel-In-Gene/~4/czKdsz6iIs4\" height=\"1\" width=\"1\"/></p></div><div class=\"accentbar\"><span class=\"left\">&nbsp;</span>Pixel in Gene News Feed<span class=\"right\">&nbsp;</span></div></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "python,watch,Controls,WPF,Toolkit,Library,xaml,Python Binding,MyList,Silverlight,Wouter,DLR,WPF controls,FluidKit,WPF Custom Control,WPF Toolkit,CoverFlow,ElementFlow,TransitionPresenter,",
  "LastEdited": "2010-05-08T11:42:39.753-07:00"
}