{
  "ProjectName": "clearscript",
  "Title": "ClearScript",
  "Description": "ClearScript is a library that makes it easy to add scripting to your .NET applications. It currently supports JavaScript (via V8 and JScript) and VBScript.",
  "MovedLink": "https://github.com/Microsoft/ClearScript",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Description</h1>\rClearScript is a library that makes it easy to add scripting to your .NET applications. It currently supports JavaScript (via <a href=\"http://code.google.com/p/v8/\">V8</a> and <a href=\"http://msdn.microsoft.com/en-us/library/hbxc2t98(v=vs.84).aspx\">JScript</a>) and <a href=\"http://msdn.microsoft.com/en-us/library/t0aew7h6(v=vs.84).aspx\">VBScript</a>.<br />\n<h1>Features</h1>\r<ul><li>Simple usage; create a script engine, add your objects and/or types, run scripts</li>\n<li>Support for several script engines: <a href=\"http://code.google.com/p/v8/\">Google&#39;s V8</a>, <a href=\"http://msdn.microsoft.com/en-us/library/hbxc2t98(v=vs.84).aspx\">Microsoft&#39;s JScript</a> and <a href=\"http://msdn.microsoft.com/en-us/library/t0aew7h6(v=vs.84).aspx\">VBScript</a></li>\n<li>Exposed resources require no modification, decoration, or special coding of any kind</li>\n<li>Scripts get simple access to most of the features of exposed objects and types:\n<ul><li>Methods, properties, fields, events</li>\n<li>(Objects) Indexers, extension methods, conversion operators, explicitly implemented interfaces</li>\n<li>(Types) Constructors, nested types</li></ul></li>\n<li>Full support for generic types and methods, including C#-like type inference and explicit type arguments</li>\n<li>Scripts can invoke methods with output parameters, optional parameters, and parameter arrays</li>\n<li>Script delegates enable callbacks into script code</li>\n<li>Support for exposing all the types defined in one or more assemblies in one step</li>\n<li>Optional support for importing types and assemblies from script code</li>\n<li>The host can invoke script functions and access script objects directly</li>\n<li>Full support for script debugging</li></ul>\n\n<h1>Examples</h1>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> System;\n<span style=\"color:Blue;\">using</span> Microsoft.ClearScript;\n<span style=\"color:Blue;\">using</span> Microsoft.ClearScript.JavaScript;\n<span style=\"color:Blue;\">using</span> Microsoft.ClearScript.V8;\n\n<span style=\"color:Green;\">// create a script engine</span>\n<span style=\"color:Blue;\">using</span> (<span style=\"color:Blue;\">var</span> engine = <span style=\"color:Blue;\">new</span> V8ScriptEngine())\n{\n    <span style=\"color:Green;\">// expose a host type</span>\n    engine.AddHostType(<span style=\"color:#A31515;\">&quot;Console&quot;</span>, <span style=\"color:Blue;\">typeof</span>(Console));\n    engine.Execute(<span style=\"color:#A31515;\">&quot;Console.WriteLine(&#39;{0} is an interesting number.&#39;, Math.PI)&quot;</span>);\n\n    <span style=\"color:Green;\">// expose a host object</span>\n    engine.AddHostObject(<span style=\"color:#A31515;\">&quot;random&quot;</span>, <span style=\"color:Blue;\">new</span> Random());\n    engine.Execute(<span style=\"color:#A31515;\">&quot;Console.WriteLine(random.NextDouble())&quot;</span>);\n\n    <span style=\"color:Green;\">// expose entire assemblies</span>\n    engine.AddHostObject(<span style=\"color:#A31515;\">&quot;lib&quot;</span>, <span style=\"color:Blue;\">new</span> HostTypeCollection(<span style=\"color:#A31515;\">&quot;mscorlib&quot;</span>, <span style=\"color:#A31515;\">&quot;System.Core&quot;</span>));\n    engine.Execute(<span style=\"color:#A31515;\">&quot;Console.WriteLine(lib.System.DateTime.Now)&quot;</span>);\n\n    <span style=\"color:Green;\">// create a host object from script</span>\n    engine.Execute(<span style=\"color:#A31515;\">@&quot;\n        birthday = new lib.System.DateTime(2007, 5, 22);\n        Console.WriteLine(birthday.ToLongDateString());\n    &quot;</span>);\n\n    <span style=\"color:Green;\">// use a generic class from script</span>\n    engine.Execute(<span style=\"color:#A31515;\">@&quot;\n        Dictionary = lib.System.Collections.Generic.Dictionary;\n        dict = new Dictionary(lib.System.String, lib.System.Int32);\n        dict.Add(&#39;foo&#39;, 123);\n    &quot;</span>);\n\n    <span style=\"color:Green;\">// call a host method with an output parameter</span>\n    engine.AddHostObject(<span style=\"color:#A31515;\">&quot;host&quot;</span>, <span style=\"color:Blue;\">new</span> HostFunctions());\n    engine.Execute(<span style=\"color:#A31515;\">@&quot;\n        intVar = host.newVar(lib.System.Int32);\n        found = dict.TryGetValue(&#39;foo&#39;, intVar.out);\n        Console.WriteLine(&#39;{0} {1}&#39;, found, intVar);\n    &quot;</span>);\n\n    <span style=\"color:Green;\">// create and populate a host array</span>\n    engine.Execute(<span style=\"color:#A31515;\">@&quot;\n        numbers = host.newArr(lib.System.Int32, 20);\n        for (var i = 0; i &lt; numbers.Length; i++) { numbers[i] = i; }\n        Console.WriteLine(lib.System.String.Join(&#39;, &#39;, numbers));\n    &quot;</span>);\n\n    <span style=\"color:Green;\">// create a script delegate</span>\n    engine.Execute(<span style=\"color:#A31515;\">@&quot;\n        Filter = lib.System.Func(lib.System.Int32, lib.System.Boolean);\n        oddFilter = new Filter(function(value) {\n            return (value &amp; 1) ? true : false;\n        });\n    &quot;</span>);\n\n    <span style=\"color:Green;\">// use LINQ from script</span>\n    engine.Execute(<span style=\"color:#A31515;\">@&quot;\n        oddNumbers = numbers.Where(oddFilter);\n        Console.WriteLine(lib.System.String.Join(&#39;, &#39;, oddNumbers));\n    &quot;</span>);\n\n    <span style=\"color:Green;\">// use a dynamic host object</span>\n    engine.Execute(<span style=\"color:#A31515;\">@&quot;\n        expando = new lib.System.Dynamic.ExpandoObject();\n        expando.foo = 123;\n        expando.bar = &#39;qux&#39;;\n        delete expando.foo;\n    &quot;</span>);\n\n    <span style=\"color:Green;\">// call a script function</span>\n    engine.Execute(<span style=\"color:#A31515;\">&quot;function print(x) { Console.WriteLine(x); }&quot;</span>);\n    engine.Script.print(DateTime.Now.DayOfWeek);\n\n    <span style=\"color:Green;\">// examine a script object</span>\n    engine.Execute(<span style=\"color:#A31515;\">&quot;person = { name: &#39;Fred&#39;, age: 5 }&quot;</span>);\n    Console.WriteLine(engine.Script.person.name);\n\n    <span style=\"color:Green;\">// read a JavaScript typed array</span>\n    engine.Execute(<span style=\"color:#A31515;\">&quot;values = new Int32Array([1, 2, 3, 4, 5])&quot;</span>);\n    <span style=\"color:Blue;\">var</span> values = (ITypedArray&lt;<span style=\"color:Blue;\">int</span>&gt;)engine.Script.values;\n    Console.WriteLine(<span style=\"color:Blue;\">string</span>.Join(<span style=\"color:#A31515;\">&quot;, &quot;</span>, values.ToArray()));\n}\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,C#,scripting,javascript,script,automation,embedded,generic,V8,.NET 4.0,",
  "LastEdited": "2017-04-03T08:46:10.673-07:00"
}