{
  "ProjectName": "CustomErrorCategorization",
  "Title": "CustomEasyErrorCategorization",
  "Description": "Easy and faster error Categorization of the Automation execution results.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">!<b><u>Custom and Easy Error Categorization</u></b><br /><br />Analysing and reporting the automation results is as important as automating the test cases. And usually analysis of automaton results takes longer time than the execution and most cases it is a manual process. <br /><br />I am sure every automation Tester would have gone through this situation where they have to analyse the failures and report out the reasons of failures and when there are huge number of test cases and number of runs are more, it is definitely a tire sum exercise to categorize the results manually every time. <br /><br />Based on these experiences We are here with a concept of easy and faster error categorization automation results. In this project we show how error messages key words can be mapped to Custom categories and how the results are analysed in to different categories in an automated way.<br /><br />Different Categories can be<br />1. Functional <br />2. TimeOuts<br />3. Script Error etc..<br /><br />!<u><b>How this tool works</b></u><br /><br />1. Configure the error Messages from log file against each category in xml or db <br />eg: if errorMsg = actual and expected not matching then Category = Functional<br />\t&lt;app Settings&gt;<br />\t &lt;add key=&quot;Login Failed&quot; value=&quot;SQL Access&quot;/&gt;<br />\t&lt;add key=&quot;Difference in Actual and Expected&quot; value=&quot;Functional Failure&quot;/&gt;<br />\t&lt;add key=&quot;FileNotFound&quot; value=&quot;FileNotFound&quot;/&gt;<br />\t &lt;add key=&quot;HRESULT E_FAIL&quot; value=&quot;COM Exception&quot;/&gt;<br />                  &lt;app Settings&gt;<br />2. Integrate these configuration with your trx converter tool<br />3. Run the trx converter .<br />4. When the automation report is generated based on the configuration, failures are categorized .<br />5. Now look at the Categories and prioritize your immediate actions.<br /><br />In the code section we are attaching a video of  how we have implemented this concept for  .trx in our group and how this can be customized.<br /><br />This can be extended to any other log file where we have to categorize the messages.<br /><br /><u><b>Uses</b></u><br /><br />1.  Helps in quickly analyse the automation failures  based on the Error Category and take appropriate action. <br />2. This helps in identifying what are Genuine functional failures quickly and bugs need to be logged.<br />3. If we are storing the data in the data base from .trx files following are the perceived additional benefits <br />a.  We can identify how each test case is doing across releases. <br />b.  How many script failures in each release , which will give an idea of effort estimate we have put in maintaining the test cases.<br />c.  How many functional bugs are logged across releases.<br />d.  This tool can be one point solution to view the automation results for applications as we can configure the application and releases in this tool. <br /><br />Use the attached CS file to integrate it to your trx converted utility</div><div class=\"ClearBoth\"></div>",
  "TagList": "Error Categorization,Custom Category,Result Analysis,Analytics,TRX file addin,",
  "LastEdited": "2014-03-05T01:15:06.63-08:00"
}