{
  "ProjectName": "PizzaManiacUI3",
  "Title": "PizzaManiac 3 - Managing Complexity",
  "Description": "Third iteration in a series of demos on the use of WPF to service non-trivial UI requirements",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h3><u>Overview</u></h3>\r\nThis is part 3 in a series of demos to accompany an <a href=\"http://www.codeplex.com/pizzamania\">East Bay .Net User&#39;s Group project</a>.  While the User&#39;s Group project takes a &quot;software-as-service&quot; approach, our series will focus primarily on the presentation layer, applying WPF to a set of non-trivial interface requirements, while paying special attention to the need for clean, maintainable, extensible code.  The project consists of an OrderEntry application, used to generate and track walk-in and phone-in customer orders, with a separate OrderMonitor application to display open pizza orders to the kitchen staff.  We are NOT trying to suggest that this particular UI (or the use of WPF, for that matter), would represent an appropriate solution for a similar set of <a href=\"http://www.micros.com/NR/rdonlyres/49A20E3E-02EC-4E0E-9986-72B0511B0DF5/0/PizzaHutUK.pdf\">real-world business requirements</a>, but it enables us to discuss many real-world project concerns while exercising a broad range of WPF features.<br />\n<ul><li><a href=\"http://www.codeplex.com/pizzamaniacUI1\">PizzaManiac 1</a> :  Simplistic WPF layout to support basic application structure and behavior</li>\n<li><a href=\"http://www.codeplex.com/pizzamaniacUI2\">PizzaManiac 2</a> : Realistic feature set, real-time WCF communications, and some UI customization</li>\n<li><b>PizzaManiac 3 :  Significant increase in complexity, to support multiple product types</b></li>\n<li>PizzaManiac 4 :  Robust communications and data management, .Net 3.5 updates, and a more polished UI</li></ul>\n<br />\n<h3><u>What&#39;s New?</u></h3>\r\nThe biggest change is a transition to a much more realistic level of complexity in the set of business requirements that our code and UI are expected to support.  An order can now contain any number of drinks and desserts in addition to pizzas, displayed &quot;Size&quot; options vary, depending on the specific product type (a &quot;pitcher&quot; of beer, &quot;carafe&quot; of wine...), and pizzas support additional customization, requiring associated changes to the pricing structure.<br /><br />To try to support these new requirements in an intuitive, visually concise way, we&#39;ve added images to trigger the display of Add/Edit inset views matching each product category.  Items in an order can be edited by double-clicking on them, but editing an active kitchen order will result in the cancellation and REPLACEMENT of the entire original order, until database support enables us to provide a more sophisticated solution.<br /><br /><img src=\"/projects/PizzaManiacUI3/c423aaaa-2205-4f22-87d2-c20ff03e50cd\" alt=\"verysmallOrderEntry.png\" title=\"verysmallOrderEntry.png\" />    <img src=\"/projects/PizzaManiacUI3/35186880-c3ed-4d07-8480-27f848276e39\" alt=\"verysmallOrderSummary.png\" title=\"verysmallOrderSummary.png\" /> <br /><br />Animation should generally be used sparingly in real-world projects (and consist of something much more subtle than our &quot;spinning&quot; inset window), but we&#39;ve included gratuitous animations in order to highlight some interesting implementation issues, including the topic of integrating Expression Blend into the development process.<br /><br /><img src=\"/projects/PizzaManiacUI3/43d6fb23-a8ee-4af7-802d-96749199a282\" alt=\"FlyOut.png\" title=\"FlyOut.png\" /><br /><br />&quot;Custom&quot; pizzas have been redefined to support a list of specific ingredients, all pizzas support &quot;Thick Crust&quot;, &quot;Deep Dish&quot;, and &quot;Extra Cheese&quot; options, as well as an option to forwared special instructions to the kitchen staff, like &quot;Hold the olives&quot;.<br /><br /><img src=\"/projects/PizzaManiacUI3/74cf8727-f4cb-4a5d-9771-dd66fe190608\" alt=\"verysmallCustomPizza.png\" title=\"verysmallCustomPizza.png\" />    <img src=\"/projects/PizzaManiacUI3/34732f6d-c699-4d14-92c0-3492cdabd279\" alt=\"verysmallComboPizza.png\" title=\"verysmallComboPizza.png\" /><br /><br /><br />Other product edit views currently don&#39;t contain alot of detail...<br /><br /><img src=\"/projects/PizzaManiacUI3/685a4ab9-5eaf-4ce9-a80d-c67d6502853d\" alt=\"verysmallDrink.png\" title=\"verysmallDrink.png\" />    <img src=\"/projects/PizzaManiacUI3/9063823a-fecc-43e5-9f79-40ba42827155\" alt=\"verysmallDessert.png\" title=\"verysmallDessert.png\" /><br /><br /><br />Integrating the new pizza options into the kitchen order UI required minimal changes to the existing design.<br /><br /><img src=\"/projects/PizzaManiacUI3/0c61c237-0211-456f-b878-951fa8f8d855\" alt=\"verysmallOrderMonitor.png\" title=\"verysmallOrderMonitor.png\" /><br /><br /><br />User entries are validated against regular expressions pulled from an XML file.<br /><br /><img src=\"/projects/PizzaManiacUI3/eea9348e-faf2-47ff-8e06-f8e9f42066e8\" alt=\"verysmallCustomerValidation.png\" title=\"verysmallCustomerValidation.png\" /><br /><br />\n<h3><u>Basic User&#39;s Guide</u></h3>\r\n<ul><li>Launch &quot;SimpleServiceHost.exe&quot; in the _Output\\Debug\\ProcessingService directory</li>\n<li>Launch OrderEntryUI.exe and OrderMonitorUI.exe (in other Debug sub-directories)</li>\n<li>In the OrderEntry client, click the &quot;Add New Order&quot; button, add at least one pizza, and click &quot;Save Changes&quot;</li>\n<li>To simulate that kitchen processing of the Pizza has finished, click on the Pizza in the OrderMonitor client, and click the round &quot;X&quot; button</li>\n<li>To edit an existing order, or to assign delivery or mark an order completed, click on the order in the OrderEntry client.</li>\n<li>Scheduled orders are started automatically, when the current time is within 30 minutes of the scheduled time for that order.</li>\n<li>Changes to orders already in progress will cause the original order to be cancelled, and a new order to be started.</li></ul>\n<br />\n<h3><u>Implementation Notes</u></h3>\r\nTo support our new &quot;Drink&quot; and &quot;Dessert&quot; product types, shared &quot;Price&quot;, &quot;Type&quot;, and &quot;Size&quot; fields have been moved to an abstract &quot;OrderItem&quot; base class, enabling us to clone, add, delete, and get pricing information, without having to refer to specific product types, throughout most of the code base.  The use of an abstract base class requires us to explicitly identify all derived types for any WCF operation involving the base reference (Overlooking this will cause the operation to fail silently).<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n[ServiceKnownType( <span style=\"color:Blue;\">typeof</span>( Pizza ) )]\n[ServiceKnownType( <span style=\"color:Blue;\">typeof</span>( Drink ) )]\n[ServiceKnownType( <span style=\"color:Blue;\">typeof</span>( Dessert ) )]\n[OperationContract( IsOneWay=<span style=\"color:Blue;\">true</span> )]\n<span style=\"color:Blue;\">void</span> ProcessOrder( Order order );\r\n</pre></div><br />The OrderEntry client submits the entire order for &quot;processing&quot;, and our processing service will eventually store order data in a database., but currently just extracts and forwards pizza information to the kitchen.<br /><br />We&#39;ve made several significant changes to the project structure, moving service proxy references, service data extensions, and (XML file) data access code into separate assemblies, helping to manage growing complexity through stricter enforcement of separation of concerns.  Our prefix-based file naming convention and nested UserControl UI architecture made it easy to identify elements that needed to be changed in the new design, and to carry out those changes, and the use of local EXTENSIONS to data contract classes made it possible to implement UI support for new features, like our pizza options, just by adding a few bindable properties.  <br /><br />Add/Edit view transitions are implemented by animating a CONTAINER of view instances, with only one view visible at any time.  The animations involve a mix of Storyboard markup and code-behind, and require relative width settings of the image column to be restored, in order for images to continue to grow and shrink automatically whenever the application window is resized.<br /><br />Animation and other visual effects can often really only effectively be designed using a tool like Expression Blend.  Unfortunately, Blend&#39;s simple point-and-click interface tends to encourage casual generation of massive amounts of convoluted Xaml, which must be refactored early and often if you expect to have any hope of maintaining the project source over time.  Members of the developer community, including some inside Microsoft, have discovered benefits in keeping Blend and Visual Studio project activity separate -- even to the point of manually cutting and pasting carefully refactored versions of Blend-generated Xaml into the &quot;official&quot; project source, rather than allowing designers and developers to operate directly on a single shared code base.<br /><br /><a href=\"http://channel9.msdn.com/posts/Charles/Real-World-WPF--Designers-and-Developers-working-together/\">MS User Experience Team - lessons learned in teaming devs and designers on actual WPF projects</a><br /><a href=\"http://dnrtv.com/default.aspx?showID=115\">Billy Hollis demos a very nice UI, discussing design/dev. lessons learned on an actual WPF product</a><br /><br /><br />The workflow I followed, to generate animation sequences for this project, was to open the relevant subproject directly in Blend, implement the desired visual effect, and immediately switch to Visual Studio to refactor the generated Xaml by hand.  For example...\n<ol><li>Open ClientUI\\OrderEntryUI\\OrderEntryUI.csproj in Blend</li>\n<li>Under the &quot;Project&quot; tab, double-click viewOrderDetails.xaml</li>\n<li>Navigate the object tree, and double-click EditItemViewContainer</li>\n<li>Create a new animation timeline, and interactively design your animation</li>\n<li>Use Visual Studio to cut and paste Xaml for the completed animation into the appropriate Storyboard in resAnimations.xaml, and refactor (adjusting timing precision, removing unecessary keyframes, etc.)</li></ol>\n\n<h3><u>What&#39;s Next?</u></h3>\r\nThe next iteration of our project will rely on Windows Activation Service (WAS) to host our WCF services, eliminating the need to launch a host process manually, and an svcUtil build script to eliminate having to edit auto-generated service references on the client.  An SQL Server Express database will store order, menu, pricing, employee, and other information.<br /><br /><img src=\"/projects/PizzaManiacUI3/2d727653-bd04-418f-970f-9a07579481c5\" alt=\"smallDataAccessStrategy.png\" title=\"smallDataAccessStrategy.png\" /><br /><br />The next version will also include updates related to the recently-released .Net 3.5 service pack, including GPU Accellerated Effects to replace deprecated Bitmap Effects.<br /><br />We&#39;ll also fix a few corner case glitches, and try to add some more polish to the UI, which is currently a little too... blue?<br /><br />\n<h3><u>Other projects by Andy L.</u></h3>\r\n<ul><li><a href=\"http://www.codeproject.com/KB/WPF/XSButton.aspx\">WPF Custom Controls - Without the Pain</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/CustomFrames.aspx\">WPF Non-Client Area Design Techniques For Custom Window Frames</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/AlarmBar.aspx\">An Animated AlarmBar Custom Control in WPF</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/WatermarkTextBox.aspx\">A WatermarkTextBox in 3 Lines of XAML</a></li></ul>\n<br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2008-10-13T20:38:09.4-07:00"
}