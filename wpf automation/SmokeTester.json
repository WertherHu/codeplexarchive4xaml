{
  "ProjectName": "SmokeTester",
  "Title": "Smoke Tester : Post Deployment Testing",
  "Description": "This tool enables you to easily carry out post deployment smoke tests against your installed deployments to determine if your environment is in a good state. ",
  "MovedLink": "https://github.com/stephenhaunts/Smoke-Tester",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h2>The all Familiar Problem</h2>\r\n<p style=\"text-align:justify\">For anyone working in an Enterprise Software environment, I am sure you have all encountered the same problems. You finish your development and testing. You package up a release and prepare all the release documentation for the\r\n operations team and submit the change request into your Change Request system for approval. Then the release is deployed during your standard outage/change window, normally at an ungodly hour of the night.</p>\r\n<div id=\"attachment_982\">&nbsp;</div>\r\n<div id=\"attachment_1370\"><a href=\"https://stephenhaunts.files.wordpress.com/2014/06/smoketester-0-03-testrun.png\"><img src=\"http://stephenhaunts.files.wordpress.com/2014/06/smoketester-0-03-testrun.png?w=526&h=326\" alt=\"Smoke Test Editor - Test Runner\" width=\"526\" height=\"326\" style=\"display:block; margin-left:auto; margin-right:auto\"></a></div>\r\n<p style=\"text-align:justify\">&nbsp;</p>\r\n<p style=\"text-align:justify\">The people who do the deployments generally have no knowledge about what they are deploying, they will just follow the change instructions that you have written. You will normally only really know if the release has been a proper\r\n success once your users get their hands on it the next day. In some businesses that can be a big risk if an outage or problem with the system has a financial or customer service impact.</p>\r\n<h2>A Solution</h2>\r\n<p style=\"text-align:justify\">What you ideally need is a very simple way for the release team to perform some standard checks to make sure everything is wired up and configured correctly. It is even better if you can automate these tests so they can be repeated\r\n by support teams when investigating an incident.</p>\r\n<p style=\"text-align:justify\">That is where this Post Deployment Smoke Testing Tools comes in. Don&rsquo;t just take my word for it though. This is what Jez Humble and David Farley, authors of the book Continuous Delivery and Thoughtworks engineers have to\r\n say on the subject.</p>\r\n<p style=\"text-align:center\"><em>When you deploy your application, you should have an automated script that</em><br>\r\n<em>does a smoke test to make sure that it is up and running. This could be as simple</em><br>\r\n<em>as launching the application and checking to make sure that the main screen</em><br>\r\n<em>comes up with the expected content. Your smoke test should also check that any</em><br>\r\n<em>services your application depends on are up and running&mdash;such as a database,</em><br>\r\n<em>messaging bus, or external service.</em></p>\r\n<p style=\"text-align:center\"><em>The smoke test, or deployment test, is probably the most important test to</em><br>\r\n<em>write once you have a unit test suite up and running&mdash;indeed, it&rsquo;s arguably even</em><br>\r\n<em>more important. It gives you the conÔ¨Ådence that your application actually runs.</em><br>\r\n<em>If it doesn&rsquo;t run, your smoke test should be able to give you some basic diagnostics</em><br>\r\n<em>as to whether your application is down because something it depends on is not</em><br>\r\n<em>working.</em></p>\r\n<p style=\"text-align:center\"><strong><em>Jez Humble and David Farley</em></strong></p>\r\n<p style=\"text-align:center\"><strong><em>Continuous Delivery &ndash; Addison-Wesley Professional</em></strong></p>\r\n<p style=\"text-align:justify\">&nbsp;</p>\r\n<p style=\"text-align:justify\">You may be lucky and work in a fully agile development shop where you do full continuous deployments directly into production. If so, I salute you. This tool is still very valuable as you can ensure the tests execute after each\r\n automated deployment and still get the benefits of this rapid feedback.</p>\r\n<p style=\"text-align:justify\">Smoke testing is there to give you rapid feedback on the success of a release. If you know instantly that there has been a deployment problem, the engineer doing the release can contact someone to get it fixed or roll back before\r\n it impacts the business.</p>\r\n<p style=\"text-align:justify\">When deploying into production, there are all manor of things that can happen that you didn&rsquo;t expect, like firewall problems, database passwords being entered incorrectly, MSI installers going crazy (I hate it when they do\r\n that).</p>\r\n<p style=\"text-align:justify\">This smoke testing tools allows your development team to construct a list of test steps using a graphical interface. The tool is very easy to use and you can even use the tool to execute the tests. There is also a command line\r\n test runner that can be scripted as part of your deployment.</p>\r\n<p style=\"text-align:justify\">The whole system is extensible so that if there is not an included test type that you need, you can easily develop your own.</p>\r\n<h3>What Sort of Things Can You Test</h3>\r\n<p>Out of the box you can perform basic tests like the following :</p>\r\n<ul>\r\n<ul>\r\n<li>Check certificates exist. </li><li>Check COM objects are registered. </li><li>Check SQL Server connection strings. </li><li>Check environment variables are set. </li><li>Check files exist. </li><li>Check folders exist. </li><li>Check HTTP connections return specified result codes. </li><li>Check minimum disk space requirements. </li><li>Check registry keys exist. </li><li>Check elements and attributes exist in XML files. </li><li>Check MSMQ installed and that local private queues are present. </li><li>Check MD5, SHA01 and SHA256 digests of files. </li><li>Check that local or remote windows services are installed and running. </li><li>Check that IIS is installed and running. </li><li>Check for users in Active Directory for a names domain. </li><li>Check availability of network addresses/servers (ping). </li><li>Check .NET assembly file versions. </li><li>Run executables or batch files and check the return code. </li><li>Run executables or batch files and check for text in the output console. </li></ul>\r\n</ul>\r\n<p>The system is extensible so it is very easy to add your own custom test types.</p>\r\n<h2>What&rsquo;s Included</h2>\r\n<p style=\"text-align:justify\">The Post Deployment Smoke Tester comes with 2 tools. There is a graphical user interface tool called the Test Configuration Editor for building / executing test chains and there is a command line tool for executing tests. The latter\r\n is great if you want to script the test execution. Lets take a little look at each tool.</p>\r\n<h3>Smoke Test Configuration Tool</h3>\r\n<p style=\"text-align:justify\">The Test Configuration Tool allows you to set up and configure test scripts based on the available selection of test types. The tool is very easy to use so the test scripts don&rsquo;t have to only be created by developers. It\r\n should be easy for your testing or DevOps team to build scripts.</p>\r\n<div>&nbsp;</div>\r\n<div id=\"attachment_1371\"><a href=\"https://stephenhaunts.files.wordpress.com/2014/06/smoketester-0-03-editor.png\"><img src=\"http://stephenhaunts.files.wordpress.com/2014/06/smoketester-0-03-editor.png?w=541&h=332\" alt=\"Smoke Test Editor\" width=\"541\" height=\"332\" style=\"display:block; margin-left:auto; margin-right:auto\"></a>\r\n<p>&nbsp;</p>\r\n<p>The test configuration editor also allows you to execute the tests as shown below. When you run the tests you will get a basic traffic light system, similar to testing tools like NUnit. Green means the test passed successfully, and Red means the test failed.\r\n If a test does fail you get a message saying why so you can explore further.</p>\r\n</div>\r\n<div id=\"attachment_1370\"><a href=\"https://stephenhaunts.files.wordpress.com/2014/06/smoketester-0-03-testrun.png\"><img src=\"http://stephenhaunts.files.wordpress.com/2014/06/smoketester-0-03-testrun.png?w=574&h=356\" alt=\"Smoke Test Editor - Test Runner\" width=\"574\" height=\"356\" style=\"display:block; margin-left:auto; margin-right:auto\"></a>\r\n<h3>File Digest Generator</h3>\r\n<p style=\"text-align:justify\">Included with the Smoke Tester are a series of tests for checking either an MD5, SHA1, or SHA256 checksum on a file. This type of test allows the smoke tester to check that a file hasn't been tampered with or modified. If a file\r\n has been changed, then the checksum test will fail. When you use the test in the test editor, you need to easily be able to generate a checksum of the target file so you can include it in the test.</p>\r\n<div id=\"attachment_1469\"><a href=\"http://stephenhaunts.files.wordpress.com/2014/06/smoke-tester-checksum-creator.png\"><img src=\"http://stephenhaunts.files.wordpress.com/2014/06/smoke-tester-checksum-creator.png?w=640\" alt=\"Smoke Tester Checksum Creator\" style=\"display:block; margin-left:auto; margin-right:auto\"></a>\r\n<p style=\"text-align:justify\">&nbsp;</p>\r\n<p style=\"text-align:justify\">The test editor contains a File Checksum Generator under the main Tools menu. This generator is very easy to use. You browse for a file, and then using the radio buttons select what kind of checksum you want, MD5, SHA1, SHA256.\r\n Then you hit generate.</p>\r\n</div>\r\n<div id=\"attachment_1470\"><a href=\"http://stephenhaunts.files.wordpress.com/2014/06/smoke-tester-checksum-creator2.png\"><img src=\"http://stephenhaunts.files.wordpress.com/2014/06/smoke-tester-checksum-creator2.png?w=640\" alt=\"Smoke Tester Checksum Creator\" style=\"display:block; margin-left:auto; margin-right:auto\"></a></div>\r\n<p style=\"text-align:justify\">&nbsp;</p>\r\n<p style=\"text-align:justify\">This will give you a checksum as shown above. Then you can copy it to the clip board and paste it into the test, as shown below.</p>\r\n<div id=\"attachment_1478\"><a href=\"https://stephenhaunts.files.wordpress.com/2014/06/smoke-tester-md5-test.png\"><img src=\"http://stephenhaunts.files.wordpress.com/2014/06/smoke-tester-md5-test.png?w=542&h=108\" alt=\"Smoke Tester MD5 Checksum Test\" width=\"542\" height=\"108\" style=\"display:block; margin-left:auto; margin-right:auto\"></a></div>\r\n<p style=\"text-align:justify\">&nbsp;</p>\r\n<p style=\"text-align:justify\">This makes creating test chains that want to test for file integrity much easier as you can generate the checksums to check for directly in the tool.</p>\r\n<p style=\"text-align:justify\">&nbsp;</p>\r\n</div>\r\n<h3>Command Line Test Runner</h3>\r\n<p style=\"text-align:justify\">There is also a command line tool that you can use to execute tests. If you run the tool on its own, it will pick up test scripts in that folder and allow you to run them from a menu, as shown below.</p>\r\n<p style=\"text-align:justify\">&nbsp;</p>\r\n<div id=\"attachment_1369\"><a href=\"https://stephenhaunts.files.wordpress.com/2014/06/smok-test-from-command-line.jpg\"><img src=\"http://stephenhaunts.files.wordpress.com/2014/06/smok-test-from-command-line.jpg?w=493&h=292\" alt=\"Run Smok Tests from  the Command Line\" width=\"493\" height=\"292\" style=\"display:block; margin-left:auto; margin-right:auto\"></a>\r\n<p>&nbsp;</p>\r\n</div>\r\n<p style=\"text-align:justify\">You can also run the command line tool and specify a particular test to run, as shown below.</p>\r\n<p>&nbsp;</p>\r\n<div id=\"attachment_1368\"><a href=\"https://stephenhaunts.files.wordpress.com/2014/06/smok-test-from-command-line-2.jpg\"><img src=\"http://stephenhaunts.files.wordpress.com/2014/06/smok-test-from-command-line-2.jpg?w=482&h=244\" alt=\"Run Smoke Tests from the Command Line\" width=\"482\" height=\"244\" style=\"display:block; margin-left:auto; margin-right:auto\"></a>\r\n<p style=\"text-align:center\">&nbsp;</p>\r\n</div>\r\n<h2>Want to Contribute?</h2>\r\n<p>It is early days for this tool. I would like to see the range of available tests grow significantly. You can contribute in the following ways:</p>\r\n<ul>\r\n<ul>\r\n<li><strong>Develop new test types.</strong>&nbsp;If you want to submit a new type of test, then what we require are tests that are general enough for anyone to use, so for example, tests for MSMQ, Rabbit MQ, various NoSQL databases. You may need tests that\r\n are very specific to your own enterprise, this is fine, but if it is only going to work on your system then it would not really be suitable for the overall project.\r\n</li><li><strong>Help with our unit testing.</strong>&nbsp;The original version of this tool was written fairly quickly in response to some problematic deployments, so although there are quite a few unit and integration tests, we can always do better in increasing\r\n the code coverage. </li><li><strong>Documentation.</strong>&nbsp;It would be great if people could contribute by writing tutorials and other use case documentation.\r\n</li><li><strong>Use case Examples.</strong>&nbsp;If you use the tool in your company, it would be great if you could do a little write up about your particular usage scenario and submit some example test scripts and screen shots.\r\n</li></ul>\r\n</ul>\r\n<h2>Release Notes</h2>\r\n<h3>Version 0.04</h3>\r\n<ul>\r\n<ul>\r\n<li>Tests now run in a separate thread in the test runner, so that the UI thread is not blocked.\r\n</li><li>Fixed bug were if you click the remove all tests button you were not prompted first.\r\n</li><li>Console app test runner now return a correct exit code. 0 for success and 1 for failure.\r\n</li><li>Add an Enabled flag to the test base class. </li><li>Wire in the enabled flag to the test runner in the UI and Command Line App. </li><li>Fixed bug where the save button on the TestEditor would always ask for a filename when it should just overwrite the existing file.\r\n</li><li>Added an XmlDocumentTest which allows you to do an XPath query over an XML Document.\r\n</li><li>Fixed bug in XMLElementTest where if attributes were not the same in a list of elements then an exception would be thrown. This is now handled.\r\n</li><li>Add tool to the User Interface to allow you to generate a list of files to be used in a FileListExistsTest.\r\n</li><li>Added a new test that allows you to check for the existence of a list of files.\r\n</li><li>Added a new test that allows you to check the assemblies file numbers for a list of assemblies.\r\n</li><li>Added Copy &amp; Paste feature; copy and paste test within and across TestEditor windows.\r\n</li><li>Minor layout adjustment on About dialog </li><li>Added a new HTML report type. </li></ul>\r\n</ul>\r\n<h3>Version 0.03</h3>\r\n<ul>\r\n<ul>\r\n<li>Added a new TestCategoryAttribute to each test. This means in the UI, instead of getting a large list of tests to choose from, they are now displayed in a set of categorised folders. This is to aid usability.\r\n</li><li>Add test linking between the test editor view and the test result view. This means if you get a failing test in the results view you can double click on it to navigate to the failing test in the test editor view.\r\n</li><li>Add a test report writer to the UI. This allows you to automatically output a test report in XML, CSV and Plain Text.&nbsp;\r\n</li><li>Add a test report writer to the Command Line test runner. This allows you to automatically output a test report in XML, CSV and Plain Text.\r\n</li><li>Added a tool to the test builder that allows you to calculate MD5, SHA1, SHA256 checksums of selected files. This makes it easier to calculate file checksums when using the checksum tests.\r\n</li><li>Ordering Tests In The Test Run View. You can now click on the column headings in the Test Run view of the test editor to sort the test results based on test outcome, ie pass/fail.\r\n</li><li>Added new test called CallExecutableCheckReturnCodeTest. This allows you to call an external tool or batch file and test the return code.\r\n</li><li>Added new test called CallExecutableCheckOutputTextTest. This allows you to call an external tool or batch file and test that text in the standard out contains specific values.\r\n</li></ul>\r\n</ul>\r\n<h3>Version 0.02</h3>\r\n<ul>\r\n<ul>\r\n<li><em><strong>MSMQInstalledTest</strong>&nbsp;</em>: This test checks whether the MSMQ messaging service is installed on the server you are running the tests from.\r\n</li><li><em><strong>MSMQLocalQueueExistsTest&nbsp;</strong></em>: Check if a local MSMQ private queue exists.\r\n</li><li><em><strong>MD5ChecksumTest&nbsp;</strong></em>: Check an MD5 digest of a file. This is for file integrity checking.\r\n</li><li><em><strong>SHA1ChecksumTest&nbsp;</strong></em>:&nbsp;Check an SHA1 digest of a file. This is for file integrity checking.\r\n</li><li><em><strong>SHA256ChecksumTest&nbsp;</strong></em>:&nbsp;Check an SHA256 digest of a file. This is for file integrity checking.\r\n</li><li><em><strong>WindowsServiceExistsTest&nbsp;</strong></em>: Check that a windows service exists in the machine the tests are running from.\r\n</li><li><em><strong>WindowsServiceStatusTest&nbsp;</strong></em>: Check the Status of a windows service, Running, Stopped etc.\r\n</li><li><em><strong>WindowsRemoteServiceExistsTest&nbsp;</strong></em>:&nbsp;Check that a windows service exists on&nbsp;a remote machine.\r\n</li><li><em><strong>WindowsRemoteServiceStatusTest&nbsp;</strong></em>: Check the status of a remote windows service, Running, Stopped etc.\r\n</li><li><em><strong>IISInstalledTest&nbsp;</strong></em>: Check that the IIS web server is&nbsp;installed&nbsp;on the machine the tests are running from.\r\n</li><li><em><strong>IISRunningTest&nbsp;</strong></em>:&nbsp;Check that the IIS web server is running on the machine the tests are running from.\r\n</li><li><em><strong>IISVersionTest&nbsp;</strong></em>: Check the version of IIS that is installed.\r\n</li><li><em><strong>IISDoesWebsiteExistTest&nbsp;</strong></em>: Does a website exist in the instance of IIS.\r\n</li><li><em><strong>UserInActiveDirectoryTest&nbsp;</strong></em>: Check that a user is in Active Directory for a domain.\r\n</li><li><em><strong>NetworkPingTest&nbsp;</strong></em>: Ping a network address. </li><li><em><strong>AssemblyVersionNumberTest&nbsp;</strong></em>: Check the version of a names .NET assembly.\r\n</li></ul>\r\n</ul>\r\n<h3>Version 0.01</h3>\r\n<ul>\r\n<ul>\r\n<li>Released the initial version. </li></ul>\r\n</ul>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Continuous Delivery,Smoke Test,Post Deployment,Environment Testing,Smoke Testing,Deployment Testing,Unit Test,Integration Test,Acceptance Test,Acceptance Testing,Integration Testing,Unit Testing,Automated Test,Automated Testing,Automation Testing,",
  "LastEdited": "2014-07-23T03:29:26.457-07:00"
}