{
  "ProjectName": "SimpleVisio",
  "Title": "SimpleVisio - XML based Visio Automation",
  "Description": "Aims to provide simple XML format for creating/automating Visio diagrams using C# .Net dynamically.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br /><br />      An XML based Visio automation project using C#. This C# .Net project converts xml files into Visio diagrams dynamically. Ideal for simple use cases. Extendible. The placement of Visio components follows a zig-zag pattern with 2 items in a row. Edit Config files to control input file location. Edit input.xml to manipulate Visio drawings. Edit SimpleVisioStyles vstx/vss files to extend shapes. The goal is simplicity and so expect features trade off with ease of use.<br /><br /><br /><b>**Dependency: **</b><br /><br />LINQ<br />.Net 4.5<br />Visio 2013+<br /><br /><br /><b>** Usage: **</b><br /><br />1. Download the files and unzip or (Go to source code-&gt;Downloads-&gt;unzip).<br />2. Navigate bin\\debug folder.<br />3. Locate SimpleVisio.exe.config file and edit the file to point to the correct location of <br />     a. input.xml<br />     b. SimpleVisioStyles.vstx<br />4. Run SimpleVisio.exe to see Visio being automatically generated from the xml.<br />5. Save from Visio. The application does not save the files.<br /><br /><b>** input.xml **</b><br /><br />1. This is the input file for the Application to draw Visio diagrams.<br />2. Container is the outer block diagram <br />3. Component are visio concept entities e.g) Server, Router etc.<br />4. types represent the stylesheet element names<br />5. names represent Label<br />6. Connector is the connecting line between a component and another component/container.<br />7. ContainerConnector is the connecting line between a container and another component.<br />8. id for Component/Container represents that element id.<br />9. id for a connector/ContainerConnector represents a line between parent element and the element containing this id as target.<br />10. enable = false/true to represent if you need an outer block surrounding the elements to be drawn. <br />11. All components must reside in a container regardless of if enable = false/true.<br />12. Take care to connect the ids carefully.<br /><br /><b>** SimpleVisioStyles.vstx **</b><br /><br />1. This is the starting empty template for the Application on which the diagrams are drawn.<br />2. All the elements like Server/Router must reside within here.<br />3. To add more elements open SimpleVisioStyles.vstx file in visio, then open SimpleVisioStyles.vss stencil within that file. Now open other stencils and drag and drop items to the stencil and save them back as SimpleVisioStyles.vstx and SimpleVisioStyles.vss <br /><br /><br /><b>** Source Code **</b><br /><br />1. Use Visual Studio 2013.<br />2. Open the solution files.<br />3. Add references to Visio com files (must have visio installed. Check versions for visio issues).<br />4. Currently in debug mode and .Net 4.5+ target.<br /><br /><b>**Note: **</b><br /><br />1. Limited testing/validations.<br /><br /><br /><b>**References: **</b><br /><br /> * * * * * ToDo * * * * *<br /><br /><b>**Enhancements: **</b><br /><br /> * * * * * ToDo * * * * *<br /><br /><b>At the moment, I am too busy to care about the project. If somebody is interesting to do this job, please open discussions. I will try to have a look to the discussions from time to time, but I cannot promise to respond quickly. Sorry</b><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,C#,xml,visio,Visio Automation,C# Visio,Visio XML,",
  "LastEdited": "2016-08-27T22:01:25.813-07:00"
}