{
  "ProjectName": "wpfmultitouchcms",
  "Title": "WPF Multitouch CMS",
  "Description": "A multitouch CMS presentation software created with WPF / C# for multitouch enabled monitors and PC's.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rA multitouch CMS presentation software created with WPF &#47; C&#35; for multitouch enabled monitors and PC&#39;s.<br /><b>Watch for a demo: <a href=\"http://youtu.be/thCTcawGYjw\">http://youtu.be/thCTcawGYjw</a></b><br /><div class=\"video\" style=\"text-align:Center\"><span class=\"player\"><object height=\"285px\" width=\"320px\"><param name=\"movie\" value=\"http://www.youtube.com/v/\"></param><param name=\"wmode\" value=\"transparent\"></param><embed height=\"285px\" width=\"320px\" type=\"application/x-shockwave-flash\" wmode=\"transparent\" src=\"http://www.youtube.com/v/\" /></object></span><br /><span class=\"external\"><a href=\"https://www.youtube.com/watch?v=thCTcawGYjw\" target=\"_blank\">Launch in another window</a></span></div><br />Video is in Turkish there is no english version. Sorry about that.<br /><br /><img src=\"/projects/wpfmultitouchcms/a5f6586e-c28e-449e-b0e5-1800b1574f61\" alt=\"001.png\" title=\"001.png\" /><br /><img src=\"/projects/wpfmultitouchcms/9f4bc0d3-d92d-4c65-ab7a-98941fe1d83f\" alt=\"002.png\" title=\"002.png\" /><br /><img src=\"/projects/wpfmultitouchcms/1bd4aee6-364e-4195-87b8-1ddd00ed7210\" alt=\"003.png\" title=\"003.png\" /><br />\n<h1>Properties</h1>\r<ul><li>Can edit presentation while presenting like power point.</li>\n<li>Add wallpaper to project.</li>\n<li>Protect presentation with password.</li>\n<li>Create custom menu at startup. (Categories etc...)</li>\n<li>Edit default button state images. also change the image of the volume change knob.</li>\n<li>Add an abient sound file or music to the project and could stop and play while presentation.</li>\n<li>User can enable/disable the rotation, translation &amp; scaling while presentation.</li>\n<li>Thumbnail can take video (wmv, mp4, avi) and picture (jpg, png, gif)</li>\n<li>User can change thumbnail position for overall of the project. Left, Right, Top or Bottom aligned.</li></ul>\n\n<h1>Touch elements in WPF</h1>\rHow to handle touch interaction from user explained with fallowing class diagram.<br /><img src=\"/projects/wpfmultitouchcms/fd8e1d21-b1ac-4ac7-9ce9-f513facf173d\" alt=\"TouchClassDiagram.png\" title=\"TouchClassDiagram.png\" /><br />\n<h2>The Touch Ruler Canvas</h2>\rThis is the main place holder for every multitouchable object in the canvas. Also it is inherited from the canvas object of the WPF. This canvas has many abilities like taking and removing images and videos.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> System;\n<span style=\"color:Blue;\">using</span> System.Collections.Generic;\n<span style=\"color:Blue;\">using</span> System.Linq;\n<span style=\"color:Blue;\">using</span> System.Text;\n<span style=\"color:Blue;\">using</span> System.Windows.Controls;\n<span style=\"color:Blue;\">using</span> System.Windows;\n<span style=\"color:Blue;\">using</span> System.Windows.Media;\n<span style=\"color:Blue;\">using</span> System.Windows.Input;\n<span style=\"color:Blue;\">using</span> System.Windows.Media.Imaging;\n<span style=\"color:Blue;\">using</span> System.Windows.Shapes;\n\n\n<span style=\"color:Blue;\">namespace</span> USM_TouchControls\n{\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> TouchRulerCanvas : Canvas\n    {\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> &#220;zerinde en yukarda olan elemanın değişme olayı</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;sender&quot;&gt;</span><span style=\"color:Green;\">Last elemanı değişen canvasın ta kendisi&lt;/param&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">delegate</span> <span style=\"color:Blue;\">void</span> lastChangedHandler(<span style=\"color:Blue;\">object</span> sender);\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">event</span> lastChangedHandler lastChanged;\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">virtual</span> <span style=\"color:Blue;\">void</span> OnlastChanged()\n        {\n            <span style=\"color:Blue;\">if</span> (lastChanged != <span style=\"color:Blue;\">null</span>)\n                lastChanged(<span style=\"color:Blue;\">this</span>);\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">delegate</span> <span style=\"color:Blue;\">void</span> ThrownOutHandler(<span style=\"color:Blue;\">object</span> sender, UIElement element);\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">event</span> ThrownOutHandler thrownOut;\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">virtual</span> <span style=\"color:Blue;\">void</span> OnthrownOut(UIElement element)\n        {\n            <span style=\"color:Blue;\">if</span> (<span style=\"color:Blue;\">this</span>.thrownOut != <span style=\"color:Blue;\">null</span>)\n                <span style=\"color:Blue;\">this</span>.thrownOut(<span style=\"color:Blue;\">this</span>, element);\n\n            <span style=\"color:Blue;\">if</span> (IsRemoveOnThrowOut)\n                <span style=\"color:Blue;\">this</span>.Children.Remove(element);\n        }\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Dışarı fırlatıldığında eleman atma</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsRemoveOnThrowOut { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsRotateDisabled\n        {\n            <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> (<span style=\"color:Blue;\">bool</span>)GetValue(IsRotateDisabledProperty); }\n            <span style=\"color:Blue;\">set</span> { SetValue(IsRotateDisabledProperty, value); }\n        }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">readonly</span> DependencyProperty IsRotateDisabledProperty =\n            DependencyProperty.Register(<span style=\"color:#A31515;\">&quot;IsRotateDisabled&quot;</span>, <span style=\"color:Blue;\">typeof</span>(<span style=\"color:Blue;\">bool</span>), <span style=\"color:Blue;\">typeof</span>(TouchRulerCanvas));\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsTranslateDisabled\n        {\n            <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> (<span style=\"color:Blue;\">bool</span>)GetValue(IsTranslateDisabledProperty); }\n            <span style=\"color:Blue;\">set</span> { SetValue(IsTranslateDisabledProperty, value); }\n        }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">readonly</span> DependencyProperty IsTranslateDisabledProperty =\n            DependencyProperty.Register(<span style=\"color:#A31515;\">&quot;IsTranslateDisabled&quot;</span>, <span style=\"color:Blue;\">typeof</span>(<span style=\"color:Blue;\">bool</span>), <span style=\"color:Blue;\">typeof</span>(TouchRulerCanvas));\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsScaleDisabled\n        {\n            <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> (<span style=\"color:Blue;\">bool</span>)GetValue(IsScaleDisabledProperty); }\n            <span style=\"color:Blue;\">set</span> { SetValue(IsScaleDisabledProperty, value); }\n        }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">readonly</span> DependencyProperty IsScaleDisabledProperty =\n            DependencyProperty.Register(<span style=\"color:#A31515;\">&quot;IsScaleDisabled&quot;</span>, <span style=\"color:Blue;\">typeof</span>(<span style=\"color:Blue;\">bool</span>), <span style=\"color:Blue;\">typeof</span>(TouchRulerCanvas));\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Bir Child&#39;ın en az k&#252;&#231;&#252;lebildiği katsayı</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">double</span> MinScaleFactor { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Bir Child&#39;ın en falza b&#252;y&#252;yebildiği katsayı</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">double</span> MaxScaleFactor { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Kareli Kağıt A&#231;ık/Kapalı</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsRulerEnabled { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Arka plan resmi aktif</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> gereksiz iptal edildi bu fonksiyon</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsBackPicture { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> &#231;izilecek kareli kağıdın X aralığı</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> RulerX { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> &#231;izilecek kareli kağıdın Y aralığı</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> RulerY { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> &#231;izilecek kareli kağıdın kare&#231;izgilerinin rengi</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> SolidColorBrush RulerColor { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Kareli kağıdın &#231;izgilerinin kalınlığı</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> RulerThickness { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n        <span style=\"color:Blue;\">private</span> FrameworkElement _last;\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> En Yukarıda duran eleman (Image veya MediaElement vb.)</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> FrameworkElement last\n        {\n            <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _last; }\n            <span style=\"color:Blue;\">set</span>\n            {\n                <span style=\"color:Blue;\">if</span> (value == <span style=\"color:Blue;\">this</span>) <span style=\"color:Blue;\">return</span>;\n                <span style=\"color:Blue;\">if</span> (_last != value)\n                {\n                    <span style=\"color:Blue;\">if</span> (_last != <span style=\"color:Blue;\">null</span>) Canvas.SetZIndex(_last, 0);\n                    Canvas.SetZIndex(value, 2);\n                    _last = value;\n                    OnlastChanged();\n                }\n            }\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">bool</span> _isTouched = <span style=\"color:Blue;\">false</span>;\n        <span style=\"color:Blue;\">private</span> DateTime _firstClickTime = DateTime.Now;\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">bool</span> _isDoubleClick\n        {\n            <span style=\"color:Blue;\">get</span>\n            {\n                DateTime d = DateTime.Now;\n                <span style=\"color:Blue;\">if</span> (d.Subtract(_firstClickTime).TotalMilliseconds &lt; 200)\n                {\n                    _firstClickTime = DateTime.Now;\n                    <span style=\"color:Blue;\">return</span> _isTouched;\n                }\n\n                _firstClickTime = DateTime.Now;\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">false</span>;\n            }\n        }\n\n        <span style=\"color:Blue;\">public</span> TouchRulerCanvas()\n        {\n            <span style=\"color:Blue;\">this</span>.TouchDown += <span style=\"color:Blue;\">new</span> EventHandler&lt;TouchEventArgs&gt;(TouchRulerCanvas_TouchDown);\n            <span style=\"color:Blue;\">this</span>.TouchUp += <span style=\"color:Blue;\">new</span> EventHandler&lt;TouchEventArgs&gt;(TouchRulerCanvas_TouchUp);\n\n            <span style=\"color:Blue;\">this</span>.ManipulationStarting += <span style=\"color:Blue;\">new</span> EventHandler&lt;ManipulationStartingEventArgs&gt;(image_ManipulationStarting);\n            <span style=\"color:Blue;\">this</span>.ManipulationDelta += <span style=\"color:Blue;\">new</span> EventHandler&lt;ManipulationDeltaEventArgs&gt;(image_ManipulationDelta);\n            <span style=\"color:Green;\">//inertia </span>\n            <span style=\"color:Blue;\">this</span>.ManipulationInertiaStarting += <span style=\"color:Blue;\">new</span> EventHandler&lt;ManipulationInertiaStartingEventArgs&gt;(canvas_ManipulationInertiaStarting);\n            <span style=\"color:Green;\">//Mouse events handling when no touch device activated</span>\n            <span style=\"color:Blue;\">this</span>.MouseLeftButtonDown += <span style=\"color:Blue;\">new</span> MouseButtonEventHandler(TouchRulerCanvas_MouseLeftButtonDown);\n            <span style=\"color:Blue;\">this</span>.MouseLeftButtonUp += <span style=\"color:Blue;\">new</span> MouseButtonEventHandler(TouchRulerCanvas_MouseLeftButtonUp);\n            <span style=\"color:Blue;\">this</span>.MouseMove += <span style=\"color:Blue;\">new</span> MouseEventHandler(TouchRulerCanvas_MouseMove);\n            <span style=\"color:Blue;\">this</span>.MouseWheel += <span style=\"color:Blue;\">new</span> MouseWheelEventHandler(TouchRulerCanvas_MouseWheel);\n        }\n\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> OnRender(System.Windows.Media.DrawingContext dc)\n        {\n            <span style=\"color:Blue;\">base</span>.OnRender(dc);\n\n            <span style=\"color:Blue;\">if</span> (IsRulerEnabled)\n            {\n                Pen pen = <span style=\"color:Blue;\">new</span> Pen(RulerColor, RulerThickness);\n                <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> x = RulerX; x &lt; <span style=\"color:Blue;\">this</span>.ActualWidth; x += RulerX)\n                    dc.DrawLine(pen, <span style=\"color:Blue;\">new</span> Point(x, 0), <span style=\"color:Blue;\">new</span> Point(x, <span style=\"color:Blue;\">this</span>.ActualHeight));\n\n                <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> y = RulerY; y &lt; <span style=\"color:Blue;\">this</span>.ActualHeight; y += RulerY)\n                    dc.DrawLine(pen, <span style=\"color:Blue;\">new</span> Point(0, y), <span style=\"color:Blue;\">new</span> Point(<span style=\"color:Blue;\">this</span>.ActualWidth, y));\n            }\n        }\n\n        <span style=\"color:Blue;\">#region</span> Mouse Events\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> TouchRulerCanvas_MouseLeftButtonDown(<span style=\"color:Blue;\">object</span> sender, MouseEventArgs e)\n        {\n<span style=\"color:Blue;\">#if</span> DEBUG\n            _isTouched = <span style=\"color:Blue;\">true</span>;\n            FirstMouseCoor = e.GetPosition(<span style=\"color:Blue;\">this</span>);\n            <span style=\"color:Blue;\">var</span> uie = e.Source <span style=\"color:Blue;\">as</span> FrameworkElement;\n            <span style=\"color:Blue;\">if</span> (uie == <span style=\"color:Blue;\">this</span>) <span style=\"color:Blue;\">return</span>;\n            <span style=\"color:Blue;\">if</span> (uie != <span style=\"color:Blue;\">null</span>)\n            {\n                <span style=\"color:Green;\">//if (last != null) Canvas.SetZIndex(last, 0);</span>\n                <span style=\"color:Green;\">//Canvas.SetZIndex(uie, 2);</span>\n                last = uie;\n\n                DoubleClickBehavior();\n            }\n<span style=\"color:Blue;\">#endif</span>\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> TouchRulerCanvas_MouseLeftButtonUp(<span style=\"color:Blue;\">object</span> sender, MouseButtonEventArgs e)\n        {\n<span style=\"color:Blue;\">#if</span> DEBUG\n            _isTouched = <span style=\"color:Blue;\">false</span>;\n<span style=\"color:Blue;\">#endif</span>\n        }\n\n        <span style=\"color:Blue;\">private</span> Point FirstMouseCoor { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> TouchRulerCanvas_MouseMove(<span style=\"color:Blue;\">object</span> sender, MouseEventArgs e)\n        {\n<span style=\"color:Blue;\">#if</span> DEBUG\n            <span style=\"color:Blue;\">if</span> (e.LeftButton == MouseButtonState.Pressed)\n            {\n                <span style=\"color:Blue;\">if</span> (IsTranslateDisabled) <span style=\"color:Blue;\">return</span>; <span style=\"color:Green;\">//Eğer bu canvas i&#231;in kaydırma kapalı ise</span>\n                <span style=\"color:Blue;\">var</span> element = last;\n                <span style=\"color:Blue;\">var</span> matrix = ((MatrixTransform)element.RenderTransform).Matrix;\n                <span style=\"color:Blue;\">if</span> (element <span style=\"color:Blue;\">as</span> TouchImage != <span style=\"color:Blue;\">null</span>)\n                    <span style=\"color:Blue;\">if</span> ((element <span style=\"color:Blue;\">as</span> TouchImage).IsTranslateDisabled) <span style=\"color:Blue;\">return</span>; <span style=\"color:Green;\">// eğer bu eleman i&#231;in kaydırma kapalı ise</span>\n                matrix.Translate(e.GetPosition(<span style=\"color:Blue;\">this</span>).X - FirstMouseCoor.X, e.GetPosition(<span style=\"color:Blue;\">this</span>).Y - FirstMouseCoor.Y);\n                FirstMouseCoor = e.GetPosition(<span style=\"color:Blue;\">this</span>);\n                <span style=\"color:Blue;\">try</span>\n                {\n                    ((MatrixTransform)element.RenderTransform).Matrix = matrix;\n                }\n                <span style=\"color:Blue;\">catch</span> { }\n\n                Rect containingRect = <span style=\"color:Blue;\">new</span> Rect((<span style=\"color:Blue;\">this</span>).RenderSize);\n                Rect shapeBounds = element.RenderTransform.TransformBounds(<span style=\"color:Blue;\">new</span> Rect(element.RenderSize));\n                <span style=\"color:Blue;\">if</span> (!containingRect.Contains(shapeBounds) &amp;&amp; !containingRect.IntersectsWith(shapeBounds))\n                    OnthrownOut(element);\n            }\n<span style=\"color:Blue;\">#endif</span>\n        }\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">double</span> _zoom = 1.0;\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">double</span> Zoom\n        {\n            <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _zoom; }\n            <span style=\"color:Blue;\">set</span> { _zoom = value; }\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> TouchRulerCanvas_MouseWheel(<span style=\"color:Blue;\">object</span> sender, MouseWheelEventArgs e)\n        {\n<span style=\"color:Blue;\">#if</span> DEBUG\n            <span style=\"color:Blue;\">if</span> (IsScaleDisabled) <span style=\"color:Blue;\">return</span>; <span style=\"color:Green;\">//Scale olayı bu canvas i&#231;in kapalı ise</span>\n            <span style=\"color:Blue;\">var</span> element = last <span style=\"color:Blue;\">as</span> FrameworkElement;\n            <span style=\"color:Blue;\">if</span> (element <span style=\"color:Blue;\">as</span> TouchImage != <span style=\"color:Blue;\">null</span>)\n                <span style=\"color:Blue;\">if</span> ((element <span style=\"color:Blue;\">as</span> TouchImage).IsScaleDisable) <span style=\"color:Blue;\">return</span>; <span style=\"color:Green;\">// scale olayı bu canvas i&#231;in kapalı ise</span>\n\n            <span style=\"color:Blue;\">var</span> matrix = ((MatrixTransform)element.RenderTransform).Matrix;\n            Point center = <span style=\"color:Blue;\">new</span> Point(element.ActualWidth / 2, element.ActualHeight / 2);\n            center = matrix.Transform(center);\n            Zoom += Zoom * (e.Delta / 1200.0f);\n            matrix.ScaleAt((<span style=\"color:Blue;\">double</span>)(Zoom), (<span style=\"color:Blue;\">double</span>)(Zoom), center.X, center.Y);\n            Zoom = 1;\n\n            FirstMouseCoor = e.GetPosition(<span style=\"color:Blue;\">this</span>);\n            <span style=\"color:Blue;\">try</span>\n            {\n                ((MatrixTransform)element.RenderTransform).Matrix = matrix;\n            }\n            <span style=\"color:Blue;\">catch</span> { }\n<span style=\"color:Blue;\">#endif</span>\n        }\n        <span style=\"color:Blue;\">#endregion</span>\n\n        <span style=\"color:Blue;\">#region</span> Touch Events\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> canvas_ManipulationInertiaStarting(<span style=\"color:Blue;\">object</span> sender, ManipulationInertiaStartingEventArgs e)\n        {\n            <span style=\"color:Green;\">// Decrease the velocity of the Rectangle&#39;s movement by </span>\n            <span style=\"color:Green;\">// 10 inches per second every second.</span>\n            <span style=\"color:Green;\">// (10 inches * 96 DIPS per inch / 1000ms^2)</span>\n            e.TranslationBehavior = <span style=\"color:Blue;\">new</span> InertiaTranslationBehavior()\n            {\n                InitialVelocity = e.InitialVelocities.LinearVelocity,\n                DesiredDeceleration = 10.0 * 96.0 / (1000.0 * 1000.0)\n            };\n\n            <span style=\"color:Green;\">// Decrease the velocity of the Rectangle&#39;s resizing by </span>\n            <span style=\"color:Green;\">// 0.1 inches per second every second.</span>\n            <span style=\"color:Green;\">// (0.1 inches * 96 DIPS per inch / (1000ms^2)</span>\n            e.ExpansionBehavior = <span style=\"color:Blue;\">new</span> InertiaExpansionBehavior()\n            {\n                InitialVelocity = e.InitialVelocities.ExpansionVelocity / 4,\n                DesiredDeceleration = 0.01 * 96 / 1000.0 * 1000.0\n            };\n\n            <span style=\"color:Green;\">// Decrease the velocity of the Rectangle&#39;s rotation rate by </span>\n            <span style=\"color:Green;\">// 2 rotations per second every second.</span>\n            <span style=\"color:Green;\">// (2 * 360 degrees / (1000ms^2)</span>\n            e.RotationBehavior = <span style=\"color:Blue;\">new</span> InertiaRotationBehavior()\n            {\n                InitialVelocity = e.InitialVelocities.AngularVelocity,\n                DesiredDeceleration = 72 / (1000.0 * 1000.0)\n            };\n            e.Handled = <span style=\"color:Blue;\">true</span>;\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> image_ManipulationStarting(<span style=\"color:Blue;\">object</span> sender, ManipulationStartingEventArgs e)\n        {\n            <span style=\"color:Blue;\">var</span> uie = e.Source <span style=\"color:Blue;\">as</span> FrameworkElement;\n            <span style=\"color:Blue;\">if</span> (uie == <span style=\"color:Blue;\">this</span>) <span style=\"color:Blue;\">return</span>;\n\n            <span style=\"color:Blue;\">if</span> (uie != <span style=\"color:Blue;\">null</span>)\n                last = uie;\n\n            <span style=\"color:Green;\">//canvas is the parent of the image starting the manipulation;</span>\n            <span style=\"color:Green;\">//Container does not have to be parent, but that is the most common scenario</span>\n            e.ManipulationContainer = <span style=\"color:Blue;\">this</span>;\n            e.Handled = <span style=\"color:Blue;\">true</span>;\n            <span style=\"color:Green;\">// you could set the mode here too </span>\n            <span style=\"color:Green;\">// e.Mode = ManipulationModes.All;              </span>\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> image_ManipulationDelta(<span style=\"color:Blue;\">object</span> sender, ManipulationDeltaEventArgs e)\n        {\n            <span style=\"color:Green;\">//this just gets the source. </span>\n            <span style=\"color:Green;\">// I cast it to FE because I wanted to use ActualWidth for Center. You could try RenderSize as alternate</span>\n            <span style=\"color:Blue;\">var</span> element = e.Source <span style=\"color:Blue;\">as</span> FrameworkElement;\n            <span style=\"color:Blue;\">if</span> (element != <span style=\"color:Blue;\">null</span>)\n            {\n                <span style=\"color:Green;\">//e.DeltaManipulation has the changes </span>\n                <span style=\"color:Green;\">// Scale is a delta multiplier; 1.0 is last size,  (so 1.1 == scale 10%, 0.8 = shrink 20%) </span>\n                <span style=\"color:Green;\">// Rotate = Rotation, in degrees</span>\n                <span style=\"color:Green;\">// Pan = Translation, == Translate offset, in Device Independent Pixels </span>\n                <span style=\"color:Blue;\">var</span> deltaManipulation = e.DeltaManipulation;\n                <span style=\"color:Blue;\">var</span> matrix = ((MatrixTransform)element.RenderTransform).Matrix;\n                Point center = <span style=\"color:Blue;\">new</span> Point(e.ManipulationOrigin.X, e.ManipulationOrigin.Y);\n\n                <span style=\"color:Green;\">// this will be a Zoom. </span>\n                <span style=\"color:Blue;\">if</span> (!IsScaleDisabled) <span style=\"color:Green;\">// scale is enabled</span>\n                {\n                    <span style=\"color:Blue;\">if</span> (element <span style=\"color:Blue;\">as</span> TouchImage != <span style=\"color:Blue;\">null</span>)\n                        <span style=\"color:Blue;\">if</span> ((element <span style=\"color:Blue;\">as</span> TouchImage).IsScaleDisable) <span style=\"color:Blue;\">return</span>; <span style=\"color:Green;\">// scale olayı bu canvas i&#231;in kapalı ise</span>\n                    matrix.ScaleAt(deltaManipulation.Scale.X, deltaManipulation.Scale.Y, center.X, center.Y);\n                }\n                <span style=\"color:Green;\">// Rotation </span>\n                <span style=\"color:Blue;\">if</span> (!IsRotateDisabled) <span style=\"color:Green;\">// rotation is enabled</span>\n                {\n                    <span style=\"color:Blue;\">if</span> (element <span style=\"color:Blue;\">as</span> TouchImage != <span style=\"color:Blue;\">null</span>)\n                        <span style=\"color:Blue;\">if</span> ((element <span style=\"color:Blue;\">as</span> TouchImage).IsRotateDisabled) <span style=\"color:Blue;\">return</span>; <span style=\"color:Green;\">// scale olayı bu canvas i&#231;in kapalı ise</span>\n                    matrix.RotateAt(e.DeltaManipulation.Rotation, center.X, center.Y);\n                }\n                <span style=\"color:Green;\">// Translation (pan) </span>\n                <span style=\"color:Blue;\">if</span> (!IsTranslateDisabled) <span style=\"color:Green;\">// translation is enabled</span>\n                {\n                    <span style=\"color:Blue;\">if</span> (element <span style=\"color:Blue;\">as</span> TouchImage != <span style=\"color:Blue;\">null</span>)\n                        <span style=\"color:Blue;\">if</span> ((element <span style=\"color:Blue;\">as</span> TouchImage).IsTranslateDisabled) <span style=\"color:Blue;\">return</span>; <span style=\"color:Green;\">// scale olayı bu canvas i&#231;in kapalı ise</span>\n                    matrix.Translate(e.DeltaManipulation.Translation.X, e.DeltaManipulation.Translation.Y);\n                }\n\n                <span style=\"color:Green;\">//Determinant = 1 ise ozaman b&#252;y&#252;kl&#252;k geldiği b&#252;y&#252;kl&#252;kt&#252;r.</span>\n                <span style=\"color:Green;\">//Determinant bir child &#39; ın k&#252;&#231;&#252;ltme ve b&#252;y&#252;tme fakt&#246;r&#252;d&#252;r.</span>\n                <span style=\"color:Blue;\">if</span> ((matrix.Determinant &gt;= MinScaleFactor) &amp;&amp; (matrix.Determinant &lt;= MaxScaleFactor || MaxScaleFactor == 0))\n                    ((MatrixTransform)element.RenderTransform).Matrix = matrix;\n\n                <span style=\"color:Blue;\">var</span> videoPlayer = element <span style=\"color:Blue;\">as</span> TouchVideoPlayer;\n                <span style=\"color:Blue;\">if</span> (videoPlayer != <span style=\"color:Blue;\">null</span>)\n                    videoPlayer.Volume = Math.Max(0, Math.Min(matrix.Determinant, 1)); <span style=\"color:Green;\">//bind the volume to the render size of the video in the screen</span>\n\n                e.Handled = <span style=\"color:Blue;\">true</span>;\n\n                <span style=\"color:Blue;\">if</span> (e.IsInertial)\n                {\n                    Rect containingRect = <span style=\"color:Blue;\">new</span> Rect(((FrameworkElement)e.ManipulationContainer).RenderSize);\n                    Rect shapeBounds = element.RenderTransform.TransformBounds(<span style=\"color:Blue;\">new</span> Rect(element.RenderSize));\n                    <span style=\"color:Green;\">// Check if the element is completely in the window.</span>\n                    <span style=\"color:Green;\">// If it is not and intertia is occuring, stop the manipulation.</span>\n                    <span style=\"color:Blue;\">if</span> (e.IsInertial &amp;&amp; !containingRect.Contains(shapeBounds) &amp;&amp; !containingRect.IntersectsWith(shapeBounds))\n                    {\n                        <span style=\"color:Green;\">//Report that we have gone over our boundary </span>\n                        e.ReportBoundaryFeedback(e.DeltaManipulation);\n                        OnthrownOut(element);\n                        <span style=\"color:Green;\">// comment out this line to see the Window &#39;shake&#39; or &#39;bounce&#39; </span>\n                        <span style=\"color:Green;\">// similar to Win32 Windows when they reach a boundary; this comes for free in .NET 4                </span>\n                        e.Complete();\n                    }\n                }\n            }\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> TouchRulerCanvas_TouchDown(<span style=\"color:Blue;\">object</span> sender, TouchEventArgs e)\n        {\n            _isTouched = <span style=\"color:Blue;\">true</span>;\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> TouchRulerCanvas_TouchUp(<span style=\"color:Blue;\">object</span> sender, TouchEventArgs e)\n        {\n            DoubleClickBehavior();\n        }\n\n        <span style=\"color:Blue;\">#endregion</span>\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> DoubleClickBehavior()\n        {\n            <span style=\"color:Blue;\">if</span> (_isDoubleClick)\n            {\n                last.RenderTransform = <span style=\"color:Blue;\">new</span> MatrixTransform(1, 0, 0, 1, 0, 0);\n                last.Height = <span style=\"color:Blue;\">this</span>.ActualHeight;\n\n                <span style=\"color:Blue;\">if</span> ((last <span style=\"color:Blue;\">as</span> TouchVideoPlayer) != <span style=\"color:Blue;\">null</span>)\n                {\n                    last.Width = <span style=\"color:Blue;\">this</span>.ActualWidth;\n                    (last <span style=\"color:Blue;\">as</span> TouchVideoPlayer).Volume = 1;\n                }\n                <span style=\"color:Blue;\">else</span>\n                {\n                    <span style=\"color:Blue;\">double</span> pWidth = last.Height * last.ActualWidth / last.ActualHeight;\n                    last.RenderTransform = <span style=\"color:Blue;\">new</span> MatrixTransform(1, 0, 0, 1, (<span style=\"color:Blue;\">this</span>.ActualWidth - pWidth) / 2, 0);\n                }\n            }\n\n            _isTouched = <span style=\"color:Blue;\">false</span>;\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Add_A_Picture(<span style=\"color:Blue;\">string</span> MyFileName, <span style=\"color:Blue;\">int</span> pWitdh)\n        {\n            TouchImage MyImage = <span style=\"color:Blue;\">new</span> TouchImage();\n            BitmapImage src = <span style=\"color:Blue;\">new</span> BitmapImage();\n            src.BeginInit();\n            src.UriSource = <span style=\"color:Blue;\">new</span> Uri(MyFileName, UriKind.RelativeOrAbsolute);\n            src.DecodePixelWidth = pWitdh;\n            src.EndInit();\n\n            <span style=\"color:Blue;\">int</span> MyImageNo = <span style=\"color:Blue;\">this</span>.Children.Count;\n\n            MyImage.Source = src;\n            MyImage.Width = pWitdh;\n            MyImage.MinWidth = pWitdh;\n            MyImage.IsManipulationEnabled = <span style=\"color:Blue;\">true</span>;\n            MyImage.Name = <span style=\"color:#A31515;\">&quot;Image&quot;</span> + MyImageNo.ToString();\n            MyImage.Stretch = Stretch.UniformToFill;\n            MyImage.RenderTransform = <span style=\"color:Blue;\">new</span> MatrixTransform(1, 0, 0, 1, 200 + 10 * MyImageNo, 200 + 10 * MyImageNo);\n            RenderOptions.SetBitmapScalingMode(MyImage, BitmapScalingMode.HighQuality);\n\n            <span style=\"color:Blue;\">this</span>.Children.Add(MyImage);\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Add_A_Picture(<span style=\"color:Blue;\">string</span> MyFileName)\n        {\n            Add_A_Picture(MyFileName, <span style=\"color:Blue;\">new</span> Guid());\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Add_A_Picture(<span style=\"color:Blue;\">string</span> MyFileName, Guid thumbID)\n        {\n            TouchImage MyImage = <span style=\"color:Blue;\">new</span> TouchImage(thumbID);\n            BitmapImage src = <span style=\"color:Blue;\">new</span> BitmapImage();\n            src.BeginInit();\n            src.UriSource = <span style=\"color:Blue;\">new</span> Uri(MyFileName, UriKind.RelativeOrAbsolute);\n            src.EndInit();\n            <span style=\"color:Blue;\">if</span> (src.PixelHeight &gt; 3000) src.DecodePixelHeight = 3000;\n\n            <span style=\"color:Blue;\">int</span> MyImageNo = <span style=\"color:Blue;\">this</span>.Children.Count;\n\n            MyImage.Source = src;\n            MyImage.Height = 300;\n            MyImage.IsManipulationEnabled = <span style=\"color:Blue;\">true</span>;\n            MyImage.Name = <span style=\"color:#A31515;\">&quot;Image&quot;</span> + MyImageNo.ToString();\n            MyImage.Stretch = Stretch.UniformToFill;\n            MyImage.RenderTransform = <span style=\"color:Blue;\">new</span> MatrixTransform(1, 0, 0, 1, 200 + 10 * MyImageNo, 200 + 10 * MyImageNo);\n            RenderOptions.SetBitmapScalingMode(MyImage, BitmapScalingMode.HighQuality);\n\n            <span style=\"color:Blue;\">this</span>.Children.Add(MyImage);\n        }\n\n        <span style=\"color:Blue;\">private</span> TouchImage FindPicture(Guid thumbID)\n        {\n            <span style=\"color:Blue;\">foreach</span> (UIElement elem <span style=\"color:Blue;\">in</span> <span style=\"color:Blue;\">this</span>.Children)\n            {\n                TouchImage image = elem <span style=\"color:Blue;\">as</span> TouchImage;\n\n                <span style=\"color:Blue;\">if</span> (image != <span style=\"color:Blue;\">null</span>)\n                    <span style=\"color:Blue;\">if</span> (image.ThumbID == thumbID)\n                        <span style=\"color:Blue;\">return</span> image;\n            }\n\n            <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">null</span>;\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> RemovePicture(TouchImage image)\n        {\n            <span style=\"color:Blue;\">this</span>.Children.Remove(image);\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> RemovePicture(Guid thumID)\n        {\n            TouchImage image = FindPicture(thumID);\n            RemovePicture(image);\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Add_A_Video(<span style=\"color:Blue;\">string</span> MyFileName, <span style=\"color:Blue;\">bool</span> autoStart, Guid thumbID)\n        {\n            TouchVideoPlayer myPlayer = <span style=\"color:Blue;\">new</span> TouchVideoPlayer(MyFileName, autoStart, thumbID);\n\n            <span style=\"color:Blue;\">int</span> MyVideoNo = <span style=\"color:Blue;\">this</span>.Children.Count;\n            myPlayer.IsManipulationEnabled = <span style=\"color:Blue;\">true</span>;\n            myPlayer.RenderTransform = <span style=\"color:Blue;\">new</span> MatrixTransform(1, 0, 0, 1, 200 + 10 * MyVideoNo, 200 + 10 * MyVideoNo);\n\n            <span style=\"color:Blue;\">this</span>.Children.Add(myPlayer);\n        }\n\n        <span style=\"color:Blue;\">private</span> TouchVideoPlayer FindVideoPlayer(Guid thumbID)\n        {\n            <span style=\"color:Blue;\">foreach</span> (UIElement elem <span style=\"color:Blue;\">in</span> <span style=\"color:Blue;\">this</span>.Children)\n            {\n                TouchVideoPlayer videoplayer = elem <span style=\"color:Blue;\">as</span> TouchVideoPlayer;\n\n                <span style=\"color:Blue;\">if</span> (videoplayer != <span style=\"color:Blue;\">null</span>)\n                    <span style=\"color:Blue;\">if</span> (videoplayer.ThumbID == thumbID)\n                        <span style=\"color:Blue;\">return</span> videoplayer;\n            }\n\n            <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">null</span>;\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> RemoveVideoPlayer(TouchVideoPlayer player)\n        {\n            <span style=\"color:Blue;\">this</span>.Children.Remove(player);\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> RemoveVideoPlayer(Guid thumID)\n        {\n            TouchVideoPlayer player = FindVideoPlayer(thumID);\n            RemoveVideoPlayer(player);\n        }\n    }\n}\r\n</pre></div><br />This canvas expects image files from the type ouf <i>TouchImage</i> which is built in the project inherited from XAML Image like this:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> System;\n<span style=\"color:Blue;\">using</span> System.Collections.Generic;\n<span style=\"color:Blue;\">using</span> System.Linq;\n<span style=\"color:Blue;\">using</span> System.Text;\n<span style=\"color:Blue;\">using</span> System.Windows.Controls;\n<span style=\"color:Blue;\">using</span> System.Windows;\n<span style=\"color:Blue;\">using</span> System.Windows.Media;\n<span style=\"color:Blue;\">using</span> System.Windows.Input;\n<span style=\"color:Blue;\">using</span> System.Windows.Media.Imaging;\n<span style=\"color:Blue;\">using</span> System.Windows.Shapes;\n\n\n<span style=\"color:Blue;\">namespace</span> USM_TouchControls\n{\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> TouchImage : Image, ITouchElement\n    {\n        <span style=\"color:Blue;\">#region</span> TouchElementInterface Members\n        <span style=\"color:Blue;\">public</span> Guid ThumbID { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsMaximized { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">double</span> oHeight { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">double</span> oWidth { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Blue;\">#endregion</span>\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> 1. Touch</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> TouchPoint IlkDokunus { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> 2. Touch</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> TouchPoint IkinciDokunus { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> 1. ve 2. Touchların Analitik Ortalaması</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> Point TouchCenter { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Translate Edilemez mi?</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsTranslateDisabled { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Rotate Edilemez mi?</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsRotateDisabled { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Scale Edilemez mi?</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> IsScaleDisable { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Constructor</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> TouchImage()\n        {\n            <span style=\"color:Green;\">//Daron Y&#246;ndemden aldık</span>\n            <span style=\"color:Green;\">//Touch.FrameReported += new TouchFrameEventHandler(Touch_FrameReported);</span>\n        }\n\n        <span style=\"color:Blue;\">public</span> TouchImage(Guid thumbID)\n            : <span style=\"color:Blue;\">this</span>()\n        {\n            ThumbID = thumbID;\n        }\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Bir touch algılanırsa</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;sender&quot;&gt;</span><span style=\"color:Gray;\">&lt;/param&gt;</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;e&quot;&gt;</span><span style=\"color:Gray;\">&lt;/param&gt;</span>\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> Touch_FrameReported(<span style=\"color:Blue;\">object</span> sender, TouchFrameEventArgs e)\n        {\n            <span style=\"color:Green;\">//Point _FirstTouch = new Point(0, 0);</span>\n            <span style=\"color:Green;\">//Point _SecondTouch = new Point(0, 0);</span>\n            <span style=\"color:Blue;\">if</span> ((e.GetPrimaryTouchPoint(<span style=\"color:Blue;\">this</span>) != <span style=\"color:Blue;\">null</span>))\n            {\n                IlkDokunus = e.GetPrimaryTouchPoint(<span style=\"color:Blue;\">this</span>);\n                <span style=\"color:Blue;\">if</span> (IlkDokunus.Action == TouchAction.Down)\n                {\n                    <span style=\"color:Green;\">//_FirstTouch = new Point(0, 0);</span>\n                    <span style=\"color:Green;\">//_SecondTouch = new Point(0, 0);</span>\n                }\n                <span style=\"color:Blue;\">else</span> <span style=\"color:Blue;\">if</span> (IlkDokunus.Action == TouchAction.Move)\n                {\n                    <span style=\"color:Blue;\">if</span> (e.GetTouchPoints(<span style=\"color:Blue;\">this</span>).Count &gt; 1)\n                    {\n                        IkinciDokunus = e.GetTouchPoints(<span style=\"color:Blue;\">this</span>)[1];\n                    }\n                }\n                <span style=\"color:Blue;\">if</span> (IkinciDokunus != <span style=\"color:Blue;\">null</span>)\n                {\n\n                    <span style=\"color:Blue;\">var</span> matrix = ((MatrixTransform)<span style=\"color:Blue;\">this</span>.RenderTransform).Matrix;\n                    TouchCenter = matrix.Transform(\n                        AnaliticGeometryHelper.CenterPoint(\n                            IlkDokunus.Position,\n                            IkinciDokunus.Position\n                        )\n                    );\n                }\n            }\n        }\n\n\n    }\n}\r\n</pre></div><br />This canvas expects the video files, within a video player. Also a base video player is built-in in this project. It is a XAML design and could be styled. It can be observed in the Source Code tab.<br />\n<h2>follow me on twitter: <a href=\"http://twitter.com/oguzkoroglu\">twitter.com/oguzkoroglu</a></h2>\r<h2>my linked in profile : <a href=\"http://tr.linkedin.com/in/oguzkoroglu/\">http://tr.linkedin.com/in/oguzkoroglu/</a></h2>\r<h2>my personal web site : <a href=\"http://oguzkoroglu.net/\">http://oguzkoroglu.net/</a></h2></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2014-04-06T03:27:29.693-07:00"
}