{
  "ProjectName": "tripleA",
  "Title": "TripleA",
  "Description": "TripleA (Application Automation Api) provides building blocks for easily creating developer owned system & deployment smoke tests. \r\n\r\nUse these components directly or build your own business aware components to provide system level actions to use with your favourite test framework.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />TripleA &#40;Application Automation Api&#41; provides building blocks for easily creating developer owned system &#38; deployment smoke tests. <br /><br />Use these components directly or build your own business aware components to provide system level actions to use with your favourite test framework.<br />\n<h1>Get It</h1>\rBinaries available <i>only</i> as a set of <a href=\"http://nuget.org/packages?q=triplea\">NuGet packages</a>. Full source code available from the &quot;Source Code&quot; tab (HG repo).\n<ul><li><b>TripleA</b> package contains the core components and can be used for all test frameworks</li>\n<li><b>TripleA.StoryQ</b> package contains components that make it easier to use with the StoryQ framework.\n<ul><li>This will also install the <b>TripleA</b> and <b>StoryQ</b> packages</li></ul></li></ul>\n\n<h1>News</h1>\r<i>30th July 2014</i> In case you were wondering the project is alive and well but not under active development. I add to it as my personal requirements dictate but right now it covers my needs as it is. I am here monitoring it and will respond to requests/bugs/suggestions though so there is support if you need it! \n<h1>Overview</h1>\rA large number of &quot;bugs&quot; &amp; issues occur when software transitions from one environment to another, infrastructure, configuration, deployment and state problems can cause failures and inconsistent test results. Outside the comfort of a unit test there are <i>many</i> more &quot;variables&quot; that come into play.<br /><br />Exercising your software at an integration or system level proves that the software actually performs and delivers as expected...however, once you increase the scope of a test and multiple components or sub-systems are in the mix you need to ensure that each has the expected state prior to the test otherwise all you achieve is brittle tests that produce inconsistent results.<br /><br />There are a number of test frameworks and applications that can interact with software at a system level, eg: WatiN, Selenium etc but my experience with these tools is that they are often set up by skilled test engineers and then fall into disrepair as often the skills to maintain it are lost to the development team - not all testers are created equal and good test automation engineers are hard to come by!<br /><br />TripleA tries to bridge the gap to allow <i>developers</i> to easily write system smoke tests and deployment verification tests that &quot;prove&quot; the system is a &quot;good build&quot; and is operating sufficiently well that you can commit your test team to further in-depth testing - a very good summary can be found <a href=\"http://bit.ly/xuH2wP\">here</a> about how valuable rapid fail and feedback is.\n<ul><li>Use <b>your existing test framework</b> (NUnit, xUnit, MSpec, StoryQ etc) &amp; test runner .exe.</li>\n<li>Use TripleA components to Arrange, Act and Assert at a system level.</li>\n<li>Write coarse grained tests that prove the system is &quot;working&quot; at a basic level - eg: pages can be called, a web service responds, information can be read/written to the database.</li>\n<li>Assert that the infrastructure is configured correctly, that databases have the correct permissions set for your application.</li></ul>\n<br />To be clear, TripleA <b>is not a new test framework</b> - it just allows you to create reusable components for use in your <b>existing framework</b> that can manipulate your system state (arrange) and assert things about it.<br />\n<h2>Example</h2>\r<img src=\"http://dl.dropbox.com/u/7950568/Blog/Example.png\" /><br />This screenshot shows some real deployment tests in action. Here I&#39;m using plain old NUnit tests in a &quot;<a href=\"http://stevenharman.net/toward-a-better-use-of-context-specification\">Context/Specification</a>&quot; style.<br /><br />The tests cover two sub-systems, a web application and a windows service. Each has separate sub-components that we need to verify has been deployed correctly including database, file system permissions and service identity. As you can see, &quot;context/specification&quot; makes the test results layout easy to read and navigate.<br /><br />As <a href=\"http://jimblogdog.blogspot.co.uk/2010/10/introducingdeclarative-deployment.html\">I&#39;ve previously discussed</a> - this approach offers some really interesting benefits...\n<ol><li>It makes it very clear what is failing - you know immediately where to start investigating</li>\n<li>You can write these tests up front - TDD = Test Driven <i>Deployment</i>! As the developer you know what needs deploying so encapsulate this in a test, when it goes green you know this task has been accomplished!</li>\n<li>Using a test to declare the deployment requirements also enables you to hand off the <i>implementation</i> of the deployment to the best suited team member/group.</li></ol>\n<br />One of the problems that TripleA sets out to solve is to reduce the complexity and code required to quickly arrange, act and assert at a &quot;system&quot; level; the challenge is to wrap up quite complex arrange, act, assert blocks of code into simple one liners that can be used within your test framework. For instance the amount of code to call a web page, parse the html and assert something within it is not trivial - you want this wrapped up into the smallest repeatable parameterised statement possible...this is what TripleA delivers.<br /><br />In the above tests, the code to call the web application home page and assert it returns 200 OK...<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n_tripleA.GetUri(cfg =&gt;\n    {\n        cfg.Credentials = CredentialCache.DefaultCredentials;\n        cfg.Uri = <span style=\"color:#A31515;\">&quot;http://webserver/mrm&quot;</span>;\n        cfg.ExpectedStatus = HttpStatusCode.OK;\n    });\r\n</pre></div>...to check the database has the right user is simply...<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n_tripleA.SqlServerDatabaseHasUser(<span style=\"color:#A31515;\">&quot;DbConnectionName&quot;</span>, <span style=\"color:#A31515;\">@&quot;SomeDomain\\SomeUser&quot;</span>);\r\n</pre></div>...to check the windows service account has the correct folder permissions...<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n_tripleA.FolderPermissions(<span style=\"color:#A31515;\">@&quot;\\\\FileServer\\AppShare&quot;</span>, <span style=\"color:#A31515;\">@&quot;SomeDomain\\SomeUser&quot;</span>, AccessControlType.Allow, FileSystemRights.ListDirectory | FileSystemRights.Read);\r\n</pre></div><br />The real power of TripleA is that it can be fully customised to create arrange, act or assert extensions that encompass <i>your</i> domain. TripleA is designed around using extension methods so you can continue to use it as your system grows. You want your dev team to be able to roll new tests quickly so start building reusable components that are meaningful to your system, eg: &quot;add a new customer&quot;. TripleA provides some basic extensions but these can be wrapped up and parameterised so that they can be dropped into your tests to quickly arrange or assert something meaningful to your system.<br /><br />TripleA comes with a bunch of pre-installed extensions...the full list (and details on each one) can be found <a href=\"https://triplea.codeplex.com/wikipage?title=Core%20Extensions&referringTitle=Home\">here</a>. <br /><br />Want to know how you write your own extensions? <a href=\"https://triplea.codeplex.com/wikipage?title=Extending&referringTitle=Home\">This page</a> has all the info you need.<br /><br />The <a href=\"https://triplea.codeplex.com/documentation?referringTitle=Home\">documentation</a> page contains the full list of help pages to get you started with TripleA.</div><div class=\"ClearBoth\"></div>",
  "TagList": "smoke test,system test,Deployment,",
  "LastEdited": "2014-07-30T03:36:24.787-07:00"
}