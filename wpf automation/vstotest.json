{
  "ProjectName": "vstotest",
  "Title": "VSTO Test Automation",
  "Description": "Analyses and suggestions for possible approaches of UI automation for a Project involving VSTO solution",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1>What is VSTO?</h1>\r\n<p><span style=\"font-size:10pt; color:black\">Visual Studio Tools for Office (VSTO) is a set of development tools available in the form of a Visual Studio add-in (project templates) and a runtime that allows Office applications to host the .NET Framework Common\r\n Language Runtime (CLR) to expose their functionality via the .NET type system.</span></p>\r\n<p><span style=\"font-size:10pt; color:black\">This allows extensions to the Office applications to be written in CLI compliant languages as well as to use functionality and user interface constructs from Office applications in .NET applications.</span></p>\r\n<p><span style=\"font-size:10pt; color:black\">You can use the Microsoft Office developer tools in Visual Studio 2010 to&nbsp;create .NET Framework applications that extend Microsoft Office 2010 and the 2007 Microsoft Office system. These applications are also\r\n named Office solutions. </span></p>\r\n<p><span style=\"font-size:10pt; color:black\">The Office developer tools provide features that help you create Office solutions to suit a variety of business needs. The tools include project templates to help you create Office solutions by using Visual Basic\r\n or Visual C#, and visual designers that help you create custom user interfaces for your Office solutions.</span></p>\r\n<p><span style=\"font-size:10pt; color:black\">Visual Studio 2010 provides project templates you can use to create document-level customizations and application-level add-ins for Microsoft Office Word. You can use these solutions to automate Word, extend Word\r\n features</span><span style=\"font-size:10pt\">, <span style=\"color:black\">and customize the Word user interface (UI).</span></span></p>\r\n<p><strong><span style=\"font-size:11pt\">Coded-UI</span></strong></p>\r\n<p><span style=\"font-size:10pt\">Coded-UI is the out-of-box recording based test Automation tool provided in VSTS 2010. It is assumed here that the user will have a basic knowledge of the framework. This section focuses on using the coded-UI for creating test\r\n cases for Office applications, more specifically Word and Outlook. The workflow typically involves the following steps:</span></p>\r\n<ol>\r\n<li><span style=\"font-size:10pt\">Opening the word/outlook application </span></li><li><span style=\"font-size:10pt\">Navigate to the required tab in the ribbon</span>\r\n</li><li><span style=\"font-size:10pt\">Click the required button in the ribbon</span> </li></ol>\r\n<p><span style=\"font-size:10pt\">Alternatively, it is also feasible to add assertions in intermediate steps between the sequence of actions, for e.g. a test case may involve asserting the presence of a particular button /control and then clicking the button\r\n and verifying proper functionality.</span>&nbsp;</p>\r\n<h3>Analyses</h3>\r\n<p><span style=\"font-size:10pt\">During the test case automation of our Office 2010 project using VSTS 2010 Coded-UI tests, we faced the following issues:</span></p>\r\n<ol>\r\n<li><span style=\"font-size:10pt\"><span style=\"font-size:10pt\">Some action recordings failed, while trying to generate code, with the error &lsquo;unable to find UI Object&rsquo;. Even after much effort we were not able to find the root cause and consistent\r\n repro for this issue.</span></span> </li><li><span style=\"font-size:10pt\"><span style=\"font-size:10pt\"><span style=\"font-size:10pt\">While trying to add assertions for some controls, the same error, UI Object not found, was encountered. The root cause could not be found.</span></span></span>\r\n</li><li><span style=\"font-size:10pt\">While running the tests, they hung arbitrarily and got stuck for a long period. Sometimes they resumed automatically and passed/failed and many a times they had to be aborted and re run.</span>\r\n</li></ol>\r\n<p><span style=\"font-size:10pt\">As per the product team at Microsoft&nbsp;IDC, they are not supporting Coded-UI on Office application as of now due to which there may be issues and also this is not on priority for them as of now. Therefore, in spite of its\r\n ease of use, if used in isolation it is not the best framework for VSTO automation.</span></p>\r\n<h1>Approach Suggested for Automation</h1>\r\n<p><span style=\"font-size:10pt\">&nbsp;</span><span style=\"font-size:10pt\">Automation testing using Coded UI is a known playground for testers. But as soon as they find out that Coded UI doesn&rsquo;t support office applications, all doors seem closed for automation\r\n and the feasibility of automating such projects seem like a tough task and eventually a distant dream. The one instantly striking solution is building extensibility for the required office application, for which a sample is readily available\r\n</span><a href=\"http://blogs.msdn.com/b/gautamg/archive/2010/01/05/1-introduction-to-coded-ui-test-extensibility.aspx\"><span style=\"font-size:10pt\">online</span></a><span style=\"font-size:10pt\">. Typically, building such a framework for an automation framework\r\n needs a lot of investment of time for the specific endeavor, which needs a lot of research &amp; planning. Making this possible into consulting space is definitely a Himalayan effort.</span></p>\r\n<p><span style=\"font-size:10pt\">If we take our thinking towards a little lateral, we might ask this question, &ldquo;<em>How is the development done? Why don&rsquo;t I use the same methodology to verify the result? (This exactly is the manual tester&rsquo;s\r\n job!!)</em>&rdquo; The next question is, &ldquo;I<em>f the development is done event-driven, how are we going to drive the event?</em>&rdquo; The one answer to both the questions is, drive the events using\r\n<em>Coded-UI</em> and verify it using <em>VSTO programming</em>. This answer gives birth to a new flavor of UI automation. It can be called\r\n<em>VSTO Programming flavored Coded UI automation</em>.</span></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-05-01T03:25:02.81-07:00"
}