{
  "ProjectName": "xamlmvp",
  "Title": "Xaml Mvp for Windows Phone 7",
  "Description": "With Xaml Mvp you can create Windows Phone 7 applications based on the MVP pattern. By seperating Data from Behaviour you still get the benefit of MVVM without your View Model becoming a fat-controller.\r\n\r\nSilverlight and WPF coming soon!\r\nDeveloped using C#",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />With Xaml Mvp you can create Windows Phone 7 applications based on the MVP pattern. By seperating Data from Behaviour you still get the benefit of MVVM without your View Model becoming a fat-controller.<br /><br />Silverlight and WPF coming soon&#33;<br />Developed using C&#35;<br /><br />Visit the <a href=\"https://xamlmvp.codeplex.com/documentation?referringTitle=Home\">documentation</a><br /><br /><b>Features v1.3 and 1.4 available on nuget (Install-Package xmvp)</b><br />\n<ul><li>No longer requires MvpApplication use MvpApplicationService instead. This allows the App.xaml.cs to remain untouched.</li>\n<li>Nuget installs MvpApplicationService into App.xaml</li>\n<li>Nuget installs Project Item templates Mvp Page and Mvp Control</li>\n<li>All other features from v1.2 remain intact.</li></ul>\n<br /><b>Features v1.2 /source only/</b><br />\n<ul><li>Beta version of Silverlight support with samples to come.</li>\n<li>Blend and Designer supported</li>\n<li>Create Phone Application Pages using the MvpPage type</li>\n<li>Create User Controls using the MvpControl type</li>\n<li>Let the framework guide your process with the MvpApplication type.</li>\n<li>/breaking change/ Bind Views to Presenters in XAML using the View Attached property: mvp:View.Presenter=&quot;NameSpace.Type&quot; due to an issue with Type.GetType in silverlight we now find the target Presenter through the presenter binder collection. This means you don&#39;t need to specify the assembly name anymore. /breaking change/.</li>\n<li>Create Hydrators to survive Tombstones</li>\n<li>Use Data Binding for what it was meant for data and leave the presenter for the behaviour</li>\n<li>Editable`T implementation of IEditableObject to allow your models to revert back to their previous states on cancel events.</li>\n<li>Overridable URI mapping ready to go for &quot;/Views/{view}View.xaml&quot; and &quot;/Views/{noun}{verb}View.xaml&quot;</li></ul>\n<br /><b>Features v1.1</b><br />\n<ul><li>Blend and Designer supported</li>\n<li>Create Phone Application Pages using the MvpPage type</li>\n<li>Create User Controls using the MvpControl type</li>\n<li>Let the framework guide your process with the MvpApplication type.</li>\n<li>Bind Views to Presenters in XAML using the View Attached property: mvp:View.Presenter=&quot;NameSpace.Type, Assembly&quot;</li>\n<li>Create Hydrators to survive Tombstones</li>\n<li>Use Data Binding for what it was meant for data and leave the presenter for the behaviour</li>\n<li>Editable`T implementation of IEditableObject to allow your models to revert back to their previous states on cancel events.</li>\n<li>Overridable URI mapping ready to go for &quot;/Views/{view}View.xaml&quot; and &quot;/Views/{noun}{verb}View.xaml&quot;</li></ul>\n<br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "MVP,Windows Phone 7,Silverlight,WPF,",
  "LastEdited": "2011-06-22T05:23:19.937-07:00"
}