{
  "ProjectName": "codeduicodefirst",
  "Title": "Code First API Library, Scaffolding & Guidance for Coded UI Tests",
  "Description": "Code first Coded UI Tests for web apps. Library, Scaffolding and Guidance.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Introduction</h1>\rThe purpose of <i>Code First API Library, Scaffolding &amp; Guidance for Coded UI Tests</i> (here after just &quot;CodedUI CodeFirst&quot;) is to help you write more maintainable Coded UI tests for your web apps. <br /><br />When building Web UI Tests the way that&#39;s proposed here - you aren&#39;t going to be recording test scripts nor building UI Maps. Instead, you&#39;ll be writing Page Objects that are interacting with the elements on the page.<br /><br />CodedUI CodeFirst contains three major parts which can be used individually or together. When you&#39;re beginning a new project you&#39;ll probably use all these parts while in an existing project you might just pick a part that&#39;s applicable for your current situation. <br /><br />The three parts are\n<ul><li><a href=\"#ExtensionMethods\">Extensions methods</a> for UITestControl to simplify finding of and interaction with HtmlControls. (<a href=\"https://codeduicodefirst.codeplex.com/wikipage?title=api%20reference&referringTitle=Home\">Reference</a>)</li>\n<li><a href=\"#PageObject\">Page Object</a> pattern guidance and base classes</li>\n<li><a href=\"#Scaffolding\">TFS Test Case scaffolding</a></li></ul>\n\n<h1>Get started</h1>\r<h2>1. Install the NuGet package</h2>\r<img src=\"/projects/codeduicodefirst/fbbfb081-19c1-446b-99b3-c29805f69558\" alt=\"Install-Package&#32;CodedUI.CodeFirst\" title=\"Install-Package&#32;CodedUI.CodeFirst\" /><br />\n<h2>2. Set the base Uri</h2>\rCreate a <a href=\"#TestConfiguration\">TestConfiguration</a> class that implements and exports the IWebUITestConfiguration interface. Return the base Uri of your web app under test in the GetBaseUri method.<br /><br /><pre>\n[Export(typeof(IWebUITestConfiguration))]\npublic class TestConfiguration : IWebUITestConfiguration {\n        \n   public Uri GetBaseUri(string name) {\n      return new Uri(&quot;http://localhost:8080&quot;);\n   }\n}\n</pre><br />\n<h2>3. Create the Page Object</h2>\rCreate a <a href=\"#PageObject\">Page Object</a> that&#39;ll interact with the web page under test. Simply inherit the Page class and then write methods to interact with the page and to expose its state. The Browser property gives you access to the browser window and the extension methods give you an improved API for finding the controls.<br /><br /><pre>\npublic class Home : Page {\n   public bool MainMenuContainsItem(string text) {\n      return Browser\n         .Find(new { Id = &quot;menu&quot; }) \n         .GetChildren()\n         .Any(x =&gt; x.GetInnerText() == text);\n   }\n}\n</pre><br />\n<h2>4. Write the test</h2>\rCreate a Test Class and derive it from the PageTest&lt;T&gt; base class. The base class will manage the browser instance and Page Object instance for you.<br /><br />Write a test method that interacts with your page object to drive the UI and to verify the expected behavior.<br /><br /><pre>\n[CodedUITest]\npublic class HomeTests : PageTest&lt;Home&gt; {\n\n   [TestMethod]\n   public void MainMenuContainsHome() {\n      Assert.IsTrue(TestedPage.MainMenuContainsItem(&quot;Home&quot;));\n   }\n}\n</pre><br />\n<h1>Samples</h1>\rCheck out the CodedUI CodeFirst sample app in the <a href=\"http://codeduicodefirst.codeplex.com/SourceControl/BrowseLatest\">source code</a>.<br />\n<h1>Extension Methods <a name=\"ExtensionMethods\"></a></h1>\rThese extensions methods adds functionality to <a href=\"http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.uitesting.uitestcontrol.aspx\">UITestControl</a> and <a href=\"http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.uitesting.htmlcontrols.htmlcontrol.aspx\">HtmlControl</a> to simplify finding of , and interaction with, the controls on the web page. <br /><br />Below are some samples of how CodedUI CodeFirst can help you find and interact with elements on the web page. Make sure to check out the <a href=\"https://codeduicodefirst.codeplex.com/wikipage?title=api%20reference&referringTitle=Home\">API docs</a> for a <a href=\"https://codeduicodefirst.codeplex.com/wikipage?title=api%20reference&referringTitle=Home\">complete reference</a>.<br />\n<h2>Find</h2>\r<h3>Find a control by its Id</h3>\rFinds the HtmlControl with the specified Id. This method will search for controls which id <u>contains</u> the specified Id - so it plays nicely with ASP.NET generated Id&#39;s.<br /><br /><pre>\n//any element type\nHtmlControl control = browser.Find(&quot;controlId&quot;);\n\n\n//div with id &#39;controlId&#39;\nHtmlDiv div = browser.Find&lt;HtmlDiv&gt;(&quot;controlId&quot;);\n</pre><br />\n<h3>Find a control by specifing find criteria</h3>\rFinds the HtmlControl matching the specified criteria. The criterias object is of an anonymous type which properties are one or more of the property names defined in the PropertyNames member of the HtmlControl you&#39;re searching for.<br /><br /><pre>\n//find first link\nHtmlControl control = browser.Find(new { TagName = &quot;A&quot; });\n \n//find link with inner text &#39;Log On&#39;\nHtmlHyperlink link = browser.Find&lt;HtmlHyperlink&gt;(new { InnerText = &quot;Log On&quot; });\n</pre><br />\n<h3>Narrowing and filters</h3>\rYou can chain calls to <span class=\"codeInline\">Find</span> in order to limit the search scope for the following <span class=\"codeInline\">Find</span> calls. <br />Find the 2nd row in the first table. <br /><br /><pre>\nHtmlRow = Browser\n   .Find&lt;HtmlTable&gt;()\n   .Find&lt;HtmlRow&gt;()\n   .Instance(2);\n</pre><br /><br />In order to find an instance of a control within your find results you can use the <span class=\"codeInline\">Filter</span> and <span class=\"codeInline\">Instance</span> methods. <br />Find the 2nd hyperlink in the table cell at the 3rd row and the 1st column. <br /><br /><pre>\nHtmlHyperLink link = Browser\n   .Find&lt;HtmlCell&gt;()\n   .Filter(new {\n      RowIndex    = &quot;2&quot;,\n      ColumnIndex = &quot;0&quot;\n   })\n   .Find&lt;HtmlHyperlink&gt;()\n   .Instance(2);\n</pre><br />\n<h2>Interact</h2>\r<h3>Click on things</h3>\rWith clicks and checks you can either call the methods on the HtmlControl itself or query for the control to click or check by passing a find criterias object as parameter.<br /><br /><pre>\nBrowser\n   .Find&lt;HtmlButton&gt;(&quot;save&quot;)\n   .Click();\n\nBrowser.Click(new {Id = &quot;save&quot;});\n</pre><br />\n<h3>Filling in forms</h3>\rYou can set the value of a single input field by calling SetEditText.<br /><br /><pre>\n//set the value of the html input with Id &#39;userName&#39; to &#39;Chris&#39;\nBrowser.SetEditText(&quot;userName&quot;,&quot;Chris&quot;);\n</pre><br /><br />When filling in larger forms - SetEditTexts might be convenient as it allow you to pass in a <i>fieldModel</i>. SetEditTexts will map the names of the property names in the field model to input fields with equivalent Id&#39;s.<br /><br /><pre>\nBrowser.SetEditTexts(new { \n   UserName        = userName,\n   Email           = email,\n   Password        = password,\n   ConfirmPassword = password\n});\n</pre><br />\n<h1>Page Object Pattern <a name=\"PageObject\"></a></h1>\rThe Page Objects are simply the model of the UI of your web app. Writing these page objects will essentially give you a DSL of your web app. Page Objects interacts with their corresponding web page and there&#39;s usually one Page Object for each page.<br /><br />Interacting with a Page Object could look something like this.<br /><br /><pre>\nPage.Launch&lt;Products&gt;()\n   .NavigateToCreateProduct()\n   .CreateNewProduct(productName: &quot;My Product&quot;, price: Amount());\n</pre><br /><br />Page objects should only interact with the underlying page and expose its state. Page objects should not do assertions, instead craft the methods in such a way so it supports assertions in the calling test method.<br /><br />Give the methods of the page objects clear names written in the language of the business. This will make the tests readable like a manual test case and will by then increase their maintainability and drive the definition of the app DSL.<br /><br />All page objects should derive from the Page base class. It will simplify handling of the browser instance as well as launching pages and navigating to other pages.<br /><br />The PageTest base class can be derived by test classes to automate the launching and closing of the specified Page Object type.<br /><br />Below are some samples of how CodedUI CodeFirst can help you implement Page Objects. Make sure to check out the API docs for a complete reference.<br />\n<h2>Page</h2>\rAll Page Objects should derive from Page. It&#39;ll give you easy access to the browser instance as well as helper methods. Attributes like <span class=\"codeInline\">ClearCookiesAttribute</span> and <span class=\"codeInline\">EntryUriAttribute</span> tells the Page Launcher how the page should be launched. In this example all browser cookies are cleared and the browser is navigated to <i>baseUri</i>/Account/LogOn.<br /><br /><pre>\n[ClearCookies]\n[EntryUri(&quot;/Account/LogOn&quot;)]\npublic class LogOn : Page {\n\n   public LogOn LogOnUser(string userName, string password) {\n      \n      Browser.SetEditTexts(\n         new {\n            UserName = userName,\n            Password = password\n         });\n\n      return this;\n   }\n\n   public Registration NavigateToRegistration() {\n      Browser.Click(new {InnerText = &quot;Register&quot;});\n      return NavigatedTo&lt;Registration&gt;();\n   }\n}\n</pre><br /><br />Launching and using the above Page Object to log on an user would look like this:<br /><br /><pre>\nPage\n   .Launch&lt;LogOn&gt;()\n   .LogOnUser(userName: &quot;chris&quot;, password: &quot;secret&quot;);\n\n</pre><br />\n<h2>PageTest</h2>\rThe <span class=\"codeInline\">PageTest</span> base class will handle the launching and closing of the specified Page Object. Derive your test classes from this base class. The Page Object instance is accessible through the <span class=\"codeInline\">TestedPage</span> property. Notice the usage of the form helper methods below to generate string values.<br /><br /><pre>\n[CodedUITest]\npublic class AccountRegistrationTests : PageTest&lt;Home&gt; {\n\n   [TestMethod]\n   public void UserIsLoggedInAfterSuccessfullAccountCreation() {\n            \n      string userName = Name();\n\n      var home = TestedPage\n         .NavigateToLogOn()\n         .NavigateToRegistration()\n         .CreateNewAccount(userName, Email(), Password());\n            \n      Assert.IsTrue(home.IsLoggedInUserDisplayed(userName));\n   }\n}\n</pre><br /><br />\n<h2>Configuration <a name=\"TestConfiguration\"></a></h2>\rThe Page Objects holds a reference to the current test configuration. Currently the only thing the configuration exposes is the base Uri that&#39;ll be used for launching pages. A type implementing and exporting the <span class=\"codeInline\">IWebUITestConfiguration</span> interface must be present in the same project as the Page Object. <br /><br />The <span class=\"codeInline\">GetBaseUri</span> method must return an Uri. You can name different Uri&#39;s and specify which base uri you want to use for a specific Page Object by decorating it with the <span class=\"codeInline\">BaseUriAttribute</span>.<br /><br /><pre>\n[BaseUriAttribute(&quot;Intra&quot;)]\npublic class IntraHome : Page {\n   //impl omitted\n}\n</pre><br /><br /><pre>\n[Export(typeof(IWebUITestConfiguration))]\npublic class TestConfiguration : IWebUITestConfiguration {\n        \n   public Uri GetBaseUri(string name) {\n      if(name == &quot;Intra&quot;) {\n         return new Uri(&quot;http://intra.contoso.local&quot;);\n      }\n      //default\n      return new Uri(&quot;http://www.contoso.local&quot;);\n   }\n}\n</pre><br /><br />\n<h1>Test Case Scaffolding <a name=\"scaffolding\"></a></h1>\rTest Case Scaffolding reads the steps and parameters from a TFS Test Case work item (MSF for Agile v5) and creates a test class based on that.<br />Just type &quot;Scaffold TestCase {test-case-id}&quot;  in the Package Manager Console. The scaffolder will create a test class with methods with names based on the test case. The test method will contain the test steps as comments so you just have to implement page objects and make assertions according to the steps.<br /><br /><pre>\nPM&gt; Scaffold TestCase 123\n</pre><br /><br />The Test Case Scaffolding is implemented as a <a href=\"http://nuget.org/packages/T4Scaffolding\">T4Scaffolding</a> custom scaffolder.<br /><br />There are two types of templates; one for plain Test Cases and one for Test Cases with parameters (iterations).<br /><br />The test class that gets scaffolded doesn&#39;t inherit from PageTest - so that&#39;s probably one thing that you will need to tweak once the test class is created.<br />\n<h2>Plain Test Case</h2>\rThe class name is named by the title of the test case followed by its Id. The test method is attributed with metadata such as work item id and description. The body of the test method contains all the steps from the test case as comments.<br /><br /><pre>\n[CodedUITest]\npublic class PlainTestCase123 {\n   [TestMethod]\n   [WorkItem(123)]\n   [Description(&quot;Plain test case&quot;)]\n   [Owner(&quot;user&quot;)]\n   public void PlainTestCase() {\n\t\n      //ACTION: perform this\n      //ASSERT: verify that\n   }\n}\n</pre><br />\n<h2>Parameterized Test Case</h2>\rA parameterized test case will get one test method for each iteration scaffolded. The parameters and their associated values are accessible through the <span class=\"codeInline\">parameters</span> dynamic method parameter.<br /><br /><pre>\n[CodedUITest]\npublic class ParameterizedTestCase456 {\n\t\n   protected IList&lt;object&gt; Iterations;\n\t\n   [TestInitialize]\n   public void Initialize(){\n      Iterations = new [] {\n         new {\n\t    parameterOne = &quot;valueOne&quot;,\n\t    parameterTwo = &quot;valueTwo&quot;\n         },\n\t new {\n\t   parameterOne = &quot;valueThree&quot;,\n\t   parameterTwo = &quot;valueFour&quot;\n\t }\n      }\n   }\n\t\n   [TestMethod]\n   [WorkItem(456)]\n   [Description(&quot;Parameterized test case&quot;)]\n   [Owner(&quot;user&quot;)]\n   public void ParameterizedTestCaseIteration1() {\n      ParameterizedTestCase(Iterations[0]);\n   }\n\t\n   [TestMethod]\n   [WorkItem(456)]\n   [Description(&quot;Parameterized test case&quot;)]\n   [Owner(&quot;user&quot;)]\n   public void ParameterizedTestCaseIteration2() {\n      ParameterizedTestCase(Iterations[1]);\n   }\n\t\n   private void ParameterizedTestCase(dynamic parameters){\n\t\t\n      //ACTION: perform this\n      //ASSERT: verify that\n\t\t\n      //parameters.parameterOne, parameters.parameterTwo\n   }\t\n}\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "CodedUI,Testing,automation,web,",
  "LastEdited": "2012-03-09T00:32:03.613-08:00"
}