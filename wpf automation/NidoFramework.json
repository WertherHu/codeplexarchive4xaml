{
  "ProjectName": "NidoFramework",
  "Title": "Gain Coding Speed and Standards Through NIDO Framework for .NET.",
  "Description": "Nido is a reusable generic code library developed using .NET/ C# (4.0, EF) providing a common platform (Web, Windows Form, Web Service, Services and Libraries).",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1><b>No! More!! Long!!! Days... at Work!!!!</b></h1>\r\nVideo 1 - Introduction to Nido Framework<br /><br /><div class=\"video\" style=\"text-align:Center\"><span class=\"player\"><object height=\"285px\" width=\"320px\"><param name=\"movie\" value=\"http://www.youtube.com/v/\"></param><param name=\"wmode\" value=\"transparent\"></param><embed height=\"285px\" width=\"320px\" type=\"application/x-shockwave-flash\" wmode=\"transparent\" src=\"http://www.youtube.com/v/\" /></object></span><br /><span class=\"external\"><a href=\"https://youtu.be/TdATuE7zO40\" target=\"_blank\">Launch in another window</a></span></div> <br /><br />Nido Framework at Use - The diagram below shows how Nido Framework reduces the size of your DAL and BLL.<br /><br /><img src=\"/projects/NidoFramework/0c3c65a2-22ae-41a4-9ad0-360dbccf3734\" alt=\"NidoOverview.png\" title=\"NidoOverview.png\" /><br /><br />Nido Framework is a reusable and highly generic code library developed using Microsoft .NET/ C# to provide a common platform all .NET systems of yours. It provides a platform for quick software delivery and to easily customize and extend software without breaking the already developed parts of the system.<br />Nido Framework is developed on top of MS .NET entity framework, and also heavily influenced by the code first technique. The framework provides a standard method of coding your business logic layer as well as data access layer. That allows you to have much predictable, standard, and best performing codes despite worrying about the expertise of the developers who write them. Additionally once you start using Nido across your development center you will easily be able to jump from one project to another without spending tons of time for knowledge transfers.<br /> <br />We have noted that the rapid nature of the modern businesses operate needs software solutions faster than ever before. The lifetime of the software is shortening, so the cost incurred in producing, cannot be justified by the time period that a business is using the software. This needs software to be produce faster while meeting reasonable cost and quality requirements.<br /><br /><img src=\"/projects/NidoFramework/461e6a32-f4e4-4793-bbe9-9bc386e0c1d7\" alt=\"CommonFRMSummary.PNG\" title=\"CommonFRMSummary.PNG\" /><br /><br />The Nido Framework address all that for you. It is not just provides that but get you a quick start to the project while enforcing code consistency, coding best practices and architectural discipline irrespective to the experience or the skills and expertise of the developer. This way, development time can be reduced and the problem of system depends on individual developers and their expertise will be resolved for good. This framework and the set of guidelines established will govern developers to develop systems in a similar manner using similar techniques and coding patterns allowing even for the newly introduced resources to manage the systems during urgent situations. In practice, we did very limited knowledge transferring when shifting resources from one part of a system to another as well as when introducing new resources.<br /><br />As said a project that is not completed within the budgeted time period can be taken over by another set of new developers (who has experience developing on Nido) could continue the work with having limited amount of knowledge transferring. This is made possible due to the consistency of the code the Nido framework provides.<br /><br /><img src=\"/projects/NidoFramework/6571ae88-6f14-431e-9b75-37293e5dabf7\" alt=\"Common&#32;Project&#32;Usage.jpg\" title=\"Common&#32;Project&#32;Usage.jpg\" /><br /><br />As you can see in the figure given above, the development time is significantly reduced by having common features centrally developed and by reducing the amount of coding required to write. It increases overall efficiency of the development work by accelerating the time-to-market, reducing defect and increasing bug tracking/ fixing rate.<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,ASP.NET,C#,Framework,DAL,design pattern,Visual Studio,Generics,automation,cross platform,ASP.NET MVC,C# MVC,Repository pattern,system architecture,MVC 4,Generic Repository,asp.net c#,Software design,entityframework,mvc 5,BLL,T4 Template,web architecure,architectural design,MVC Architecture,EF 6.0,Business Logic Layer,Data Access Logic,guide to architectur,enterprise architect,microsoft architectu,systems design,.net c#,fake repository,",
  "LastEdited": "2013-12-28T20:13:53.727-08:00"
}