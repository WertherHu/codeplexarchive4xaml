{
  "ProjectName": "fluentetl",
  "Title": "FluentETL - Data automation made easy for coders",
  "Description": "Automate data transfers with a few lines of code. Replace SSIS with concise yet powerful .NET code. Much simpler and easier to learn than Rhino ETL, yet flexible enough to use just about any data source.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>FluentETL - Data automation made easy for coders</h2>\r\nAutomate data transfers with a few lines of code. Replace SSIS with concise yet powerful .NET code. Much simpler and easier to learn than Rhino ETL, yet flexible enough to use just about any data source.<br /><br /><b>Getting started</b><br /><br />Here&#39;s how easy it is to copy data from one database to another (identical table schema).<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> FluentETL;\n<span style=\"color:Blue;\">using</span> FluentETL.Impl;\n\n...\n\nISource src = <span style=\"color:Blue;\">new</span> OleDbSource()\n                    .FromQuery(<span style=\"color:#A31515;\">&quot;select * from Projects&quot;</span>)\n                    .Connection(oleDbConnObj);\n\nIDestination dest = <span style=\"color:Blue;\">new</span> SqlDestination()\n                    .ToTable(<span style=\"color:#A31515;\">&quot;Projects&quot;</span>)\n                    .Connection(sqlConnObj)\n                    .IdentityInsert()\n                    .DeleteFirst();\n\nTransform t = <span style=\"color:Blue;\">new</span> Transform(src, dest)\n                    .AutoMap()\n                    .Execute();\r\n</pre></div><br />You can replace &quot;src&quot; and &quot;dest&quot; with instances of various ISource and IDestination classes.<br /><br /><table><tr><th> ISource </th><th> IDestination </td><td> </td></tr>\n<tr><td> SqlSource </td><td> SqlDestination </td><td> For SQL Server data </td></tr>\n<tr><td> OleDbSource </td><td> OleDbDestination </td><td> For OLE DB data </td></tr>\n<tr><td> TextSource </td><td> TextDestination </td><td> For text files and text streams </td></tr>\n<tr><td> ObjectSource </td><td> CustomDestination </td><td> For custom data sources and processing, with LINQ support </td></tr></table><br /><br /><b>AutoMap</b><br /><br />Transform.AutoMap() maps common field names between source and destination. If destination has no known target fields (like TextDestination), all source fields are mapped.<br /><br /><b>Reading text</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nISource src = <span style=\"color:Blue;\">new</span> TextSource()\n                .From(<span style=\"color:#A31515;\">@&quot;C:\\temp\\sample.txt&quot;</span>)\n                .ParseAsDelimited(<span style=\"color:#A31515;\">&#39;,&#39;</span>, <span style=\"color:Blue;\">true</span>)                          <span style=\"color:Green;\">// Split w/ comma, with first line</span>\n                                                                      <span style=\"color:Green;\">// as header to get field names</span>\n                .ParseAsFixedColumns(<span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">int</span>[] { 15, 10, 20 }, <span style=\"color:Blue;\">false</span>) <span style=\"color:Green;\">// Parse with fixed columns, no header</span>\n                                                                      <span style=\"color:Green;\">// Field names are &quot;Field0&quot;, &quot;Field1&quot;, etc.</span>\n                .ParseWith(line =&gt; <span style=\"color:Blue;\">from</span> s <span style=\"color:Blue;\">in</span> line.Split(<span style=\"color:#A31515;\">&#39;\\t&#39;</span>)\n                                   <span style=\"color:Blue;\">select</span> s.Trim(), <span style=\"color:Blue;\">false</span>)            <span style=\"color:Green;\">// Split with tabs, then trim; no header</span>\n                ;\r\n</pre></div><br /><b>Writing text</b><br /><br />View any source data with the following code.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nIDestination dest = <span style=\"color:Blue;\">new</span> TextDestination()\n                .To(Console.Out)\n                .WithHeader(<span style=\"color:Blue;\">true</span>)\n                .WriteAsDelimited(<span style=\"color:#A31515;\">&quot;\\t&quot;</span>);\n\nTransform t = <span style=\"color:Blue;\">new</span> Transform(src, dest).AutoMap().Execute();\r\n</pre></div><br /><b>Custom data using LINQ</b><br /><br />Leverage LINQ for joins, aggregates, custom data sources and code-generated data.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nISource src = <span style=\"color:Blue;\">new</span> ObjectSource()\n                    .From(\n                        <span style=\"color:Blue;\">from</span> x <span style=\"color:Blue;\">in</span> Enumerable.Range(1, 1000)\n                        <span style=\"color:Blue;\">select</span> <span style=\"color:Blue;\">new</span> { Name = <span style=\"color:#A31515;\">&quot;Person&quot;</span> + x, Age = 20 + (<span style=\"color:Blue;\">new</span> Random(x).Next()) % 20 }\n                    );\r\n</pre></div><br />AutoMap() works with <b>ObjectSource</b> -- it uses the public properties of your objects as the field names.<br /><br /><b>Transform mapping</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nTransform t = <span style=\"color:Blue;\">new</span> Transform(src, dest)\n                    .Map(<span style=\"color:#A31515;\">&quot;Id&quot;</span>)                                        <span style=\"color:Green;\">// Map field, same name in destination</span>\n                    .Map(<span style=\"color:#A31515;\">&quot;Manager&quot;</span>, <span style=\"color:#A31515;\">&quot;ManagerName&quot;</span>)                    <span style=\"color:Green;\">// Map to different field name</span>\n                    .Map(<span style=\"color:#A31515;\">&quot;Age&quot;</span>, <span style=\"color:#A31515;\">&quot;Age&quot;</span>, x =&gt; <span style=\"color:Blue;\">int</span>.Parse(x.ToString()))  <span style=\"color:Green;\">// Type conversion</span>\n                    .Map&lt;<span style=\"color:Blue;\">string</span>&gt;(<span style=\"color:#A31515;\">&quot;Address&quot;</span>, <span style=\"color:#A31515;\">&quot;Address&quot;</span>, x =&gt; x.Trim()) <span style=\"color:Green;\">// Map then trimming the value,</span>\n                                                                      <span style=\"color:Green;\">// using strongly-typed generic method</span>\n                    .Unmap(<span style=\"color:#A31515;\">&quot;Salary&quot;</span>)                                  <span style=\"color:Green;\">// Remove mapping -- useful after doing AutoMap()</span>\n\n                    <span style=\"color:Green;\">// Decide per row which operation to perform (Insert/Update/Delete),</span>\n                    <span style=\"color:Green;\">// calls appropriate method in IDestination. Default is RowOperation.ProcessDefault</span>\n                    .DetermineOperation(row =&gt;\n                    {\n                        <span style=\"color:Blue;\">if</span> ((<span style=\"color:Blue;\">int</span>)row[<span style=\"color:#A31515;\">&quot;Id&quot;</span>] &gt;= 100)\n                            <span style=\"color:Blue;\">return</span> RowOperation.Insert;\n                        <span style=\"color:Blue;\">return</span> RowOperation.Ignore;\n                    })\n\n                    .Execute(); <span style=\"color:Green;\">// Finally, execute</span>\r\n</pre></div><br /><b>Transform events</b><br /><br />TODO<br /><br /><b>Custom insert/update/delete</b><br /><br />For <b>SqlDestination</b> and <b>OleDbDestination</b>, using the FromTable() method presets default logic on how to insert, update and delete to your database. You may need to customize how to perform these operations, e.g. using a stored procedure. Use the InsertWithAction() or InsertWithCommand() methods to customize how to insert, for example.<br /><br />TODO<br /><br /><b>More stuff</b><br /><br />How about transactions, logging and all that? Since it&#39;s all in code, you can put FluentETL code within your own transaction code, add logging, parallelize transforms, etc. It&#39;s as powerful as you can code it!</div><div class=\"ClearBoth\"></div>",
  "TagList": "ETL,SSIS,DTS,LINQ,",
  "LastEdited": "2010-08-28T04:55:07.687-07:00"
}