{
  "ProjectName": "sessionhunter",
  "Title": "Session Hunter",
  "Description": "Analyze the ASP session database to find the largest sessions and reverse engineer the data so that you can improve your ASP.Net web farm performance.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Session Hunter</strong><br>\r\nSession Hunter allows you to find the largest sessions in your ASP.Net State database and what variables are in them, through an easy to use interface. If you:</p>\r\n<ol>\r\n<li>Have software written using ASP.Net </li><li>You are storing ASP.Net sessions in the database (not InProc, StateServer or Custom)\r\n</li><li>You are trying to improve performance </li></ol>\r\n<p>Then Session Hunter is a tool you should consider using. The idea is that once you find your worst offenders, you will be able to track down where those session variables are being created and see if you can optimize how they are used, all without changing\r\n any code in an existing application.</p>\r\n<p><img src=\"http://www.codeplex.com/Download?ProjectName=sessionhunter&DownloadId=604514\" alt=\"Session Hunter Screenshot\" width=\"1027\" height=\"400\"><br>\r\n<br>\r\nThe reason I started this was that I was working on a project some time ago where performance was a key driver due to the large number of users in a large web farm. We noticed there was quite a bit of churn in the ASPState database, but it was a mystery to\r\n us because the data in the table is completely obscured. After a great deal of pain, we were finally able to reverse engineer what was in there and we were shocked to discover some sessions as large as 16 MB. This was putting enormous stress on both the web\r\n server and database. We had a very subtle bug, which had been there for some time where we were not clearing the session variable properly and were actually compounding the data stored in there.\r\n<br>\r\n<br>\r\nA large number of deployments use the ASPState database as the default for any web farm, but very few people validate what is being put in there and hunting down how you are mismanaging yours sessions can be challenging. I wanted to write an elegant tool to\r\n solve a narrow, but common problem for ASP.Net web farms.<br>\r\n<br>\r\n<em>Notes to developers: This tool let me try and define some best practices around Windows Presentation Framework (WPF), MVVM Light, Code Contracts, Test Driven Development, unit testing (especially ViewModels) and Moq. Feel free to download the code and use\r\n it for learning purposes. I tried to make it as clear as possible with a large number of comments.</em></p>\r\n<p><em>Randar Puust<br>\r\n</em></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "ASP.Net,Web Farm,Session,Performance,WPF,MVVM Light,Moq,Code Contracts,C#,",
  "LastEdited": "2013-01-30T20:37:10.463-08:00"
}