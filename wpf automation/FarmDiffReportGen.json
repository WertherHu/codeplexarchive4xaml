{
  "ProjectName": "FarmDiffReportGen",
  "Title": "Farm Difference Report Generator",
  "Description": "Farm diff tool helps the farm administrator to check the consistency between all the farm servers by comparing the following items\r\n•\tGAC’ed assemblies\r\n•\tMOSS 12 hive folder contents/File System\r\n•\tOS level hot-fixes and patched installed on the servers\r\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Farm diff tool helps the farm administrator to check the consistency between all the farm servers by comparing the following items<br />• GAC’ed assemblies<br />• MOSS 12 hive folder contents/File System<br />• OS level hot-fixes and patched installed on the servers<br /><br /><b>1.\tProblem Statement</b><br />In a large farm where day to day installation/uninstallation of products/custom components takes place, some installation/uninstallation can fail due to unknown reasons.  This causes improper registration/removal of the .dll thus causing the servers in farm to go out of sync. <br />Another scenario is with the installation/removal of WSP packages in the Moss farm. A custom developed WSP package might get custom components (.Net Assemblies) and other files into the farm servers. A buggy WSP package too might to take the farm out of sync.<br />It a huge manual effort to get the list of GAC’ed Assemblies from each server machine in a farm and also the list of files on each of these server and compare the difference. The Farm diff Tool comes handy under these circumstances and easy the human effort to get an html report containing the difference between two machines.<br /><b>2.\tABSTRACT</b><br />Farm diff tool helps the farm administrator to verify the farm synchronization status by comparing the existence of the GAC’ed assemblies, installed software and files on the two or more server machines in the farm. Farm diff tool performs two tasks:<br />1)\tGather: This component (PowerShell script file) gathers the data (GAC’ed assemblies, Software install and file details at a specified location) from the list of servers and places them into different files.  This Gather script invokes a .NET class, which internally uses WMI to retrieve GAC’ed Assembly information and installed software information.<br />2)\tComparer: This component (PowerShell script file again) takes the list of files generated by the gatherer as input and generates the HTML report pointing out the differences between two machines. <br /><b>3.\tFEATURES</b>\n<ol><li>Can be used to compare the GAC’ed Assemblies, installed software and files on the file system</li>\n<li>PowerShell scripts are used can be scheduled to run as scheduled jobs in a farm</li>\n<li>PowerShell scripts can be easily edit with basic knowledge on PowerShell, as most of the logic is abstracted in the .NET Assembly dll</li>\n<li>Both the Data Gather and Data Comparer are Configurable though easy editing of XML files</li>\n<li>Portable on PowerShell V1.0 and more</li>\n<li>Both the components have no dependencies and can be individually</li>\n<li>Data Gather component generates output in readable xml format and hence can be used be other custom developed tools</li></ol>\n<b>4.\tHow to Use</b><br /><i>Installation:</i><br />Pre-requisites/Dependencies:\n<ul><li>.NET 3.5 or higher</li>\n<li>PowerShell V1.0 or higher (to run Farm Diff Scripts)</li>\n<li>WMI host service should be running on the farm machines</li>\n<li>Gacutil &amp; installutil tools needs to present on every machine of the farm to install and deploy .NET assembly</li></ul>\nInstallation Steps:<br />The installation has two parts: Installation of WMI provider for GAC’ed Assembly and setup of the Script files that are used to pull and compare the data.<br />Copy the install.zip file on the machine and extract the contents. Then you will find two folders: WMIGacProviderInstall and FarmDiffScripts<br />Installing the WMI GAC Assembly Provider<br />\t<br />The WMI provider for GAC Assemblies must be installed on each server machine in a farm to retrieve the GAC’ed Assembly information<br />•\tCopy the WMIGacProviderInstall into each server on the farm<br />•\tEnsure WMI host service is running (By default this should be running)<br />•\tRun below commands to install / execute install-wmiGacProvider.bat file<br />gacutil -i GACAssemblyManifestReader.dll<br />installutil -i GACAssemblyManifestReader.dll<br /><br />Note: The able command work if gacutil &amp; installutil tools location is added to the Windows environment PATH variable.<br />Installing the Farm Diff PowerShell Scripts<br />\t<br />The farm diff PowerShell scripts can be located at one location and can executed to gather and compare the data.<br />•\tCopy the folder “FarmDiffScripts” folder to server machine that has PowerShell installed<br /><br />Usage:<br />\tData Gatherer:<br />•\t Open the DataGatherer.Config file in text editor and replace the below element values<br />o\tFileSaveLocation: Location where the data files would be saved to<br />o\tServerName: Add name of the server from which data needs to be retrieved<br />•\tOpen PowerShell window<br />•\tNavigate the folder location containing the Scripts and execute DataGatherer.ps1 file in PowerShell window.<br /><br />\tComparer:<br />•\t Open the Comparator_Config.xml  file in text editor and replace the below element values<br />o\tsourceServer: Name of the server whose data is considered as base data<br />o\tdestinationServer: Name of the server whose data is compared to the base data to identify conflicts<br />o\tsource: Data file full name with location that is considered as base data<br />o\tdestination: Data file full name with location that is under focus for comparing<br />o\tparameter: xml attribute in the data files that is considered during comparing<br />•\tOpen PowerShell window<br />•\tNavigate the folder location containing the Scripts and execute Comparator.ps1 file in PowerShell window.</div><div class=\"ClearBoth\"></div>",
  "TagList": "Sharepoint,powershell,xml,Config,Reporting,Providers,WMI,Farm,difference,Syncronization,12 Hive,Installation,System.Management,.NET 3.5,html,automation,Scheduling,comparision,",
  "LastEdited": "2010-08-30T07:55:10.197-07:00"
}