{
  "ProjectName": "ProxyViewModel",
  "Title": "ProxyViewModel",
  "Description": "The goal of ProxyViewModel is to simplify WPF/MVVM  developerâ€™s life and allow them to focus on actual business values of a WPF/MVVM application",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>The goal of <strong>ProxyViewModel </strong>is to simplify WPF developers' life and allow them to focus on actual business values of an application. There are a couple key features\r\n<strong>ProxyViewModel </strong>will provide:<br>\r\n&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<img src=\"http://www.gkdevblog.com/bullet.png\" alt=\"bullet\" width=\"5\" height=\"10\" style=\"border:0px initial initial\">&nbsp;<strong>ProxyViewModel\r\n</strong>will make ViewModels automatically observable, so developers don&rsquo;t have to worry anymore about implementing\r\n<strong>INotifyPropertyChanged </strong>and the logic of invoking the <strong>PropertyChanged\r\n</strong>event in the stters.<br>\r\n&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;<img src=\"http://www.gkdevblog.com/bullet.png\" alt=\"bullet\" width=\"5\" height=\"10\"> Developers will not have to expose their commands with a property anymore. It will be enough just to write a function and mark it with a special\r\n attribute or name it in a special way so <strong>ProxyViewModel </strong>understands that function is a command and will automatically expose it to\r\n<strong>xaml </strong>through an auto generated Property.</p>\r\n<p><strong><em>Currently Implemented:</em></strong><br>\r\n&nbsp;&nbsp; &nbsp; &nbsp; <img src=\"http://www.gkdevblog.com/bullet.png\" alt=\"bullet\" width=\"5\" height=\"10\"> Implementation of\r\n<strong>INotifyPropertyChanged </strong>if your ViewModel does not implement it already.<br>\r\n&nbsp;&nbsp; &nbsp; &nbsp; <img src=\"http://www.gkdevblog.com/bullet.png\" alt=\"bullet\" width=\"5\" height=\"10\"> Exposing of all the<strong> public virtual</strong> properties to the xaml by raising\r\n<strong>PropertyChanged </strong>event(the properties that you want to expose through\r\n<strong>INotifyPropertyChanged </strong>must be public and virtual).&nbsp;<br>\r\n&nbsp;&nbsp; &nbsp; &nbsp; <img src=\"http://www.gkdevblog.com/bullet.png\" alt=\"bullet\" width=\"5\" height=\"10\">&nbsp;Exposing methods in a ViewModel as commands to XAML view (So developers don't have to write an ICommand property to expose a ViewModel's methods).&nbsp;Command\r\n predicates are supported as well.&nbsp;<span style=\"color:#ff0000\">&nbsp;</span></p>\r\n<p><strong>ProxyViewModel </strong>is very light weight way of making your ViewModels exposable to xaml consumption. ProxyViewModel is implemented using Proxy pattern. The implementation of the library relies only on\r\n<strong>Reflection.Emit</strong> namespace and does not bring any additional dependencies except for itself to your project.</p>\r\n<p>The&nbsp;documentation&nbsp;on how to use <strong>ProxyViewModel</strong> will&nbsp;come with the first stable release. For now usage can be inferred from the unit tests&nbsp;project, and so far it's very simple and straight forward; there is just one function\r\n call that makes your ViewModel observable: <strong>ProxyViewModel.CreateProxyViewModel&lt;T&gt;</strong></p>\r\n<p><strong><br>\r\n</strong></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,MVVM,ViewModel,Model View ViewModel,Silverlight,WPF MVVM,ICommand,INotifyPropertyChang,automatic inotifypro,automatic ICommand,",
  "LastEdited": "2010-11-07T20:11:24.883-08:00"
}