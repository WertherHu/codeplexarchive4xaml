{
  "ProjectName": "taaas",
  "Title": "Test Automation As A Service",
  "Description": "Over the three years we have been developing a azure cloud based solution to provide \"Test Automaton as a Service\" (TaaaS) using a hybrid automation approach",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">The ideal implementation of Test Automation as a Serviceuses the appropriate elements of the .NET and Azure frameworks to provide a scalable, adaptable and robust platform based mainly upon Microsoft technologies.<br /><br />The external interfaces of the system consist of a set of WCF services and ASPX or Silverlight 4.0 web endpoints.<br /><br />SOAP is the current HTTP service implementation, RESTful services are an easy extension of the existing code base.<br /><br />Depending on Customer integration requirements, Windows services or local Win32 adapter executables may be used.<br /><br />Internally the system will interact via an Enterprise Service Bus based on the existing XML messages defined for the current implementation. Data persistence will be provided by SQL Azure.<br /><br />All services, business logic and web endpoints are implemented in C# 4.0.<br /><br />Test lab and execution environments will be provided by the Microsoft Lab Management environment controlled by Microsoft Test Manager(MTM).<br /><br />The test run environment will be supported by a Hyper Visor implementation (Viridian) controlled by the framework.<br /><br />All flavours of platform and operating system are supported by this strategy, therefore cross platform and browser testing can be supported.<br /><br />In general the Hyper Visor implementation will act as adependency injection Virtual Machine dispenser.<br /><br />A test run virtual computer with the required operating system, software configuration, hardware and browser version can be produced on demand to support the application under test.<br /><br />This approach will minimise the licence costs of the platform and maximise its scalability.<br /><br />Since all software licenses are copies which are used on demand and the number of the instances is controlled by the Hyper visor.<br /><br />This allows queuing and prioritisation of test activity to control licence cost exposure.<br /><br />The active test cycle will record real time results via the ESB.<br /><br />Monitoring and configuration of the framework is inherent inthe Azure implementation and requires little or no input from the development team.<br /><br />Customer Applications<br /><br />Take on of client applications will be achieved through Microsoft Test Manager (MTM) integration and a Custom Resource loader application.<br /><br />Depending on the existing test assets, it will be possible to add a new customer application with minimal human intervention<br /><br />Through integration with Team Foundation Server or Team City, a framework build integration agent will allow testing of release candidates and tracking of test assets.<br /><br />A Customer dashboard will allow client to interact with the system including scheduling tests and viewing results.<br /><br />Test Platform<br /><br />Due to the distributed modular design of the Framework many kinds of testing may be applied to the application under test.<br /><br />The test types include load, regression, smoke, penetration,accessibility, cross-browser and search engine optimisation.<br /><br />Customers could subscribe to the different tests types on a pay-per-use basis.<br /><br />The use of an ESB/WCF architecture would allow third party specialist test companies to execute tests via the Framework infrastructure</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-06-19T06:06:47.967-07:00"
}