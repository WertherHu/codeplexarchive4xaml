{
  "ProjectName": "nameMapping2objects",
  "Title": "TestComplete NameMapping IntelliSense",
  "Description": "TestComplete NameMapping IntelliSense makes it easier for testers and developers who use SmartBear(AutomatedQA) TestComplete with Connected Application feature to have IntelliSense and know for sure what objects are mapped.\r\n\r\nIt's developed in C#, as VS 2008 and VS 2010 plugins.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rTestComplete NameMapping IntelliSense makes it easier for testers and developers who use SmartBear&#40;AutomatedQA&#41; TestComplete with Connected Application feature to have IntelliSense and know for sure what objects are mapped.<br /><br />It&#39;s developed in C&#35;, as VS 2008 and VS 2010 plugins.<br /><br /><b>The main benefit is if UI is permanently changed, and NameMapping tree is not constant, you&#39;ll get compilation time errors that will allow to fix objects before you run any test.</b><br />The generated objects just keep tree relationship in objects and stores names and fullPath of nodes.<br />It should work well for NameMapping of AutomatedQA TestComplete 7 and SmartBear TestComplete 8. Lower versions were not verified.<br />\n<h1>Component Registration</h1>\r<ol><li>Download component and unzip it to regular folder you like</li>\n<li>Run &quot;Visual Studio Command Prompt&quot;</li>\n<li>Run in command prompt &quot;regasm /codebase &lt;Path&gt;\\NameMapping.CustomTool.dll&quot;</li></ol>\n\n<h1>Get started with tool</h1>\r<ol><li>Find and open your solution where you are using (going to use) Connected Application ability from TestComplete</li>\n<li>Create new Class Library project, it is suggested C#</li>\n<li>Add NameMapping.TCNM to project(*)</li>\n<li>In file properties for NameMappint.TCNM define Custom Tool as &quot;NameMapping2Objects&quot;</li></ol>\nAfter that classes should be generated like this:<br /><img src=\"/projects/nameMapping2objects/b0ab3582-edba-422a-a4b6-33be152902bf\" alt=\"Capture1.PNG\" title=\"Capture1.PNG\" /><br />*- It is more convenient if this project will have NameMapping file and TestComplete suite only referenced to it.<br />\n<h1>Usages</h1>\r<ul><li>All Access is provided from object &quot;Map&quot;.</li>\n<li>Map.Aliases allows to get nodes of Aliases tree.</li>\n<li>Map.NameMapping allows to get nodes of NameMapping tree.</li>\n<li>Each Alias instance has movement to NameMapping tree via getNm() method</li>\n<li>To integrate it smoothly with &quot;Connected&quot; object it is good to have extensions method that will transparently transform these objects to varDelegates (or var from TestComplete NameSpace)</li></ul>\n\n<h1>Example of extension methods</h1>\r<pre>\npublic static var toObject(string path)\n{\n    //code that converts namemapping or alias path to var\n}\npublic static var toVar (this UiMappedNode node)\n{\n    if(node is UiAliasedNode)\n        return toObject( ((UiAliasedNode)node).nAliasName );\n    return toObject(node.nFullName);\n}\npublic static void ClickButton(this var tcObject)\n{\n    tcObject[&quot;ClickButton&quot;]();\n}\npublic static void ClickButton(this var.Delagate tcObject)\n{\n    tcObject[&quot;ClickButton&quot;]();\n}\n</pre><br />\n<h1>Example of Real Work</h1>\rHere is generated class diagram.<br /><img src=\"/projects/nameMapping2objects/3f0fc904-26b2-48ca-bb0c-8a7ddcb87663\" alt=\"Diagram.PNG\" title=\"Diagram.PNG\" /><br />Class &quot;Map&quot; is always the same and just keeps static properties to NameMapping and Aliases Root.<br />System Classes UiMappedNode and UiAliasedNode allows to differentiate type of nodes.<br />On shown example there are two trees in TestComplete:<br />NameMapping.Sys.KeePass.KeyCreationForm<br />Aliases.KeyCreationForm<br />Guids for NameMapping object and Alias object are equal. For convenience Alliases classes starts from &quot;Al_&quot; prefix.<br />In C# if you call<br /><span class=\"codeInline\">Map.aliases.KeyCreationForm</span> <br />you&#39;ll get instance of Al_KeyCreationForm_&lt;guid&gt;.<br />If you don&#39;t have alias for some object of this you can switch to NameMapping tree. <br />If you call<br /><span class=\"codeInline\">Map.aliases.KeyCreationForm.getNm().getParent()</span><br />you&#39;ll get instance of KeePass_&lt;guid&gt;, that corresponds to Process. <br />If you call<br /><span class=\"codeInline\">Map.aliases.KeyCreationForm.toVar()[&quot;SomeUnmappedButton&quot;].ClickButton()</span><br />you&#39;ll get action on UI. And if you map &quot;SomeUnmappedButton&quot; via TestComplete, you can get really typed code in TC, like<br /><span class=\"codeInline\">Map.aliases.KeyCreationForm.SomeMappedButton.toVar().ClickButton()</span><br />you&#39;ll get same action but with fully controlled code, without need to control your strings<br /><span class=\"codeInline\">Aliases[&quot;KeyCreationForm&quot;][&quot;SomeMappedButton&quot;][&quot;ClickButton&quot;]()</span> <br />yeah, this code is not refactorable, nightmare :(.<br /><b><span class=\"codeInline\">Map.aliases.KeyCreationForm.SomeMappedButton.toVar().ClickButton()</span></b> - this one should be the choice for big projects.<br />\n<h1>TODOs</h1>\r<ul><li>Add Sample with TestComplete</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "TestComplete,AutomatedQA,SmartBear,NameMapping,IntelliSense,Testing,testing framework,automation,QA,",
  "LastEdited": "2012-02-18T15:26:26.06-08:00"
}