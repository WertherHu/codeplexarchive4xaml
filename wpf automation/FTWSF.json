{
  "ProjectName": "FTWSF",
  "Title": "Fault Tolerant Web Service Framework",
  "Description": "A simple web service framework that allow you add some fault tolerance behavour to your web service calls. It currently support :\n    * work with existing code : the generated classes inherits from the ones that visual studio creates so there will be no signature changes\n    * automatically retry all web service calls on failure\n    * automatically switch to alternative urls on failure\n    * allow multiple alternative urls per web service with priority support\n    * easy to configure (max retry, retry interval, url list per web service)\n    * allow command line generation for automation (with batch file or post build event)\n    * allow an interactive and user friendly way to generate the soap client classes (using a Winform interface)\n    * work with C# and Visual Basic projects\n    * failures are logged using log4net so you can easily record them to any data storage for auditing purpose\n    * open source : do whatever you want with the binaries and the code. Just share you enhancements\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">Welcome to the FT-WSF project<br />\n<h2>Project Description</h2>\rA simple web service framework that allow you add some fault tolerance behavour to your web service calls. It currently support &#58;<br />    &#42; work with existing code &#58; the generated classes inherits from the ones that visual studio creates so there will be no signature changes<br />    &#42; automatically retry all web service calls on failure<br />    &#42; automatically switch to alternative urls on failure<br />    &#42; allow multiple alternative urls per web service with priority support<br />    &#42; easy to configure &#40;max retry, retry interval, url list per web service&#41;<br />    &#42; allow command line generation for automation &#40;with batch file or post build event&#41;<br />    &#42; allow an interactive and user friendly way to generate the soap client classes &#40;using a Winform interface&#41;<br />    &#42; work with C&#35; and Visual Basic projects<br />    &#42; failures are logged using log4net so you can easily record them to any data storage for auditing purpose<br />    &#42; open source &#58; do whatever you want with the binaries and the code. Just share you enhancements<br /><br />\n<h2>Installation</h2>\r<ul><li>download the latest binary release</li>\n<li>unzip the binary package anywhere in your computer</li>\n<li>launch FaultTolerantWebService.Ui.exe</li>\n<li>click the “Load” button and select the .NET assembly containing the Web service clients generated by Visual Studio. You can see the generated code in the main text box now.</li>\n<li>click on save as near the the command line text box and save it to the default name.</li>\n<li>add a reference to the FaultTolerantWebService.Common.dll in the project containing the Web refences.</li>\n<li>add the generated file named FaultTolerantWebService.cs in your project (by default, it will located on the root of your project )</li></ul>\nYou’re done ! Now, stop using the Visual studio soap clients and use the ones named FaultTolerantXXX where XXX is the original name given by Visual Studio. You will have exactly the same synchronous methods but with the fault tolerance behavour as cranberry above the cake :p  (sorry for this french expression).<br /><br />\n<h2>More information :</h2>\rHere is the project home page :<br /><a href=\"http://www.manitra.net/blog/developpement/web-service/fault-tolerant-web-service-framework-implementation\">http://www.manitra.net/blog/developpement/web-service/fault-tolerant-web-service-framework-implementation</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "Web Services,fault tolerance,C#,.NET,code generation,Framework,webservices,",
  "LastEdited": "2008-07-29T08:29:32.22-07:00"
}