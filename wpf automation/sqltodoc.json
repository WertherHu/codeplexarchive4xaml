{
  "ProjectName": "sqltodoc",
  "Title": "SQL Todoc",
  "Description": "Todoc is a framework, based on the software factory pattern, for auto-creation and modification of triggers, views, shadow\\audit tables, and stored procedures.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>SQL Todoc</h1>\rTodoc is a framework, based on the software factory pattern, for auto-creation and modification of triggers, views, shadow&#92;audit tables, and stored procedures. A factory pattern calls for the use of specialized objects to create other objects, much like a real-world factory: here the specialized object is a schema - Todoc - and the views, user-defined table types, ddl trigger, and stored procedures within this form the production line. Extended properties are both the nuts and bolts that hold it all together, as well as controlling what is produced for any given table.<br /><br />As well as the Todoc schema, another schema, ExProps, is used. This is a schema developed by Michael Coles (Sergeant SQL) and it makes working with extended properties a breeze. Michael&#39;s original blog post on this can be found here: <a href=\"http://sqlblog.com/blogs/michael_coles/archive/2010/01/12/t-sql-tuesday-easy-extended-properties.aspx\">http://sqlblog.com/blogs/michael_coles/archive/2010/01/12/t-sql-tuesday-easy-extended-properties.aspx</a><br />\n<h2>Background</h2>\rTodoc was developed to alleviate the manual drudgery of creating and maintaining database objects for tables, especially in the greenfield project stage. It provides a robust framework for doing this that is easily portable, extensible, and reusable.<br />\n<h2>So what can it do?</h2>\rFor any given table it can create and maintain any or all of the following:\n<ul><li>View</li>\n<li>Insert Stored Procedure</li>\n<li>Update Stored Procedure</li>\n<li>Save (Combined Insert and Update) Stored Procedure</li>\n<li>Delete Stored Procedure</li>\n<li>Shadow\\Audit Table</li>\n<li>Insert Trigger</li>\n<li>Update Trigger</li>\n<li>Delete Trigger</li></ul>\n<br />The shadow\\audit table is simply that, containing the full record from the source table whenever a record is inserted, updated, or deleted. If the extended property is set to create a shadow\\audit table for the given table, all stored procedures are created with the logic to write to this - apart from if triggers are also enabled, in which case the triggers do the auditing. This is for situation where you cannot guarantee that all modifications will be done through the stored procedures - i.e where some users have direct table access permissions - and you do not want any modifications to be lost.<br /><br />The creation and modification process can be implemented in SSDT as a post-deployment script and the ddl trigger captures direct changes to the database itself. To use the framework in SQL Azure some modifications are required, in that you will have to remove the extended properties and hard code this logic into the objects themselves. The documentation contains details on how to do this. Also, as of the time of writing, ddl triggers are not supported in SQL Azure. Actually, this is not true, they are but you cannot read the EVENTDATA xml, so they are of no use to the framework as it cannot tell which table is being modified.<br /><br />The source code is a VS2012 SSDT project which expects the database to also be SQL2012. However the framework can also be used with SQL2008 and SQL2008R2 as well. It could also be adapted to work with SQL2005.<br /><br />Please see the documentation for full details of how to install the framework in all of these environments and how to configure the 2012 SSDT project or install the framework directly into a database if you do not use this.<br /><br />The sample database in the project is the AdventureWorks2012 database with all the stored procedures and most of the extended properties removed. You can either test with this or with any other test database you have to hand.<br /><br />So download the source code, install the framework, set the extended properties as you wish, and get creating objects! A couple of hours playing with the framework could save you weeks of time in the future and, if it doesn&#39;t do exactly what you want, then change the creation procedures so that it does. Once you&#39;ve created hundreds of objects in a few minutes, you will be glad you spent the time installing it.<br /><br />Also, as a man who uses SQL Azure (Windows SQL Database), I have not left that out. There is a download with a version that happily works in there. Yes it&#39;s a bit different - no extended properties or DDL trigger and it&#39;s a bit less flexible - but it works fine.<br /><br />Twitter me (@TheSQLPimp) - a &quot;Who&#39;s the pimp now!&quot; when you&#39;ve got it up and rocking.<br /><br />You know it makes sense.<br /><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "SQL,AUTOMATION,TODOC,",
  "LastEdited": "2013-06-13T07:57:26.437-07:00"
}