{
  "ProjectName": "ValidationAspects",
  "Title": "ValidationAspects",
  "Description": "ValidationAspects provides State and Interception validation on .net Objects, Properties and Method Parameters. Validation can be declared via attributes and/or augmented/replaced with validation functions at runtime. Supports asp.net MVC, WPF, Silverlight, PostSharp, and Unity.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>ValidationAspects</h1>\rValidationAspects provides State and Interception validation on .net Objects, Properties and Method Parameters. Validation can be declared via attributes and&#47;or augmented&#47;replaced with validation functions at runtime. Supports asp.net MVC, WPF, Silverlight, PostSharp, and Unity.\n<h2>Features</h2>\r<ul><li><b>Object Validation</b> - Objects can be queried to determine if their state is valid against a set of validation rules. Validation messages and context of what/where validation failed is reported via a ValidationResult. An object can also be validated as a method pre-condition by registering an object validator against the method.</li>\n<li><b>Property Validation</b> - Multi-Mode validation. The following modes can be enabled or disabled independantly to suit your chosen method of validation:\n<ol><li><b>Interception Validation</b> - Validation is invoked when the property is set. If the validation fails, a validation exception will throw to ensure the model does not become invalid.</li>\n<li><b>State Validation</b> - Validation is invoked when the object is validated. If the validation fails, the validation failure is added to the ValidationResult.</li></ol></li>\n<li><b>Parameter Validation</b> - Parameter validation checks the validity of the value as determined by code contracts and business rules. If the validation fails, a validation exception will throw to ensure the model does not become invalid.</li>\n<li><b>Real-time augmentation / replacement</b> - Validation can be changed programmatically or via Xaml configuration.</li>\n<li><b>AOP</b> - Interception validation aspects are applied to your models by PostSharp or Unity. There are no base classes to derive from or interfaces to explicitly implement.</li>\n<li><b>Custom Validators</b> - Implement new validators easily with minimal code with lambda syntax.</li>\n<li><b>Strongly-typed validation targets</b> - Compile-time checking (PostSharp only) ensures validation is correctly declared - you can&#39;t declare a numeric validator to validate a string. Validators are implemented to target certain types. Incorrectly declared validators applied at run-time fail fast.</li>\n<li><b>Integration</b> - Support for <b>WPF</b>, <b>asp.net</b> / <b>asp.net MVC</b> (via <a href=\"http://www.codeplex.com/xval\">http://www.codeplex.com/xval</a>), and <b>Silverlight</b> (State Validation only, PostSharp 1.5 interception in progress).</li>\n<li><b>Localization</b> - Validation exception messages can be customized with message formatting functions.</li>\n<li><b>TDD</b>&#39;d - Near 100% code coverage from hundreds of unit tests.</li></ul>\n<br />ValidationAspects can run standalone for State Validation only. For Interception Validation it can integrate with an AOP framework. Currently PostSharp 1.0 SP1 / 1.5 RC1 <a href=\"http://www.postsharp.org\">http://www.postsharp.org</a> and Unity Interception <a href=\"http://www.codeplex.com/unity\">http://www.codeplex.com/unity</a> are supported.<br /><br /><b>I am no longer maintaining VA in the short term due to life and other project commitments. Unfortunately I&#39;ve had to shelve open source projects like VA indefinitely. I&#39;d like to get back into it sometime. If anyone wants to modify VA to support PostSharp 2.0, .net 4.0, or add further features or documentation, please send me a patch and I will publish a new VA release. Alternatively, if you want to get more involved and have some ownership such as providing support to VA users, please contact me and I&#39;ll add you to the project.</b><br />\n<h2>Examples</h2>\r<b>Attribute Registration:</b><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n[Validate]\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> Customer\n{\n  <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span> _email;\n\n  <span style=\"color:Green;\">// apply validation to property setters</span>\n  [NotNullOrEmpty] <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n  [Minimum(0)] <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Age { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n  <span style=\"color:Green;\">// apply validation to method parameters</span>\n  <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> SetEmail([NotNullOrEmpty] <span style=\"color:Blue;\">string</span> email) { _email = email; }\n\n  <span style=\"color:Green;\">// provide validation for objects either with methods or declaring validators on the class</span>\n  [ValidationMethod]\n  <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> ValidateEmail(Customer customer)\n  {\n    <span style=\"color:Blue;\">if</span> (<span style=\"color:Blue;\">string</span>.IsNullOrEmpty(customer._email))\n      <span style=\"color:Blue;\">throw</span> <span style=\"color:Blue;\">new</span> ValidationException(<span style=\"color:#A31515;\">&quot;Email is not valid&quot;</span>);\n  }\n}\r\n</pre></div><b>Programmatic Registration:</b><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// register lambda syntax validation functions</span>\n<span style=\"color:Blue;\">typeof</span>(User).GetProperty(<span style=\"color:#A31515;\">&quot;Name&quot;</span>).AddValidation&lt;<span style=\"color:Blue;\">string</span>&gt;((name, context) =&gt; \n  { <span style=\"color:Blue;\">if</span> (!Exists(name)) { <span style=\"color:Blue;\">throw</span> <span style=\"color:Blue;\">new</span> ValidationException(<span style=\"color:#A31515;\">&quot;Username is unknown&quot;</span>); } } );\n\n<span style=\"color:Green;\">// register validation factories (classes)</span>\n<span style=\"color:Blue;\">typeof</span>(User).GetProperty(<span style=\"color:#A31515;\">&quot;Name&quot;</span>).AddValidation(<span style=\"color:Blue;\">new</span> [] { <span style=\"color:Blue;\">new</span> NotNullOrEmpty()} );\n\n<span style=\"color:Green;\">// don&#39;t like strings?</span>\nTypeOf&lt;User&gt;.Property(user =&gt; user.Name).AddValidation(<span style=\"color:Blue;\">new</span> [] { <span style=\"color:Blue;\">new</span> NotNullOrEmpty()} );\r\n</pre></div><b>Object Validation:</b><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nValidationResult result = customer.Validate();\n<span style=\"color:Blue;\">if</span> (!result.IsValid)\n{\n  <span style=\"color:Blue;\">foreach</span> (<span style=\"color:Blue;\">string</span> message <span style=\"color:Blue;\">in</span> result.Messages) { ... }\n}\r\n</pre></div><b>Property Validation - Interception Validation Mode:</b><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">try</span>\n{\n  customer.Name = <span style=\"color:#A31515;\">&quot;&quot;</span>;\n}\n<span style=\"color:Blue;\">catch</span> (ValidationException e)\n{\n  <span style=\"color:Blue;\">foreach</span> (<span style=\"color:Blue;\">string</span> message <span style=\"color:Blue;\">in</span> e.Messages) { ... }\n}\r\n</pre></div><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "MyList.Library,Validation Rule,validation,Validation Framework,business rules,Domain Model,PostSharp,validator,object validation,property validation,parameter validation,AOP,Aspect,.NET 3.5,Framework,WPF,C#,Business Logic,ASP.NET,ASP.NET MVC,unity,Unity Interception,Silverlight,ValidationAspects,",
  "LastEdited": "2009-12-15T02:54:36.873-08:00"
}