{
  "ProjectName": "15puzzle",
  "Title": "A fifteen puzzle in F# and WPF",
  "Description": "This is a fifteen puzzle (15-puzzle) written in F# with WPF.\r\nIn the program, you can reset all the tiles, generate random permutation of tiles, and solve the puzzle using the build-in solving algorithm.\r\nThis is my first F# program after reading the book Real World Functional Programming. After some frustration and struggles, I gradually learned how to write F# code in a functional way.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nThis is a fifteen puzzle written in F# with WPF.&nbsp;In the program, you can reset all the tiles, generate random permutation&nbsp;of tiles, and solve the puzzle using the build-in solving algorithm.</p>\r\n<p><img src=\"http://download.codeplex.com/Download?ProjectName=15puzzle&DownloadId=317944\" alt=\"\" width=\"450\" height=\"500\"></p>\r\n<p>This is my first F# program after reading the book Real World Functional Programming. After some frustration and struggles,&nbsp;I gradually learned how to write F# code in a functional way. The book&nbsp;might interest you.</p>\r\n<p>Real World Functional Programming</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/hh314518.aspx\">http://msdn.microsoft.com/en-us/library/hh314518.aspx</a></p>\r\n<p><strong>Required libraries for running this program</strong></p>\r\n<p>This program is written in Visual Studio 2010 with&nbsp;.NET Framework 4.0. So&nbsp;.NET Framework 4.0&nbsp;and F# Runtime 2.0 are required for running the program. They can be downloaded via the following links.</p>\r\n<p>.NET Framework 4.0 redistributable package<br>\r\n<a href=\"http://www.microsoft.com/download/en/details.aspx?id=17718\">http://www.microsoft.com/download/en/details.aspx?id=17718</a></p>\r\n<p>Visual Studio 2010 F# Runtime 2.0</p>\r\n<p><a href=\"http://www.microsoft.com/download/en/details.aspx?id=13450\">http://www.microsoft.com/download/en/details.aspx?id=13450</a></p>\r\n<p><strong>About the 15-puzzle</strong></p>\r\n<p>The 15-puzzle (also called Gem Puzzle, Boss Puzzle, Game of Fifteen, Mystic Square and many others) is a sliding puzzle that consists of a frame of numbered square tiles in random order with one tile missing. The puzzle also exists in other sizes, particularly\r\n the smaller 8-puzzle.<br>\r\n<a href=\"http://en.wikipedia.org/wiki/Fifteen_puzzle\">http://en.wikipedia.org/wiki/Fifteen_puzzle</a></p>\r\n<p><strong>The solving algorithm</strong></p>\r\n<p>There are 3 steps in solving a 15 puzzle.</p>\r\n<p>First, solve the first row and first column.</p>\r\n<p>Then solve the second row and second column.</p>\r\n<p>Finally, the 15 puzzle is reduced into 2 by 2 puzzle, with only 3 tiles not in order. Now we can only move the 3 tiles either clockwise or&nbsp;anticlockwise. Repeat rotating them around in one direction until the 3 tiles reach their right positions, if\r\n the case is solvable.</p>\r\n<p>We can determine the&nbsp;solvability before solving the puzzle, see the article below about&nbsp;how to&nbsp;determinate the solvability&nbsp;of the puzzle.</p>\r\n<p><a href=\"http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\">http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html</a></p>\r\n<p><strong>Steps with illustrations</strong></p>\r\n<p>Step 1, solve the first row and first column.</p>\r\n<p><img src=\"http://download.codeplex.com/Download?ProjectName=15puzzle&DownloadId=340201\" alt=\"\" width=\"320\" height=\"324\"></p>\r\n<p>Step 2, solve the second row and second column.</p>\r\n<p><img src=\"http://download.codeplex.com/Download?ProjectName=15puzzle&DownloadId=340202\" alt=\"\" width=\"320\" height=\"324\"></p>\r\n<p>Step 3, solve the last 3 tiles.</p>\r\n<p><img src=\"http://download.codeplex.com/Download?ProjectName=15puzzle&DownloadId=340203\" alt=\"\" width=\"320\" height=\"158\"></p>\r\n<p><strong>How to make a move</strong></p>\r\n<p>To move a tile to one of its adjacent&nbsp;positions, we can move the blank to that position first, and then move the blank to the position of the tile.</p>\r\n<p><img src=\"http://download.codeplex.com/Download?ProjectName=15puzzle&DownloadId=317944\" alt=\"\" width=\"450\" height=\"500\"></p>\r\n<p style=\"padding-left:180px\"><em>Figure 1</em></p>\r\n<p>For example, as in Figure 1 (the screenshot above), if we want to move 15 to 14's position, we first move the blank to 14's position without moving 15 itself. To do this, we have to go around 15, move the blank along 12, 11, 10, and finally 14, as in Figure\r\n 2.&nbsp;Once the blank is at the target position (14's position in figure 1), we can simply move the blank to 15, (or say move 15 to the blank, it's the same) then 15 will be at the target position, as in Figure 3.</p>\r\n<p><img src=\"http://download.codeplex.com/Download?ProjectName=15puzzle&DownloadId=346864\" alt=\"\" width=\"450\" height=\"500\"></p>\r\n<p style=\"padding-left:180px\"><em>Figure 2</em></p>\r\n<p><img src=\"http://download.codeplex.com/Download?ProjectName=15puzzle&DownloadId=346872\" alt=\"\" width=\"450\" height=\"500\"></p>\r\n<p style=\"padding-left:180px\"><em>Figure 3</em></p>\r\n<p>If we want to move a tile to a farther position (not adjacent to itself), we can do the routine above several times. The tile will move one step at each time.&nbsp;In this program, both the path to move the blank and the path to move the tiles are obtained&nbsp;by\r\n a breadth-first search. The search is performed on a grid that regard the current tile to be moved (15 is the above example) and all the finished rows and columns as obstacles.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-02-24T02:52:24.067-08:00"
}