{
  "ProjectName": "nomvvm",
  "Title": "NoMvvm",
  "Description": "NoMvvm is the bleeding edge of MVVM.  Who wants to implement INotifyPropertyChanged or properties, let's use dynamic!  NoMvvm makes heavy use of System.Dynamic and conventions to minimalize the code needed to hook up the Model-View-ViewModel pattern.  It also enables TDD via the use of dynamic, as well as some additional classes for testing with MVVM.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>What the heck is NoMvvm?</b><br /><br />NoMvvm is the bleeding edge of MVVM.  Who wants to implement INotifyPropertyChanged or properties, let&#39;s use dynamic&#33;  NoMvvm makes heavy use of System.Dynamic and conventions to minimalize the code needed to hook up the Model-View-ViewModel pattern.  It also enables TDD via the use of dynamic, as well as some additional classes for testing with MVVM.<br /><br /><b>Does MVVM make you feel like...</b><br />\n<ul><li>Too much boilerplate!</li>\n<li>If data binding in Xaml is so loose and type-free, why do my ViewModels have to be strongly typed?    </li>\n<li>What is this ICommand crap?</li>\n<li>INotifyPropertyChanged hurts my brain!</li>\n<li>My manager wants unit testing, how do I do that?</li>\n<li>I want to be free!</li></ul>\n<br /><b>Features (the Secret Sauce)</b><br />\n<ul><li>Minimalist framework size</li>\n<li>base ViewModel class implements\n<ul><li>INotifyPropertyChanged</li>\n<li>IDynamicMetaObjectProvider</li></ul></li>\n<li>Methods with signature matching Action or Action&lt;dynamic&gt; automatically map to an ICommand\n<ul><li>As do properties of type Action or Action&lt;dynamic&gt;</li></ul></li>\n<li>All dynamic properties work with WPF data binding and INotifyPropertyChanged</li>\n<li>A boolean CanX property automatically hooks up to CanExecute on a command of the same name</li>\n<li>Explicit and simple View-&gt;ViewModel wiring</li>\n<li>Extremely simple to setup</li>\n<li>Additional helpers for TDD and unit testing your ViewModels</li></ul>\n<br /><b>Planned Features</b><br />\n<ul><li>More examples and unit tests</li>\n<li>Test out some DLR languages like IronRuby/IronPython</li>\n<li>Convention based View-&gt;ViewModel wiring (this only works with Ninject currently)</li>\n<li>Add more helpers for specific non-MVVM-friendly scenarios</li>\n<li>WP7 support (when they get the DLR)</li></ul>\n<br /><b>Work from other Projects</b><br /><br />I wanted to acknowledge the use of some code from other projects.<br />\n<ul><li>EventToCommand from <a href=\"http://mvvmlight.codeplex.com\">MVVM Light</a></li>\n<li>PropertyObserver from <a href=\"http://mvvmfoundation.codeplex.com\">MVVM Foundation</a></li>\n<li>IWeakEventListener implementation for Silverlight from <a href=\"http://cinch.codeplex.com/\">Cinch</a></li>\n<li>TinyIoC for a very simple IoC option from <a href=\"https://github.com/grumpydev/TinyIoC\">https://github.com/grumpydev/TinyIoC</a></li></ul>\n<br />NoMvvm is now on NuGet!  Check it out <a href=\"http://nuget.org/List/Packages/NoMvvm\">here</a>.<br /><br />See the <a href=\"http://nomvvm.codeplex.com/documentation\">documentation</a> for more info on what NoMvvm looks like and how to use it.  Or hit up the <a href=\"http://nomvvm.codeplex.com/discussions\">discussion</a> to give me some much needed input.<br /><br /><b><i>Want to help?  Got good ideas?  Do you ride your bicycle without a helmet?  Hit me up and contribute!</i></b></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,TDD,C#,WPF,Dynamic,Silverlight,Model-View-ViewModel,MVVM,NuGet,",
  "LastEdited": "2011-09-10T14:20:06.483-07:00"
}