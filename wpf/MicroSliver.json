{
  "ProjectName": "MicroSliver",
  "Title": "MicroSliver",
  "Description": "MicroSliver is a micro, non-bloat, non-intimidating, charismatic and speedy .NET (ASP.NET/Silverlight/RIA Services/WPF/Forms) dependency injection container which has just the essentials.\r\n\r\nContains extension for Silverlight MVVM DI support.\r\n\r\nContains extension for RIA Services Domain Service DI support.\r\n\r\nContains extension for ASP.NET MVC Controller DI support.\r\n\r\nTired of large DI frameworks that require a significant amount of knowledge in order to understand or build on top of?  Look no further...\r\n\r\nAvailable on NuGet!",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nMicroSliver is a micro, non-bloat, non-intimidating and speedy .NET&nbsp;(ASP.NET, Silverlight, RIA Services, WPF, Forms and Metro!) dependency injection container which has just the&nbsp;essentials.</p>\r\n<p>Supports Metro .NET (WinRT)</p>\r\n<p>Contains extension for Silverlight and Metro MVVM DI support.</p>\r\n<p>Contains extension for RIA Services Domain Service DI support.</p>\r\n<p>Contains extension for ASP.NET MVC Controller DI support.</p>\r\n<p>Tired of large DI frameworks that require a significant amount of knowledge in order to understand or build on top of? &nbsp;Look no further...</p>\r\n<p>Available on <a href=\"http://nuget.org/packages/MicroSliver\">NuGet</a>!</p>\r\n<p>SignalR Dependency Resolver available on <a href=\"http://nuget.org/packages/signalr.microsliver\">\r\nNuGet</a> and <a href=\"https://github.com/jbillmann/SignalR.MicroSliver\">GitHub</a>!</p>\r\n<p><strong>Features</strong></p>\r\n<ul>\r\n<li>Fast! &nbsp;Early bench marking has it crushing other DI/IoC containers! </li><li>Fluid API! &nbsp;No annoying configuration files here. </li><li>Compact! &nbsp;Release build DLL is bite-size &lt; 15KB. </li><li>No Bloat! &nbsp;Contains the bare essentials: &nbsp;Constructor DI &amp; &nbsp;3 Life Cycle Options!\r\n</li><li>Simple to Use! &nbsp;Instantiate the container, add your mappings and you're off!\r\n</li><li>.NET! &nbsp;Built using .NET 4.0. </li><li>Metro .NET! Supports WinRT! </li><li>Silverlight and Metro MVVM Support! &nbsp;Extension to inject ViewModels! </li><li>RIA Services Support! Extension to inject custom domain services! </li><li>ASP.NET MVC Support!&nbsp;&nbsp;Extension to inject controllers! </li><li>SignalR&nbsp;Support! Dependency Resolver to inject hubs! </li></ul>\r\n<p><strong>How to use? &nbsp;Simple!</strong></p>\r\n<p>MicroSliver requires that objects which are injected (without creator) have a single public constructor without primitive/value types.&nbsp;</p>\r\n<p>In the example below, 2 different interfaces are mapped to concrete classes. &nbsp;The life cycle associated with the first mapping is subsequently instantiated each time whereas with the second mapping (Singleton) it is only created once. &nbsp;A call is\r\n then made to the container, Get&lt;T&gt;(), that will instantiate and/or inject the object based on the type and mappings. &nbsp;Not shown is the ability to limit scope by web request (ToRequestScope()).</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>IIoC ioc = <span style=\"color:blue\">new</span> IoC();\n<span style=\"color:green\">// Every time an object of type IContract is requested, it will return a new instance of type Concrete</span>\nioc.Map&lt;IContract, Concrete&gt;();\n<span style=\"color:green\">// When an object of type ISingletonContract is requested, if an instance already exists, it'll return that otherwise return a new instance</span>\nioc.Map&lt;ISingletonContract, SingletonConcrete&gt;().ToSingletonScope();\n\n<span style=\"color:green\">// The IoC container will instantiate &amp; inject any interfaces in the constructor of ClassA based on the mappings</span>\n<span style=\"color:blue\">var</span> classA = ioc.Get&lt;ClassA&gt;();\n<span style=\"color:green\">// Fetch an implementation for IContract</span>\n<span style=\"color:blue\">var</span> concrete = ioc.Get&lt;IContract&gt;();\n<span style=\"color:green\">// Fetch an implementation for ISingletonContract</span>\n<span style=\"color:blue\">var</span> concreteSingleton = ioc.Get&lt;ISingletonContract&gt;();\n...\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ClassA {\n    <span style=\"color:blue\">public</span> ClassA(IContract contract, ISingletonContract singletonContract){...}\n}\n</pre>\r\n</div>\r\n<p>You also have the ability to control object instantiation by providing a Creator.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Every time an object of type IContract is requested, it will make a call to your creator.  You do have the ability to make it a singleton.</span>\nioc.Map&lt;IContract&gt;(<span style=\"color:blue\">new</span> ContractCreator());\n\n<span style=\"color:blue\">var</span> classA = ioc.Get&lt;ClassA&gt;();\n\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ContractCreator : ICreator\n{\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> Create()\n    {\n        <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Concrete();\n    }\n}</pre>\r\n</div>\r\n<p><strong>How to use with Silverlight or Metro .NET (WinRT)? &nbsp;Simple!</strong></p>\r\n<p>Create a class that acts as a ViewModelLocator (Service Locator pattern - be aware of cons). &nbsp;(See below for additional Silverlight or Metro extension.)</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ViewModelLocator\n{\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> IIoC ioc;\n    <span style=\"color:blue\">public</span>  ViewModelLocator()\n    {\n        <span style=\"color:blue\">if</span>(ioc == <span style=\"color:blue\">null</span>)\n        {\n           ioc = <span style=\"color:blue\">new</span> IoC();\n           ioc.Map&lt;IInterfaceA, ClassA&gt;();\n           <span style=\"color:green\">//Add rest of mappings</span>\n        }\n     }\n     \n    <span style=\"color:blue\">public</span> MyViewModel myViewModel\n    {\n        <span style=\"color:blue\">get</span>\n        {\n            <span style=\"color:blue\">return</span> ioc.Get&lt;MyViewModel&gt;();\n         }\n     }\n}\n</pre>\r\n</div>\r\n<p>Add a reference in the Application.Resources for the App.xaml.&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>... \n\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Application.Resources</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">vl</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ViewModelLocator</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">viewModelLocator</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Application.Resources</span><span style=\"color:blue\">&gt;</span>\n\n...\n</pre>\r\n</div>\r\n<p>For each view that binds to a ViewModel class, let the ViewModelLocator handle the instantiation (and DI) of your ViewModel.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>...\n\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">UserControl</span> <span style=\"color:red\">DataContext</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding myViewModel, Source={StaticResource viewModelLocator}}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\n\n...\n\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Path=UserFirstName, Mode=TwoWay}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">TextBlock</span><span style=\"color:blue\">&gt;</span>\n</pre>\r\n</div>\r\n<p><strong>How to use RIA Services extension? &nbsp;Simple!</strong></p>\r\n<p>In the Application_Start of your Global.asax, instantiate your IoC Container, add your mappings and set the DomainService.Factory to an instance of MicroSliverDomainFactory. &nbsp;You are now able to use dependency injection with your RIA Servicves domain\r\n services.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.ServiceModel.DomainServices.Server;\n...\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Global : HttpApplication\n{\n    ...        \n    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">void</span> Application_Start(<span style=\"color:blue\">object</span> sender, EventArgs e)\n    {\n        \n        <span style=\"color:blue\">var</span> ioc = <span style=\"color:blue\">new</span> IoC();\n\n        ioc.Map&lt;IContract, Concrete&gt;().ToRequestScope();\n        <span style=\"color:green\">// Add rest of mappings</span>\n        DomainService.Factory = <span style=\"color:blue\">new</span> MicroSliver.Web.Extensions.MicroSliverDomainFactory(ioc);\n        \n    }\n    ...\n}\n</pre>\r\n</div>\r\n<p><strong>How to use ASP.NET MVC extension? Simple!</strong></p>\r\n<p>In your Global, inherit from the MicroSliverHttpApplication and override the LoadIIoC &amp; Application_Start methods.&nbsp; Within the LoadIIoC instantiate your IoC container and add your mappings.&nbsp; You are now able to use dependency injection with\r\n your controllers.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MvcApplication : MicroSliver.Web.Extensions.MicroSliverHttpApplication\n{\n\n    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IIoC LoadIIoC()\n    {\n        <span style=\"color:blue\">var</span> ioc = <span style=\"color:blue\">new</span> IoC();\n\n        ioc.Map&lt;IContract, Concrete&gt;().ToRequestScope();\n        <span style=\"color:green\">// Add rest of mappings</span>\n        <span style=\"color:blue\">return</span> ioc;\n    }\n\n    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Application_Start()\n    {\n        AreaRegistration.RegisterAllAreas();\n        RegisterGlobalFilters(GlobalFilters.Filters);\n        RegisterRoutes(RouteTable.Routes);\n    }\n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RegisterGlobalFilters(GlobalFilterCollection filters)\n    {\n        filters.Add(<span style=\"color:blue\">new</span> HandleErrorAttribute());\n    }\n\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RegisterRoutes(RouteCollection routes)\n    {\n        routes.IgnoreRoute(<span style=\"color:#a31515\">&quot;{resource}.axd/{*pathInfo}&quot;</span>);\n\n        routes.MapRoute(\n                <span style=\"color:#a31515\">&quot;Default&quot;</span>, <span style=\"color:green\">// Route name</span>\n                <span style=\"color:#a31515\">&quot;{controller}/{action}/{id}&quot;</span>, <span style=\"color:green\">// URL with parameters</span>\n                <span style=\"color:blue\">new</span> { controller = <span style=\"color:#a31515\">&quot;Home&quot;</span>, action = <span style=\"color:#a31515\">&quot;Index&quot;</span>, id = UrlParameter.Optional }, <span style=\"color:green\">// Parameter defaults</span>\n                <span style=\"color:blue\">new</span> { controller = <span style=\"color:#a31515\">@&quot;[^\\.]*&quot;</span> }\n        );\n\n    }\n}\n</pre>\r\n</div>\r\n<p>&nbsp;<strong>How to use Silverlight or Metro .NET (WinRT) extension? &nbsp;Simple!</strong></p>\r\n<p>Create a class that inherits from the MicroSliverViewModelLocator (namespace: MicroSliver.Extensions.Metro or MicroSliver.Extensions.Silverlight),&nbsp;add your mappings and make a call to LoadIoC in the Base Class.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ViewModelLocator : MicroSliverViewModelLocator\n{\n    <span style=\"color:blue\">public</span>  ViewModelLocator()\n    {\n        IIoC ioc = <span style=\"color:blue\">new</span> IoC();\n        ioc.Map&lt;IInterfaceA, ClassA&gt;();\n        <span style=\"color:green\">//Add rest of mappings</span>\n\n        <span style=\"color:green\">//Use this call for Silverlight</span>\n        LoadIoC(ioc, Assembly.GetExecutingAssembly());\n\n        <span style=\"color:green\">//Use this call for Metro</span>\n        LoadIoC(ioc, <span style=\"color:blue\">this</span>.GetType().GetTypeInfo().Assembly);\n\n     }\n}\n</pre>\r\n</div>\r\n<p>Add a reference in the Application.Resources for the App.xaml.&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>..\n\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Application.Resources</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">vl</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ViewModelLocator</span> <span style=\"color:red\">x:Key</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">viewModelLocator</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Application.Resources</span><span style=\"color:blue\">&gt;</span>\n\n..\n</pre>\r\n</div>\r\n<p>For each view that binds to a ViewModel class, let the ViewModelLocator handle the instantiation (and DI) of your ViewModel. &nbsp;Note that brackets are required since it is doing an indexer binding and that *full* namespace of the ViewModel is required\r\n for instantiation.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>...\n\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">UserControl</span> <span style=\"color:red\">DataContext</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding [FullNameSpace.UserViewModel], Source={StaticResource viewModelLocator}}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\n\n...\n\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Path=UserFirstName, Mode=TwoWay}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">TextBlock</span><span style=\"color:blue\">&gt;</span>\n</pre>\r\n</div>\r\n<p><strong>How to use&nbsp;SignalR extension? Simple!</strong></p>\r\n<p>In your Global, instantiate your IoC container and add your mappings.&nbsp; To set MicroSliver as a custom SignalR dependency resolver, simply instantiate MicroSliverDependencyResolver, pass in your IoC container and set GlobalHost.DependencyResolver to\r\n it. &nbsp;Your hubs, for example, are ready to be injected!</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> ioc = <span style=\"color:blue\">new</span> IoC();\nioc.Map&lt;IContract, Concrete&gt;();\n<span style=\"color:green\">// Add rest of mappings</span>\n\n<span style=\"color:blue\">var</span> resolver = <span style=\"color:blue\">new</span> MicroSliverDependencyResolver(ioc);\nGlobalHost.DependencyResolver = resolver;\nRouteTable.Routes.MapHubs();\n</pre>\r\n</div>\r\n<p>Follow Jeremiah Billmann on Twitter: @JBillmann</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-06-21T12:19:33.957-07:00"
}