{
  "ProjectName": "simplemvvmtoolkit",
  "Title": "Simple MVVM Toolkit for WPF, SL, Windows Store, Windows Phone, iOS and Android",
  "Description": "Simple MVVM Toolkit makes it easier to develop WPF, SL, Windows Store, Windows Phone, iOS and Android apps using the Model-View-ViewModel design pattern.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h2>Simple MVVM Toolkit Express</h2>\r\n<p>In order to support compatibility with other platforms, I have created a new project hosted on GitHub:\r\n<strong>Simple MVVM Toolkit Express:&nbsp;</strong><a href=\"https://github.com/SimpleMvvm/SimpleMvvmToolkit.Express\">https://github.com/SimpleMvvm/SimpleMvvmToolkit.Express</a>. &nbsp;The NuGet package is available here:&nbsp;<a href=\"https://www.nuget.org/packages/SimpleMvvmToolkit.Express\">https://www.nuget.org/packages/SimpleMvvmToolkit.Express</a>.\r\n &nbsp;The Express version has all the features of the existing framework, except that legacy platforms are not supported (.NET 4.0, Silverlight), and new platforms are targeted, including .NET Core (NetStandard1.3), Universal Windows Platform, Portable Class\r\n Libraries, and Xamarin (iOS, Android, Windows Store, Windows Phone).</p>\r\n<h2>Project Description</h2>\r\n<p>Simple MVVM Toolkit makes it easier to develop WPF, Silverlight, Windows Store, Windows Phone, iOS and Android applications using the\r\n<em>Model-View-ViewModel </em>design pattern. The purpose of the toolkit is to provide a simple framework and set of tools for getting up to speed quickly with applications based on the MVVM design pattern. The emphasis is on\r\n<strong>simplicity</strong>, but it contains everything you need to implement MVVM for real-world line of business applications.</p>\r\n<h2>Donate to the Project</h2>\r\n<p><em>Donations to <strong>Simple MVVM Toolkit</strong> are now being accepted!</em>&nbsp; You can contribute one of three amounts: $10, $15 or $25.&nbsp; What a deal.\r\n<img src=\"/projects/simplemvvmtoolkit/9df14dfd-8638-4049-ab15-4fb82f93c580\" alt=\"Smile\" style=\"border-style:none\">&nbsp;&nbsp; Just click on the link below in order to pay via PayPal account or by credit card.&nbsp; The good\r\n news is that having a revenue stream will allow me to spend more time updating the project, improving the developer experience, and adding new features and support for additional platforms.&nbsp; I will also be able to create new tutorials and screencasts.</p>\r\n<p><a href=\"http://tonysneed.com/projects-donate.html\">Simple MVVM Project Donations</a></p>\r\n<h2>What&rsquo;s Hot</h2>\r\n<p><strong>Version 5.5 of Simple Mvvm Toolkit now supports iOS and Android!</strong>&nbsp; There is also support for creating\r\n<strong>Portable Class Libraries</strong> that contain view models shared across multiple platforms: WPF, Silverlight, Windows Store, Windows Phone, iOS and Android.&nbsp; There is a terrific multi-project Visual Studio template for creating a\r\n<em>multi-platform solution with portable models, view models, service agents and locators</em>.</p>\r\n<p>Simple MVVM Toolkit v5 now supports <strong>Visual Studio 2013</strong>! Use v4 to develop MVVM apps for WPF 4.51, SL5 (including Ria Services), Windows Store 8.1 and Windows Phone 8.&nbsp; If you are still using Visual Studio 2010, which is required for\r\n Windows Phone 7 apps, then install Simple MVVM Toolkit v3.</p>\r\n<p>Simple MVVM Toolkit v5 for Visual Studio 2013 is built using <em>Portable Class Library</em> tools, so that it will be easier to add support for multiple platforms. All NuGet packages have now been consolidated into a single package: SimpleMvvmToolkit v5.0.&nbsp;\r\n These are loaded automatically into the VSIX installer.&nbsp; Code snippets will be released in a separate installer.</p>\r\n<h4>Take a look at the <span style=\"color:#ff0000\">Getting Started screencast</span>!</h4>\r\n<p>You can <a href=\"http://s3.amazonaws.com/simplemvvmscreencasts/gettingstarted.mp4\">\r\ndownload</a> the screencast to watch it offline on your pc or mobile device.</p>\r\n<h4>View the <span style=\"color:#ff0000\">Real-World MVVM with RIA Services </span>\r\nScreencast: <br>\r\n<strong>Real-World MVVM Part 1</strong>:&nbsp; <a href=\"http://simplemvvmscreencasts.s3.amazonaws.com/mvvm-riaservices-part1.mp4\">\r\nDownload</a> (PC or mobile device) <br>\r\n<strong>Real-World MVVM Part 2</strong>:&nbsp; <a href=\"http://simplemvvmscreencasts.s3.amazonaws.com/mvvm-riaservices-part2.mp4\">\r\nDownload</a> (PC or mobile device)</h4>\r\n<h4>Simple MVVM Toolkit can be downloaded from within Visual Studio by selecting the Tools menu,\r\n<span style=\"color:#ff0000\">Extension Manager</span>!</h4>\r\n<p><img title=\"smvvm-vsext\" src=\"http://download.codeplex.com/download?ProjectName=simplemvvmtoolkit&DownloadId=229239\" alt=\"smvvm-vsext\" width=\"600\" height=\"390\" border=\"0\" style=\"padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-width:0px\"></p>\r\n<h4>Simple MVVM Toolkit now has an <span style=\"color:#ff0000\">installer</span>!&nbsp; Just\r\n<a href=\"http://simplemvvmtoolkit.codeplex.com/releases\">download</a> and run it.</h4>\r\n<p><img title=\"SimpleMvvmInstaller\" src=\"http://download.codeplex.com/download?ProjectName=simplemvvmtoolkit&DownloadId=229240\" alt=\"SimpleMvvmInstaller\" width=\"600\" height=\"220\" border=\"0\" style=\"padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-width:0px\"></p>\r\n<h4>Simple MVVM Toolkit has some awesome Visual Studio <span style=\"color:#ff0000\">\r\nproject templates</span>!</h4>\r\n<p><img title=\"mvvm-proj-sl4\" src=\"http://download.codeplex.com/download?ProjectName=simplemvvmtoolkit&DownloadId=229241\" alt=\"mvvm-proj-sl4\" width=\"600\" height=\"390\" border=\"0\" style=\"padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-width:0px\"></p>\r\n<p>From within Visual Studio, select File, New Project, then click on the Mvvm category under either Windows (for WPF), Silverlight, or Silverlight for Windows Phone.&nbsp; After clicking OK you get a complete project with a folder structure and a ready-made\r\n MVVM app.</p>\r\n<p><img title=\"smvvm-sl\" src=\"http://download.codeplex.com/download?ProjectName=simplemvvmtoolkit&DownloadId=229242\" alt=\"smvvm-sl\" width=\"274\" height=\"342\" border=\"0\" style=\"padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-width:0px\"></p>\r\n<p>Here is what you get from the Silverlight project template.&nbsp; Just follow the instructions in ReadMe.txt.</p>\r\n<p><img title=\"smvvm-ria\" src=\"http://download.codeplex.com/download?ProjectName=simplemvvmtoolkit&DownloadId=229243\" alt=\"smvvm-ria\" width=\"274\" height=\"557\" border=\"0\" style=\"padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-width:0px\"></p>\r\n<p>Here is what you get from the RiaServices template.&nbsp; Just hit F5 and you&rsquo;ll see a fully functional MVVM Silverlight app that uses WCF RIA Services.</p>\r\n<p><img title=\"smvvm-riarun\" src=\"http://download.codeplex.com/download?ProjectName=simplemvvmtoolkit&DownloadId=229244\" alt=\"smvvm-riarun\" width=\"600\" height=\"462\" border=\"0\" style=\"padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-width:0px\"></p>\r\n<p>The kicker is that you also get a Test project that uses the Microsoft Silverlight Testing Framework.</p>\r\n<p><img title=\"smvvm-testrun\" src=\"http://download.codeplex.com/download?ProjectName=simplemvvmtoolkit&DownloadId=229245\" alt=\"smvvm-testrun\" width=\"600\" height=\"462\" border=\"0\" style=\"padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-width:0px\"></p>\r\n<h2>Features</h2>\r\n<p><span style=\"text-decoration:underline\">New Features in v2</span>:</p>\r\n<ul>\r\n<li>An <strong>Installer </strong>that places the binaries, templates and snippets in all the right places.\r\n<ul>\r\n<li>Copies binaries, libraries, <strong>samples and source code </strong>to one location\r\n</li><li>Copies Visual Studio <strong>templates and code snippets </strong>to the correction location\r\n</li><li>Registers the binaries so that SimpleMvvmToolkit appears in the Visual Studio\r\n<strong>Add References </strong>dialog. </li></ul>\r\n</li><li>Visual Studio <strong>project templates</strong>\r\n<ul>\r\n<li>Project templates for Silverlight, Windows Phone and WPF, which include starter Locator, Model, ViewModel, View and ServiceAgent classes.\r\n</li><li>A multi-project Visual Studio template that includes a Silverlight client, a Silverlight Unit Test project and a WCF RIA Services project.\r\n</li></ul>\r\n</li><li>The <strong>main sample </strong>now has Parts 2 and 3\r\n<ul>\r\n<li>Part 2 demonstrates navigation, messaging, property associations, async </li><li>Part 3 demonstrates using the toolkit with WCF RIA Services, including persistence with CRUD operations\r\n</li></ul>\r\n</li><li>Simplified and consolidated <strong>ViewModelLocator</strong> template which creates ViewModels on-demand.\r\n<ul>\r\n<li>This allows Views to control the ViewModel lifetime, avoiding potential memory leaks\r\n</li><li>Silverlight and Windows Phone apps use the same ViewModelLocator template </li><li>The code snippet to insert injected (for dependency injection using MEF) ViewModels is more robust\r\n</li></ul>\r\n</li><li>Improved support for <strong>unit testing </strong>(with the Silverlight Unit Testing Framework &ndash; included in the Silverlight Toolkit)\r\n<ul>\r\n<li>Includes an extension method for enqueuing&nbsp; conditional tasks with a timeout\r\n</li></ul>\r\n</li><li>Simpler and more robust MessageBus\r\n<ul>\r\n<li>Now uses leak-proof eventing model so that unregistering for messages is no longer required\r\n</li><li>ViewModelBase now includes helper methods for sending and receiving messages </li></ul>\r\n</li><li><strong>GenericDelegateCommand</strong> supports parsing string parameters from XAML\r\n<ul>\r\n<li>Plays nicer with CommandParameter in XAML </li></ul>\r\n</li></ul>\r\n<p><span style=\"text-decoration:underline\">Other Features</span>:</p>\r\n<ul>\r\n<li>Support for <strong>Silverlight</strong>, <strong>WPF </strong>and <strong>Windows Phone 7</strong>\r\n</li><li>Helper <strong>classes, </strong>Visual Studio <strong>templates, code snippets</strong>\r\n<ul>\r\n<li><span style=\"text-decoration:underline\">Helpers</span>: Model and view-model base classes, MessageBus,\r\n<br>\r\nDelegateCommand, MEF Export attribute </li><li><span style=\"text-decoration:underline\">Templates</span>: View-model, detail view-model,\r\n<br>\r\nview-model locator, injected view-model locator </li><li><span style=\"text-decoration:underline\">C# Code Snippets</span>: bindable property, vm locator, command\r\n</li><li><span style=\"text-decoration:underline\">XML Code Snippets</span>: Blend event-trigger\r\n</li></ul>\r\n</li><li><strong>Sample applications </strong>with step-by-step instructions\r\n<ul>\r\n<li>End-to-end Silverlight Mvvm sample using WCF </li><li>Simplified &ldquo;Getting Started&rdquo; sample </li><li>Associated properties sample </li><li>Async execution sample </li><li>Enum to list conversion sample </li><li>Message bus sample </li><li>Navigation sample </li><li>Dependency injection (MEF) with unit testing </li></ul>\r\n</li><li>Model and ViewModel <strong>base classes</strong> </li><li>Strongly typed <strong>data binding </strong>with <em>lambda expressions</em>\r\n</li><li>View-model <strong>locator service</strong> </li><li><strong>DelegateCommand </strong>based on ICommand </li><li><strong>AssociateProperties </strong>method to link view-model and model properties\r\n</li><li>Event-based facility for <strong>two-way communication </strong>between views and view-models\r\n</li><li><strong>MessageBus </strong>for sending notifications in a <em>loosely coupled\r\n</em>fashion among view-models </li><li><strong>Dependency injection </strong>(IoC) for <em>unit testing </em>using <strong>\r\nMEF </strong>(Managed Extensibility Framework) </li><li><strong>IEditableDataObject </strong>support with deep cloning </li><li>Conversion of <strong>enums </strong>to lists for populating combo boxes </li><li><strong>Async support </strong>with transparent marshaling to the UI thread </li><li>Built-in support for <strong>WCF RIA Services</strong> </li></ul>\r\n<h2>What You Get</h2>\r\n<p>The toolkit consists of a set of <strong>helper classes</strong>, some Visual Studio\r\n<strong>templates</strong>, and a set of <strong>code snippets</strong>. All you have to do is reference the helper assembly (or include the Visual Studio project in your solution), add view-models using the Visual Studio item templates, and insert properties\r\n using the included mvvmprop code snippet. The view-models extend a base class that supplies two-way data binding. There is also an item template for a detail-based view model that extends a base class with editing capability (via IEditableDataObject). You\r\n can also add a view-model locator using the corresponding item template and code snippet.</p>\r\n<h2>Getting Started</h2>\r\n<p>The best way to get started is to open the Getting Started sample in Samples\\SimpleMvvm-Other and follow instructions in the\r\n<a href=\"http://simplemvvmtoolkit.codeplex.com/wikipage?title=Getting%20Started\">\r\nGetting Started</a> section of the online <a href=\"http://simplemvvmtoolkit.codeplex.com/documentation\">\r\nDocumentation</a> for creating a Silverlight MVVM application from scratch using the toolkit.</p>\r\n<p>After creating your first app, you&rsquo;re ready to explore the main sample app.&nbsp; Open up Before and After versions of the sample application included in the downloaded zip file. There is a ReadMe.txt file with detailed step-by-step instructions. The\r\n Before solution is an n-tier application that retrieves products and categories from the Northwind sample database using a basic WCF service. (In case you'd like to reproduce the Before project, there is a text file describing how to do that.)</p>\r\n<p>Next you can check out samples for async execution, associated properties, enum to list conversion, notifications using the Message Bus, using view-model driven navigation, and dependency injection with unit testing.</p>\r\n<h2>About the Author</h2>\r\n<p><strong><a href=\"http://www.codeplex.com/site/users/view/tonysneed\">Tony Sneed</a>\r\n</strong>is an instructor for the developer training company, <a href=\"http://www.develop.com/\">\r\nDevelopMentor</a>, where he authors and teaches courses on <a href=\"http://www.develop.com/training-course/new-net-3-net-3.5-linq\">\r\n.NET 3.5-4.0</a>, <a href=\"http://www.develop.com/training-course/entity-framework-4.0\">\r\nEntity Framework</a>, Windows Communication Foundation and Silverlight.&nbsp; He has a keen interest in MVVM, Managed Extensibility Framework, and WCF RIA Services.&nbsp; You can read his\r\n<a href=\"http://blog.tonysneed.com/\">blog</a> or follow him on <a href=\"http://twitter.com/tonysneed\">\r\nTwitter</a> and <a href=\"http://www.facebook.com/anthony.sneed\">Facebook</a>, where he has created a\r\n<a href=\"http://www.facebook.com/home.php?sk=group_181987988497920\">group</a> for people using MVVM to design Silverlight applications.&nbsp; He is a frequent speaker at\r\n<a href=\"http://ddnug.net/\">user groups</a> and conferences and has written articles for\r\n<a href=\"http://msdn.microsoft.com/en-us/magazine/dd263098.aspx\">MSDN Magazine</a>.</p>\r\n<h2>What's Next?</h2>\r\n<p>I plan to put out additional blog posts and a series of screen casts on using the Simple MVVM Toolkit and exploring different features.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Silverlight,MVVM,messaging,",
  "LastEdited": "2016-05-25T09:56:52.43-07:00"
}