{
  "ProjectName": "wpfwizard",
  "Title": "WPF Wizard Control",
  "Description": "WPF user control (not a custom control) for generically hosting multiple-step wizards.  Uses MVVM, you create the model and view for each step and optionally configure steps that guide the wizard along a different workflow.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />WPF user control &#40;not a custom control&#41; for generically hosting multiple-step wizards.  Uses MVVM, you create the model and view for each step and optionally configure steps that guide the wizard along a different workflow.<br />\n<hr />\nUpon looking for a WPF wizard control, I came across <a href=\"http://www.codeproject.com/KB/WPF/InternationalizedWizard.aspx\">this project</a>.  It&#39;s a great implementation of a wizard, but I wanted a generic control.  So I modified that project in the following ways:\n<ul><li>Made it generic: The classes that support the wizard take a type parameter that is the type of the object to be modeled by the wizard.  The current code uses the wizard to model the same object the original project did: CupOfCoffee.</li>\n<li>Made the steps generic: The original project had the steps hard coded into the main wizard model&#39;s Xaml.  In this project, the wizard model accepts a list of steps and the WizardView displays them dynamically.</li>\n<li>Allow for varying paths through the wizard: Any step can be configured to jump to a different step in the wizard&#39;s complete list of steps.  The display of all possible steps will reflect the change in &quot;workflow.&quot;</li>\n<li>Removed internationalization: I simply didn&#39;t have this requirement.  Thus, I&#39;d rather the UI just shows the actual names of enumerations of options (splitting the enum name into a readable display).</li></ul>\n<br />The basic steps for usage are:\n<ol><li>Figure out what all the steps will be (for all possible paths through the wizard).</li>\n<li>Designate an object with a parameter-less constructor to use as the &quot;wizard business object.&quot;  This guy contains all the user&#39;s selections.</li>\n<li>Create views and models for each step.\n<ol><li>Each step model descends from WizardStepViewModelBase.</li>\n<li>Set properties of WizardStepViewModelBase&#39;s instance of the wizard business object as necessary.</li>\n<li>If required, include a special option group that will change the workflow of the wizard.</li>\n<li>For your ViewModels, there are a few other &quot;model&quot; classes available to help:\n<ol><li>OptionViewModel for a radio button.  In UI, bind to a MultiOptionGroupView for check box.</li>\n<li>RouteOptionViewModel for a radio button, the selection of which will &quot;route&quot; the user through different paths in the wiz.</li></ol></li>\n<li>In each step view model, you can package the options into a collection and bind them to the wizard UI controls in your step view.</li></ol></li>\n<li>Create an instance of WizardViewModel.</li>\n<li>Pass a list of the steps (CompleteStep: model and view) to it calling ProvideSteps.\n<ol><li>The order in which you add steps into the list passed to ProvideSteps is the order the steps will appear in the wiz.  The wizard will modify the route (hiding / showing steps) as selections are made. See 3.4.2 above.</li></ol></li>\n<li>Display the WizardView (WizardViewModel is it&#39;s DataContext).</li></ol>\n<br />- See WizardClassDiagram and the coffee wizard implementation for details.<br />- VS 2010 - 2013</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF Controls,",
  "LastEdited": "2014-05-23T10:17:27.417-07:00"
}