{
  "ProjectName": "nmcsmem",
  "Title": "C# Memory Tools",
  "Description": "A collection of p/Invoke, memory and text tools ported from Visual Basic and reimplmented in C#.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>This is a permanent home for all of my public C# projects of miscellaneous origin.\r\n<br>\r\n<br>\r\nThere is a lot of stuff going into the C# library. &nbsp;I've so far organized it into 5 libraries, one of which is portable. &nbsp;I'm putting as much as I can into the portable library. &nbsp;The functions that absolutely require that you be compiled with\r\n your correct platform are all in a single hardware library. &nbsp;<br>\r\n<br>\r\nThere's a lot of useful stuff, in here ... and it will keep growing.<br>\r\n<br>\r\nRight now, I have MemPtr.cs and a small hardware disk info library. &nbsp;There's a small example C# WinForms program to demonstrate enumeration of disks (without WMI), and there is a small VB app that takes advantage of a C# class called FSMonitor, which is\r\n a pretty robust out-of-thread file system monitor with message queuing written on top of a NativeWindow (NativeWindows are useful).<br>\r\n<br>\r\nMemPtr.cs is a lot like MemPtr.vb... there is a very thorough description at&nbsp;<a href=\"http://nmdt.codeplex.com\">Blob, Mem and Other Useful Tools</a>.<br>\r\n<br>\r\nAlso new is SafePtr.cs. &nbsp;It's like MemPtr, but it's wrapped in a SafeHandle. &nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;I'm going to try to pretty this page up, later.<br>\r\n<br>\r\n<strong>My File system monitor class is probably better than the original implementation ... and it's written with WPF in mind. &nbsp;You should take a look at it.</strong></p>\r\n<p>&nbsp;</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,text,CRC32,SetupDi,unmanaged memory,device info,disk info,sectors,file system monitor,ReadDirectoryChanges,buffer,polar coordinates,color math,HSV,portable library,FileSystemWatcher,wpf,",
  "LastEdited": "2014-04-08T20:48:01.92-07:00"
}