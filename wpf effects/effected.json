{
  "ProjectName": "effected",
  "Title": "EffectEd",
  "Description": "EffectEd is an HLSL code editor for Direct3D and XNA. It's a lightweight alternative to heavy applications like FX Composer. \r\n\r\nEffectEd's priority is to easily integrate in your daily workflow writing shader and effect code for DirectX (and thus, also for XNA). \r\n\r\nIt has the most desirable features: \r\n* syntax highlighting\r\n* checking for errors using the D3D compiler\r\n* intelligent code completion \r\n\r\n... and several other features to make it valuable and simple to use.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rEffectEd is an HLSL code editor for Direct3D and XNA. It&#39;s a lightweight alternative to heavy applications like FX Composer. <br /><br />EffectEd&#39;s priority is to easily integrate in your daily workflow writing shader and effect code for DirectX &#40;and thus, also for XNA&#41;. <br /><br />It has the most desirable features&#58; <br />&#42; syntax highlighting<br />&#42; checking for errors using the D3D compiler<br />&#42; intelligent code completion <br /><br />... and several other features to make it valuable and simple to use.<br />\n<h1>Getting started</h1>\rWatch this demonstration video first. Come back here afterwards to find more details on how to use EffectEd.<br /><br /><div class=\"video\" style=\"text-align:Center\"><span class=\"player\"><object height=\"285px\" width=\"320px\"><param name=\"movie\" value=\"http://www.youtube.com/v/kt-WbUuXvgU\"></param><param name=\"wmode\" value=\"transparent\"></param><embed height=\"285px\" width=\"320px\" type=\"application/x-shockwave-flash\" wmode=\"transparent\" src=\"http://www.youtube.com/v/kt-WbUuXvgU\" /></object></span><br /><span class=\"external\"><a href=\"http://www.youtube.com/watch?v=kt-WbUuXvgU\" target=\"_blank\">Launch in another window</a></span></div><br />\n<h1>Overview</h1>\rThe big features that are currently implemented:<br />\n<ul><li>syntax highlighting</li>\n<li>waterproof compilation feedback by directly using the Direct3D compiler</li>\n<li>code completion (Ctrl+space)</li>\n<li>your own &quot;new file&quot; templates</li></ul>\n<br />Because this is a young project and I has no decent HLSL specifications available, the code-completion and syntax highlighting logic is functioning but the data for it is still incomplete. A lot is there, but it&#39;s certainly not finished. <br /><br />It is easily customized, though, through the xml files in the data folder which allow you to:\n<ul><li>change/add context dependent code completion data (CodeAssistance.xml)</li>\n<li>change compiler Profiles per Direct3D version (CodeAssistance.xml)</li>\n<li>create your own &quot;new-file&quot; templates by saving your files to the data\\templates folder</li>\n<li>change syntax highlighting rules (hlsl10.xshd - for now, only one syntax definition for all Profiles)</li></ul>\n\n<h2>Upcoming...</h2>\r\nToDo list:<br />\n<ul><li>&quot;Go To Definition&quot; - F12 (using the already finished expression tree)\n<ul><li>jump to included files by opening a new instance of EffectEd</li>\n<li>jump to user defined functions from their function calls</li></ul></li>\n<li>Context menu with copy paste and other functions. (copy paste already works with Ctrl+X, C &amp; V but is not yet visualized)</li></ul>\n<br />\n<h1>Details</h1>\r\n<h2>Code completion</h2>\rThanks to the included expression tree parser for HLSL, code completion in EffectEd is aware of the position of your cursor in the logical structure of your code. You can trigger the code completion using Ctrl+space: if there is completion data defined for the logical position of your cursor, it will popup. If there isn&#39;t, nothing will happen. <br /><br />This way, it shows only relevant code suggestions for the location your cursor is at.<br />\n<h2>Compiler settings</h2>\rBecause Direct3D compilation provides some parameters like the profile or the entrypoint, EffectEd provides a feature to keep these settings per-file for you by including a single-line header into your file. This single line contains the compiler parameters. <br /><br />Thanks to this feature, you can have different settings for each file, which is especially handy when you put your shaders&#39; code in separate files in Direct3D 11. <br /><br />Note that using this header is optional: you can configure defaults too which are used when no header is found. Of course, using the header offers the most flexibility.<br /><br />EffectEd also has a GUI dialog to edit this header, so you don&#39;t have to learn the EffectEd header syntax., just use the dialog.<br /><br />The Compiler settings include ShaderFlags, EffectFlags, EntryPoint, Profile and Direct3D version (needed for selecting different compiler logic).<br />\n<h2>&quot;new file&quot; templates</h2>\rNext to some basic file templates, you can add your own templates simply by saving your file inside the \\data\\templates.  There is a small filename convention to define a sorting index in the filename.  Just look at the format of the filenames of the included templates, it&#39;s easy.<br />\n<h2>Include files</h2>\rAny #include file is searched for relative to the directory of the file being compiled.<br />\n<h2>Visual Studio integration</h2>\rI didn&#39;t have time to create a plugin for Visual Studio, I have no experience with this, so it would take quite some time. I welcome you to help me with this :)<br /><br />The best integration I get is by setting EffectEd as the default application for .fx and .hlsl files in Visual Studio&#39;s Solution Explorer. This way, it acts like just another source code editor.<br /><br />To support this, EffectEd has a setting to save your changes silently when closing the application - no question is popping up. This way, when using EffectEd from Visual Studio, you don&#39;t have to confirm saving changes when closing the editor.<br />\n<h2>Not supported/unfinished yet</h2>\rFor now I&#39;m happy with the feature set.  <br /><br />Of course, many things could be added such as a preview render window but this would be a lot of effort due to the rich featureset of HLSL. It&#39;s not just rendering a sphere with the effect file anymore... <br /><br />Next to that... a lot of small things I guess.  Let me know...<br />\n<h2>Bugs? Changes? Code completion data improvements?</h2>\rLet me know here: <a href=\"https://www.codeplex.com/site/users/contact/ThomasVT?OriginalUrl=http://www.codeplex.com/site/users/view/ThomasVT\">https://www.codeplex.com/site/users/contact/ThomasVT?OriginalUrl=http://www.codeplex.com/site/users/view/ThomasVT</a><br />\n<h1>Advanced topics</h1>\r\n<h2>Changing code completion data</h2>\rCode completion data is stored in &quot;\\data\\CodeAssistance.xml&quot;. This xml-file uses listings of code completion items per &quot;context&quot; (=the logical location). Examples of contexts are &quot;in a function&#39;s codeblock&quot;, &quot;in a function-call&#39;s argument list&quot; or even &quot;on the top level of the document&quot; if your cursor is in between code..<br /><br />In EffectEd, you can always see the string that identifies this logical location of the cursor at the bottom of the application. So, if you want to add or change code completion in that locical location, use that identifier at the bottom to create the ContextIdentifier (how? replace all &quot; &gt; &quot; separators in identifier by dots (&quot;.&quot;)). <br /><br />Examples of ContextIdentifiers:\n<ul><li>&quot;Document.FunctionDefinition.CodeBlock&quot; identifies the context where you are inside the curly brackets of a function definition.</li>\n<li>&quot;Document.FunctionDefinition.ArgumentList&quot; is the context where your cursor is inside the argumentlist of a function you wrote or are writing.</li>\n<li>&quot;Document&quot; is the top-level: this is your logical location if your cursor is not in any other expression.</li></ul>\n<br />This ContextIdentifier is used in the CodeAssistance.xml file to define listings of code completion for that logical position. Note that the xml file included with EffectEd already contains quite some code completion data, which you can use to get the hang of how it works. If the context you&#39;re working on already exists, you can add your items in the existing listing, else you need to create a new &quot;Context&quot; xml element.<br /><br />You may also omit some of the parts of ContextIdentifiers to make a more generic ContextIdentifier which triggers in more than one situation.  EffectEd simply uses it&#39;s current cursor location and finds the best matching ContextIdentifier in the xml data.  The code completion of the best match is used in that position.<br /><br />Examples:\n<ul><li>&quot;Document.CodeBlock&quot;: defines the location inside any curly bracketed code block, whether it&#39;s from a struct, a function, a technique or a pass.  Actually, this example can even be reduced to &quot;CodeBlock&quot; because everything sits below the &quot;Document&quot; root.</li>\n<li>&quot;FunctionCall.ArgumentList&quot;: defines the location inside the argument list of all function calls, whether the functioncall is inside a pass or any other code block.</li></ul>\n<br />Due to my limited time and resources, this code completion data isn&#39;t complete yet. I&#39;m looking for a decent HLSL specification (preferably with clear differentiation between D3D 9, 10 and 11), or some willing person with more experience in HLSL than me, who could clean this up :) (even small tips are welcome)<br />\n<h1>Version history</h1>\r\n<h2>v0.2</h2>\r<ul><li>Store window state</li>\n<li>Drag&amp;drop files from Windows</li>\n<li>DirectX 9 support (compilation, code completion and &quot;new&quot; template)</li>\n<li>RowNumber column can be disabled and less dominant visually.</li>\n<li>Some MainMenu changes and bugfixes</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "HLSL,Direct3D,DirectX,XNA,",
  "LastEdited": "2012-02-12T01:25:59.387-08:00"
}