{
  "ProjectName": "awesomium",
  "Title": "Awesomium.NET",
  "Description": ".NET Wrapper for Awesomium, a Web-Browser Framework",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<div style=\"width:640px\">\r\n<p><img title=\"Awesomium with .NET 4\" src=\"http://labs.awesomium.com/wp-content/uploads/awe_wpf_5.png\" alt=\"Awesomium with .NET 4\" style=\"display:block; margin-left:auto; margin-right:auto; width:500px\"></p>\r\n<h1>Welcome!</h1>\r\n<p>Hello and welcome to the introduction of Awesomium.NET, the official .NET wrapper for Awesomium. In this article, we&rsquo;ll talk about Awesomium, how it integrates with .NET, and the exciting new possibilities it opens for .NET developers.</p>\r\n<p><span id=\"more-797\">&nbsp;</span></p>\r\n<h2>What is Awesomium?\r\n<hr>\r\n</h2>\r\n<p>Awesomium is a flexible, windowless, web-browser framework that is meant to be used in your own applications. Think of it as if we took Chrome, chopped it into smaller, re-usable pieces, and served it to you on a nice shiny 32-bit BGRA pixel-buffer platter.</p>\r\n<p>It is not an application, it is not a web-browser; it is <strong>a <em>tool</em> to&nbsp;add web-browser-like capabilities to another application</strong>.</p>\r\n<p>Think of radical new browsing interfaces, multi-touch, HTML UI, in-game browsing, web-page capture, site scraping, automation, and awesome new web-browser mashups.</p>\r\n<p><img title=\"Screenshot from WebFlow demo\" src=\"http://awesomium.com/wp-content/uploads/webflow_light.jpg\" alt=\"\" width=\"300\" height=\"187\" style=\"display:block; margin-left:auto; margin-right:auto\"></p>\r\n<p>Awesomium is powerful and easy to use (it takes just 7 lines of code to render a page!) but gives you freedom when you want it.</p>\r\n<p>The framework handles almost all the low-level tasks for you (network stack, HTML parsing, JS engine, layout, rendering etc.) but you can absolutely redefine much of the low-level behavior if you&rsquo;d like (expose methods and data to Javascript, implement\r\n your own resource back-end, modify headers, and more).</p>\r\n<p><img title=\"Browser Integration\" src=\"http://awesomium.com/wp-content/uploads/integration.jpg\" alt=\"\" width=\"300\" height=\"152\" style=\"display:block; margin-left:auto; margin-right:auto\"></p>\r\n<blockquote>\r\n<p>&ldquo;&hellip;I think this balance between ease-of-use and low-level flexibility gives developers the best of both worlds.&rdquo;<br>\r\n<a title=\"Adam Simmons - The Rationale for Awesomium\" href=\"http://labs.awesomium.com/the-rationale-for-awesomium/\" target=\"_blank\"><br>\r\n</a></p>\r\n<div style=\"text-align:right\"><a title=\"Adam Simmons - The Rationale for Awesomium\" href=\"http://labs.awesomium.com/the-rationale-for-awesomium/\" target=\"_blank\">Adam Simmons</a></div>\r\n<p><a title=\"Adam Simmons - The Rationale for Awesomium\" href=\"http://labs.awesomium.com/the-rationale-for-awesomium/\" target=\"_blank\"></a><a title=\"Adam Simmons - The Rationale for Awesomium\" href=\"http://labs.awesomium.com/the-rationale-for-awesomium/\" target=\"_blank\"></a></p>\r\n</blockquote>\r\n<h2>What does this mean for .NET applications?\r\n<hr>\r\n</h2>\r\n<p>Let&rsquo;s face it, <strong>the default WebBrowser control is fairly restrictive and out-of-date</strong>. It&rsquo;s not much more than a wrapper around an\r\n<strong>IE ActiveX</strong> control and so you inherit all the limitations of Internet Explorer.</p>\r\n<div>\r\n<h3><span>.NET WebBrowser Source Code</span></h3>\r\n<div>\r\n<div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">//-------------------------------------------------------------</span>\n<span style=\"color:green\">//</span>\n<span style=\"color:green\">//    Copyright (c) Microsoft Corporation.  All rights reserved.</span>\n<span style=\"color:green\">//</span>\n<span style=\"color:green\">//</span>\n<span style=\"color:green\">//</span>\n<span style=\"color:green\">// Description:</span>\n<span style=\"color:green\">//      WebBrowser is a wrapper for the webbrowser</span>\n<span style=\"color:green\">//      activex control</span>\n<span style=\"color:green\">//      Copied from webbrowser.cs in [....]</span>\n<span style=\"color:green\">//</span>\n<span style=\"color:green\">// History</span>\n<span style=\"color:green\">//  04/17/05    KusumaV      Created</span>\n<span style=\"color:green\">//  02/22/08    [....]       Expose the WebBrowser control</span>\n<span style=\"color:green\">//  04/24/08    [....]     Implemented hosting the WebOC in the</span>\n<span style=\"color:green\">//                         browser process for IE 7&#43; Protected</span>\n<span style=\"color:green\">//                         Mode</span>\n<span style=\"color:green\">//-------------------------------------------------------------</span>\n\n<span style=\"color:blue\">using</span> System;\n<span style=\"color:blue\">using</span> System.ComponentModel;\n<span style=\"color:blue\">using</span> System.Runtime.InteropServices;\n<span style=\"color:blue\">using</span> System.Windows;\n<span style=\"color:blue\">using</span> MS.Win32;\n\n<span style=\"color:green\">// [...] //</span>\n</pre>\r\n</div>\r\n</div>\r\n<div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">namespace</span> System.Windows.Controls\n{\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> This is a wrapper over the native WebBrowser control </span>\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> implemented in shdocvw.dll. </span>\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks&gt;</span>\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> The WebBrowser class is currently not thread safe. </span>\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Multi-threading could corrupt the class internal state,</span>\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> which could lead to security exploits (see example in </span>\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> devdiv bug #196538). So we enforce thread affinity. </span>\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/remarks&gt;</span>\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">sealed</span> <span style=\"color:blue\">class</span> WebBrowser : ActiveXHost\n    {\n        <span style=\"color:green\">//----------------------------------------------</span>\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<h3>In short terms:</h3>\r\n<ul>\r\n<li>You are <strong>embedding IE</strong> in your application. Need we say more? </li><li>You are <strong>wrapping an ActiveX control</strong>; and if you want any kind of interoperability with the page, you need to go through a lot of\r\n<strong>COM Interop</strong>. Furthermore, you&rsquo;re limited to Windows-only. </li><li>You depend on the version of IE your client has installed. If you intend to display specific web pages in your application,\r\n<a title=\"Internet Explorer vs. Internet Explorer\" href=\"http://windows.microsoft.com/en-US/internet-explorer/products/ie-9/compare-browsers?T1=tab2\" target=\"_blank\">\r\nyou cannot expect that they will be displayed the same way in all systems</a>; you cannot even expect they will be displayed at all, if for example the pages are designed using modern HTML or Javascript features that the installed IE version does not support\r\n</li><li>You depend on your client&rsquo;s <strong>Internet Options</strong> settings: What if, for example, your client, who does not use IE any longer, had once set a proxy through Internet Options, that is no longer valid?\r\n</li><li>The WebBrowser is&nbsp;<strong>not windowless</strong>. You have absolutely no control over what is painted or how it&rsquo;s painted and can&rsquo;t transform or animate it using any of the normal WPF facilities.\r\n</li></ul>\r\n<div id=\"attachment_893\" style=\"text-align:center\"><a href=\"http://labs.awesomium.com/wp-content/uploads/WebBrowserTest.png\"><img title=\"Testing .NET WebBrowser\" src=\"http://labs.awesomium.com/wp-content/uploads/WebBrowserTest-300x123.png\" alt=\"Testing .NET WebBrowser\" width=\"300\" height=\"123\" style=\"display:block; margin-left:auto; margin-right:auto\"></a>\r\n<p>Same .NET 2.0 application running in 2 different systems</p>\r\n</div>\r\n<h3>How is Awesomium Different?</h3>\r\n<ul>\r\n<li>Awesomium is based on <strong>Chromium</strong>: a&nbsp;browser project that aims to build a safer, faster, and more stable way for all Internet users to experience the web. As such, the Awesomium Web Browser Framework supports the latest in web standards:\r\n HTML5 semantics, JavaScript, and CSS3, as well as Flash&trade; and Silverlight&trade; plugins.<br>\r\n<img title=\"HTML5, Flash™ and Silverlight™\" src=\"http://labs.awesomium.com/wp-content/uploads/html5_flash_silverlight_320.png\" alt=\"HTML5, Flash™ and Silverlight™\" width=\"320\" height=\"104\" style=\"display:block; margin-left:auto; margin-right:auto\">\r\n</li><li>Awesomium is <strong>Platform Independent</strong>! Even for <strong>.NET</strong> developers with the use of our\r\n<strong>Awesomium.Mono </strong>assembly that is part of the <strong>Awesomium.NET\r\n</strong>project.<br>\r\n<img title=\"Windows, Mac OSX and Linux\" src=\"http://labs.awesomium.com/wp-content/uploads/win_mac_lin_320.png\" alt=\"Windows, Mac OSX and Linux\" width=\"320\" height=\"102\" style=\"display:block; margin-left:auto; margin-right:auto\">\r\n</li><li>Awesomium is independent and <strong>highly configurable</strong>. You do not need to rely on components or settings that your application cannot be aware of. Everything comes packed with your application.\r\n</li><li>Awesomium is <strong>windowless</strong>! It renders straight&nbsp;to a pixel buffer (a bucket that stores pixels in memory).&nbsp;That basically means that if you want to actually see a web-page on your screen, you&rsquo;ll need to display it yourself\r\n (which is a <em>good thing</em>, it gives you the freedom to display it any way you want).\r\n</li><li>Awesomium uses a <strong>multi-process</strong> architecture for crash isolation, security sandboxing, and premium load-balancing across multiple CPU cores.\r\n<p><img title=\"Multi-Process Awesomium\" src=\"http://labs.awesomium.com/wp-content/uploads/multiprocess.jpg\" alt=\"Multi-Process Awesomium\" width=\"312\" height=\"222\" style=\"display:block; margin-left:auto; margin-right:auto\"></p>\r\n</li></ul>\r\n<h2>The Awesomium.NET Project\r\n<hr>\r\n</h2>\r\n<p>The Awesomium.NET project wraps all the exciting features of Awesomium into a set of technology-related .NET assemblies.</p>\r\n<h3 style=\"text-align:center\">The Awesomium.NET Assemblies:</h3>\r\n<p><img title=\"Awesomium.NET Assemblies\" src=\"http://labs.awesomium.com/wp-content/uploads/Awesomium_3.png\" alt=\"Awesomium.NET Assemblies\" style=\"display:block; margin-left:auto; margin-right:auto; width:500px\"></p>\r\n<h3>New Features:</h3>\r\n<p>Starting with Awesomium SDK v1.6.3, we have a introduced a number of exciting new features to our .NET wrapper. Here are just some of them:</p>\r\n<ul>\r\n<li>Rendering performance has been noticeably improved </li><li>Visual Studio integration has been greatly improved. The Windows installer now includes project templates and will automatically register all .NET controls in your VS Toolbox.\r\n</li><li>On Windows, Awesomium will be installed into the GAC (Global Assembly Cache) and all dependencies will be automatically deployed to your output directory when you link against the managed assembly.\r\n</li><li>Child Process configuration has been added. This will allow you to use your own executable to host the WebView child-process (that way, in the Task Manager, all sub-processes will share the name of your executable).\r\n</li><li>Mono support has been improved across all platforms. Now uses a single assembly for all platforms and automatically loads Awesomium dependencies via ldd on Linux.\r\n</li><li>Integrates all recent core changes (History API, Login Dialogs, Javascript Dialogs, etc.)\r\n</li></ul>\r\n<h2>Presentation\r\n<hr>\r\n</h2>\r\n<p>Let us take a closer look to each of the assemblies in Awesomium.NET and explore some of their major features.</p>\r\n<h2>Awesomium.Core:\r\n<hr>\r\n</h2>\r\n<p>The <strong>Awesomium.Core</strong> assembly wraps the core engine of Awesomium. It&rsquo;s compiled against\r\n<strong>.NET Framework 4 Client Profile</strong> and is the major dependency between all Windows Awesomium.NET assemblies.\r\n<strong>Awesomium.Mono</strong> is the platform-independent equivalent and is compiled against\r\n<strong>.NET Framework 2</strong>. If you want to use Awesomium in your application and don&rsquo;t mind handling display, input, and event-handling, then Awesomium.Core or Awesomium.Mono is all you need. The major components available in Awesomium.Core are:</p>\r\n<ul>\r\n<li><strong>WebCore</strong>: The WebCore is the heart of Awesomium. It initializes, starts and stops the Awesomium core engine, acts as a WebView factory, controls the lifetime of web-views and takes care of updating their buffer and firing events. When used\r\n in a UI environment, the WebCore enables the auto-update feature which allows the core engine to automatically update the buffer of all views, process any changes and trigger events using the current synchronization context.<br>\r\n<h3>Tips &amp; Tricks:</h3>\r\n<ul>\r\n<li>When working with Awesomium, keep in mind that <strong>the Awesomium core engine and all components exposed through Awesomium.NET are not thread-safe</strong>.\r\n</li><li>When used in an non-UI environment, the only requirement is that all calls to the Awesomium API are made from the same thread that initialized the WebCore, or created the first WebView (if explicit initialization was not provided).\r\n</li><li>In UI environments, you can control the auto-update frequency by setting the <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=e1637ab7-20d9-9556-4464-7e86ce0e4257\" target=\"_blank\">\r\nWebCoreConfig.AutoUpdatePeriod</a> configuration setting during initialization. </li><li>Note that <strong>there can only be a single Awesomium core engine (WebCore) running per process</strong>. Additionally, since most of the internal operation of Awesomium (including Shutdown) are performed asynchronously, it is suggested that you avoid\r\n restarting (Shutdown and Initialize again) the WebCore. The regular lifetime of the single WebCore, should complete when your application is about to exit and all UI (if any) is already destroyed.\r\n</li><li>When used in a UI environment that Awesomium.NET does not already provide a component for, you can check the\r\n<a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=dc206b10-c13c-6794-d050-52213b1ea8fb\" target=\"_blank\">\r\nWebCore.IsAutoUpdateEnabled</a> property to make sure that auto-update is enabled. Not all UI environments provide a valid synchronization context.\r\n</li><li>When auto-update is not enabled, you should define your own timer to call <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=caa599eb-ab76-9e1f-994e-20f6d3545cd1\" target=\"_blank\">\r\nWebCore.Update</a>. The only requirement, as mentioned before, is that all calls are made from the same thread that initialized the WebCore.\r\n</li><li>A <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=b8cbe374-9c89-9737-7421-ca671dc2d2dc\" target=\"_blank\">\r\nWebViewCollection</a> (ReadOnlyObservableCollection of IWebView) exposed through the\r\n<a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=33fe838c-fa74-9607-c2ae-4e97a13259c2\" target=\"_blank\">\r\nWebCore.Views</a> property, allows the WebCore to become a friendly items source in an MVVM application.\r\n</li></ul>\r\n<p><img title=\"WebCore\" src=\"http://labs.awesomium.com/wp-content/uploads/WebCore.png\" alt=\"WebCore\" width=\"480\" height=\"480\" style=\"display:block; margin-left:auto; margin-right:auto\"></p>\r\n</li><li><strong>IWebView</strong>: The <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=a6f96b6a-fe54-a975-92a7-ff6a4843c412\" target=\"_blank\">\r\nIWebView</a> interface exposes all methods, properties and events that are common to all web-view components provided by Awesomium.NET. It is implemented by the WebView and all WebControls so if you are using various kinds of web-view components in your application,\r\n the IWebView allows you to communicate with all of them using a common interface. What&rsquo;s more, the\r\n<a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=b8cbe374-9c89-9737-7421-ca671dc2d2dc\" target=\"_blank\">\r\nWebViewCollection</a> exposed through the <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=33fe838c-fa74-9607-c2ae-4e97a13259c2\" target=\"_blank\">\r\nWebCore.Views</a> property, is a ReadOnlyObservableCollection of IWebView. The views may be WebViews or Windows Forms WebControls implementing INotifyPropertyChanged or WPF WebControls (DependencyObject) exposing DependencyProperties. Either way, they are ready\r\n to be bound to a view in an MVVM application. Additional features, such as the ability to bind directly to the buffer of a web-view using an Image control (WPF) or PictureBox (WinForms), are planned.<br>\r\n<br>\r\n</li><li><strong>WebView</strong>: The <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=3e2510f8-2e3c-2da0-1304-d247f0a80484\" target=\"_blank\">\r\nWebView</a> is sort of like a tab in Chrome: you can load web-pages into it, interact with it, and render it to a buffer. We give you the raw pixels, its your duty to display it or save to an image file. We actually provide two predefined methods for saving\r\n the buffer to <strong>PNG</strong> or <strong>JPEG</strong> format. You can start capturing web-pages right away by reading the\r\n<a href=\"http://labs.awesomium.com/capturing-web-pages-with-c-net/\" target=\"_blank\">\r\nCapturing Web-Pages With C# (.NET)</a> tutorial.<br>\r\n<h3>Tips &amp; Tricks:</h3>\r\n<ul>\r\n<li>The WebView implements <a href=\"http://msdn2.microsoft.com/en-us/library/ms133020\" target=\"_blank\">\r\nINotifyPropertyChanged</a> through <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=174d7265-7630-18da-05af-854d1c8c7b12\">\r\nViewModel</a> which makes it ideal for use in an <strong>MVVM</strong> application. In fact, although Awesomium.NET provides a WPF WebControl, in more advanced scenarios the use of WebViews is more appropriate. Of course this means that user input needs to\r\n be manually processed and the pixel buffer has to be displayed accordingly. </li><li>You can create WebViews that render the <strong>HTML source</strong> of any web-page that they load, by using the\r\n<a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=4b6369b6-5538-4077-88d4-bb09d9c43a2d\" target=\"_blank\">\r\nWebCore.CreateSourceWebView</a> function. </li><li>The Awesomium.Windows.Controls and Awesomium.Windows.Forms assemblies, provide a\r\n<strong>Utilities</strong> class with helper methods that can be used to turn technology specific user input data to their Awesomium equivalent, or copy a WebView&rsquo;s pixel buffer to a technology specific bitmap or surface.\r\n</li></ul>\r\n<p><br>\r\n<br>\r\nThere are no limits when it comes to rendering a WebView&rsquo;s pixel buffer to various surfaces. All you need to do is convert the user input data of the specific surface or environment to their Awesomium equivalent and then copy the pixel buffer to your\r\n surface. Which is more or less what the components provided by Awesomium.NET already do. Awesomium.NET already includes components for use in\r\n<strong>WPF</strong> and <strong>Windows Forms</strong> while work is on progress for providing components and utilities for use in\r\n<strong>Gtk#</strong> (with Awesomium.Mono), <strong>XNA</strong> and <strong>Unity</strong>.<br>\r\n<img title=\"WebView\" src=\"http://labs.awesomium.com/wp-content/uploads/WebView_2.png\" alt=\"WebView\" style=\"display:block; margin-left:auto; margin-right:auto; width:500px\"></p>\r\n</li></ul>\r\n<h2>Awesomium.Windows.Controls:\r\n<hr>\r\n</h2>\r\n<p>The Awesomium.Windows.Controls assembly provides <strong>WPF</strong> developers with a ready to use,\r\n<strong>drag-and-drop, standalone WPF control</strong> that handles all the basic embedding tasks (mouse/keyboard input, rendering, resizing, cursors, focusing, etc.) and various utilities that can help WPF developers take advantage of all Awesomium features.\r\n Here are some details of what you can find in the Awesomium.Windows.Controls assembly:</p>\r\n<ul>\r\n<li><strong>WebControl</strong>: The WPF <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=240bd8f8-1c7b-1901-cb57-d17266304266\" target=\"_blank\">\r\nWebControl</a> has been our major .NET component since v1.6.2. Starting with Awesomium SDK v1.6.3, the WPF WebControl and\r\n<a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=0f7ddbf0-49f6-ad76-248d-6109a3ed4a4b\" target=\"_blank\">\r\nWebSourceControl</a>, are automatically added to the <strong>Visual Studio 2010 Toolbox</strong> during installation, allowing developers to simply drag-and-drop the control to any container or in XAML and automatically add all dependencies (managed and unmanaged)\r\n to their project. Performance of the WPF WebControl has significantly improved and many improvements are planned in future versions, including advanced design-time support. To read more about the WPF WebControl, see the\r\n<a href=\"http://labs.awesomium.com/introducing-the-webcontrol-wpf/\" target=\"_blank\">\r\nIntroducing the WebControl (WPF)</a> article.<br>\r\n<div>\r\n<h3><span>Just one step to embed the Web to your WPF application:</span></h3>\r\n<div>\r\n<div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Window</span> \n    <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">WpfApplication1.MainWindow</span><span style=\"color:black\">&quot;</span> \n    <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span> \n    <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span> \n    <span style=\"color:red\">xmlns:awe</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.awesomium.com/winfx</span><span style=\"color:black\">&quot;</span>\n    <span style=\"color:red\">Title</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MainWindow</span><span style=\"color:black\">&quot;</span> \n    <span style=\"color:red\">Height</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">350</span><span style=\"color:black\">&quot;</span> \n    <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">525</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">awe</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">WebControl</span> \n            <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">webControl</span><span style=\"color:black\">&quot;</span> \n            <span style=\"color:red\">Source</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://www.google.com</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Window</span><span style=\"color:blue\">&gt;</span>\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</li><li><strong>WebControlCommands</strong>: The <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=43615a6a-ab29-5f59-866b-82e8d6278ba4\">\r\nWebControlCommands</a> static class, exposes <strong>routed UI commands</strong> that are common to a WPF WebControl. The commands call important methods on the WPF WebControl they target. This class is an important utility when implementing a WPF UI hosting\r\n a WebControl. Future versions will allow developers to provide <strong>localization</strong> for the text of the commands. Note however that in addition to the WebControl specific routed UI commands defined in WebControlCommands, the WebControl reuses many\r\n of the <a href=\"http://msdn2.microsoft.com/en-us/library/ms616816\" target=\"_blank\">\r\nApplicationCommands</a> and <a href=\"http://msdn2.microsoft.com/en-us/library/ms611442\" target=\"_blank\">\r\nNavigationCommands</a> available with the .NET Framework. In order to get the text of these commands displayed in your system&rsquo;s locale, you may need to download a\r\n<a href=\"http://www.microsoft.com/download/en/details.aspx?id=23067\" target=\"_blank\">\r\nMicrosoft .NET Framework 4 Client Language Pack (x86 x64)</a>. To see how to use the WebControlCommands class, read the\r\n<a href=\"http://labs.awesomium.com/introducing-the-webcontrol-wpf/\" target=\"_blank\">\r\nIntroducing the WebControl (WPF)</a> article.\r\n<div>\r\n<h3><span>Binding your UI to WebControl Commands &amp; Properties</span></h3>\r\n<div>\r\n<div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Slider</span> \n\t<span style=\"color:red\">DataContext</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding ElementName=Browser}</span><span style=\"color:black\">&quot;</span>\n\t<span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Zoom}</span><span style=\"color:black\">&quot;</span> \t\n\t<span style=\"color:red\">Minimum</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span> \n\t<span style=\"color:red\">Maximum</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">400</span><span style=\"color:black\">&quot;</span>\n\t<span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">120</span><span style=\"color:black\">&quot;</span>\n\t<span style=\"color:red\">VerticalAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Center</span><span style=\"color:black\">&quot;</span>\n\t<span style=\"color:red\">AutoToolTipPlacement</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">TopLeft</span><span style=\"color:black\">&quot;</span>\n\t<span style=\"color:red\">IsSnapToTickEnabled</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">True</span><span style=\"color:black\">&quot;</span>\n\t<span style=\"color:red\">IsMoveToPointEnabled</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">True</span><span style=\"color:black\">&quot;</span> \n\t<span style=\"color:red\">SmallChange</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span> \n\t<span style=\"color:red\">LargeChange</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span> \n\t<span style=\"color:red\">TickFrequency</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span> \n\t<span style=\"color:red\">Focusable</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">False</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\n\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Slider.ContextMenu</span><span style=\"color:blue\">&gt;</span>\n\t\t&lt;ContextMenu \n\t\t\tDataContext=&quot;{Binding PlacementTarget.DataContext, \n\t\t\tRelativeSource={RelativeSource Self}}&quot;&gt;\n\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">MenuItem</span> \n\t\t\t\t<span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Static awe:WebControlCommands.ResetZoom}</span><span style=\"color:black\">&quot;</span> \n\t\t\t\t<span style=\"color:red\">CommandTarget</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\n\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ContextMenu</span><span style=\"color:blue\">&gt;</span>\n\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Slider.ContextMenu</span><span style=\"color:blue\">&gt;</span>\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Slider</span><span style=\"color:blue\">&gt;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</li><li><strong>WebControlContextMenu</strong>: The <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=f4076eb8-c259-fdeb-f3f8-24f078c7c2b4\" target=\"_blank\">\r\nWebControlContextMenu</a> is a predefined stylable context menu used by the WPF WebControl. Its contents are divided in\r\n<strong>arrays of context specific menu items</strong> that can easily be customized by developers. For details about how to customize or override the predefined context menu, read the\r\n<a href=\"http://labs.awesomium.com/introducing-the-webcontrol-wpf/\" target=\"_blank\">\r\nIntroducing the WebControl (WPF)</a> article or the documentation of <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=f4076eb8-c259-fdeb-f3f8-24f078c7c2b4\" target=\"_blank\">\r\nWebControlContextMenu</a>. </li><li><strong>Utilities</strong>: The Utilities static class (planned for v1.6.4), exposes methods and\r\n<strong>extensions</strong> that can be used to translate technology specific user input data to their Awesomium equivalent and copy the Awesomium pixel buffer to WPF specific bitmaps or surfaces. The class can be used to extend the functionality already provided\r\n by the WPF WebControl, or use a <strong>WebView</strong> in a WPF application (occasionally ideal in MVVM scenarios).\r\n</li></ul>\r\n<div id=\"attachment_1104\" style=\"text-align:center\"><a href=\"http://labs.awesomium.com/wp-content/uploads/wpfvbsample_R.png\"><img title=\"WPF VB.NET Application\" src=\"http://labs.awesomium.com/wp-content/uploads/wpfvbsample_R-300x225.png\" alt=\"WPF VB.NET Application\" width=\"300\" height=\"225\" style=\"display:block; margin-left:auto; margin-right:auto\"></a>\r\n<p>WPF VB.NET Application</p>\r\n</div>\r\n<h2>Awesomium.Windows.Forms:\r\n<hr>\r\n</h2>\r\n<p>Just like Awesomium.Windows.Controls, the Awesomium.Windows.Forms assembly provides\r\n<strong>Windows Forms</strong> developers with a ready to use, <strong>drag-and-drop, standalone Windows Forms control</strong> (that handles all the basic embedding tasks like mouse/keyboard input, rendering, resizing, cursors, focusing, etc.) and various\r\n utilities that can help Windows Forms developers take advantage of all Awesomium features. Here are some details of what you can find in the Awesomium.Windows.Forms assembly:</p>\r\n<ul>\r\n<li><strong>WebControl</strong>: Just like its WPF equivalent, the Windows Forms <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=163d5346-d13d-e0cf-49ba-72b2b04d7620\" target=\"_blank\">\r\nWebControl</a> allows you to embed an Awesomium web-view control directly in your Windows Forms application, without any additional work. Starting with Awesomium SDK v1.6.3, the Windows Forms WebControl is also automatically added to the\r\n<strong>Visual Studio 2010 Toolbox</strong> during installation, allowing you to simply drag-and-drop the control to your container in the Visual Studio designer and automatically add all dependencies (managed and unmanaged) to your project. Performance of\r\n the Windows Forms WebControl has significantly improved and many improvements are planned in future versions, including advanced design-time support and a predefined context menu. At this point however, it is important to note that\r\n<strong>the Windows Forms WebControl is still in an experimental stage</strong>. Any feedback, is highly appreciated and you can provide it in our\r\n<a href=\"http://support.awesomium.com\" target=\"_blank\">Support Forums</a>. </li><li><strong>Utilities</strong>: The <a href=\"http://awesomium.com/docs/1_6_3/sharp_api/?tc=867c7c0d-26ec-07ed-f5ff-7fa85744bb74\" target=\"_blank\">\r\nUtilities</a> static class, exposes methods and extensions that can be used to translate technology specific user input data to their Awesomium equivalent and copy the Awesomium pixel buffer to Windows Forms specific bitmaps or surfaces. The class can be used\r\n to extend the functionality already provided by the Windows Forms WebControl, or use a WebView in a Windows Forms application.\r\n</li></ul>\r\n<h2>Installation and Redistribution:\r\n<hr>\r\n</h2>\r\n<p>Awesomium.NET is distributed with the Awesomium SDK, available for download in:\r\n<a href=\"http://www.awesomium.com/download\" target=\"_blank\">http://www.awesomium.com/download</a>. Here is a list of what is installed with the Windows installer and where to find it:</p>\r\n<h3>Awesomium.NET Assemblies:</h3>\r\n<p>The original Awesomium.NET assemblies and the Awesomium libraries linked to them, can be found after installation under:</p>\r\n<div>\r\n<div>\r\n<pre>%ProgramFiles%\\Khrona LLC\\Awesomium SDK\\1.6.4\\wrappers\\Awesomium.NET\\Assemblies</pre>\r\n</div>\r\n</div>\r\nThe same directory also includes the <strong>Awesomium.Mono</strong> assembly. For details about how to use the Awesomium.Mono assembly in Windows, OS X or Linux, please read:\r\n<a href=\"http://labs.awesomium.com/getting-started-with-awesomium-mono/\" target=\"_blank\">\r\nGetting Started with Awesomium.Mono</a>.\r\n<p>&nbsp;</p>\r\n<h3>In GAC:</h3>\r\n<p>The following assemblies are also automatically installed in GAC (Global Assembly Cache):</p>\r\n<ul>\r\n<li><strong>Awesomium.Core.dll</strong><br>\r\n<h5>Alongside:</h5>\r\n<ul>\r\n<li>Awesomium.Core.XML </li><li>Awesomium.dll </li><li>AwesomiumProcess </li><li>icudt42.dll </li><li>en-US.dll </li></ul>\r\n</li><li><strong>Awesomium.Windows.Controls.dll</strong><br>\r\n<h5>Alongside:</h5>\r\n<ul>\r\n<li>Awesomium.Windows.Controls.XML </li></ul>\r\n</li><li><strong>Awesomium.Windows.Forms.dll</strong><br>\r\n<h5>Alongside:</h5>\r\n<ul>\r\n<li>Awesomium.Windows.Forms.XML </li></ul>\r\n</li></ul>\r\n<h3>VS Toolbox:</h3>\r\n<p>After installation, you should be able to find the following components in the Designer Toolbox of Visual Studio:</p>\r\n<ul>\r\n<li><strong>WebControl</strong> (WPF) </li><li><strong>WebSourceControl</strong> (WPF) </li><li><strong>WebControl</strong> (Windows Forms) </li></ul>\r\n<p>To ensure a successful installation of the Awesomium.NET components in Visual Studio&rsquo;s Toolbox,\r\n<strong>Visual Studio must not be running during the installation</strong> of the Awesomium SDK. If you notice that the components are missing, you may have to uninstall and reinstall the SDK, after closing Visual Studio.</p>\r\n<h3>Redistribution:</h3>\r\n<p>To distribute the Awesomium and Awesomium.NET components used by your application, follow these steps:</p>\r\n<ol>\r\n<li>Expand the <strong>References</strong> folder in <strong>Solution Explorer</strong> (in VB.NET, go to the\r\n<strong>References</strong> tab of your project&rsquo;s properties). </li><li>Select the Awesomium.NET assemblies used by your application (usually any assembly starting with: Awesomium). Hold down\r\n<strong>CTRL</strong> and select all of them (if more than one is used). One of them, must always be:\r\n<strong>Awesomium.Core.dll</strong>: the major dependency of Awesomium.NET. </li><li>In the <strong>Properties</strong> window, set <strong>Copy Local</strong> to\r\n<strong>True</strong>. </li></ol>\r\n<div id=\"attachment_1137\" style=\"text-align:center\"><a href=\"http://labs.awesomium.com/wp-content/uploads/distribute.png\"><img title=\"Copying Awesomium.NET references in C# & VB.NET\" src=\"http://labs.awesomium.com/wp-content/uploads/distribute-300x92.png\" alt=\"Copying Awesomium.NET references in C# & VB.NET\" width=\"300\" height=\"92\" style=\"display:block; margin-left:auto; margin-right:auto\"></a>\r\n<p>Copying Awesomium.NET references in C# &amp; VB.NET</p>\r\n</div>\r\n<p>Next time you build your project, all Awesomium.NET assemblies including the necessary native Awesomium libraries, will be copied to your output directory. This is all you need to distribute your application. For more details about how to use Awesomium.NET\r\n in your applications, read: <a href=\"http://labs.awesomium.com/getting-started-with-awesomium-net/\" target=\"_blank\">\r\nGetting Started with Awesomium.NET</a>.</p>\r\n<h2>Samples:\r\n<hr>\r\n</h2>\r\n<p>The Windows installer of Awesomium SDK and Awesomium.NET, deploys an <strong>Awesomium.NET Samples</strong> solution under:</p>\r\n<div>\r\n<div>\r\n<pre>%MyDocuments%\\Visual Studio 2010\\Projects\\Awesomium.NET\\1.6.4\\Samples</pre>\r\n</div>\r\n</div>\r\n<br>\r\nThe solution includes the following samples, demonstrating uses of Awesomium.NET:\r\n<p>&nbsp;</p>\r\n<h3>Core:</h3>\r\n<ol>\r\n<li><strong>BasicSample</strong> (C#, Console Application). This sample demonstrates how to use the core, windowless features of Awesomium. It renders a website and then saves the buffer to an image file. This sample is better explained in:\r\n<a href=\"http://labs.awesomium.com/capturing-web-pages-with-c-net/\" target=\"_blank\">\r\nCapturing Web-Pages With C# (.NET)</a> </li><li><strong>CustomProcess</strong> (C#, Windowless Executable). This sample demonstrates how you can create a\r\n<strong>custom rendering process</strong> that can be used as the rendering processes for Awesomium, in place of the original:\r\n<strong>AwesomiumProcess</strong>. This allows you to use your own executable as a child process.\r\n</li></ol>\r\n<h3>WPF:</h3>\r\n<ol>\r\n<li><strong>TabbedWPFSample</strong> (C#). The sample demonstrates an advanced scenario of using the WPF WebControl. It is an almost full featured web browser with tabs, much like modern browsers, which implements favicons, downloading and uploading files,\r\n using a custom rendering process etc.. A precompiled version of the sample is available when you install Awesomium SDK. See:\r\n<pre>Start Menu -&gt; Awesomium v1.6.4 -&gt; Awesomium.NET -&gt; WPF Demo</pre>\r\n</li><li><strong>VBWPFSample</strong> (VB.NET). A WPF sample using VB.NET. The sample demonstrates how you can easily create a basic web browsing UI and bind it to an Awesomium.NET, WPF WebControl.\r\n</li></ol>\r\n<h3>Windows Forms:</h3>\r\n<ol>\r\n<li><strong>WebControlSample</strong> (C# &amp; VB.NET). The samples demonstrate the use of the new Windows Forms WebControl. Note that\r\n<strong>the Windows Forms WebControl is still on an experimental stage</strong>. The samples will demonstrate more detailed features in later releases of Awesomium.NET.\r\n</li><li><strong>WinFormsSample</strong> (C# &amp; VB.NET). These are the most mature and\r\n<strong>stable samples of using Awesomium in a Windows Forms application</strong>. They use the core\r\n<strong>WebView</strong> and show you how to easily translate Windows Forms user input data to their Awesomium equivalent and how to render the Awesomium pixel buffer on a Windows Forms surface (a Form is used in the examples but it can be &mdash; and it should\r\n be actually &mdash; a child control). Many <strong>performance improvements</strong> have been applied to the samples in v1.6.3, taking advantage of new features provided by Awesomium.\r\n</li></ol>\r\n<h2>Codeplex:\r\n<hr>\r\n</h2>\r\n<p>Our <strong>Codeplex</strong> project maintains updates to the <strong>Awesomium.NET Samples</strong>, redistributable Windows installer modules of Awesomium.NET, Utilities etc..</p>\r\n<h2>Licensing:\r\n<hr>\r\n</h2>\r\n<p>Awesomium and Awesomium.NET are free for evaluation, non-commercial use, and independent use (by companies who made less than $100K in revenue last year).</p>\r\n<p>If you&rsquo;re a larger company and would like to use Awesomium for commercial use, you can purchase a Pro License at\r\n<a href=\"https://awesomium.com/buy/\" target=\"_blank\">https://awesomium.com/buy/</a></p>\r\n<h2>Conclusion:\r\n<hr>\r\n</h2>\r\n<p>You&rsquo;re only a few steps from embedding the Web in your .NET application! What are you waiting for?</p>\r\n<ul>\r\n<li><a href=\"http://awesomium.com/download\" target=\"_blank\"><span><span>Download Awesomium.NET</span></span></a>\r\n</li><li><a href=\"http://awesomium.codeplex.com/releases/view/78701\">Download the latest updates of Awesomium.NET Samples</a>.\r\n</li></ul>\r\n<h2>Additional Resources:\r\n<hr>\r\n</h2>\r\n<ul>\r\n<li>Main Website: <a href=\"http://awesomium.net\" target=\"_blank\">http://awesomium.net</a>\r\n</li><li>Awesomium.NET API: <a href=\"http://awesomium.com/docs/1_6_4/sharp_api/\" target=\"_blank\">\r\nhttp://awesomium.com/docs/1_6_4/sharp_api/</a> </li><li>Support &amp; Knowledge Base: <a href=\"http://support.awesomium.com\" target=\"_blank\">\r\nhttp://support.awesomium.com</a> </li></ul>\r\n</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Awesomium,Chromium,.NET,mono,WPF,Windows Forms,WebBrowser,",
  "LastEdited": "2012-01-30T05:24:55.03-08:00"
}