{
  "ProjectName": "bindablelinq",
  "Title": "Bindable LINQ",
  "Description": "Bindable LINQ is a set of extensions to LINQ that add data binding and change propagation capabilities to standard LINQ queries. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Bindable LINQ will be back in a while.</h1>\r\nI have recently taken over this. mail me if required, MSPrakashKumarChakka at gmail.com<br />\n<h3>If you need an alternative, consider <a href=\"http://obtics.codeplex.com/\">Obtics</a>, which is more actively maintained. </h3>\r\n<br /><br /><br /><br /><br /><br /><br />\n<h3>Overview</h3>\r<b>Bindable LINQ is a set of extensions to LINQ that add data binding and change propagation capabilities to standard LINQ queries. </b>\n<h3>Bindable LINQ 1.0 Beta 1</h3>\rDownload <a href=\"https://bindablelinq.codeplex.com/releases/view/13966\">here</a>. \n<h3>How does it help?</h3>\rSuppose you wrote the following LINQ to Objects query:<br /><br /><pre>\nObservableCollection&lt;Contact&gt; contacts = new ObservableCollection&lt;Contact&gt;();\nitemsControl.ItemsSource = from c in contacts\n                           where c.Name.StartsWith(&quot;P&quot;)\n                           select c;\ncontacts.Add(new Contact() { Name = &quot;Omar&quot; });\ncontacts.Add(new Contact() { Name = &quot;Paul&quot; });\n</pre><br />Developers familiar with Windows Presentation Foundation or Silverlight know that the ObservableCollection&lt;T&gt; class is designed to propagate change; that is, it raises <i>CollectionChanged</i> events when items are added to the list. However, if you wrote the code above, you would find that neither Omar <i>nor Paul</i> appear on the screen. Why? <br /><br />It turns out that the objects returned by a LINQ to Objects query <i>do not provide CollectionChanged events</i>. The out of the box LINQ experience makes it difficult for rich client developers to display changes to data while simultaneously using LINQ. <br /><br />That&#39;s where <i>Bindable LINQ</i> comes in. With a minor code change, we can enable change propagation over LINQ to Objects queries:<br /><br /><pre>\nObservableCollection&lt;Contact&gt; contacts = new ObservableCollection&lt;Contact&gt;();\nitemsControl.ItemsSource = from c in contacts.*AsBindable()*\n                           where c.Name.StartsWith(&quot;P&quot;)\n                           select c;\ncontacts.Add(new Contact() { Name = &quot;Omar&quot; });\ncontacts.Add(new Contact() { Name = &quot;Paul&quot; });\n</pre>\n<h3>What else does it do?</h3>\rAs well as propogating change, Bindable LINQ can analyse your queries at runtime and detect any dependencies your query has. If these dependencies provide events to subscribe to, Bindable LINQ will automatically monitor them for change. <br /><br />Take this query for example:<br /><br /><pre>\ncontactsListBox.ItemsSource = from c in customers\n                              where c.Name.StartsWith(textBox1.Text)\n                              select c;\n</pre><br />Bindable LINQ will detect that the query relies on the Text property of the TextBox object, textBox1. Since the TextBox is a WPF control, Bindable LINQ knows to subscribe to the TextChanged event on the control. <br /><br />The end result is that <i>as the user types, the items in the query are re-evaluated and the changes appear on screen</i>. No additional code is needed to handle events. \n<h3>How much of the LINQ syntax is supported?</h3>\rThe aim of Bindable LINQ is to be fully compatible with LINQ to Objects, at least where it makes sense. This already includes support for operations such as Where, Select, GroupBy and Union. Aggregates, such as Sum, Min, Max and Average, are also supported. For more information, see the <a href=\"https://bindablelinq.codeplex.com/wikipage?title=LINQ%20Compatibility&referringTitle=Home\">LINQ Compatibility</a> page. \n<h3>What platforms does it support?</h3>\rBindable LINQ is designed for Windows Presentation Foundation, Silverlight, and Windows Forms. See the following pages for more information:\n<ul><li><a href=\"https://bindablelinq.codeplex.com/wikipage?title=Windows%20Presentation%20Foundation&referringTitle=Home\">Windows Presentation Foundation</a></li>\n<li><a href=\"https://bindablelinq.codeplex.com/wikipage?title=Silverlight&referringTitle=Home\">Silverlight 2.0 Beta 1</a></li>\n<li><a href=\"https://bindablelinq.codeplex.com/wikipage?title=Windows%20Forms&referringTitle=Home\">Windows Forms</a></li></ul>\n<h3>How is it licensed?</h3>\rBindable LINQ is licensed under the New BSD license, making it free to use in both open source and commercial applications. \n<h3>Upcoming Plans</h3>\rWe are currently planning what will be involved in version 1.0. See <a href=\"https://bindablelinq.codeplex.com/wikipage?title=Plans%20for%201.0&referringTitle=Home\">Plans for 1.0</a>. </div><div class=\"ClearBoth\"></div>",
  "TagList": "Linq,Wouter,Silverlight,WPF,Binding,Live Linq,",
  "LastEdited": "2011-09-08T22:37:47.52-07:00"
}