{
  "ProjectName": "wpfhexeditor",
  "Title": "WPF Hex Editor",
  "Description": "hex editor which is created with WPF with a xaml designed UI.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nhex editor which is created with WPF with a xaml designed UI.<br>\r\n<br>\r\nIt is a Visual Studio 10 and .NET Framework 4.0 WPF project. It can open as many file at same time and wpf UI responding very well for very big files. In the picture it looks like much more a Integer editor, because product is not completed yet, there should\r\n a menu button in edit and in the toolbar, which can actually changes the base type of the buffered bytes :).<br>\r\n<br>\r\n<img title=\"screenshot.png\" src=\"http://www.codeplex.com/download?ProjectName=wpfhexeditor&DownloadId=253736\" alt=\"screenshot.png\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>   <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> HexaGrid : UserControl\r\n    {\r\n        \r\n        <span style=\"color:blue\">private</span> MainWindow _mymainwindow;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _filename;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> FileName\r\n        {\r\n            <span style=\"color:blue\">get</span> \r\n            {\r\n                <span style=\"color:blue\">return</span> _filename;\r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _filename=value;\r\n            }\r\n        }\r\n        \r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> ShortFileName\r\n        {\r\n            <span style=\"color:blue\">get</span>     \r\n            {\r\n                FileInfo MyInfo = <span style=\"color:blue\">new</span> FileInfo(_filename);\r\n                <span style=\"color:blue\">return</span> MyInfo.Name;\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">byte</span>[] myBytes;        \r\n        DataSet1.Bytetable1DataTable oTable = <span style=\"color:blue\">new</span> DataSet1.Bytetable1DataTable();\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Get_myBytes_fromFile()\r\n        {\r\n            myBytes = File.ReadAllBytes(_filename);\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Bytes_To_Grid()\r\n        {                                   \r\n            <span style=\"color:blue\">int</span> j=0;\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i=0; i&lt;myBytes.Length; i&#43;=16)\r\n            {                \r\n                <span style=\"color:blue\">string</span>[] myStringArr = <span style=\"color:blue\">new</span> <span style=\"color:blue\">string</span>[17];\r\n               \r\n                myStringArr[0] = j.ToString();                \r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> k=0; k&lt;=15 &amp; i&#43;k&lt;myBytes.Length; k&#43;&#43;) \r\n                {\r\n                    <span style=\"color:green\">//_mymainwindow.MoveStatus(((i &#43; k) / myBytes.Length * 100).ToString() &#43; &quot;% Completed&quot;, 0, myBytes.Length, i &#43; k);                    </span>\r\n                    myStringArr[k&#43;1]=myBytes[i&#43;k].ToString();\r\n                }\r\n                oTable.Rows.Add(myStringArr);\r\n                j&#43;&#43;;\r\n            }            \r\n            dataGrid1.ItemsSource = oTable;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> HexaGrid()\r\n        {\r\n            InitializeComponent();\r\n\r\n        }\r\n        <span style=\"color:blue\">public</span> HexaGrid(<span style=\"color:blue\">string</span> pfilename, MainWindow MyMainWindow)\r\n        {\r\n            InitializeComponent();\r\n            _mymainwindow = MyMainWindow;\r\n            _filename = pfilename;\r\n            Get_myBytes_fromFile();\r\n            Bytes_To_Grid();\r\n            <span style=\"color:green\">//System.Threading.Thread MyThread = new System.Threading.Thread(Bytes_To_Grid);</span>\r\n            <span style=\"color:green\">//MyThread.Start();</span>\r\n        }\r\n\r\n\r\n    }</pre>\r\n</div>\r\n<p>The Hexagrid Usercontrol can load the file into the a datatable from a specified data set and can show the content in the datagrid of the wpf.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "wpf,c#,hex,",
  "LastEdited": "2011-06-29T08:09:06.31-07:00"
}