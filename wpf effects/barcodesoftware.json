{
  "ProjectName": "barcodesoftware",
  "Title": "WPF Barcode Software",
  "Description": "A Barcode Software Application Written in WPF",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />A Barcode Software Application Written in WPF<br /><br /><br /><img src=\"/projects/barcodesoftware/18c5b2bf-15c1-4452-b449-7148e66eb422\" alt=\"barcode_software.jpg\" title=\"barcode_software.jpg\" /><br />\n<h1>Introduction</h1>\r\nThis project describes the building a WPF Barcode Application using a Barcode Library. At this moment, the Barcode Library implements only the Code 39 barcode, but more will be added in the near future.<br />\n<h2>The Barcode Library</h2>\r\nAt the core of this barcode application is a resusable &lt;code&gt;Barcodes&lt;/code&gt; class, that represents a generic barcode implementing common barcode properties. The following lists its properties.<br /><br /><b>Input Properties</b><br /><br /><u>BarcodeType</u> - There are many types of barcodes used in real life. For example, those used in retail are different from those used in warehouses and logistics. Currently, the barcode library implements a simple but widely used barcode symbology known as Code 39. This barcode is also known as Code 3 of 9. This barcode accepts only upper case characters &#39;A&#39; to &gt;&#39;Z&#39;, the numeric digits &#39;0&#39; to &#39;9&#39; and a few special characters. If you enter any other characters to the <u>Data</u> string, they will be ignored and filtered away.<br /><br />The Code 39 barcode has the advantage of being simple, as each of the characters are represented by a pattern of 10 alternating white and black bars. However, because the algorithm does not include much compression, the resulting barcode out is not very dense. In other words, you get a rather long barcode for a short data string.<br /><br /><u>Data</u> - This is the data to be encoded. For our WPF application, we have used &quot;1234567&quot; as the <u>Data</u> input string.<br /><br /><u>CheckDigit</u> - Some barcodes specify that a check digit must be included into the barcode. The check digit is usually an additional character (or several characters) that is appended to the input <u>Data</u> string and encoded into the barcode. The CheckDigit helps the scanner to verify that the data that it reads is correct and complete. For the Code39 barcode, the CheckDigit is optional. You can specify <u>Yes</u> or <u>No</u> to include or exclude it. <br /><br /><br /><b>Main Method</b><br /><br /><u>encode()</u> - After you have specified the Input Properties, you can start letting the barcode class to create the black and white bars. This is done by calling the method <u>encode()</u>. When this is done, you can start retrieving the results using the Output Properties of the <u>Barcodes</u> class.<br /><br /><br /><b>Output Properties</b><br /><br /><u>EncodedData</u> - This is the result returned by the &lt;code&gt;Barcodes&lt;/code&gt; after you have called the <u>encode()</u> method.  The <u>EncodedData</u> returns a string in the form &quot;twtwttwtttwtwttttwttwwttwtwttwttwtwttt&quot;. The &quot;t&quot; represents a thin bar, while the &quot;w&quot; represents a thick bar. A thick bar is usually 3 times the width of a thin bar. The way to interpret the result is that each character indicates alternating bar colors. For example for &quot;twtw&quot;, the first &quot;t&quot; will be a thin black bar, the second &quot;w&quot; will be a thick white bar, the third &quot;t&quot; will be will be a thin black bar, and the fourth &quot;w&quot; will be a thick white bar. Our WPF application will use the string returned by <u>EncodedData</u> to draw a series of alternating black and white rectangles.<br /><br /><u>HumanText</u> - This is a text that is usually placed below the barcode. The Human Text helps a person to read the content of the barcode when a scanner is not available. The HumanText is usually identical to the input <u>Data</u>, but that not always the case. Sometimes, the HumanText will be formatted with special Start/Stop characters, otherwise, it will include the extra CheckDigit.  Our WPF application will use the string returned by <u>HumanText</u> to draw the Human Readable Text below the barcode.<br /><br />\n<h1>Drawing the Actual Barcode</h1>\r\nWe are now ready to describe the drawing of the barcode.<br /><br />The first step is the Encoding of Data using the barcode library. We create an instance of <u>Barcodes</u> and set its <u>Data</u> to &quot;1234567&quot;. This is the data we wish to encode into the barcode, and may be retrieved when it is placed under a scanner. <br /><br />The <u>BarcodeType</u> is set <u>Code39</u> and we specify the <u>CheckDigit</u> to <u>Yes</u> so that the CheckDigit will be appended into the barcode. When this is done, we call <u>encode()</u> and retrieve the <u>EncodedData</u> and  <u>HumanText</u>.<br /><br /><br /><br /><br />            /////////////////////////////////////<br />            // Encode The Data<br />            /////////////////////////////////////<br />            Barcodes bb = new Barcodes();<br />            bb.BarcodeType = Barcodes.BarcodeEnum.Code39;<br />            bb.Data = &quot;1234567&quot;;<br />            bb.CheckDigit = Barcodes.YesNoEnum.Yes;<br />            bb.encode();<br /><br />            int thinWidth;<br />            int thickWidth;<br />                        <br />            thinWidth = 3;<br />            thickWidth = 3 * thinWidth;<br /><br />            string outputString = bb.EncodedData;<br />            string humanText = bb.HumanText;<br />            <br /><br /><br /><img src=\"/projects/barcodesoftware/23802182-0101-4249-bc8e-c0d9cae5c857\" alt=\"barcode_library.jpg\" title=\"barcode_library.jpg\" /><br /><br />We are now ready to draw the barcode using the <u>EncodedData</u>. This is the output of the <u>Barcodes</u> class and is saved into a variable <u>outputString</u>.<br /><br />The algorithm for drawing the barcode is fairly simple. We find the length of the <u>outputString</u> and iterate through all its characters.  If we encounter a &#39;t&#39; (ThinBar), we draw a rectangle with thin width.  If we encounter a &#39;w&#39; (ThickBar), we draw a rectangle with thick width.  We set the thin width to be 3 pixels, and the thick width to be 3 times the thin width (i.e 9 pixels). Note : The thin width may also be set to other values such as 1,2,3,4,5 ..etc.<br /><br />We use the variable <u>currentPos</u> to track the current X position of the rectangle. The Y position of the rectangle (<u>currentTop</u>) is fixed at 10. The height of the rectangle is fixed at 200. The <u>currentColor</u> variable tracks the color of the rectangle. If it is 0, then the rectangle is black. If it is 1, then the rectangle is white. The color alternates as each rectangle is drawn.<br /><br />The rectangle is drawn using WPF by instantiating a Rectangle class and adding the instance to the main canvas.<br /><br /><br />            <br />            /////////////////////////////////////<br />            // Draw The Barcode<br />            /////////////////////////////////////<br />            int len = outputString.Length;<br />            int currentPos = 10;<br />            int currentTop = 10;<br />            int currentColor = 0;            <br />            for (int i = 0; i &lt; len; i++)<br />            {<br />                Rectangle rect = new Rectangle();<br />                rect.Height = 200;<br />                if (currentColor == 0)<br />                {<br />                    currentColor =  1;<br />                    rect.Fill = new SolidColorBrush(Colors.Black);<br /><br />                }<br />                else<br />                {<br />                    currentColor = 0;<br />                    rect.Fill = new SolidColorBrush(Colors.White);<br /><br />                }<br />                Canvas.SetLeft(rect, currentPos);<br />                Canvas.SetTop(rect, currentTop);<br /><br />                if (outputString[i] == &#39;t&#39;)<br />                {<br />                    rect.Width = thinWidth;<br />                    currentPos += thinWidth;<br />                    <br />                }<br />                else if (outputString[i] == &#39;w&#39;)<br />                {<br />                    rect.Width = thickWidth;<br />                    currentPos += thickWidth;<br /><br />                }             <br />                mainCanvas.Children.Add(rect);<br /><br />            }<br /><br /><br /><br />After the barcode is drawn, we proceed to add a Huamn Readable Text below it. This is done by instantiating a TextBlock class and setting its Text property to the HumanText string. The TextBlock is placed slightly below the barcode (the barcode height is 200, so the text is placed at 205) and centered horizontally.<br /><br /><br /><br />            /////////////////////////////////////<br />            // Add the Human Readable Text<br />            /////////////////////////////////////<br />            TextBlock tb = new TextBlock();<br />            tb.Text = humanText;<br />            tb.FontSize = 32;<br />            tb.FontFamily = new FontFamily(&quot;Courier New&quot;);            <br />            Rect rx = new Rect(0, 0, 0, 0);<br />            tb.Arrange(rx);<br />            Canvas.SetLeft(tb, (currentPos - tb.ActualWidth)/2);<br />            Canvas.SetTop(tb, currentTop + 205);<br />            mainCanvas.Children.Add(tb);<br /><br /><br />When the WPF application is run, you will see barcode drawn on it canvas. Notice there is an &quot;S&quot;, appended to the input &quot;1234567&quot; in the Human Text. This happens because we have specified that we want to include the CheckDigit.<br /><br />At this point, you can take a screen capture of the barcode, save it as an image file, and insert the image file into an editor such as MS Word and make a print out. You can then use a barcode scanner to scan the barcode to retrieve the original data.<br /><br />\n<h2>Point of Interest</h2>\r\nThis is a simple application demonstrating the creation of a barcode in WPF. In the future, we will be adding other barcodes such as I2of5, ITF14, POSTNET to the Barcode Library. For updates on the Barcode Library and the WPF barcode software, please visit the link <br /><br /><a href=\"http://www.barcodesoftware.me\">http://www.barcodesoftware.me</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "Barcode,barcode software,wpf,code 39,.Net 3.5,Development,",
  "LastEdited": "2009-04-27T07:09:16.53-07:00"
}