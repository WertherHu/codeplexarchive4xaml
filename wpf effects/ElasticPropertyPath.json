{
  "ProjectName": "ElasticPropertyPath",
  "Title": "ElasticPropertyPath",
  "Description": "Get property names and even paths without magic strings. this is very good for WPF data binding and INotifyPropertyChanged.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>What is it?</h1>\rRead PropertyPath from lambda expression dynamically. This is very useful for data binding in WPF.<br />\n<h1>Why?</h1>\rWhene working with WPF data binding there is a property called path also the INotifyPropertyChanged interface requires telling the event about the property name using a magic string (&quot;property&quot;) and this could coz a lot of bugs specially when renaming properties (forgetting the magic string).<br />This library solves these issues by reading the path via lambda expression.<br />\n<h1>Install</h1>\rinstall via NuGet <a href=\"https://nuget.org/packages/ElasticPropertyPath/\">https://nuget.org/packages/ElasticPropertyPath/</a>\n<h1>Example</h1>\r\n<b>General</b><br /><pre>\nstring s =&quot;hi&quot;;\nPropertyPathExtractor.PropertyPath(() =&gt; s.Length); //string: s.Length\n</pre><br /><br /><b>Inside a class</b><br /><pre>\nclass Fake {  \n     public string MyProperty { get; set; }\n     public string GetPropertyPath()\n     {\n        return PropertyPathExtractor.PropertyPath(() =&gt; this.MyProperty );  \n     }\n   }\n\nfake.GetPropertyPath() //return: MyProperty \n</pre><br /><br /><b>Accessing members</b><br /><pre>\nPropertyPathExtractor.PropertyPath(() =&gt; fake.MyProperty.Length); //fake.MyProperty.Length\n</pre><br /><br /><b>Casting</b><br /><pre>\nPropertyPathExtractor.PropertyPath(() =&gt; ((string)s).Length); //s.Length\n</pre><br /><br /><b>Index</b><br /><pre>\nPropertyPathExtractor.PropertyPath(() =&gt; fake.list[0]); //fake.list[0]\n</pre><br /><br /><b>Static</b><br /><pre>\nPropertyPathExtractor.PropertyPath(() =&gt; fClass.sName); //fClass.sName\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-05-14T06:45:30.747-07:00"
}