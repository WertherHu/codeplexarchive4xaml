{
  "ProjectName": "agileframework",
  "Title": "AgileFramework",
  "Description": "Agile Framework in order to build easily application based on WCF, NHibernate , WPF, and multithreading",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Agile Framework</h1>\r\n<h2>Created with TDD agile method with <a href=\"http://agileframework.codeplex.com/discussions/399570\">100%</a> of code coverage</h2>\r\nTools : R#, NCrunch, VS2012<br />\n<ul><li>(Done) Test FrameWork based on xUnit, Unity, RhinoMock\n<ul><li>Autogeneration of Mock</li>\n<li>No Need to Setup and Register dependencies</li>\n<li>Samples of codes in Unit Tests</li></ul></li></ul>\n\n<ul><li>(Done) Framework Core\n<ul><li>CommandLineParser</li>\n<li>Caching (for Wcf or other with Castle Dynamic Proxy)</li>\n<li>Helper for TDD and decoupling</li>\n<li>Samples of codes in Unit Tests</li></ul></li></ul>\n\n<ul><li>(Done) Framework NHibernate/FluentNHibernate</li>\n<li>AutoDiscover Configuration</li>\n<li>Automapping configuration by Custom Attribute</li>\n<li>OneToOne relation (because automapper just use one to many or many to many)</li>\n<li>Overriding Automapping</li>\n<li>Samples of codes in Unit Tests</li>\n<li>Integration Test with SqlLite InMemory Database in order to validate mappings</li>\n<li>ISession Mock Facilities</li></ul>\n\n<ul><li>(Done) Framework Threading</li>\n<li>Producer/Consumer </li>\n<li>Can Pause and Stop with timeout option</li></ul>\n\n<ul><li>(Done) Framework Windows Service</li>\n<li>Command line parser</li>\n<li>Easy to debug with option /C</li>\n<li>TDD Ready</li></ul>\n\n<ul><li>(Done) WCF\n<ul><li>Conventions</li></ul></li>\n<li>Easy to configure with code and only one line of configuration</li>\n<li>Conventions shared for client and host</li></ul>\n\n<ul><li>Client (Proxy with Castle Dynamic Proxy)\n</li></ul><ol><li>Integration Tests are ready, I translate it into unit test in order to run it fastly.</li>\n<li>try catch exception excluding FaultException or inner...</li>\n<li>channel factory en fonction du callback -&gt; duplex, sinon channelfactory</li>\n<li>Cache channelfactory per contract type.</li>\n<li>UnWrap FaultException.</li>\n<li>Error Handling</li>\n<li>Easy to managed with Unity Resolving, ...</li>\n<li>Managed Channel on error, communication error, ... Proxy Pattern (Dynamic Proxy)</li>\n<li>Managed Channel by using IDisposable pattern (Dispose and Close Proxy and Channel)</li>\n<li>2 way for manage channel (one for intranet, close channel after request, another after disposing proxy)</li>\n<li>Easy to Test Client (Mock Client Proxy)</li>\n<li>Recalling Method in case of Loose Communication (Retrying)</li></ol>\n\n<ul><li>(Done) Service/Hosting\n</li></ul><ol><li>Make Easilly WCF Services</li>\n<li>Using Protobuf Serialization instead of DataContract</li>\n<li>Dependency Injection with Unity for hosted services</li>\n<li>Easy to Test Service (IoC Unity)</li>\n<li>Easy to Test Host</li>\n<li>Hosting on Windows Service</li>\n<li>AutoHosting by Derive EntryPointBase class Facilities of Framework.WindowsService</li>\n<li>Managed multiple Env like Dev or Prod</li></ol>\n\n<ul><li>(TBD) WPF</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "Agile,WCF,TDD,WPF,NHibernate,FluentNHibernate,Test Driven Design,unity,Rhino.Mocks,RhinoMocks,xUnit,Framework,Framework TDD,",
  "LastEdited": "2013-05-11T13:42:57.897-07:00"
}