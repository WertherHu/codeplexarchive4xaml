{
  "ProjectName": "KeyStone",
  "Title": "KeyStone",
  "Description": "Inversion Of Control, Publication and Subscription, Language Translations, Component Discovery and Activation, UI Component Activation / DeActivation",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>KeyStone is a collection of development tools. The aim of KeyStone is to provide a set of functionality that can be easily modified and extended to meet your development needs.</p>\r\n<p>A basic set of functionality is provided, the aim was to have as few external dependencies as possible.</p>\r\n<p>The following assemblies are provided :</p>\r\n<h2>IoCContainer</h2>\r\n<p>Simple Inversion of control container, Supports:-</p>\r\n<ul>\r\n<li>Class attribute based registration </li><li>Registration Lifetimes (currently only Singleton &amp; Per Instance) </li><li>Unknown type registration and resolution </li><li>Constructor injection </li><li>Property Injection. </li></ul>\r\n<p>It is possible to register components in the standard way using any of the registration methods, its also possible to provide an instance of a component to the container.</p>\r\n<p><strong>Class attribute based registration</strong><br>\r\nIf you want to simply auto register your components it is possible to use the RegisteredDependency attribute (on which you can also specify the lifetime of the type being registered), since this causes the container to scan the AppDomain this can be a slow\r\n way to resolve components.</p>\r\n<p><strong>Unknown Type Resolution</strong><br>\r\nIf a type that is not currently in the IoC container is requested, Using the RegisterUnResolvedTypes property you can tell the container to add it to the container when requested and and the resolve the instance for you. Thw test harness example includes a\r\n simple Unity Ioc Adaptor example</p>\r\n<p>&nbsp;</p>\r\n<h2>EventHub</h2>\r\n<p>Similar to the Prism Event Aggregator. This assembly provides a simple publication and subscription model, allowing components to communicate without actually knowing about each other.</p>\r\n<p><br>\r\n<br>\r\n<strong>Soon To Be Released</strong>:-<br>\r\nThe following libraries have been developed and are in the final stages of testing.</p>\r\n<p><strong>KeyStone.Zones<br>\r\n</strong>- Similar to the Prism libraries. &nbsp;This library allows you to inject user interface components into your code</p>\r\n<p><strong>KeyStone.Language<br>\r\n</strong>- Provides a simple to implement and understand way to implement language translations within your application.</p>\r\n<p><strong>KeyStone.ModuleLoader<br>\r\n</strong>- Similar MEF (Microsoft Extensibility Framework). This library provides a way to discover and load components on disk.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Publication,Subscription,Inversion Of Control,IoC,Event Publication,C#,WPF,",
  "LastEdited": "2015-11-05T11:33:16.383-08:00"
}