{
  "ProjectName": "SmartFront",
  "Title": "SmartFront - WPF and Silverlight Toolkit",
  "Description": "SmartFront is a framework piece which allow to quickly building Smart Client application in WPF and in Silverlight.  This framework uses existing stack of Enterprise Library and Prism and provide out of the box base services to application developers. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h3><b><i>SmartFront</i></b> </h3>\ra group of utilities and framework pieces which allow to quickly building Smart Client application in WPF and in Silverlight. This framework uses existing stack of Enterprise Library and Prism and provide out of the boxes following functionalities:<br />\n<ul><li><b>Unity Wrapper and Dependency Injection Factory</b> classes to apply Factory Pattern in all layers of Any Application, Supports Singleton Factory approach thru Unity and Configurable Interceptions support at Factory level.</li></ul>\n\n<ul><li><b>Action Framework</b> -&gt; Supports and extensible to any kind of Call from UI Layer to other layers either Business Layer or Service Layer or any further layer if any.\n<ul><li>Support Synchronous and Asynchronous operations -&gt; Separate out UI Thread and Background Thread for Asynchronous operations. Capability to post back on UI Dispatcher Thread for final result reflection on UI. Completely Transparent, Not a single line of code required for Threading in UI and still supports Multi Thread Operations. *Will update for .NET 4.0 for P-LINQ.\n<ul><li>Manage way to return Result and Exceptions -&gt; No more try catch in UI.. UI should be sole dump and should not have any logic except Presenter for some degree.</li>\n<li>Inbuilt Cachin* and support auto expiration between dependent yet independent Actions</li>\n<li>Support Pending Items (Calls) View i.e. Auto unsubscribe from pending list in case of MVVM or Presentation Model or MVP’s Presenters.</li>\n<li>Can be extended as per project needs by custom attribute and caller which utilize by Actions to update dependent caches.</li>\n<li>Auto Synchronization between same action call</li>\n<li><b>Action Framework Support</b> -&gt;\n<ul><li>Action Factory extension of Dependency Injection Factory which suppress overhead of recreating Actions thru Reflection.\n<ul><li>Having Guidance Automation Package for Action Generation as each method call either to Business Layer or Service Layer form in separate classes. So Auto generation classes will not impact on Developers Productivity.</li></ul></li></ul></li></ul></li></ul></li></ul>\n\n<ul><li><b>WPF/Silverlight Framework Related</b>\n<ul><li>Base WPF/Silverlight Classes -&gt;\n<ul><li>Take away WPF related interface implementations\n<ul><li>Support Resume and Suspend Notification\n<ul><li>Configured to enable for Unlimited Undo/Redo capability for each Property Level in Class.</li>\n<li>Support State Management of Presenter to work with UI like showing Progress Bar etc. without making UI “Not Responding” in conjunction with Action Framework but completely independent.</li>\n<li>WPF Related Utility classes to Travel Thru Visual Tree as well Logical  Tree of WPF.</li></ul></li></ul></li></ul></li></ul></li></ul>\n<br /><br /><i>About Us</i><br />\n<ul><li>Matt Dotson: I&#39;m a Senior Consultant @ Microsoft. You can find my blog @ <a href=\"http://blogs.msdn.com/mattdotson/\">http://blogs.msdn.com/mattdotson/</a></li>\n<li>Shrenik Jhaveri: I&#39;m a Consultant @ Microsoft. You can find my blog @ .... still writing :)</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2010-04-01T06:04:05.713-07:00"
}