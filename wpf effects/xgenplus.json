{
  "ProjectName": "xgenplus",
  "Title": "Xml Typed Serializer Generator - XGenPlus",
  "Description": "\nXml Typed Serializer Generator (XGenPlus) is a flexible Xml Typed Serializer Generator. It is very flexible to use.\n\nLast Modified - Nov 07, 2007 - Sivakumar Gopalakrishnan, Anoop Madhusudanan\n\n-- - -\n\n-> Provides a set of command line options for createing typed serializer libraries for all types or selected types in an assembly. \n-> Allows programmers to create a typed serializer with out actually referreing the typed serializer library directly. For this, XGenPlus.SerializerLib can be used.\n-> An MSBuild task is available to integrate XGenPlus in your Build script\n-> XGenPlus is also configuration file driven.\n\nIt is a better practice to generate your serializers at compile time, instead of using XmlSerializer which effects in run time generation of typed serializers. This will definitely improve your application performance during startup.\n\nOf course, some typed serializer generators already exists - like Microsoft SGen or Mvp.Xml.XGen to generate typed serializers. \n\nMicrosoft SGen is not very mature, because it can't generate serializers for a selected set of types. Also it fails to handle a couple of scenarios, and may skip some types with out any warning. Another issue is that, you have to create a strong reference to the typed serializer assembly. \n\nMvp.Xml.XGen lacks a good command line interface, and expects you to compile your serializer classes along with the assembly itself. XGenPlus combines the advantages of both, and provides you a flexible way to create and use typed serializers.\n\nThe MsBuild task will help you to automate XGenPlus in your build, so that typed serializers are generated automatically for the specified assemblies.\n\n---\n\nUsage: XGenPlus /assembly: assemblyname [/exclude:namespace1,namespace2] [/include:namespace1,namespace2] [/reference:assembly1,assembly2] [/copyto:path] [/nocompile] [/nogenerate] [/getconfig:filename] [/putconfig:filename] [/serializeall]\n\nSee the readme file for more explanation on these switches.\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br /><br />Xml Typed Serializer Generator &#40;XGenPlus&#41; is a flexible Xml Typed Serializer Generator. It is very flexible to use.<br /><br />Last Modified - Nov 07, 2007 - Sivakumar Gopalakrishnan, Anoop Madhusudanan<br /><br />-- - -<br /><br />-&#62; Provides a set of command line options for createing typed serializer libraries for all types or selected types in an assembly. <br />-&#62; Allows programmers to create a typed serializer with out actually referreing the typed serializer library directly. For this, XGenPlus.SerializerLib can be used.<br />-&#62; An MSBuild task is available to integrate XGenPlus in your Build script<br />-&#62; XGenPlus is also configuration file driven.<br /><br />It is a better practice to generate your serializers at compile time, instead of using XmlSerializer which effects in run time generation of typed serializers. This will definitely improve your application performance during startup.<br /><br />Of course, some typed serializer generators already exists - like Microsoft SGen or Mvp.Xml.XGen to generate typed serializers. <br /><br />Microsoft SGen is not very mature, because it can&#39;t generate serializers for a selected set of types. Also it fails to handle a couple of scenarios, and may skip some types with out any warning. Another issue is that, you have to create a strong reference to the typed serializer assembly. <br /><br />Mvp.Xml.XGen lacks a good command line interface, and expects you to compile your serializer classes along with the assembly itself. XGenPlus combines the advantages of both, and provides you a flexible way to create and use typed serializers.<br /><br />The MsBuild task will help you to automate XGenPlus in your build, so that typed serializers are generated automatically for the specified assemblies.<br /><br />---<br /><br />Usage&#58; XGenPlus &#47;assembly&#58; assemblyname &#91;&#47;exclude&#58;namespace1,namespace2&#93; &#91;&#47;include&#58;namespace1,namespace2&#93; &#91;&#47;reference&#58;assembly1,assembly2&#93; &#91;&#47;copyto&#58;path&#93; &#91;&#47;nocompile&#93; &#91;&#47;nogenerate&#93; &#91;&#47;getconfig&#58;filename&#93; &#91;&#47;putconfig&#58;filename&#93; &#91;&#47;serializeall&#93;<br /><br />See the readme file for more explanation on these switches.<br /><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,xml,.NET 2.0,Serialization,Mine,try,",
  "LastEdited": "2007-11-05T23:38:30.83-08:00"
}