{
  "ProjectName": "chumchase",
  "Title": "ChumChase",
  "Description": "A client for FriendFeed written in WPF. The intention of the project is to demonstrate how to build a WPF application using Test-Driven Development. In the application, we use a number of patterns such as Model-View-Presenter, PresentationModel, Inversion of Control, and so on.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>ChumChase: an explanation</b><br /><i>A client for FriendFeed written in WPF. The intention of the project is to demonstrate how to build a WPF application using Test-Driven Development. In the application, we use a number of patterns such as Model-View-Presenter, PresentationModel, Inversion of Control, and so on.</i><br /><br />Do you have some feedback? Disagree with a design choice? Think there is a better way to do something?<br />Post a message in the Discussions!<br /><br />You can follow along with the blog posts chronicling the development of ChumChase <a href=\"http://devlicio.us/blogs/christopher_bennage/archive/tags/ChumChase/default.aspx\">here</a>.<br /><br /><b>NOTE</b> I started converting this over to a new approach, as well as brining in Caliburn. The blog posts do not reflect this yet.<br /><br /><div class=\"rss\"><div class=\"accentbar\"><span class=\"left\">&nbsp;</span>Christopher Bennage : ChumChase News Feed<span class=\"right\">&nbsp;</span></div><div class=\"entry\"><div class=\"title\"><a href=\"http://devlicio.us/blogs/christopher_bennage/archive/2009/01/13/building-a-wpf-application-part-6.aspx\">Building a WPF Application: Part 6</a></div><div class=\"moreinfo\"><span class=\"date\">Tuesday, January 13, 2009</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://devlicio.us/blogs/christopher_bennage/rss.aspx?Tags=ChumChase&AndTags=1\">Christopher Bennage : ChumChase</a></span></div><p><p><a href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\"><em>ChumChase Table of Contents</em></a></p>  <p>I opened up the ChumChase code this evening with the sad realization that my last commits were on November 14th. Ouch. In reading over the code, something jumped out at me immediately. In the code-behind for Shell.xaml, I had a lot of logic that didn&#39;t need to be there. It was clumsy and not tested, but at least I had left myself a comment to that effect.</p>  <p>The code handled switching from the default view to the 3D view. If you don&#39;t know what I&#39;m talking about, go back and read the <a href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\">older posts</a>. The important part of Shell.xaml looked like this:</p>  <pre class=\"xml:nogutter:nocontrols\" name=\"code\">&lt;Grid&gt;<br />    &lt;ContentControl x:Name=&quot;MainView&quot; /&gt;<br /><br />    &lt;Button Content=&quot;Toggle View&quot;<br />            VerticalAlignment=&quot;Top&quot;<br />            HorizontalAlignment=&quot;Right&quot;<br />            Click=&quot;ToggleView_Click&quot; /&gt;<br />&lt;/Grid&gt;</pre><br /><br /><p>and the handler for the click (along with a dependent method) looked like this:</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">private void ToggleView_Click(object sender, RoutedEventArgs e)<br />{<br />    if (MainView.Content is DefaultFeedView)<br />    {<br />        SetView(new _2Don3DView());<br />    }<br />    else<br />    {<br />        SetView(new DefaultFeedView());<br />    }<br />}<br /><br />private void SetView(IFeedView view)<br />{<br />    MainView.Content = view;<br />    view.RefreshButton.Click += Refresh_Click;<br />}</pre><br /><br /><p>Yes, _2Don3DView is <em>not</em> a good name. I&#39;ll <a title=\"I mean, I just couldn&#39;t stop laughing...\" href=\"http://www.hulu.com/watch/38477/saturday-night-live-update-thursday-fix-it-109\">fix it</a>. Aside from the appalling appellation, this code is not very WPF-ish. What is it doing anyway?</p><br /><br /><p><a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.contentcontrol.aspx\">ContentControl</a> is really a place holder. It represents the area in the application&#39;s shell where we want to stick the main content. In the handler, we check to see what is currently in the placeholder and we switch it out. Since each view had it&#39;s own button for refreshing the feed we needed to wire it up each time we switched the view. (Remember this way is naughty-naughty.) Our views implemented IFeedView so we could access their respective Refresh buttons.</p><br />\n<h4>A More Excellent Way</h4><br /><br /><p>My ApplicationController class should really be responsible for this behavior. In order to make that happen, I created a property on it called CurrentPresenter. This property is the presenter that will back the current view. (A <em>presenter</em> is a class that contains the logic for a portion of the UI, the corresponding <em>view</em> is the visual part used to render that presenter.) Since the data context for Shell.xaml is already set to an instance of ApplicationController (it&#39;s named _controller in the code-behind), I was able to changed the markup to look like this:</p><br /><br /><pre class=\"xml:nogutter:nocontrols\" name=\"code\">&lt;Grid&gt;<br />    &lt;ContentControl Content=&quot;{Binding CurrentPresenter}&quot; /&gt;<br /><br />    &lt;Button Content=&quot;Toggle View&quot;<br />            VerticalAlignment=&quot;Top&quot;<br />            HorizontalAlignment=&quot;Right&quot;<br />            Click=&quot;ToggleView_Click&quot; /&gt;<br />&lt;/Grid&gt;</pre><br /><br /><p>and then the event handler to this:</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">private void ToggleView_Click(object sender, RoutedEventArgs e)<br />{<br />    _controller.ToggleView();<br />}</pre><br /><br /><p>And now, let&#39;s examine the tests for the desired behavior. I wanted ToggleView to alternate between an instance of DefaultFeedPresenter and an instance of _2Don3DPresenter. (Bad Christopher, bad!) I did not want ToggleView to create new instances, but to reuse existing ones.</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">[TestFixture]<br />public class The_application_controller<br />{<br />    [SetUp]<br />    public void given_a_context_of()<br />    {<br />        // stuff omitted for brevity //<br />        _controller = new ApplicationController();<br />    }<br /><br />    [Test]<br />    public void raises_change_notification()<br />    {<br />        _controller<br />            .AssertThatAllProperties()<br />            .RaiseChangeNotification();<br />    }<br /><br />    [Test]<br />    public void uses_the_expected_presenter_by_default()<br />    {<br />        Assert.That(_controller.CurrentPresenter, Is.InstanceOfType(typeof(DefaultFeedPresenter)));<br />    }<br /><br />    [Test]<br />    public void toggles_to_the_3D_view_when_the_default_is_current()<br />    {<br />        _controller.ToggleView();<br />        Assert.That(_controller.CurrentPresenter, Is.InstanceOfType(typeof(_2Don3DPresenter)));<br />    }<br /><br />    [Test]<br />    public void toggles_to_the_default_when_the_3D_view_is_current()<br />    {<br />        var default_presenter = _controller.CurrentPresenter;<br />        _controller.CurrentPresenter = new _2Don3DPresenter(_controller);<br />        _controller.ToggleView();<br /><br />        Assert.That(_controller.CurrentPresenter, Is.EqualTo(default_presenter));<br />    }<br />}</pre><br /><br /><p><em>Ooo, hey, what&#39;s that first test? That raises notification bit? Oh, that just some cool stuff in </em><a href=\"http://www.codeplex.com/caliburn\"><em>Caliburn</em></a><em>, you can read more about that </em><a href=\"http://www.codeplex.com/caliburn/Wiki/View.aspx?title=Unit%20Testing%20Property%20Change%20Notification&amp;referringTitle=Table%20Of%20Contents\"><em>here</em></a><em>.</em></p><br /><br /><p>I added the following lines to ApplicationController in order to pass these tests:</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">private readonly IList&lt;IPresenter&gt; _presenters = new List&lt;IPresenter&gt;();<br />private IPresenter _currentPresenter;<br /><br />public IPresenter CurrentPresenter<br />{<br />    get { return _currentPresenter; }<br />    set<br />    {<br />        _currentPresenter = value;<br />        RaisePropertyChanged(&quot;CurrentPresenter&quot;);<br />    }<br />}<br /><br />public void ToggleView()<br />{<br />    CurrentPresenter = (CurrentPresenter is DefaultFeedPresenter)<br />        ? _presenters[1]<br />        : _presenters[0];<br />}</pre><br /><br /><p>I initialized _presenters in the constructor for ApplicationController with the instances of the presenters. (I was tempted here to introduce an IoC container, but I didn&#39;t. We&#39;ll talk more about that later.)</p><br /><br /><p>So now, when ToggleView is called, the CurrentPresenter property is updated and change notification is raised, but what happens in the UI? How does it render the presenter instances? Well, given the markup from Shell.xaml we listed above, it doesn&#39;t do anything.</p><br />\n<h4>I Love DataTemplates So Much, Why Don&#39;t I Marry Them?</h4><br /><br /><p>We need to tell WPF how to render each presenter. We already have user controls that define each view. We can reuse those. I added the following to the Grid containing my ContentControl:</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">&lt;Grid.Resources&gt;<br />    &lt;DataTemplate DataType=&quot;{x:Type Model:DefaultFeedPresenter}&quot;&gt;<br />        &lt;Views:DefaultFeedView /&gt;<br />    &lt;/DataTemplate&gt;<br />    &lt;DataTemplate DataType=&quot;{x:Type Model:_2Don3DPresenter}&quot;&gt;<br />        &lt;Views:_2Don3DView /&gt;<br />    &lt;/DataTemplate&gt;<br />&lt;/Grid.Resources&gt;</pre><br /><br /><p>The DataType property tells WPF that anything bound to an instance of the given type should use the template. Since I placed these in the resources for the grid, it will affect any bindings inside the grid. Each data template simply contains the corresponding user control. I could have inlined the user controls, but I already had tests in place and I believe this makes the markup easier to read.</p><br /><br /><p>In making these changes, I did break something. Something that was not being tested... but it&#39;s time for bed so I&#39;ll leave that for another night. </p><br /><br /><p>More to come!</p><div style=\"clear:both;\"></div><img src=\"http://devlicio.us/aggbug.aspx?PostID=43729\" width=\"1\" height=\"1\"></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://devlicio.us/blogs/christopher_bennage/archive/2009/01/13/building-a-wpf-application-part-6.aspx\">Building a WPF Application: Part 6</a></div><div class=\"moreinfo\"><span class=\"date\">Tuesday, January 13, 2009</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://devlicio.us/blogs/christopher_bennage/rss.aspx?Tags=ChumChase&AndTags=1\">Christopher Bennage : ChumChase</a></span></div><p><p><a href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\"><em>ChumChase Table of Contents</em></a></p>  <p>I opened up the ChumChase code this evening with the sad realization that my last commits were on November 14th. Ouch. In reading over the code, something jumped out at me immediately. In the code-behind for Shell.xaml, I had a lot of logic that didn&#39;t need to be there. It was clumsy and not tested, but at least I had left myself a comment to that effect.</p>  <p>The code handled switching from the default view to the 3D view. If you don&#39;t know what I&#39;m talking about, go back and read the <a href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\">older posts</a>. The important part of Shell.xaml looked like this:</p>  <pre class=\"xml:nogutter:nocontrols\" name=\"code\">&lt;Grid&gt;<br />    &lt;ContentControl x:Name=&quot;MainView&quot; /&gt;<br /><br />    &lt;Button Content=&quot;Toggle View&quot;<br />            VerticalAlignment=&quot;Top&quot;<br />            HorizontalAlignment=&quot;Right&quot;<br />            Click=&quot;ToggleView_Click&quot; /&gt;<br />&lt;/Grid&gt;</pre><br /><br /><p>and the handler for the click (along with a dependent method) looked like this:</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">private void ToggleView_Click(object sender, RoutedEventArgs e)<br />{<br />    if (MainView.Content is DefaultFeedView)<br />    {<br />        SetView(new _2Don3DView());<br />    }<br />    else<br />    {<br />        SetView(new DefaultFeedView());<br />    }<br />}<br /><br />private void SetView(IFeedView view)<br />{<br />    MainView.Content = view;<br />    view.RefreshButton.Click += Refresh_Click;<br />}</pre><br /><br /><p>Yes, _2Don3DView is <em>not</em> a good name. I&#39;ll <a title=\"I mean, I just couldn&#39;t stop laughing...\" href=\"http://www.hulu.com/watch/38477/saturday-night-live-update-thursday-fix-it-109\">fix it</a>. Aside from the appalling appellation, this code is not very WPF-ish. What is it doing anyway?</p><br /><br /><p><a href=\"http://msdn.microsoft.com/en-us/library/system.windows.controls.contentcontrol.aspx\">ContentControl</a> is really a place holder. It represents the area in the application&#39;s shell where we want to stick the main content. In the handler, we check to see what is currently in the placeholder and we switch it out. Since each view had it&#39;s own button for refreshing the feed we needed to wire it up each time we switched the view. (Remember this way is naughty-naughty.) Our views implemented IFeedView so we could access their respective Refresh buttons.</p><br />\n<h4>A More Excellent Way</h4><br /><br /><p>My ApplicationController class should really be responsible for this behavior. In order to make that happen, I created a property on it called CurrentPresenter. This property is the presenter that will back the current view. (A <em>presenter</em> is a class that contains the logic for a portion of the UI, the corresponding <em>view</em> is the visual part used to render that presenter.) Since the data context for Shell.xaml is already set to an instance of ApplicationController (it&#39;s named _controller in the code-behind), I was able to changed the markup to look like this:</p><br /><br /><pre class=\"xml:nogutter:nocontrols\" name=\"code\">&lt;Grid&gt;<br />    &lt;ContentControl Content=&quot;{Binding CurrentPresenter}&quot; /&gt;<br /><br />    &lt;Button Content=&quot;Toggle View&quot;<br />            VerticalAlignment=&quot;Top&quot;<br />            HorizontalAlignment=&quot;Right&quot;<br />            Click=&quot;ToggleView_Click&quot; /&gt;<br />&lt;/Grid&gt;</pre><br /><br /><p>and then the event handler to this:</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">private void ToggleView_Click(object sender, RoutedEventArgs e)<br />{<br />    _controller.ToggleView();<br />}</pre><br /><br /><p>And now, let&#39;s examine the tests for the desired behavior. I wanted ToggleView to alternate between an instance of DefaultFeedPresenter and an instance of _2Don3DPresenter. (Bad Christopher, bad!) I did not want ToggleView to create new instances, but to reuse existing ones.</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">[TestFixture]<br />public class The_application_controller<br />{<br />    [SetUp]<br />    public void given_a_context_of()<br />    {<br />        // stuff omitted for brevity //<br />        _controller = new ApplicationController();<br />    }<br /><br />    [Test]<br />    public void raises_change_notification()<br />    {<br />        _controller<br />            .AssertThatAllProperties()<br />            .RaiseChangeNotification();<br />    }<br /><br />    [Test]<br />    public void uses_the_expected_presenter_by_default()<br />    {<br />        Assert.That(_controller.CurrentPresenter, Is.InstanceOfType(typeof(DefaultFeedPresenter)));<br />    }<br /><br />    [Test]<br />    public void toggles_to_the_3D_view_when_the_default_is_current()<br />    {<br />        _controller.ToggleView();<br />        Assert.That(_controller.CurrentPresenter, Is.InstanceOfType(typeof(_2Don3DPresenter)));<br />    }<br /><br />    [Test]<br />    public void toggles_to_the_default_when_the_3D_view_is_current()<br />    {<br />        var default_presenter = _controller.CurrentPresenter;<br />        _controller.CurrentPresenter = new _2Don3DPresenter(_controller);<br />        _controller.ToggleView();<br /><br />        Assert.That(_controller.CurrentPresenter, Is.EqualTo(default_presenter));<br />    }<br />}</pre><br /><br /><p><em>Ooo, hey, what&#39;s that first test? That raises notification bit? Oh, that just some cool stuff in </em><a href=\"http://www.codeplex.com/caliburn\"><em>Caliburn</em></a><em>, you can read more about that </em><a href=\"http://www.codeplex.com/caliburn/Wiki/View.aspx?title=Unit%20Testing%20Property%20Change%20Notification&amp;referringTitle=Table%20Of%20Contents\"><em>here</em></a><em>.</em></p><br /><br /><p>I added the following lines to ApplicationController in order to pass these tests:</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">private readonly IList&lt;IPresenter&gt; _presenters = new List&lt;IPresenter&gt;();<br />private IPresenter _currentPresenter;<br /><br />public IPresenter CurrentPresenter<br />{<br />    get { return _currentPresenter; }<br />    set<br />    {<br />        _currentPresenter = value;<br />        RaisePropertyChanged(&quot;CurrentPresenter&quot;);<br />    }<br />}<br /><br />public void ToggleView()<br />{<br />    CurrentPresenter = (CurrentPresenter is DefaultFeedPresenter)<br />        ? _presenters[1]<br />        : _presenters[0];<br />}</pre><br /><br /><p>I initialized _presenters in the constructor for ApplicationController with the instances of the presenters. (I was tempted here to introduce an IoC container, but I didn&#39;t. We&#39;ll talk more about that later.)</p><br /><br /><p>So now, when ToggleView is called, the CurrentPresenter property is updated and change notification is raised, but what happens in the UI? How does it render the presenter instances? Well, given the markup from Shell.xaml we listed above, it doesn&#39;t do anything.</p><br />\n<h4>I Love DataTemplates So Much, Why Don&#39;t I Marry Them?</h4><br /><br /><p>We need to tell WPF how to render each presenter. We already have user controls that define each view. We can reuse those. I added the following to the Grid containing my ContentControl:</p><br /><br /><pre class=\"c#:nogutter:nocontrols\" name=\"code\">&lt;Grid.Resources&gt;<br />    &lt;DataTemplate DataType=&quot;{x:Type Model:DefaultFeedPresenter}&quot;&gt;<br />        &lt;Views:DefaultFeedView /&gt;<br />    &lt;/DataTemplate&gt;<br />    &lt;DataTemplate DataType=&quot;{x:Type Model:_2Don3DPresenter}&quot;&gt;<br />        &lt;Views:_2Don3DView /&gt;<br />    &lt;/DataTemplate&gt;<br />&lt;/Grid.Resources&gt;</pre><br /><br /><p>The DataType property tells WPF that anything bound to an instance of the given type should use the template. Since I placed these in the resources for the grid, it will affect any bindings inside the grid. Each data template simply contains the corresponding user control. I could have inlined the user controls, but I already had tests in place and I believe this makes the markup easier to read.</p><br /><br /><p>In making these changes, I did break something. Something that was not being tested... but it&#39;s time for bed so I&#39;ll leave that for another night. </p><br /><br /><p>More to come!</p><img src=\"http://devlicio.us/aggbug.aspx?PostID=43729\" width=\"1\" height=\"1\"></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://devlicio.us/blogs/christopher_bennage/archive/2008/11/13/building-a-wpf-application-part-5.aspx\">Building a WPF Application: Part 5</a></div><div class=\"moreinfo\"><span class=\"date\">Thursday, November 13, 2008</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://devlicio.us/blogs/christopher_bennage/rss.aspx?Tags=ChumChase&AndTags=1\">Christopher Bennage : ChumChase</a></span></div><p><p><a title=\"Table of Contents for ChumChase\" href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\" target=\"_blank\">ChumChase Table of Contents</a></p> <p>About 5pm today I was burnt-out from some difficult work on a particular client&#39;s project. Our last four projects have all been WPF with an emphasis on UI and UX. Fortunately, most of these were green field project, but the one I was working on today was not.</p> <p>What made it so difficult is that the application is practically one big xaml file with all of the logic in the accompanying code behind. It&#39;s hard to modify the UI when it is so tangled up with the logic.&nbsp; &lt;sigh /&gt;</p> <p>So at 5pm, I decided to take a break and work on ChumChase a bit.</p> <p><img style=\"border-top-width:0px;border-left-width:0px;border-bottom-width:0px;border-right-width:0px;\" height=\"255\" alt=\"Hope I&#39;m not embarassing anyone...\" src=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/3170e4c50a9b_15106/chums_3.png\" width=\"260\" align=\"right\" border=\"0\" />Here&#39;s a quick overview of what I did:</p> <ul> <li> I began a basic 2D view that will be the actual default view for the application. The 3D view is cool, but it&#39;s a novelty and not much else. The 2D is really simple at the moment.  <li>You can toggle between the 2D and 3D views. The underlying presentation model is the same. It doesn&#39;t change. The only code associate with the views is the trackball code for the 3D view.  <li>I added profile pictures for the user associated with a feed entry.</li></ul> <h3>Chasing Simplicity</h3> <p>Let&#39;s review my thinking process for adding the profile pictures.</p> <p>I assumed that I could get the url for a given user&#39;s profile picture from FriendFriend&#39;s API. In fact, it is quite simple. </p> <p><a href=\"http://friendfeed.com/nickname/picture?size=medium\">http://friendfeed.com/nickname/picture?size=medium</a></p> <p>where <strong>nickname</strong> is the user you are interested in. You can provide <strong>small</strong> or <strong>large</strong> for the size as well.<em> FriendFeed uses the term nickname where everyone else would use username.</em></p> <p>The data template for a individual item on the feed looks like this (simplified for the post):</p><pre class=\"xml:nogutter:nocontrols\" name=\"code\">&lt;DataTemplate&gt;<br />    &lt;Border&gt;<br />        &lt;DockPanel&gt;<br />            &lt;Grid DockPanel.Dock=&quot;Left&quot;&gt;<br />                &lt;!-- this image is where the profile pick will go --&gt;<br />                &lt;Image Width=&quot;50&quot;<br />                       Height=&quot;50&quot;<br />                       Margin=&quot;2,2,8,8&quot; /&gt;<br />                &lt;Image Width=&quot;16&quot;<br />                       Height=&quot;16&quot;<br />                       VerticalAlignment=&quot;Bottom&quot;<br />                       Margin=&quot;2&quot;<br />                       Source=&quot;{Binding Path=ServiceIcon}&quot;<br />                       HorizontalAlignment=&quot;Right&quot; /&gt;<br />            &lt;/Grid&gt;<br /><br />            &lt;Grid&gt;<br />                &lt;Grid.RowDefinitions&gt;<br />                    &lt;RowDefinition Height=&quot;Auto&quot; /&gt;<br />                    &lt;RowDefinition Height=&quot;*&quot; /&gt;<br />                &lt;/Grid.RowDefinitions&gt;<br />                &lt;TextBlock Text=&quot;{Binding Path=Title}&quot;<br />                           TextWrapping=&quot;Wrap&quot;<br />                           FontSize=&quot;16&quot; /&gt;<br />                &lt;TextBlock Grid.Row=&quot;1&quot;<br />                           Text=&quot;{Binding Path=User}&quot; /&gt;<br />            &lt;/Grid&gt;<br />        &lt;/DockPanel&gt;<br />    &lt;/Border&gt;<br />&lt;/DataTemplate&gt;</pre><br /><p>The template is bound to an instance of <strong>FeedEntry</strong> which represents a single entry in the feed. Notice the binding to <strong>User</strong> in the bottom TextBlock. That&#39;s simply the nickname of the user associate with the entry. </p><br /><p>My first thought was to add a new property to FeedEntry called <strong>UserProfilePictureUrl</strong> and bind it to the Source property on the Image.&nbsp; This new property would merely inject the value of User into a url and return it. Even though it was simple, something nagged me about this. I felt like it should not be a concern of FeedEntry to provide the url for the profile picture. In addition, I knew that I would need to get the url in other places where FeedEntry was not part of the picture.</p><br /><p>In some sense, the translation of a nickname into a profile pic url is standalone. I mean, the concept exists independent of any of the current entities in my model. Because of this, I decided to encapsulate the concept in a value converter.</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">public class NicknameToProfilePicUrlConverter : IValueConverter<br />{<br />    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)<br />    {<br />        string size = (parameter == null)<br />                          ? &quot;medium&quot;<br />                          : parameter.ToString();<br /><br />        string url = string.Format(&quot;http://friendfeed.com/{0}/picture?size={1}&quot;,<br />                                   value,<br />                                   size);<br />        return url;<br />    }<br /><br />    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)<br />    {<br />        throw new NotImplementedException();<br />    }<br />}<br /></pre><br /><p>Then in the xaml, I used the converter like this (after adding a reference in the resources):</p><pre class=\"xml:nogutter:nocontrols\" name=\"code\">&lt;Image Width=&quot;50&quot;<br />       Height=&quot;50&quot;<br />       Source=&quot;{Binding Path=User, Converter={StaticResource NicknameToProfilePicUrl}}&quot;<br />       Margin=&quot;2,2,8,8&quot; /&gt;</pre><br /><p>Notice that I&#39;m actually binding to the nickname (note to self: <em>I should rename User to Nickname</em>). The converter takes the nickname and returns the url. Converters like this are easy to test as well. </p><br /><p>This implementation isn&#39;t all that robust, but we&#39;ll handle that when the need arises.</p><br /><p>So how do you feel about having a value converter that is so specific? I find myself using them more and more. Does it bother you to take this approach?</p><br /><p>Off to bed...</p><img src=\"http://devlicio.us/aggbug.aspx?PostID=43008\" width=\"1\" height=\"1\"></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://devlicio.us/blogs/christopher_bennage/archive/2008/11/07/building-a-wpf-application-part-4.aspx\">Building a WPF Application: Part 4</a></div><div class=\"moreinfo\"><span class=\"date\">Saturday, November 08, 2008</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://devlicio.us/blogs/christopher_bennage/rss.aspx?Tags=ChumChase&AndTags=1\">Christopher Bennage : ChumChase</a></span></div><p><a title=\"Table of Contents for ChumChase\" href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\" target=\"_blank\">Table of Contents</a> <p>Since my last post on building ChumChase, I&#39;ve had a couple of projects that have changed my thinking just a bit about how to architect a WPF application. When I reviewed the code for ChumChase (in order to continue this series) I found it needlessly complicated in more than a few places. So I decided to fix it. </p> <p>A good portion of what I wrote in the first three posts is still true, but I did make changes in two major areas.</p> <h3>Too Much Focus on Presenters</h3> <p>I have had a habit of naively creating presenter classes for every &quot;screen&quot; within an application. I think this is a consequence of my experiences as a Web developer using MVC. With MVC, you really need a controller to coordinate any action with the the view. Not so with a technology like WPF.</p> <p>What&#39;s sad, is that I&#39;ve known this intellectually for some time. Posts by <a href=\"http://blogs.msdn.com/dancre/archive/2006/10/11/datamodel-view-viewmodel-pattern-series.aspx\" target=\"_blank\">Dan Crevier</a> and <a href=\"http://blogs.msdn.com/johngossman/\" target=\"_blank\">John Gossman</a> explained patterns like DataModel-View-ViewModel a couple of years back.</p> <p>If that&#39;s the case, what did I change?</p> <p>First, I created a model that represented what is going to be visualized. This is the &quot;ViewModel&quot; mentioned above, although I tend to use the term &quot;Presentation Model&quot;. This view or presentation model often mirrors the actual domain model (or data model) of the application, but it has an entirely <em>different set of concerns</em>.</p> <p>For example, my company worked on the recently released (to beta) <a href=\"http://www.mapdotnet.com/Pages2.0/Developers/MDNUXBeta.aspx\" target=\"_blank\">MapDotNet Studio UX</a>. It&#39;s an application for designing maps to be rendered with MapDotNet Server. There&#39;s a domain model for representing the maps and the various layers of data that might be represented on them (e.g., parks, property parcels, postal codes, etc). In this application, we display a list of maps that can be edited. Underlying the application is a domain model that represents the maps and business of rendering them on a server. However, in presenting this model in the UI we need to do things like: keep track of the currently selected map, know wether or not a map is open for editing, and so on. These are <em>presentation concerns</em> and have no business in the domain model. Thus, we create a presentation model. </p> <p>In many cases, this presentation model is a wrapper around the domain model and adds the presentation concerns. However, the presentation model might stand alone,similar to <a href=\"http://en.wikipedia.org/wiki/Data_Transfer_Object\" target=\"_blank\">data transfer objects</a>. In that case, there would need to be some sort of translation between the domain model and the presentation model. All that is to say that there is more than one way to do it.</p> <p>In some cases, presenters make a lot more sense that a presentation model. The scenario we frequently encounter is a form or wizard-based UI. Presenters are much better suited for these types of UI&#39;s. </p> <p>Of course, there is no reason why an application might not have presenters and presentation model.</p> <h3>Where do you put stuff?</h3> <p><img style=\"border-right:0px;border-top:0px;border-left:0px;border-bottom:0px;\" height=\"460\" alt=\"Partial Screen Shot of ChumChase\" src=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/BuildingaWPFApplicationPart4_F776/partial_screen_shot_3.png\" width=\"358\" align=\"right\" border=\"0\" />I&#39;ll reference our work on Studio UX again; a user loads a map up from a server, styles the map, and then saves or publishes the map back to the server. A user might initiate publishing a map from any number of places in the UI: right-clicking on a map in the explorer pane, Ctrl+S when a map is open, and so on. So where should the code that actually publishing the map live? These different portions of the UI might be backed by different presenters, or by a class in the presentation model. How do we handle the save?</p> <p>The missing link is using the <a href=\"http://en.wikipedia.org/wiki/Command_pattern\" target=\"_blank\">Command pattern</a>.</p> <p>Of course, the Command pattern is built into WPF. It&#39;s all other place and part of the WPF Way. Take a look at <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.input.applicationcommands.save.aspx\" target=\"_blank\">ApplicationCommands.Save</a>, it&#39;s practically a stub for what I just described.</p> <p>Even though I live and breathe WPF, I was not bringing these concepts into my solutions.</p> <p>The act of saving the map can be expressed as a command. It might be class named something like the PublishMapCommand. This hypothetical class PublishMapCommand is a first class member of my presentation model. (I&#39;m simplifying the scenario from what the <em>real</em> app dealt with). It has some prerequisites of course, for example it needs a map to operate on, and it might need access to a repository, but it&#39;s not tied to a specific presenter or even to a specific instance of a map. The map is provide by the context (the node I&#39;m clicking on the explorer, or the tab that has focus when I press Ctrl+S). My IoC container can handle injecting the repository. And now, I can bind disparate parts of the UI to the same command.</p> <p>The command is also highly testable because it so focused, it does just one thing. As a side note, thinking about your domain in terms of <em>Verbs</em> is really useful. I would argue much more useful that the traditional approach of thinking in Nouns. Verbs == Behavior, Nouns == Data.</p> <h3>Summing It Up</h3> <p>My basic approach for the UI is this: first, I am thinking in terms of a presentation model. An important part of this model is the verbs or commands. Secondly, where it makes since I use presenters. If necessary, I&#39;ll introduce an application controller (or master presenter) to help orchestrate the entire application. Again, if necessary.</p> <p>The lesson for myself was this: don&#39;t get so caught up in the design, that you lose sight of what works. Keep it clear, keep it simple.</p> <p>I&#39;ve already committed the changes for ChumChase that reflect these ideas. There aren&#39;t any commands in the model yet, but I did away with the HomeFeedPresenter. Instead, I now have the beginning of a presentation model that models the data I want visualized in the application. Right now, that is merely the home feed.</p> <p>You can get the latest for ChumChase <a href=\"http://www.codeplex.com/chumchase\" target=\"_blank\">here</a>. The application actually works now , well the minimum base feature works. You&#39;ll be prompted for your user name (or nickname) and your remote key. The remote key is different from your FriendFeed password, and you can find it <a href=\"https://friendfeed.com/account/api\" target=\"_blank\">here</a> (assuming you are logged into FriendFeed.) If you are lazy, you can use the default credentials for the dummy account I set up.</p> <p>Oh, and I started playing with the new 2D on 3D stuff, that&#39;s what the screen shot is, but I&#39;ll blog about that later. </p> <p>Oh yeah, and there are some wicked cool new WPF binding tests via <a href=\"http://www.codeplex.com/caliburn\" target=\"_blank\">Caliburn</a> in there as well.</p> <p>More to come...</p><img src=\"http://devlicio.us/aggbug.aspx?PostID=42951\" width=\"1\" height=\"1\"></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://devlicio.us/blogs/christopher_bennage/archive/2008/08/20/building-a-wpf-application-part-3.aspx\">Building a WPF Application: Part 3</a></div><div class=\"moreinfo\"><span class=\"date\">Wednesday, August 20, 2008</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://devlicio.us/blogs/christopher_bennage/rss.aspx?Tags=ChumChase&AndTags=1\">Christopher Bennage : ChumChase</a></span></div><p><a title=\"Table of Contents for ChumChase\" href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\" target=\"_blank\">Table of Contents</a>\n<h3>Application Architecture</h3> <p>I&#39;m going to back up and bit discuss my overall approach to structuring this WPF project. So far the solution consists of four projects:</p><img style=\"border-top-width:0px;border-left-width:0px;border-bottom-width:0px;border-right-width:0px;\" height=\"159\" alt=\"solution\" src=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/BuildingaWPFApplicationPart4_150D4/solution_3.png\" width=\"256\" align=\"right\" border=\"0\" />  <ul> <li><strong>ChumChase</strong> is the actual WPF project.  <li><strong>FriendFeed</strong> is the official .NET api I downloaded from <a href=\"http://code.google.com/p/friendfeed-api/downloads/list\" target=\"_blank\">here</a>, and patched so that it would compile. :-)  <li><strong>IntegrationTests</strong> is for testing the bits of the application that interact with the FriendFeed api.&nbsp; I separated this out because it is much slower to run than my <strong>Specifications</strong> tests, and goes beyond the trust boundary of the app.  <li><strong>Specifications</strong> is the bulk of the unit tests for the project. I&#39;m influenced by the whole <a title=\"Does really know what BDD is? Does anybody really care?\" href=\"http://en.wikipedia.org/wiki/Behavior_driven_development\" target=\"_blank\">BDD</a> approach, and I like to think of my unit tests as <em>executable technical specifications</em>. </li></ul> <h3>Project Structure</h3> <p><strong><a href=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/BuildingaWPFApplicationPart4_150D4/project_2.png\"><img style=\"border-top-width:0px;border-left-width:0px;border-bottom-width:0px;border-right-width:0px;\" height=\"357\" alt=\"project\" src=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/BuildingaWPFApplicationPart4_150D4/project_thumb.png\" width=\"238\" align=\"right\" border=\"0\" /></a></strong>In the main project you&#39;ll find the following:</p> <ul> <li><strong>Presenters</strong> - This folder contains the presenter classes. I usually name these classes with the suffix &quot;Presenter, though that&#39;s a bit of a hang over from other frameworks (MonoRail, RoR). This directory is where I have the HomePresenter class we&#39;ve been discussing.  <li><strong>Views</strong> - These are usually user controls or some derivative thereof. I name them to correspond to their presenter. So you would expect, since we have HomePresenter, to find HomeView.xaml. (Actually, I goofed and the current source has the view named HomeFeedView.xaml).  <li><strong>Model</strong> - This is the object model that represents the &quot;business problem&quot; I&#39;m trying to solve. In this case it happens to mirror the actual api quite a bit.  <li><strong>Repositories</strong> - Here I am influenced by Eric Evans&#39; <a title=\"Sams Teach Yourself WPF in 24 Hours -- preorder yours today! :-)\" href=\"http://www.amazon.com/Sams-Teach-Yourself-WPF-Hours/dp/0672329859\" target=\"_blank\">book</a> on Domain-Driven Design. Repositories are classes that allow me to access/persist data in a way that makes sense to my business domain. It&#39;s also a place where I can hook in orthogonal concerns such as logging, caching, or security. Repositories differ from the traditional data access layer in that there is an emphasis on the domain model (as opposed to following the semantics of a relation database).  <li><strong>Services</strong> - These are supporting classes. They are not necessarily part of the business or problem domain. A classic example is an SMTP provider. Classes in your model or presenters might utilize these.  <li><strong>Framework</strong> - These support the framework of application, but don&#39;t have anything to do with the business concern. If we need to create a base class for views, we&#39;d put it here. Currently, I have a class there that is going to assist us with binding to commands. This is code that could likely be pushed out to a reusable library.</li></ul> <p>Aside from these folders you will also find:</p> <ul> <li><strong>App.xaml</strong> - This is the starting point for the application. It will kick off our Windsor configuration, and launch the first window for the application. Eventually, we&#39;ll include some application-wide resources in the xaml, primarily for styling.  <li><strong>Shell.xaml</strong> - This is the main window of the application. I call it Shell, because there is very little to its UI. It&#39;s content is bound to view of our current presenter. This class might have some logic in it&#39;s code-behind if we need to do some things like managing a set of tabs. It also provides the overall layout of the application.  <li><strong>ApplicationController</strong> - I briefly mentioned this in the last post. Honestly, I&#39;ve waffled a bit on what to call it. It&#39;s responsibility is to coordinate the presenters for the application. For example, if presenter X needs to load presenter Y it passes that request to the application controller. In this, it also handles some statefulness for the overall application. This will become more clear as we begin to work with the class.</li></ul> <h3>What&#39;s Not Here Yet</h3> <p>There are several other things that usually appear in my projects. I often end up with a base class for test fixtures, though I think the new Rhino.Mocks features might affect that. However, the big piece that&#39;s missing is the folders and files related to organizing the XAML.</p> <p>It&#39;s common for me to have the following:</p> <ul> <li><strong>Colors &amp; Brushes</strong> - I typically have a&nbsp; resource dictionary dedicated to defining the colors and brushes used in the application.  <li><strong>Default Styles</strong> - When I provide a completely custom style for an application, I&#39;ll have a resource dictionary that defines all of the default styles for controls. It useful to note that I avoid putting control templates inline in this dictionary.  <li><strong>Control Templates folder</strong> - In this folder, I will have a file for each control template in the application. I&#39;ll usually have a &quot;manifest&quot; resource dictionary where I merge in all of the individual templates. This helps to keep the structure clean in other areas. These are the control templates that are referenced in my default styles dictionary.  <li><strong>Data Templates folder</strong> - Inside the Views directory, I will have a sub-folder for data templates. Data templates really are views.</li></ul> <h3>What Happens at Runtime?</h3> <p>A synopsis of what happens at runtime, well, what <em>will</em> happen once we&#39;ve finished:</p> <ul> <li>App.xaml starts off.</li> <li>In its constructor, we configure our <em>container</em>, which in this case is Windsor.&nbsp; The container is told how to resolve resources, such as where do I find the actual implementation of IFriendFeedProxy.</li> <li>Still in the constructor, we then request an instance of <strong>IApplicationController</strong>, and call <strong>StartApplication()</strong>.&nbsp; Note that we don&#39;t set the <strong>StartupUri</strong> in the XAML for App.</li> <li><strong>StartApplication()</strong> might handle some things like loading up user preferences, but mostly it will initialize and open Shell.xaml. </li> <li>Somewhere around here we&#39;ll request the HomePresenter from the container, and inject into the shell.</li> <li>As the user interacts with the application, presenters may be removed and new ones injected (probably into a tab, or new window). The shell&#39;s code-behind has the code for actually placing these presenter&#39;s views into the layout.</li> <li>The presenter will have use <a target=\"_blank\">commands</a> as properties that can be bound to in there views. These commands are coordinators of individual activities in the application.</li></ul> <p>I&#39;m certain that parts of this are confusion, but I believe it will make sense as we continue to build the application. As always, your feedback is welcome.</p> <p>More to come!</p><br /><p><a href=\"http://devlicious.com/blogs/christopher_bennage/archive/2008/11/07/building-a-wpf-application-part-4.aspx\">Continue to Part 4.</a></p><img src=\"http://devlicio.us/aggbug.aspx?PostID=41939\" width=\"1\" height=\"1\"></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://devlicio.us/blogs/christopher_bennage/archive/2008/08/16/building-a-wpf-application-part-2.aspx\">Building a WPF Application: Part 2</a></div><div class=\"moreinfo\"><span class=\"date\">Sunday, August 17, 2008</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://devlicio.us/blogs/christopher_bennage/rss.aspx?Tags=ChumChase&AndTags=1\">Christopher Bennage : ChumChase</a></span></div><p><a title=\"Table of Contents for ChumChase\" href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\" target=\"_blank\">Table of Contents</a><br /><br /><p>So let&#39;s get back to this whole building a WPF application thing. </p> <p>A number of things went down since my last post: I was out sick with a stomach bug for few days, my infant son caught the same bug and subsequently we spent a few days in the hospital (he&#39;s fine now, it was nothing serious), <em>and</em> I finally caught up on the AAA syntax in <a href=\"http://www.ayende.com/projects/rhino-mocks.aspx\" target=\"_blank\">Rhino.Mocks</a>.</p> <h3>Changing My Testing Style</h3> <p>Lots of people have blogged about the AAA syntax <a href=\"http://www.ayende.com/Blog/archive/2008/05/16/Rhino-Mocks--Arrange-Act-Assert-Syntax.aspx\" target=\"_blank\">here</a>, <a href=\"http://www.lostechies.com/blogs/jimmy_bogard/archive/2008/07/24/arrange-act-assert-and-bdd-specifications.aspx\" target=\"_blank\">here</a>, and <a href=\"http://blog.jpboodhoo.com/BDDAAAStyleTestingAndRhinoMocks.aspx\" target=\"_blank\">here</a> (to list a few). I won&#39;t go in depth, but briefly the idea is that you arrange your unit test thusly:</p> <ul> <li><strong>Arrange</strong>: do the minimal setup required to execute the test  <li><strong>Act</strong>: execute the actual code under test  <li><strong>Assert</strong>: assert that the code did what you expected</li></ul> <p>I decided to adopt this style. It seems to yield more readable, more focused, and less brittle tests. I rewrote the test from my last post using AAA.&nbsp; The original test was this:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">[TestFixture]<br />public class The_presenter_for_the_home_feed : TestFixtureBase<br />{<br />    private HomePresenter _presenter;<br />    private IFeedRepository _feedRepository;<br /><br />    protected override void given_the_context_of()<br />    {<br />        _feedRepository = Mocks.StrictMock&lt;IFeedRepository&gt;();<br />        _presenter = new HomePresenter(_feedRepository);<br />    }<br /><br />    [Test]<br />    public void can_refresh_the_home_feed()<br />    {<br />        using (Record)<br />        {<br />            Expect.Call(_feedRepository.FetchHomeFeed())<br />                .Return(new List&lt;Entry&gt;());<br />        }<br /><br />        using (Playback)<br />        {<br />            _presenter.RefreshHomeFeed();<br />        }<br />    }<br />}</pre><br /><p>and I rewrote it as this:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">[TestFixture]<br />public class The_presenter_for_the_home_feed : TestFixtureBase<br />{<br />    private HomePresenter _presenter;<br />    private IFeedRepository _feedRepository;<br /><br />    protected override void given_the_context_of()<br />    {<br />        _feedRepository = MockRepository.GenerateStub&lt;IFeedRepository&gt;();<br />        _presenter = new HomePresenter(_feedRepository);<br />    }<br /><br />    [Test]<br />    public void can_refresh_the_home_feed_when_credentials_are_available()<br />    {<br />        _presenter.RefreshHomeFeed();<br />        _feedRepository.AssertWasCalled(x =&gt; x.FetchHomeFeed());<br />    }<br />}</pre><br /><p>Again, you can gather more details about this approach in one of the links above. </p><br /><p>One interesting note though is that <strong>AssertWasCalled</strong> is an extension method and we&#39;re using it to assert the method FetchHomeFeed() was actually called on feedRepository. </p><br /><p>(I also think that I should <em>not</em> have used StrickMock in the original test, as that added to fragility of the test.)</p><br /><p>I tend to think of my code in terms of sentences and paragraphs, at least when it comes to the use of white space. You&#39;ll notice as the tests get a little larger that there will usually be three &quot;paragraphs&quot; in the code: arrange, act, assert.</p>\n<h3>Focusing on the Story</h3><br /><p>I said in my last post that the core story for this application is <em>to retrieve the home feed.</em> As such, I&#39;d like to take the shortest path to getting that feature fully functional.&nbsp; The next few steps are roughly:</p>\n<ul><br /><li>Write a proxy to wrap the existing FriendFeed api, but just enough to fetch the home feed. <br /><li>Write a repository that will manage the home feed data. Even though this seems superfluous at the moment, it&#39;s a seam in the application where I will add future functionality (such as caching, logging, etc.). <br /><li>Provide support for authentication.&nbsp; The FriendFeed api requires a username and remote key for accessing the home feed.</li></ul>\n<p>Very soon, I want to be able to launch the application, click a Refresh button, and see my feed. If I haven&#39;t provided credentials, I want the application to prompt me for them.</p>\n<h3>The Credentials Problem</h3><br /><p>The parts of the story regarding credentials raise some interesting design questions. Let&#39;s consider some of the pieces of the puzzle.</p><br /><p>The HomePresenter is going to initiate the act getting the home feed. We&#39;ve already seen that HomePresenter is going to invoke some implementation of IFeedRepository. The repository will talk to the FriendFeed api through a wrapper (IFriendFeedProxy) . Inside the wrapper class is the official .NET FriendFeed client, and it is the class that is really interested in the credentials. It&#39;s what talks to the FriendFeed web service, and that needs to be authenticated with the credentials. So at the bottom of this, somewhere in our code, we&#39;ll have this:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">FriendFeedClient client = new FriendFeedClient(&quot;username&quot;, &quot;remoteKey&quot;);</pre><br /><p><img style=\"border-right:0px;border-top:0px;border-left:0px;border-bottom:0px;\" height=\"279\" alt=\"classes\" src=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/BuildingaWPFApplicationPart2_F0F6/classes_3.png\" width=\"336\" align=\"right\" border=\"0\" />I&#39;m using the <a href=\"http://en.wikipedia.org/wiki/Dependency_inversion_principle\" target=\"_blank\">Dependency Inversion Principle</a> (which I&#39;ll talk about more later). However a consequence of this is that the constructor for HomePresenter takes an IFeedRepository and an IApplicationController. </p><br /><p>In turn, my implementation of IFeedRepository, cleverly named <em>FeedRepository</em>, requires an instance of IFriendProxy in its constructor. My implementation of IFriendProxy wraps the official api. Did you follow all of that?</p><br /><p>When I first began working through the design, I thought that I&#39;d have to request the credentials from the user at the presenter level, and then pass them down to the repository, then to the proxy which would in turn set them on the actual client. <em>But I could tell quickly that this smelled bad.</em> The repository doesn&#39;t need to be concerned with credentials, and neither the HomePresenter. So far there are really just two classes that need to know about credentials: some sort of UI for getting the credentials from the user (that is a presenter of some sort) and FriendFeedProxy. </p><br /><p>Oh and what&#39;s this IApplicationController interface all about? Um, I&#39;ll come back to that in the next post. </p>\n<h3>Single Source</h3><br /><p>Ideally, what I want is a single source for the credentials: a class whose sole responsibility is managing the current set of credentials. This lead me to create an ICredentialsSource interface. In order to flesh out what the interface should look like I began writing tests for how the client proxy would interact with it:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">[TestFixture]<br />public class The_client_for_FriendFeed<br />{<br />    private const string _username = &quot;your_username&quot;;<br />    private const string _remotekey = &quot;your_remotekey&quot;;<br />    private ICredentialsSource _credentials;<br />    private FriendFeedProxy _client;<br /><br />    [SetUp]<br />    public void given_the_context_of()<br />    {<br />        _credentials = MockRepository.GenerateStub&lt;ICredentialsSource&gt;();<br />        _client = new FriendFeedProxy(_credentials);<br />    }<br /><br />    [Test]<br />    public void can_get_the_home_feed_when_authenticated()<br />    {<br />        _credentials.Stub(x =&gt; x.UserName).Return(_username);<br />        _credentials.Stub(x =&gt; x.RemoteKey).Return(_remotekey);<br />        _credentials.Raise(x =&gt; x.CredentialsChanged += null, _credentials, EventArgs.Empty);<br /><br />        var feed = _client.FetchHomeFeed();<br /><br />        IList&lt;Entry&gt; entries = feed.ToList();<br />        Assert.That(entries[0].Id, Is.Not.Null);<br />        Assert.That(entries[0].Title, Is.Not.Null);<br />        Assert.That(entries[0].Published, Is.Not.Null);<br />    }<br /><br />    [Test]<br />    [ExpectedException(typeof (WebException))]<br />    public void cannot_get_the_home_feed_when_not_authenticated()<br />    {<br />        var feed = _client.FetchHomeFeed();<br />    }<br /><br />    [Test]<br />    public void updates_credentials_when_the_credentials_source_changes()<br />    {<br />        //arrange<br />        _credentials.Stub(x =&gt; x.UserName).Return(_username);<br />        _credentials.Stub(x =&gt; x.RemoteKey).Return(_remotekey);<br /><br />        //act<br />        Assert.That(_client.DoesClientHaveCredentials, Is.False);<br />        _credentials.Raise(x =&gt; x.CredentialsChanged += null, _credentials, EventArgs.Empty);<br /><br />        //assert<br />        Assert.That(_client.DoesClientHaveCredentials, Is.True);<br />    }<br />}</pre><br /><p>These tests live in my <strong>IntegrationTests</strong> assembly, separate from my &quot;real&quot; unit test is the <strong>Specifications</strong> assembly. I consider these tests to be <em>integration tests</em> because they actually interact with the web services. They are not run as often as my Specifications.</p><br /><p>I found these tests hard to write, and I would appreciate any feedback on how to improve them.</p><br /><p>My point here though is to illustrate how these tests led me to create ICredentialsSource. I know that there will be a little more to it, a method perhaps that will allow me to set the credentials, but we&#39;ll get to that when we need it.</p><br /><p>Right now, the interface looks like this:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">public interface ICredentialsSource<br />{<br />    string UserName { get; }<br />    string RemoteKey { get; }<br />    event EventHandler CredentialsChanged;<br />}</pre><br /><p>I obviously need the username and remote key (and I was tempted to create a class that represented them as a unit.) I also discovered that I wanted the credentials source to raise a change notification event so that the proxy client would be aware when the user changed them.</p><br /><p>Some other places in the application will actually set the credentials on this source, perhaps a yet-unwritten presenter whose job will be to request them from the user. This really helps to decouple responsibilities and keep the code clean. For this approach to work however, our application will need a single instance of this class. I&#39;ll show how I&#39;ll handle that when we cover dependency injection.</p>\n<h3>Next</h3><br /><p>I had a lot of interruptions trying to complete this post, and I had to go back reread what I&#39;ve written so far. In doing so, I realized that I ought to take a step back and explain my overall default architecture that I&#39;m using. That will be the subject of my next post; and <em>I promise</em> to get the actual WPF bits soon!</p><br /><p><a href=\"http://devlicious.com/blogs/christopher_bennage/archive/2008/08/20/building-a-wpf-application-part-3.aspx\">On to Part 3.</a></p><img src=\"http://devlicio.us/aggbug.aspx?PostID=41865\" width=\"1\" height=\"1\"></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://devlicio.us/blogs/christopher_bennage/archive/2008/07/22/building-a-wpf-application-part-1.aspx\">Building a WPF Application: Part 1</a></div><div class=\"moreinfo\"><span class=\"date\">Tuesday, July 22, 2008</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://devlicio.us/blogs/christopher_bennage/rss.aspx?Tags=ChumChase&AndTags=1\">Christopher Bennage : ChumChase</a></span></div><p><a title=\"Table of Contents for ChumChase\" href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\" target=\"_blank\">Table of Contents</a><br /><br /><p>I actually meant to say in my <a href=\"http://devlicious.com/blogs/christopher_bennage/archive/2008/07/20/build-a-wpf-application-part-0.aspx\" target=\"_blank\">last post</a> that I had investigated the API options for FriendFeed and they have a C# wrapper already available <a href=\"http://code.google.com/p/friendfeed-api/downloads/list\" target=\"_blank\">here</a>. It&#39;s packaged up in a single download with its Python and PHP counterparts.&nbsp; Unfortunately, it has compilation errors. I fixed the errors and then I let <a href=\"http://www.jetbrains.com/resharper/documentation/\" target=\"_blank\">ReSharper (R#)</a> have its way with it [<em>R#: Ctrl+Alt+Shift+F].</em> Yes, I do understand that the Code Cleanup feature of R# can be a nuclear bomb of churn for diffing your source, but <em><a title=\"yes, it&#39;s valid!\" href=\"http://www.morewords.com/word/egads/\" target=\"_blank\">egads</a></em> I do love it so.</p> <p><a href=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/BuildingaWPFApplicationPart1_3D0/soln01_2.png\"><img style=\"border-right:0px;border-top:0px;margin:0px 0px 0px 4px;border-left:0px;border-bottom:0px;\" height=\"411\" alt=\"FriendFeed project in the solution explorer\" src=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/BuildingaWPFApplicationPart1_3D0/soln01_thumb.png\" width=\"258\" align=\"right\" border=\"0\" /></a>I also broke out the FriendFeed classes into separate files [<em>R#: F6]</em>.</p> <p><em>Hmm, I <a href=\"http://devlicio.us/blogs/christopher_bennage/pages/resharper-shortcuts.aspx\" target=\"_blank\">just decided</a> that I&#39;ll notate R# and VisualStudio keyboard shortcuts like this [app:shortcut]. Is there already a convention for that out there?</em></p> <p>I also decided to keep the FriendFeed code in a separate assembly. I don&#39;t always advocate <a href=\"http://www.lostechies.com/blogs/chad_myers/archive/2008/07/15/project-anti-pattern-many-projects-in-a-visual-studio-solution-file.aspx\" target=\"_blank\">assembly proliferation</a>, but it made sense in this case. I created a project called FriendFeed and moved all their classes there.&nbsp; I also preserved their namespace, FriendFeed, as well. (I&#39;m getting tired of typing &quot;FriendFeed&quot;.)</p> <p>At this point, I just wanted to get a feel for the API. So I read over what appeared to be the significant classes, and I used a couple of tests to see how it really works. Simple enough, instantiate the client and call FetchHomeFeed().</p> <h3>Building in Seams</h3> <p>I picked up the term <em>seam</em> from Ayende in this <a href=\"http://www.ayende.com/Blog/archive/2007/03/03/The-Production-Value-of-Seams.aspx\" target=\"_blank\">post</a>. You can think of a seam as a natural boundary in an application. It&#39;s a place where you easily extend or modify an application. It&#39;s a little bit like a <a href=\"http://domaindrivendesign.org/discussion/messageboardarchive/BoundedContext.html\" target=\"_blank\">Bounded Context</a>, but just a little. I used to try to coerce my design into the metaphor of <em>layers</em>, but seams are a more natural concept. You might also think of them as a way of describing componentized architecture.</p> <p>Consider the example of a desktop computer: you have a motherboard, CPU, memory, video card, etc. All of the components are required for the computer to function, but you can replace any one of them. You can extend the functionality of the computer by adding more hardware. Some things might be tightly coupled, like those wretched integrated video cards. But you don&#39;t think of these components as layers. This is a flexible way to architect your application.</p> <p>Seams are a standard consideration for me when it comes to designing an application. Yes, you can go crazy with it, you can go crazy with anything. In the case of ChumChase, I don&#39;t want to be tightly coupled to the official API. I have a few reasons right now: [a] the official API might change. [b] I might want to implement my own API against their web services just for kicks [c] it&#39;s a good excuse to demonstrate the technique. I&#39;m going to hide the FriendFeed API behind a repository. The IFeedRepository interface will be a seam in my application.</p> <h3>MVP</h3> <p>I mentioned before that I&#39;m going to use Model-View-Presenter. This pattern is similar to MVC, and like barbeque sauce, everyone has their own flavor. In my case, a presenter is a class that represents the <em>behavior</em> of the UI, and possibly some state. It is ignorant of how the UI visually appears. The view will be a user control, window, page, tab item, etc. We&#39;ll use data binding to glue the two together. The ignorance of the presenter about the view is important because it helps us to isolate the presenter in our unit tests.</p> <h3>TDD</h3> <p>It&#39;s <strike>sometimes</strike> hard to decide where to start writing to tests. I tend to write tests that reflect the <em>behaviors of the user interacting with the application</em>. This is as opposed to testing how the application might interact with a data source, or some other more internal function of the application. This approach of working from the outside in helps prevent me from making too many assumptions about the internals.&nbsp; The negative is that I have to provide mocks or stubs for the dependencies that I haven&#39;t written yet.</p> <p>My core story, that is the basic behavior that I&#39;m interested in, is for the application to fetch my home feed. I&#39;ll place this feature on a class called HomePresenter. HomePresenter might end up being my only presenter, I don&#39;t know yet. It common though for applications to have several presenters. We&#39;ll talk later about how to logically organize presenters.</p> <p>Let&#39;s look at a test:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">[TestFixture]<br />public class The_presenter_for_the_home_feed : TestFixtureBase<br />{<br />    private HomePresenter _presenter;<br />    private IFeedRepository _feedRepository;<br /><br />    protected override void given_the_context_of()<br />    {<br />        _feedRepository = Mocks.StrictMock&lt;IFeedRepository&gt;();<br />        _presenter = new HomePresenter(_feedRepository);<br />    }<br /><br />    [Test]<br />    public void can_refresh_the_home_feed()<br />    {<br />        using (Record)<br />        {<br />            Expect.Call(_feedRepository.FetchHomeFeed())<br />                .Return(new List&lt;Entry&gt;());<br />        }<br /><br />        using (Playback)<br />        {<br />            _presenter.RefreshHomeFeed();<br />        }<br />    }<br />}</pre><br /><p>First, my TestFixtureBase is just an abstract class to reduce clutter. The Mocks, Record, and Playback properties all exist on it and they are really just pass-throughs to Rhino.Mocks. Likewise, I have a setup method in TestFixtureBase that calls <em>given_the_context_of()</em> before each test is executed. It&#39;s meant to reset the system-under-test (SUT) into a consistent and pristine state.</p><br /><p>Notice that I named my class and method such that they read as a specification for the behavior I&#39;m testing: <em>The presenter for the home feed can refresh the home feed.</em> I&#39;m not sure that I like saying &quot;presenter&quot; in the specification. If I was working with non-technical users, that wouldn&#39;t make sense to them. I could replace it with &quot;UI&quot; or &quot;interface&quot; or &quot;screen&quot; perhaps.</p><br /><p>The test has two blocks or phases: record and playback. This is generally a big stumbling block for people. I know when I first encountered it I was thoroughly confused. The record phase is where I tell the test what I&#39;m expecting to happen during the playback phase.&nbsp; The record phase plays the same roles as asserts.</p><br /><p>The function we are really testing here is:</p><br /><p>_presenter.RefreshHomeFeed(); </p><br /><p>Since there is not a state that I can verify after calling RefreshHomeFeed(), I am checking to make sure that it&#39;s doing what I expect it to do. That is, I expect it to get a list of entries from a repository of feeds.</p><br /><p>The Expect.Call().Return() is Rhino.Mocks syntax that allows me to say: <em>I expect my SUT to execute _feedRepository.FetchHomeFeed() and I expect that to return a List&lt;Entry&gt; instance.</em> Right now Entry is just an empty class, but conceptually it represents a single item in the feed. You should also note that the relationship between my presenter and the repository is established in given_the_context_of().</p><br /><p>Yes, this is a simple test, but writing this test helped me to shake out what I needed.&nbsp; Unfortunately, the test as it stands here does not reflect the process of writing it.&nbsp; I wrote some things, decided they didn&#39;t look right, changed them a bit and so on. It probably took me 10 minutes or so before I settled on what you see.</p><br /><p>Moving on to the next test. This is in the same class, so you can read it as: <em>The presenter for the home feed notifies the UI when the home feed is refreshed.</em></p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">[Test]<br />public void notifies_the_UI_when_the_home_feed_is_refreshed()<br />{<br />    var property_has_changed = false;<br /><br />    _presenter.PropertyChanged +=<br />        (s, e) =&gt; { property_has_changed = (e.PropertyName == &quot;HomeFeed&quot;); };<br /><br />    _presenter.RefreshHomeFeed();<br /><br />    Assert.That(property_has_changed);<br />}</pre><br /><p>I want to verify that when I call _presenter.RefreshHomeFeed() a change notification is raised for the HomeFeed property. This means my presenter needs a HomeFeed property. I have a boolean flag that helps me track the state and I&#39;m using an inline delegate to set my flag when the property is changed. (There&#39;s actually a flaw in this test that we&#39;ll examine later, can you see it?)&nbsp; </p><br /><p>I don&#39;t like strings though. If I happen to change the name of the HomeFeed property and forget to change the string in the test, I&#39;ve broken my test. Of course, I&#39;ll notice as soon as I run the tests, but it would sure be nice to eliminate the string. So I wrote this extension method for PropertyChangedEventArgs:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">public static bool HasChanged&lt;T&gt;(this PropertyChangedEventArgs args, Expression&lt;Func&lt;T&gt;&gt; property)<br />{<br />    var expression = (MemberExpression)property.Body;<br />    return expression.Member.Name == args.PropertyName;<br />}</pre><br /><p>Now I can change my test to the following and eliminate the string:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">[Test]<br />public void notifies_the_UI_when_the_home_feed_is_refreshed()<br />{<br />    var property_has_changed = false;<br /><br />    _presenter.PropertyChanged +=<br />        (s, e) =&gt; { property_has_changed = e.HasChanged(() =&gt; _presenter.HomeFeed); };<br /><br />    _presenter.RefreshHomeFeed();<br /><br />    Assert.That(property_has_changed);<br />}</pre><br /><p>Of course, in between these tests I was writing code to make them pass. (<a href=\"http://geekswithblogs.net/WillSmith/archive/2008/03/18/red-green-refactor.aspx\" target=\"_blank\">Red -&gt; Green -&gt; Refactor</a>, right?) Here&#39;s what my presenter class looked liked afterwards:</p><pre class=\"c#:nogutter:nocontrols\" name=\"code\">using System;<br />using System.Collections.Generic;<br />using System.ComponentModel;<br />using System.Linq.Expressions;<br />using ChumChase.Extensions;<br /><br />namespace ChumChase.Presenters<br />{<br />    public class HomePresenter : INotifyPropertyChanged<br />    {<br />        private readonly IFeedRepository _feedRepository;<br />        private IList&lt;Entry&gt; _homeFeed;<br /><br />        public HomePresenter(IFeedRepository feedRepository)<br />        {<br />            _feedRepository = feedRepository;<br />        }<br /><br />        public IList&lt;Entry&gt; HomeFeed<br />        {<br />            get { return _homeFeed; }<br />            private set<br />            {<br />                _homeFeed = value;<br />                OnPropertyChanged( ()=&gt; HomeFeed);<br />            }<br />        }<br /><br />        public void RefreshHomeFeed()<br />        {<br />            HomeFeed = _feedRepository.FetchHomeFeed();<br />        }<br /><br />        public event PropertyChangedEventHandler PropertyChanged;<br /><br />        private void OnPropertyChanged&lt;T&gt;(Expression&lt;Func&lt;T&gt;&gt; property)<br />        {<br />            if (PropertyChanged != null) PropertyChanged(this, property.CreateChangeEventArgs());<br />        }<br />    }<br />}</pre><br /><p>The source is now available <a href=\"http://www.codeplex.com/chumchase\" target=\"_blank\">here</a>. <strike>More to come!</strike></p><br /><p><a href=\"http://devlicious.com/blogs/christopher_bennage/archive/2008/08/16/building-a-wpf-application-part-2.aspx\" target=\"_blank\">Continue to Part 2</a>.</p><img src=\"http://devlicio.us/aggbug.aspx?PostID=41392\" width=\"1\" height=\"1\"></p></div><div class=\"entry\"><div class=\"title\"><a href=\"http://devlicio.us/blogs/christopher_bennage/archive/2008/07/20/build-a-wpf-application-part-0.aspx\">Building a WPF Application: Part 0</a></div><div class=\"moreinfo\"><span class=\"date\">Monday, July 21, 2008</span> &nbsp;|&nbsp; <span class=\"source\">From <a target=\"_blank\" href=\"http://devlicio.us/blogs/christopher_bennage/rss.aspx?Tags=ChumChase&AndTags=1\">Christopher Bennage : ChumChase</a></span></div><p><a title=\"Table of Contents for ChumChase\" href=\"http://devlicious.com/blogs/christopher_bennage/pages/building-a-wpf-application-table-of-contents.aspx\" target=\"_blank\">Table of Contents</a><br /><br /><p>In a rather indirect way, I was inspired by a commenter on <a title=\"BabySmash + Books = Good WPF\" href=\"http://www.hanselman.com/blog/LearningWPFWithBabySmashAndBackToBasicsMakingAssumptionsAndWhenToTurnToBooks.aspx\" target=\"_blank\">one of Scott Hanselman&#39;s posts</a> to begin a series that walks through building a WPF application from start to finish. We did this for four different applications in <a title=\"I just can&#39;t get enough of linking to our book!\" href=\"http://www.amazon.com/gp/product/0672329859?&amp;camp=212361&amp;linkCode=wey&amp;tag=bluspiconinc-20&amp;creative=380733\" target=\"_blank\">our book</a>, but those where targeted to demonstrate particular facets of WPF whereas in these (yet unwritten) posts I&#39;d like to focus more on &quot;this is how I build my WPF apps&quot;. Not to say that my way is the *right way*, but so that we might learn together. In the spirit of the aforementioned post, I&#39;m bound to make mistakes, so please (gently) correct me when you think you see one.</p> <h3>What to build?</h3> <p>You might not have noticed, but there&#39;s quite a bit of .NET chatter in <a href=\"http://twitter.com/\" target=\"_blank\">twit-space</a>. There are already lots of Twitter clients, and <a title=\"Witty\" href=\"http://code.google.com/p/wittytwitter/\" target=\"_blank\">some are WPF</a>, so that path has been rigorously trod. However, the <a href=\"http://www.techcrunch.com/2008/05/20/twitter-something-is-technically-wrong/\" target=\"_blank\">technical difficulties</a> surrounding Twitter has given rise to the popularity of another mash up web 2.0 thingy app called <a href=\"http://friendfeed.com/\" target=\"_blank\">FriendFeed</a>.&nbsp; Everyone seems to agree that the web interface for FriendFeed is all stinky bad, <em>and</em> there&#39;s an <a href=\"http://code.google.com/p/friendfeed-api/wiki/ApiDocumentation\" target=\"_blank\">API</a> readily available, so I think a FriendFeed client is in order.</p> <p><img style=\"border-top-width:0px;border-left-width:0px;border-bottom-width:0px;border-right-width:0px;\" height=\"53\" alt=\"ff_logo\" src=\"http://devlicious.com/blogs/christopher_bennage/WindowsLiveWriter/BuildaWPFApplicationPart0_FA/ff_logo_3.png\" width=\"234\" align=\"right\" border=\"0\" /> Briefly, FriendFeed is a way to consolidate all of your creepy Internet voyeurism in one spot. You can track a friend&#39;s Flickr account, NetFlix queue, Amazon wishlist, and yes, their Twitter tweets and much, much more. Oh yeah, and you can subscribe to me <a title=\"please, pay attention to me! I&#39;m really cool! Really!\" href=\"http://friendfeed.com/bennage\" target=\"_blank\">here</a>. (I&#39;m such a loser.)</p> <h3>What to do?</h3> <p>I&#39;m not going to set an agenda or outline a detailed plan. I&#39;m just going to post as I have time to work on it. I started tonight, so I&#39;m expecting to have a real Part 1 posted by midweek. I&#39;ve already set up a project at <a href=\"http://www.codeplex.com/\" target=\"_blank\">CodePlex</a> (though it won&#39;t be published for a few more days still.) I named it <a href=\"http://www.codeplex.com/chumchase\" target=\"_blank\">ChumChase</a>. Isn&#39;t that great? </p> <p>Part of my plan is to step you through my thinking and decision making process in sort of <a title=\"I&#39;m talking about Jimmy Nilsson.\" href=\"http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1216528167&amp;sr=8-1\" target=\"_blank\">Nilssonian</a> way. I&#39;ve only just begun but here&#39;s what I can tell you so far.</p> <ul> <li>I&#39;m going to use a Model-View-Presenter pattern  <li>Expect to see some DDD artifacts. <li>I&#39;m going to use <a title=\"wow, can you believe that I actually linked to NUnit?\" href=\"http://www.nunit.org/index.php\" target=\"_blank\">NUnit</a> and <a href=\"http://www.ayende.com/projects/rhino-mocks.aspx\" target=\"_blank\">RhinoMocks</a>.  <li>I&#39;ll probably use <a href=\"http://castleproject.org/container/index.html\" target=\"_blank\">Windsor</a> too (or maybe <a href=\"http://structuremap.sourceforge.net/Default.htm\" target=\"_blank\">StructureMap</a> though, anybody have a preference?) </li></ul> <p>I had intended to write a set of user stories&nbsp; using the issue tracker of CodePlex. However, I got tired of retyping them every time the site errorred out, which was about 60% of the time. (Is that typical for the CodePlex issue tracker? This was my first usage.)&nbsp; It also occurred to me that I am lazy and ought to have a life outside of coding, so sorry no user stories.</p> <h3>What to think?</h3> <p>I&#39;m all about conversation. If this interests you, please let me know. I welcome (friendly) criticisms as well. The more I hear, the more motivated I&#39;ll be to do it. (Believe me there&#39;s a lot to distract right now. I had a new baby son born on the 10th.)</p><br /><p><a href=\"http://devlicious.com/blogs/christopher_bennage/archive/2008/07/22/building-a-wpf-application-part-1.aspx\">Continue to Part 1</a></p><img src=\"http://devlicio.us/aggbug.aspx?PostID=41363\" width=\"1\" height=\"1\"></p></div><div class=\"accentbar\"><span class=\"left\">&nbsp;</span>Christopher Bennage : ChumChase News Feed<span class=\"right\">&nbsp;</span></div></div><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,TDD,FriendFeed,example,Education,MVP,patterns,",
  "LastEdited": "2009-05-20T07:29:40.48-07:00"
}