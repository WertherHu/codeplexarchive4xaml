{
  "ProjectName": "bettertabcontrol",
  "Title": "Better WPF TabControl",
  "Description": "The purpose of this project is to build a better version of TabControl which comes with WPF.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />The purpose of this project is to build a better version of TabControl which comes with WPF.<br /><br /><br /><b>UPD: This control is now a part of <a href=\"http://betterwpfcontrols.codeplex.com/\">http://betterwpfcontrols.codeplex.com/</a> library. If you have questions/suggestions/issue reports, please post it there.</b><br />\n<h2>What&#39;s wrong with default WPF TabControl?</h2>\rWell, nothing is wrong with it except that in some use cases it becomes ugly and unusable. If there are too many tabs, you&#39;ll get something like this:<br /><img src=\"/projects/bettertabcontrol/8babefa3-ea18-4cca-ba45-2e1065c85594\" alt=\"t1.png\" title=\"t1.png\" /><br />It looks and feels like a waste of precious screen space, which is bad. In real life, I haven&#39;t seen any users who liked such behaviour. If only we could make it better...<br /><br />So, what are our options? If a better TabControl uses only one line to display all items, how could we resolve the situation when there is just not enough space to show everything?\n<ol><li>Scaling/Truncating. It is a viable idea which many other developers have adopted. But what could happen is that every tab item might become too small to remain usable.</li></ol>\n<img src=\"/projects/bettertabcontrol/b44d6852-418d-4456-8443-2846703401d2\" alt=\"t2.png\" title=\"t2.png\" />\n<ol><li>Scrolling. Instead of making every individual tab item smaller, we can add support for scrolling tab items. And that&#39;s exactly what I did.</li></ol>\n<br />\n<h2>Better WPF TabControl features</h2>\r<ul><li><b>Scrolling</b></li></ul>\nBetter TabControl shows what it can, and hides everything else - it&#39;s that simple. In order to reach hidden content, there are two buttons which scroll items to the left or to the right:<br /><img src=\"/projects/bettertabcontrol/6997a145-3883-42b5-9d7c-58ee5cec24da\" alt=\"t3.png\" title=\"t3.png\" /><br />You can replace buttons with your own content if you like. In order to do this, override <i>BetterTabControl.ScrollToLeftContent</i> or <i>BetterTabControl.ScrollToRightContent</i> properties respectively.\n<ul><li><b>Quick links to all tabs</b></li></ul>\nIf you don&#39;t want to scroll, you can use quick links pane. In order to show it, set <i>BetterTabControl.ShowQuickLinksButton</i> property to True (it is set to True by default). As a result new button will be shown at the top right corner of the tab control. When you click on it, you&#39;ll see the list of all tab items you have:<br /><img src=\"/projects/bettertabcontrol/90b14187-84af-459b-acef-9be68fb53a13\" alt=\"t4.png\" title=\"t4.png\" /><br />If you click on a item, a corresponding tab will be selected in the tab control.\n<ul><li><b>Fixed tab items</b></li></ul>\nYou can &quot;lock&quot; some of the tab items. It might be usefull when you have tabs which should be always visible, no matter how many tabs users have opened.<br /><img src=\"/projects/bettertabcontrol/941bb218-5a03-4919-9ca7-1cb7f2059135\" alt=\"t5.png\" title=\"t5.png\" /><br />As you see, tab &quot;Summary&quot; is locked and does not particiate in scrolling.</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,Custom Controls,C#,Custom Panels,Tab Control,",
  "LastEdited": "2012-01-09T08:14:26.613-08:00"
}