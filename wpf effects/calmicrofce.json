{
  "ProjectName": "calmicrofce",
  "Title": "Caliburn.Micro.FrameworkContentElement",
  "Description": "A library to enable attaching Caliburn.Micro messages to FrameworkContentElement descendant objects.\r\nTarget platform: WPF.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />A library to enable attaching Caliburn.Micro messages to FrameworkContentElement descendant objects.<br />Target platform&#58; WPF.<br /><br /><b>What this package is for?</b><br /><a href=\"http://caliburnmicro.codeplex.com\">Caliburn.Micro</a> is a very powerful MVVM framework which supports attaching Message objects to FrameworkElement descendant objects. This way you can avoid using Command objects to bind viewmodel methods to your view&#39;s events.<br /><a href=\"http://www.devexpress.com/Products/NET/Controls/WPF/Bar_Menu/\">DXBars</a> and <a href=\"http://www.devexpress.com/Products/NET/Controls/WPF/Ribbon/\">DXRibbon</a> are very good menu, toolbar and ribbon controls, but have a big drawback: as you can see <a href=\"http://devexpress.com/Support/Center/p/B191077.aspx\">here</a> and <a href=\"http://devexpress.com/Support/Center/p/S35747.aspx\">here</a> the items in these controls are FrameworkContentElement descendants which means you can&#39;t use Caliburn.Micro&#39;s Message objects with them. And the worst thing is that they do not want to change this behaviour.<br />This package is created to let developers use Caliburn.Micro&#39;s Message.Attach mechanism with DevExpress&#39; controls. Actually you can&#39;t really use Caliburn.Micro&#39;s Message.Attach because it was impossible to implement, so I decided to create a new package from Caliburn.Micro&#39;s code which contains only the classes needed to implement the Message.Attach feature on FrameworkContentElement descendants with the least changes in CM&#39;s codebase.<br /><br /><b>Important note</b><br />This package is only for attaching messages to FrameworkContentElement descendants, so every other class included in the package is included only because it was absolutely necessary to compile the project. So, DO NOT USE classes or features other than Message.Attach in this package! If you need any other Caliburn.Micro feature, please, use the original <a href=\"http://caliburnmicro.codeplex.com\">Caliburn.Micro</a> package!<br /><br /><b>How to attach messages to FrameworkContentElement descendants?</b>\n<ul><li>Reference the package in your project.</li>\n<li>In your XAML do the following:\n<ul><li>Import this package with the following line: xmlns:calfce=&quot;clr-namespace:Caliburn.Micro.FrameworkContentElement;assembly=Caliburn.Micro.FrameworkContentElement&quot;</li>\n<li>Attach message with the following attribute: calfce:Message.Attach=&quot;[Event ItemClick] = [Action ViewModelMethodName()]&quot;</li></ul></li></ul>\n<br /><b>Nuget package</b><br />Easiest way to use it is the <a href=\"https://nuget.org/packages/Caliburn.Micro.FrameworkContentElement\">Caliburn.Micro.FrameworkContentElement</a> package.<br /><br /><b>Enabling conventions for DevExpress controls</b><br />If you need <a href=\"http://caliburnmicro.codeplex.com\">Caliburn.Micro</a> conventions to work with DevExpress controls, you can use my related project <a href=\"http://calmicrodevexpress.codeplex.com/\">Caliburn.Micro.DevExpress</a>. I personally use these two packages together, too.</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-08-14T04:22:55.647-07:00"
}