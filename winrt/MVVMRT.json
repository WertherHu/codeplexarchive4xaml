{
  "ProjectName": "MVVMRT",
  "Title": "WinRT MVVM Framework",
  "Description": "WinRT MVVM Framework is a lightweight framework for Metro Store applications that allows you to easily use MVVM in your own applications.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>WinRT MVVM Framework</strong><br>\r\n<br>\r\n<br>\r\n</p>\r\n<p>WinRT is a great platform for touch based applications. As XAML is the go-to description language for User Interfaces in C# and C&#43;&#43; applications, DataBinding is supported as an elegant means to connect your WinRT app&rsquo;s UI to backing data.</p>\r\n<p>DataBinding was one of the key features of WPF which led to the birth of the Model View ViewModel (MVVM) pattern. The MVVM architecture is a great way to decouple your business logic and application data from the User Interface.</p>\r\n<p>I am a big fan of this pattern and want to leverage it in my C# WinRT applications. Unfortunately, the way the WinRT API is designed rather encourages a &ldquo;code-behind&rdquo; approach which forces you to tightly couple your Views and ViewModels.</p>\r\n<p>As a consequence, the developed MVVM framework fills the WinRT API&rsquo;s Gaps and allows you to interact with Windows 8&rsquo;s new features solely from within your ViewModels.</p>\r\n<p>In particular, the framework offers the following feature set:</p>\r\n<ul>\r\n<li><span style=\"font-size:10pt\">ViewModel-based Page Navigation: By default, the WinRT API only allows you to navigate to a page by passing the Page-Type to the API. Using the framework, you can navigate to other pages from within a Page-ViewModel by simply\r\n specifying the ViewModel Type. This ensures that your ViewModels stay decoupled from the Views.</span>\r\n</li><li><span style=\"font-size:10pt\">Transient State Handling: With its extended application lifecycle, WinRT applications throw a monkey wrench into the way Desktop developers are used to maintain their application states. With applications getting suspended and\r\n eventually terminated by the Operating System due to memory shortages, the developer now is responsible for recovering the previous state of the application.&nbsp;</span><span style=\"font-size:10pt\">The basic framework that Microsoft provides you with when\r\n you develop a C# WinRT application, comes with the base class &ldquo;LayoutAwarePage&rdquo;. If you derive your Pages from this class, you can persist and recover your Pages&rsquo; transient states in\r\n</span><strong style=\"font-size:10pt\">code behind</strong><span style=\"font-size:10pt\">.&nbsp;</span><span style=\"font-size:10pt\">Our framework allows your ViewModels to seamlessly manage their transient states - without having to deal with the Pages.</span>\r\n</li><li><span style=\"font-size:10pt\">Share Contract: One of Win8&rsquo;s greatest new features, Sharing, allows you to share arbitrary data with any other installed application that can receive data. The coolest part about this feature is, that the application,\r\n which decides to share data, doesn&rsquo;t have to know anything about the receiving applications. Windows 8 bridges the gap between the Share Source and Share Target.&nbsp;</span><span style=\"font-size:10pt\">Our framework allows your application to incorporate\r\n this feature solely from within your ViewModels. This means: You can share data from within the business logic of your ViewModel, and you can also declare your ViewModel as being capable of receiving shared data.</span>\r\n</li><li><span style=\"font-size:10pt\">Settings Contract: Win8 standardizes the way applications are supposed to expose settings to the user, by providing them with an API to inject their own settings into WinRT&rsquo;s Settings Charme.&nbsp;</span><span style=\"font-size:10pt\">This\r\n is, however, all the API does for you. It is still the developer&rsquo;s responsibility to create the Settings Dialog&rsquo;s UI and present it to the user &ndash; of course following Microsoft Design Guidelines.&nbsp;</span><span style=\"font-size:10pt\">The\r\n framework takes this boilerplate burden off your shoulders&hellip; all from within your ViewModels!</span>\r\n</li><li><span style=\"font-size:10pt\">Search Contract: Win8 now also allows the Operating System&rsquo;s user to not only search through the computer&rsquo;s hard drive, but even through every installed application that supports the Search Contract. T</span><span style=\"font-size:10pt\">he\r\n framework allows you to easily leverage this great feature.</span> </li><li><span style=\"font-size:10pt\">Component Library: The framework not only bridges the gap to the mentioned Win8 features, but also provides you with common classes that you might find useful when you develop WinRT applications. DelegateCommand and Bindable\r\n (a ViewModel Base Class) are probably the most famous ones.&nbsp;</span><span style=\"font-size:10pt\">The framework also integrates Microsoft&rsquo;s most useful base and helper classes (such as the mentioned LayoutAwarePage).</span>\r\n</li></ul>\r\n<p>&nbsp;</p>\r\n<h1>&nbsp;</h1>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-04-17T15:52:56.42-07:00"
}