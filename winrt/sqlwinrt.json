{
  "ProjectName": "sqlwinrt",
  "Title": "sqlite-winrt",
  "Description": "SQLite wrapper for WinRT",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nSQLite wrapper for WinRT</p>\r\n<p>The SQLite WinRT wrapper offers lightweight Windows Runtime (WinRT) APIs you can use to access the most common SQLite database functionality. The latest update of the library supports Windows Phone 8 development in addition to Windows 8 development.</p>\r\n<p>This project does not have a binary download; to use the component, add the SQLite-WinRT NuGet package to your project.</p>\r\n<p>*NEW FEATURES &ndash; October 2014* &ndash; Support for Windows Phone 8.1 added (Silverlight and WinRT). Component now published as the SQLite-WinRT NuGet package.</p>\r\n<p>*NEW FEATURES &ndash; October 2013* &ndash; Component for Windows 8.1 added. Namespace on all platforms is now standardised as SQLWinRT to ease code sharing. BLOB column support added to allow storage of byte arrays or images. Updated SQLite references to\r\n version 3.8.0.2.</p>\r\n<p><strong>To use the Component</strong></p>\r\n<p>Install the SQLite-WinRT NuGet package into your project.</p>\r\n<p>Alternatively, you can download the source code and add the project for Windows 8, Windows 8.1,Windows Phone 8, Windows Phone 8.1 (Silverlight) or Windows Phone 8.1 (WinRT)&nbsp;as appropriate to your solution to begin accessing SQLite databases in your\r\n Windows apps.</p>\r\n<p><strong>Important:</strong> You must also install the <strong>SQLite for Windows</strong>,\r\n<strong>SQLite for Windows (8.1) </strong>and/or <strong>SQLite for Windows Phone\r\n</strong>Extension SDK from the Visual Studio Extensions and Updates option on the Tools menu.</p>\r\n<p><strong>Important if you are using the source code download:</strong>&nbsp;Periodically, you will be prompted to install updates to any of the SQLite extension SDKs that you install. After you install an update, the SQLite version number will change and\r\n as a result, the SQLWinRT project that you download from this codeplex project will not open anymore in Visual Studio because the referenced folder path for sqlite3.h will have changed. To rectify this, locate the Update_Project_SQLite_SDK_References.ps1 powershell\r\n script in the project folder, right-click and then click Run with Powershell. This updates the project file to the correct path to the SQLite extension SDK.</p>\r\n<h3>Supported functionality</h3>\r\n<p>The WinRT API gives you a familiar programming model for implementing the following basic operations:</p>\r\n<ul>\r\n<li>Opening a database (wraps the <a href=\"http://www.sqlite.org/c3ref/open.html\" target=\"_blank\">\r\nsqlite3_open_v2</a> function) </li><li>Executing a single SQL statement (wraps the <a href=\"http://www.sqlite.org/c3ref/exec.html\" target=\"_blank\">\r\nsqlite3_exec</a> function) </li><li>Creating a complex SQL statement (wraps the <a href=\"http://www.sqlite.org/c3ref/prepare.html\" target=\"_blank\">\r\nsqlite3_prepare16_v2</a> function) </li><li>Binding parameters to a statement (wraps the <a href=\"http://www.sqlite.org/c3ref/bind_blob.html\" target=\"_blank\">\r\nsqlite3_bind_xyz</a> functions) </li><li>Iterating over statement results (wraps the <a href=\"http://www.sqlite.org/c3ref/step.html\" target=\"_blank\">\r\nsqlite3_step</a> and <a href=\"http://www.sqlite.org/c3ref/column_blob.html\" target=\"_blank\">\r\nsqlite3_column_xyz</a> functions) </li></ul>\r\n<p>All operations follow the <a href=\"http://msdn.microsoft.com/library/windows/apps/hh464924.aspx\" target=\"_blank\">\r\nasync pattern</a> &ndash; they perform operations on a worker thread, which helps make your database apps fast and fluid. The wrapper also supports exception-based programming, so you don&rsquo;t need to check the return value from every method call. Note that\r\n the API doesn&rsquo;t support all of the advanced features of SQLite, nor does it attempt to hide the underlying SQL statements, untyped result sets, and so on. It&rsquo;s designed to provide a very thin wrapper over the SQLite functionality that many people\r\n already know and love, rather than to provide an equivalent programming model to LINQ-to-SQL or ADO.NET.</p>\r\n<p>For more information, see the following blog post: <a href=\"http://blogs.windows.com/windows_phone/b/wpdev/archive/2013/05/30/sqlite-winrt-wrapper-for-windows-phone.aspx\">\r\nSQLite WinRT wrapper for Windows Phone</a></p>\r\n<p><br>\r\nExample (C#):&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre class=\"csharpcode\">async <span class=\"kwrd\">void</span> AddToItemsCollection()\r\n{  \r\n  <span class=\"rem\">// Get the file from the install location  </span>\r\n  var file = await Package.Current.InstalledLocation.GetFileAsync(<span class=\"str\">&quot;cities.db&quot;</span>);  \r\n\r\n  <span class=\"rem\">// Create a new SQLite instance for the file </span>\r\n  var db = <span class=\"kwrd\">new</span> Database(file);  \r\n\r\n  <span class=\"rem\">// Open the database asynchronously</span>\r\n  await db.OpenAsync(SqliteOpenMode.OpenRead);\r\n \r\n  <span class=\"rem\">// Prepare a SQL statement to be executed</span>\r\n  var statement = awaitdb.PrepareStatementAsync(\r\n    <span class=\"str\">&quot;SELECT rowid, CityName FROM Cities;&quot;</span>); \r\n\r\n  <span class=\"rem\">// Loop through all the results and add to the collection</span>\r\n  <span class=\"kwrd\">while</span> (awaitstatement.StepAsync())\r\n     items.Add(statement.GetIntAt(0) &#43; <span class=\"str\">&quot;: &quot;</span>&#43; statement.GetTextAt(1));\r\n}</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "WinRT,",
  "LastEdited": "2014-11-03T04:30:09.84-08:00"
}