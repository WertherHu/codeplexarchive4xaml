{
  "ProjectName": "winrtstoragehelper",
  "Title": "Generic Object Storage Helper for WinRT",
  "Description": "ObjectStorageHelper<T> is a Generic class that simplifies storage of data in WinRT applications while still maintaining the Async principles of Windows 8 apps",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />ObjectStorageHelper&#60;T&#62; is a Generic class that simplifies storage of data in WinRT applications while still maintaining the Async principles of Windows 8 apps<br /><br /><b>Overview</b><br />While exploring WinRT I realised that there was a need for a way to simplify storage of data to the <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.applicationdata.roamingfolder\">RoamingFolder</a>, <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.applicationdata.temporaryfolder\">TemporaryFolder</a> &amp; <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.applicationdata.localfolder\">LocalFolder</a> storage folders and so ObjectStorageHelper&lt;T&gt; was born.<br /><br />With ObjectStorageHelper&lt;T&gt; saving and loading an object to/from disk is now just a simple method call.<br /><br />I blog about ObjectStorageHelper&lt;T&gt; at <a href=\"http://bit.ly/Oo98Ig\">ObjectStorageHelper</a><br /><br />ObjectStorageHelper&lt;T&gt; is now available via nuget <a href=\"https://nuget.org/packages/ObjectStorageHelper\">https://nuget.org/packages/ObjectStorageHelper</a><br /><br /><b>Real Windows Store Apps that are using ObjectStorageHelper</b><br /><a href=\"http://apps.microsoft.com/webpdp/en-us/app/myscoreboard-pro/8f4d5173-2f8a-4ff5-9f8a-99097154aaec/m/row\">myScoreboard pro</a><br /><a href=\"http://apps.microsoft.com/webpdp/en-US/app/bo2-create-a-class/ada6f477-6cd8-4a9c-a065-de8f8087c249\">BO2 Create-a-Class</a><br /><a href=\"http://apps.microsoft.com/webpdp/en-US/app/mw3-create-a-class/4b30923a-f988-4db6-90f7-cc01d85a7589\">MW3 Create-a-Class</a><br /><a href=\"http://apps.microsoft.com/webpdp/en-US/app/ctrl-alt-del/775964e3-8372-4dbd-af95-d8ca79b4b4fa\">Ctrl-Alt-Del</a><br /><br /><b>Testimonials</b><br /><i>&quot;thanks for the great Generic Object Storage Helper library for WinRT. It&#39;s been a great help in version 2 of #myScoreboard&quot;</i><br />-<a href=\"https://twitter.com/mjhannaf/status/252169171624931328\">mjhannaf</a>, author of app <a href=\"http://apps.microsoft.com/webpdp/en-us/app/myscoreboard-pro/8f4d5173-2f8a-4ff5-9f8a-99097154aaec/m/row\">myScoreboard</a><br /><br /><i>&quot;I  would like to thank you for making this excellent dll, it works like a charm ;)&quot;</i><br />-<a href=\"https://twitter.com/xPuls3\">Grzegorz Ślązak</a>, Windows 8 App Developer<br /><br /><i>&quot;Great work.  I was 50% done creating a generic utility such as this, then found yours and saved some time.&quot;</i><br />-<a href=\"http://winrtstoragehelper.codeplex.com/discussions/397627\">dolowoyo</a>, Codeplex member<br /><br /><b>Restrictions</b><br />Under the covers ObjectStorageHelper&lt;T&gt; uses XML Serialization hence T needs to be an object that can be serialized as XML. There is a useful thread on Stack Overflow <a href=\"http://stackoverflow.com/questions/109318/using-net-what-limitations-if-any-are-there-in-using-the-xmlserializer\">Using .Net what limitations (if any) are there in using the XmlSerializer?</a> that talks about those restrictions better than I ever could.<br /><br /><b>Saving an object</b><br />Using ObjectStorageHelper&lt;T&gt; saving an object only takes two lines of code<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n[TestMethod]\n<span style=\"color:Blue;\">public</span> async Task SaveObject()\n{\n  <span style=\"color:Green;\">//Instantiate an object that we want to save</span>\n  <span style=\"color:Blue;\">var</span> myPoco = <span style=\"color:Blue;\">new</span> Poco() { IntProp = 1, StringProp = <span style=\"color:#A31515;\">&quot;one&quot;</span> };\n  <span style=\"color:Green;\">//new up ObjectStorageHelper specifying that we want to interact with the Local storage folder</span>\n  <span style=\"color:Blue;\">var</span> objectStorageHelper = <span style=\"color:Blue;\">new</span> ObjectStorageHelper&lt;Poco&gt;(StorageType.Local);\n  <span style=\"color:Green;\">//Save the object (via XML Serialization) to the specified folder, asynchronously</span>\n  await objectStorageHelper.SaveAsync(myPoco);\n}\r\n</pre></div>The name of the file that gets stored is determined by the name of the type T specified in ObjectStorageHelper&lt;T&gt; or, if you want to specify multiple instances of T, you can specify your own file handle.<br /><br /><b>Retrieving an object</b><br />Retrieving that object thereafter is equally as easy, just two lines of code<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n[TestMethod]\n<span style=\"color:Blue;\">public</span> async <span style=\"color:Blue;\">void</span> LoadObject()\n{\n  <span style=\"color:Green;\">//new up ObjectStorageHelper specifying that we want to interact with the Local storage folder</span>\n  <span style=\"color:Blue;\">var</span> objectStorageHelper = <span style=\"color:Blue;\">new</span> ObjectStorageHelper&lt;Poco&gt;(StorageType.Local);\n  <span style=\"color:Green;\">//Get the object from the storage folder</span>\n  Poco myPoco = await objectStorageHelper.LoadAsync();\n}\r\n</pre></div><br /><b>Storing multiple objects of the same type</b><br />In <a href=\"http://winrtstoragehelper.codeplex.com/releases/view/94000\">V4</a> I <a href=\"http://winrtstoragehelper.codeplex.com/SourceControl/changeset/1b5a1cd17b8e\">added overloads for SaveASync(), LoadAsync() &amp; DeleteASync()</a> to allow the user to specify a string handle for the object being saved. This allows multiple instances of type T to be saved simply by specifying different handles. I also <a href=\"http://winrtstoragehelper.codeplex.com/SourceControl/changeset/608b78fb94ca\">added a test method</a> to ensure this is working correctly:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n[TestMethod]\n<span style=\"color:Blue;\">public</span> async Task SaveAndLoadTwoObjectsOfSameTypeUsingDifferentHandles()\n{\n    <span style=\"color:Green;\">//Declare two instances of the same type. Notice how we only have one instance of ObjectStorageHelper&lt;T&gt;</span>\n    <span style=\"color:Blue;\">var</span> poco = <span style=\"color:Blue;\">new</span> Poco() { IntProp = 1, StringProp = <span style=\"color:#A31515;\">&quot;one&quot;</span> };\n    <span style=\"color:Blue;\">var</span> anotherPoco = <span style=\"color:Blue;\">new</span> Poco() { IntProp = 2, StringProp = <span style=\"color:#A31515;\">&quot;two&quot;</span> };\n    <span style=\"color:Blue;\">var</span> osh = <span style=\"color:Blue;\">new</span> ObjectStorageHelper&lt;Poco&gt;(StorageType.Local);\n\n    <span style=\"color:Green;\">//Store them both then retrieve them both. In each case, use a different handle.</span>\n    await osh.SaveAsync(poco, handle);\n    await osh.SaveAsync(anotherPoco, handle2);\n    <span style=\"color:Blue;\">var</span> result = await osh.LoadAsync(handle);\n    <span style=\"color:Blue;\">var</span> anotherResult = await osh.LoadAsync(handle2);\n\n    <span style=\"color:Green;\">//Check that the second call to SaveASync() did not overwrite the object saved by first call to SaveAsync()</span>\n    Assert.AreEqual(poco, result);\n    Assert.AreEqual(anotherPoco, anotherResult);\n}\r\n</pre></div><br /><b>Tests</b><br />The supplied source code contains a WinRT test library that tests various scenarios.<br /><br /><b>Feedback</b><br />Feedback is very welcome. You can get hold of me at:<br /><a href=\"mailto:jamie@removethisbit.jamie-thomson.net\">jamie@removethisbit.jamie-thomson.net</a><br /><a href=\"http://sqlblog.com/blogs/jamie_thomson/\">http://sqlblog.com/blogs/jamie_thomson/</a><br /><a href=\"http://twitter.com/jamiet\">@jamiet</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "winrt,.NET,C#,",
  "LastEdited": "2012-11-19T15:11:27.983-08:00"
}