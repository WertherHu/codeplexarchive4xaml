{
  "ProjectName": "omrlibdb",
  "Title": "OMR.Lib.Database  - Lightweight WinRT InMemory Database",
  "Description": "Lightweight in memory database with depended persistent source.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Lightweight in memory database using persistent storage before initializing and saving data to persisten and memory both.</b><br />\n<h1>Example usage:</h1>\r<pre>\nIStorage storage = new WinRTStorage(WinRTStorageTypes.Local); // or: new Storage();\nstorage.RegisterTypes(typeof(TestEntity));\n\nDB db = new DB(storage);\ndb.Initialize();\n\ndb.Add(new TestEntity() { YearsOld = 25 });\n</pre>\n<h2>Unit tests are bellow</h2>\r<pre>\n[TestClass]\npublic class DBTests\n{\n    IStorage st;\n\n    [TestInitialize]\n    public void InitStorage()\n    {\n        st = new WinRTStorage(WinRTStorageTypes.Local);\n        st.RegisterTypes(\n                            typeof(TestEntity),\n                            typeof(AnotherEntity)\n                        );\n    }\n\n    [TestMethod()]\n    public void AddEntity()\n    {\n        DB db = new DB(st);\n        db.Initialize();\n\n        int _yearsOld = 25;\n\n        var actual = new TestEntity() { YearsOld = _yearsOld };\n        db.Add(actual);\n\n        var expected = db.Query&lt;TestEntity&gt;(f =&gt; f.YearsOld == actual.YearsOld);\n\n        Assert.IsNotNull(expected);\n    }\n\n    [TestMethod()]\n    public void QueryEntityRandom()\n    {\n        DB db = new DB(st);\n        db.Initialize();\n\n        for (int i = 0; i &lt; 30; i++)\n        {\n            db.Add(new TestEntity() { YearsOld = i % 70 });\n        }\n\n        var expected = db.Query&lt;TestEntity&gt;(f =&gt; f.YearsOld == 20).Count();\n\n        Assert.IsTrue(expected &gt; 0);\n    }\n\n    [TestMethod]\n    public void EntityIsExists()\n    {\n        DB db = new DB(st);\n        db.Initialize();\n\n        var actual = new TestEntity();\n        db.Add(actual);\n\n        Assert.IsTrue(db.Exists(actual));\n    }\n\n    [TestMethod]\n    public void RemoveEntity()\n    {\n        DB db = new DB(st);\n        db.Initialize();\n\n        var actual = new TestEntity();\n\n        db.Add(actual);\n\n        Assert.IsTrue(db.Remove(actual));\n    }\n\n    [TestMethod]\n    public void UpdateEntity()\n    {\n        DB db = new DB(st);\n        db.Initialize();\n\n        var actual = new TestEntity();\n        db.Add(actual);\n\n        var newYearsOld = actual.YearsOld = -5;\n\n        actual.YearsOld = newYearsOld;\n\n        Assert.IsTrue(db.Update(actual));\n\n        Assert.AreEqual(actual.YearsOld, newYearsOld);\n    }\n\n    [TestMethod]\n    public void AddOrUpdateEntity()\n    {\n        DB db = new DB(st);\n        db.Initialize();\n\n        var actual_1 = new TestEntity(); // will be updated\n        var actual_2 = new TestEntity(); // will \n\n        db.Add(actual_1);\n\n        db.AddOrUpdate(actual_1);\n        db.AddOrUpdate(actual_2);\n    }\n\n    [TestMethod]\n    public void ReloadTest()\n    {\n        DB db_1 = new DB(st);\n        db_1.Initialize();\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            db_1.Add(new TestEntity());\n        }\n\n        DB db_2 = new DB(st);\n        db_2.Initialize();\n\n        Assert.AreEqual(10, db_2.Count&lt;TestEntity&gt;());\n    }\n\n    [TestMethod]\n    public void MultiTypeTest()\n    {\n        DB db_1 = new DB(st);\n        db_1.Initialize();\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            db_1.Add(new TestEntity());\n        }\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            db_1.Add(new AnotherEntity() { StringProperty = i + &quot;. prop&quot; });\n        }\n\n        DB db_2 = new DB(st);\n        db_2.Initialize();\n\n        Assert.AreEqual(10, db_2.Count&lt;TestEntity&gt;());\n    }\n\n    [TestCleanup]\n    public void CleanUp()\n    {\n        //DB db = new DB(st);\n        ApplicationData.Current.RoamingSettings.Values.Clear();\n        ApplicationData.Current.LocalSettings.Values.Clear();\n    }\n}\n\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-08-23T16:05:14.437-07:00"
}