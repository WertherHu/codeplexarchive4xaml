{
  "ProjectName": "pathtextblock",
  "Title": "WinRT PathTextBlock",
  "Description": "WinRT PathTextBlock is a control that overcomes some of the limitations in the built in WinRT TextBlock, such as not being able to outline the text, and not being able to distort the text, for example to draw it along a circle.\r\n\r\nPreviously, you could use a tool like Expression Design to create the text and export it as a Path, but this wouldn't work for text that needed to be specified at run time. This control allows you to specify the Text property and it will generate the proper Path objects based on the font, font size, and text.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />WinRT PathTextBlock is a control that overcomes some of the limitations in the built in WinRT TextBlock, such as not being able to outline the text, and not being able to distort the text, for example to draw it along a circle.<br /><br />Previously, you could use a tool like Expression Design to create the text and export it as a Path, but this wouldn&#39;t work for text that needed to be specified at run time. This control allows you to specify the Text property and it will generate the proper Path objects based on the font, font size, and text.<br /><br /><br /><b>Project Description</b><br />WinRT PathTextBlock is a control that overcomes some of the limitations in the built in WinRT TextBlock, such as not being able to outline the text, and not being able to distort the text, for example to draw it along a circle.<br /><br />Previously, you could use a tool like Expression Design to create the text and export it as a Path, but this wouldn&#39;t work for text that needed to be specified at run time. This control allows you to specify the Text property and it will generate the proper Path objects based on the font, font size, and text.<br /><br /><b>Note that any fonts you embed in your application are subject to the original licensing of the font and you should contact the font publisher before embedding a font in your application.</b> <br /><br />This is the included sample, it uses a sine wave transform to make the text wavy and then uses a polar transform to wrap it around a circle: <br /><br /><img src=\"http://www.billreiss.com/wp-content/uploads/2012/04/pathtextblock_small.png\" /><br /><br />The corresponding XAML for the above sample is as follows: <br /><pre>\n        &lt;brg:PathTextBlock x:Name=&quot;tb&quot; Font=&quot;JellyBelly70.xfn&quot; Stroke=&quot;Red&quot; Fill=&quot;White&quot; StrokeThickness=&quot;1&quot; FontSize=&quot;100&quot; UpdateIntervalSeconds=&quot;.02&quot;&gt;\n            &lt;brg:PathTextBlock.TextTransform&gt;\n                &lt;brg:TransformGroup&gt;\n                    &lt;brg:TransformGroup.Children&gt;\n                        &lt;brg:SineTransform StartAngle=&quot;0&quot; Amplitude=&quot;30&quot; Period=&quot;250&quot;/&gt;\n                        &lt;brg:PolarTransform Angle=&quot;180&quot; CenterX=&quot;700&quot; CenterY=&quot;400&quot; RadiusX=&quot;500&quot; RadiusY=&quot;400&quot; RadiusStretch=&quot;1.6&quot; AngleStretch=&quot;.4&quot; TextDirection=&quot;Clockwise&quot;/&gt;\n                    &lt;/brg:TransformGroup.Children&gt;\n                &lt;/brg:TransformGroup&gt;\n            &lt;/brg:PathTextBlock.TextTransform&gt; \n        &lt;/brg:PathTextBlock&gt;\n</pre><br /><br />You can also write your own transforms, if you write an interesting transform, please let me know and I&#39;ll either include it or link to it, whatever you prefer. <br /><br />To create your own transforms, inherit from BlueRoseGames.Controls.Text.Transform, and then override the TransformPoint method. Also if you have any custom properties, call SetChanged() in the property set code. This will tell the PathTextBlock that the transform has changed and it will re-render. <br /><br />This code is released under the Microsoft Permissive License (Ms-PL) and can be used at no charge for non-commercial and commercial use. The software is provided as-is. <br /><br />More documentation coming soon, check out the sample project and the included PolarTransform and SineTransform classes. <br /><br />To get started, convert the font you want to use to a &quot;xfn&quot; file using the included FontParser.exe. Then add this xfn file to your WinRT project and make sure it&#39;s of type &quot;Content&quot;. Put this font file name in the Font property of the PathTextBlock. <br /><br />Planned updates to the project: <br />\n<ul><li>Remove need for xfn files by retrieving font information at run time (if possible).</li>\n<li>Exception handling</li>\n<li>More transforms</li>\n<li>More samples</li></ul>\n<br />If you use this for something interesting, please let me know and I&#39;ll create a gallery. <br /><br />You can follow my efforts on this project and others on my blog at:<br /><a href=\"http://www.billreiss.com/\">http://www.billreiss.com/</a><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "winrt,xaml,c#,text,",
  "LastEdited": "2012-04-06T13:12:22.313-07:00"
}