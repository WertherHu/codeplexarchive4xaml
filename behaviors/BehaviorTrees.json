{
  "ProjectName": "BehaviorTrees",
  "Title": "Behavior Trees XNA Game Component",
  "Description": "Implementation of behavior trees for XNA games.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Implementation of behavior trees for XNA games.<br /><br /><b>Info</b><br />Simple implementation of behavior trees inspired by a series of articles from site <a href=\"http://www.aigamedev.com\">http://www.aigamedev.com</a>. This approach heavily uses templates, all the nodes of the trees are bound to one type of entity on which they can operate, so it works nicely with hierarchies of objects.<br /><br /><b>Concepts</b><br />Main concept is that the trees are created for specified type of the entity. This type is specified as a type parameter for the generic classes. All basic nodes are classes that can operate on any entity type. In the entity code however, you can specify more nodes/actions/conditions that will be applicable for that kind of entity. Nodes are classess deriving from the provided basic nodes - you can create predefined behaviors by inheriting from them, and the actions/conditions are methods that operate on entities, manipulate or check its data.<br />Using that predefined stuff you can build behaviors that will be run upon the specified entity types, and the inheriting ones.<br /><br /><b>Notes</b>\n<ul><li>It uses slightly modified XNA <a href=\"http://Simple Animation Sample\">http://creators.xna.com/en-us/sample/simpleanimation</a> as an example application, because it&#39;s a funny little project which may nicely show the abilities of behavior trees.</li>\n<li>It runs on XNA 3.0 CTP libraries and the solution is for Visual Studio 2008.</li>\n<li>Although it is developed for XNA the only dependancy is the usage of GameTime structure (for now).</li>\n<li>OK, it&#39;s not Game Component per se;)</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "AI,XNA Game Component,Game Library,",
  "LastEdited": "2008-09-09T02:54:58.09-07:00"
}