{
  "ProjectName": "propdesigner",
  "Title": "Property Designer for Visual Studio",
  "Description": "Property Designer simplifies the management of complex .NET properties by providing a visual way to describe properties and their associated callbacks, events and other behaviors.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nProperty Designer simplifies the management of complex .NET properties by providing a visual way to describe properties and their associated callbacks, events and other behaviors.<br>\r\n<br>\r\n<strong>Why</strong><br>\r\nProperties are often associated with things like validation, callbacks and events. They also come in multiple flavors -- backing field implementations (including auto-properties) and dependency properties. The code for properties is usually boilerplate code\r\n with variations according to the necessary behaviors. The implementation of a property may look something like this:</p>\r\n<pre>public int Length\n{\n    get { return _length; }\n    set\n    {\n        if (_length != value)\n        {\n            if (value &lt;= 0)\n                throw new ArgumentException(&quot;Length must be greater than 0.&quot;, &quot;value&quot;);\n            _length = value;\n            var evt = LengthChanged;\n            if (evt != null)\n                evt(this, EventArgs.Empty);\n        }\n    }\n}</pre>\r\n<p>...and that's a simple one!</p>\r\n<p>The behaviors of a property usually fall into two categories:</p>\r\n<ul>\r\n<li>Validation </li><li>Notification\r\n<ul>\r\n<li>On___Changing and On___Changed callbacks to self </li><li>___Changing and ___Changed events to clients </li><li>INotifyPropertyChanging and INotifyPropertyChanged implementations </li></ul>\r\n</li></ul>\r\n<p>And properties are most often implemented in one of three ways:</p>\r\n<ul>\r\n<li>Auto property </li><li>Backing field </li><li>Dependency property </li></ul>\r\n<p>Property Designer provides a developer-friendly way to define and visualize these aspects of a property. When a supported file is loaded into the main document area of Visual Studio, the Property Designer tool window will be available in the IDE. This tool\r\n window provides the ability to easily view and edit properties while editing code or designing a form or user control.&nbsp;The designer introduces no runtime overhead in the associated properties. It accomplishes this by assuming control of the designed properties\r\n (not all properties need be designed) and managing all the code in a separate, related file, in the same way that the WPF and WinForms designers automatically create code that usually isn't edited by the developer directly. The code generated by Property Designer\r\n is simple and efficient.</p>\r\n<p>There are a number of property frameworks and property frameworks themselves are not difficult to implement. However, nearly every property framework involves the usage of base classes such as DependencyObject. And DependencyProperty has its own additional\r\n requirement -- the public static property that exposes the DependencyProperty object. Property Designer requires no base class, and can work with any class contained in a supported language file.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "patterns & practices,patterns,Designer,properties,Visual Studio,addin,.NET,Developer Tools,devtools,development,",
  "LastEdited": "2011-10-11T07:44:18.14-07:00"
}