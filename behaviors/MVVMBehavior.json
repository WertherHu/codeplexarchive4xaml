{
  "ProjectName": "MVVMBehavior",
  "Title": "MVVM Behavior Injection",
  "Description": "I am experimenting with a way to merge behavior into a model to create a dynamic ViewModel.  I am hoping to be able to autowireup commands, and track dependencies.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nI am experimenting with a way to merge behavior into a model to create a dynamic ViewModel. I am hoping to be able to autowireup commands, and track dependencies.<br>\r\n<br>\r\n<br>\r\nCurrently, the project demonstrates a way to define behavior in a class that derives from BehaviorInjector&lt;DataClassType&gt;. The behavior will expose additional Properties, DependentProperties, and commands, with a constructor that takes a DataClassType\r\n the BehaviorInjector has a dynamic ViewModel property that can be used as the dataContext of a WPF view.</p>\r\n<p>In order for the dependency tracking to work in the behavior class, you need to reference all properties of the DataClass, and BehaviorClass using the viewmodel:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> NameAgeSerialNumber\n        {\n            <span style=\"color:blue\">get</span>\n            {\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;{0} - Age: {1} - {2}&quot;</span>, ViewModel.Name, ViewModel.Age, DateTime.Now.Millisecond);\n            }\n        }<br>&nbsp;<br></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The problem with this is that while you get automatic dependency tracking, you lose design time intellisense.&nbsp; I have been trying to find a way to expose the best of both worlds, but I think the dependency tracking is cooler than the intellisense, and\r\n perhaps there is a way to intoduce a pre-compile helper that can edit the code on compile to switch DataClass, or BehaviorClass references to ViewModel as the ViewModel will contain identically named properties and methods....&nbsp; If anyone has any ideas\r\n for this, I'd love to hear them.</p>\r\n<p>Also, the current implementation uses a constructor to get the dataclass into the behavior, I think I will change this to also include an extension method so it can easily support multiple behaviors:&nbsp; something like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> behavior = DataClass.AttachBehavior(Behavior1).AttachBehavior(Behavior2).AttachBehavior(Behavior3)\n\nview.DataContext = behavior.ViewModel;\n\n</pre>\r\n</div>\r\n<p>Also, I am thinking about having a re-map function that can take a changed DataClass (perhaps from a server callback) and remap it to the behaviors automatically, but I don't really know how this would play out yet.</p>\r\n<p>Of course, since I only have 12 days to publish I figure I will leave that for later.</p>\r\n<p>I would love to hear comments or criticisms about this project.&nbsp; I don't recommend using it in any sort of production environment as I don't really know how it will perform, it may perform really badly.</p>\r\n<p>&nbsp;</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "MVVM,WPF,Behavior,Dynamic,viewmodel,",
  "LastEdited": "2011-04-01T07:52:12.257-07:00"
}