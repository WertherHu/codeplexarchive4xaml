{
  "ProjectName": "incframework",
  "Title": "Incoding Framework",
  "Description": "Incoding Framework is a open package for rapid development and testing .NET projects.\r\n\r\nDynamic pages - C# (no JS) meta behaviour definition\r\nCQRS\r\nMSpec helpers.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>IncFramework</strong> project by <a href=\"http://www.incoding.biz\" target=\"_blank\">\r\nIncoding Software</a></p>\r\n<h2><strong><span style=\"color:#ff0000\">Repository move to https://github.com/IncodingSoftware/Incoding-Framework</span></strong></h2>\r\n<p><span style=\"color:#ff0000; font-size:1.5em\">Attention to get the latest Official Incoding releases please use the Nuget package (https://nuget.org/profiles/incoding)</span></p>\r\n<p><a href=\"http://incframework.com\"><img src=\"http://blog.incframework.com/upload/IncFramework-logo.png\" alt=\"IncFramework-logo\" width=\"920\" height=\"398\"></a></p>\r\n<p style=\"text-align:justify\"><em><strong>disclamer:</strong>this article is a step-by-step guide to help you to familiarize with the core functionality of Incoding Framework. Following the guide will result in an application that implements the work with the\r\n DB (CRUD &#43; data filters) and fully covered with unit tests.</em></p>\r\n<h1 style=\"text-align:justify\">Part 0. Introduction</h1>\r\n<p style=\"text-align:justify\">Let us begin with a short description of Framework. Incoding Framework comprises three packages: Incoding framework &ndash; back-end project, Incoding Meta Language &ndash; front-end project and Incoding tests helpers &ndash; unit-tests\r\n for back-end. These packages are installed independently of each other, making it possible to integrate framework by parts into the project: You can connect only front or back end (tests are tightly coupled with the back end, so, they could be more considered\r\n as a complement).</p>\r\n<p style=\"text-align:justify\">Projects developed in <strong>Incoding Framework</strong>,<strong>&nbsp;</strong>use\r\n<a title=\"Martin Fowler: CQRS\" href=\"http://martinfowler.com/bliki/CQRS.html\" target=\"_blank\">\r\nCQRS</a> as a server architecture. <a title=\"Habrahabr: Incoding rapid development framework\" href=\"http://habrahabr.ru/post/209734/\" target=\"_blank\">\r\nIncoding Meta Language</a>. В цело&#1084;&nbsp;<strong>Incoding Framework&nbsp;</strong> is used as a basic tool for building front-end. All in all, Incoding Framework covers the entire application development cycle.</p>\r\n<p style=\"text-align:justify\">Typical solution, that was developed using Incoding Framework, comprises 3 projects:</p>\r\n<ol style=\"text-align:justify\">\r\n<li style=\"text-align:justify\"><strong>1. Domain (<em>class library) </em></strong><em>-\r\n</em>is responsible for business logic and database operations. </li><li style=\"text-align:justify\"><strong>UI (<em>ASP.NET MVC project</em>)<em>&nbsp;</em></strong><em>-&nbsp;</em>front-end based on&nbsp;ASP.NET MVC.\r\n</li><li style=\"text-align:justify\"><strong>UnitTests (<em>class library</em>)&nbsp;</strong>- unit-tests for Domain.\r\n</li></ol>\r\n<h3 style=\"text-align:justify\">Domain</h3>\r\n<p style=\"text-align:justify\">After installation of &nbsp;<a title=\"Nuget: Incoding framework\" href=\"https://www.nuget.org/packages/Incoding.Framework/\" target=\"_blank\">Incoding framework</a>&nbsp;through Nuget , along with the necessary dll, Bootstrapper.cs\r\n file will be added in the project. The file is mainly responsible for the initialization of an application: logging initialization, IoC registration, installation of Ajax-requests settings, etc. By default,\r\n<a title=\"StructureMap docs\" href=\"http://docs.structuremap.net/\">StructureMap</a>is installed as loC framework, but there is a provider for Ninject, and it is also possible to write your own implementations.</p>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System;\n    using System.Configuration;\n    using System.IO;\n    using System.Linq;\n    using System.Web.Mvc;\n    using FluentNHibernate.Cfg;\n    using FluentNHibernate.Cfg.Db;\n    using FluentValidation;\n    using FluentValidation.Mvc;\n    using Incoding.Block.IoC;\n    using Incoding.Block.Logging;\n    using Incoding.CQRS;\n    using Incoding.Data;\n    using Incoding.EventBroker;\n    using Incoding.Extensions;\n    using Incoding.MvcContrib;\n    using NHibernate.Tool.hbm2ddl;\n    using StructureMap.Graph;\n\n    #endregion\n\n    public static class Bootstrapper\n    {\n        public static void Start()\n        {\n            //Initialize LoggingFactory\n            LoggingFactory.Instance.Initialize(logging =&gt;\n                {\n                    string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;Log&quot;);\n                    logging.WithPolicy(policy =&gt; policy.For(LogType.Debug)\n                                                        .Use(FileLogger.WithAtOnceReplace(path,\n                                                                                        () =&gt; &quot;Debug_{0}.txt&quot;.F(DateTime.Now.ToString(&quot;yyyyMMdd&quot;)))));\n                });\n\n            //Initialize IoCFactory\n            IoCFactory.Instance.Initialize(init =&gt; init.WithProvider(new StructureMapIoCProvider(registry =&gt;\n                {\n                    //Регистрация Dispatcher\n                    registry.For&lt;IDispatcher&gt;().Use&lt;DefaultDispatcher&gt;();\n                    //Регистрация Event Broker\n                    registry.For&lt;IEventBroker&gt;().Use&lt;DefaultEventBroker&gt;();\n                    registry.For&lt;ITemplateFactory&gt;().Singleton().Use&lt;TemplateHandlebarsFactory&gt;();\n\n                    //Настройка FluentlyNhibernate\n                    var configure = Fluently\n                            .Configure()\n                            .Database(MsSqlConfiguration.MsSql2008.ConnectionString(ConfigurationManager.ConnectionStrings[&quot;Example&quot;].ConnectionString))\n                            .Mappings(configuration =&gt; configuration.FluentMappings.AddFromAssembly(typeof(Bootstrapper).Assembly))\n                            .ExposeConfiguration(cfg =&gt; new SchemaUpdate(cfg).Execute(false, true))\n                            .CurrentSessionContext&lt;NhibernateSessionContext&gt;(); //Настройка конфигурации базы данных\n\n                    registry.For&lt;INhibernateSessionFactory&gt;().Singleton().Use(() =&gt; new NhibernateSessionFactory(configure));\n                    registry.For&lt;IUnitOfWorkFactory&gt;().Use&lt;NhibernateUnitOfWorkFactory&gt;();\n                    registry.For&lt;IRepository&gt;().Use&lt;NhibernateRepository&gt;();\n\n                    //Scna currenlty Assembly and registrations all Validators and Event Subscribers\n                    registry.Scan(r =&gt;\n                                    {\n                                        r.TheCallingAssembly();\n                                        r.WithDefaultConventions();\n\n                                        r.ConnectImplementationsToTypesClosing(typeof(AbstractValidator&lt;&gt;));\n                                        r.ConnectImplementationsToTypesClosing(typeof(IEventSubscriber&lt;&gt;));\n                                        r.AddAllTypesOf&lt;ISetUp&gt;();\n                                    });\n                })));\n\n            ModelValidatorProviders.Providers.Add(new FluentValidationModelValidatorProvider(new IncValidatorFactory()));\n            FluentValidationModelValidatorProvider.Configure();\n\n            //Execute all SetUp\n            foreach (var setUp in IoCFactory.Instance.ResolveAll&lt;ISetUp&gt;().OrderBy(r =&gt; r.GetOrder()))\n            {\n                setUp.Execute();\n            }\n\n            var ajaxDef = JqueryAjaxOptions.Default;\n            ajaxDef.Cache = false; //Disable Ajax cache\n        }\n    }\n}</pre>\r\n<p style=\"text-align:justify\">Further on, commands (Command) and queries (Query) are added to Domain, that perform database operations or any action, related with business application logic.</p>\r\n<h3 style=\"text-align:justify\">UI</h3>\r\n<p style=\"text-align:justify\">During the installation of Package <a title=\"Nuget: Incoding Meta Language\" href=\"https://www.nuget.org/packages/Incoding.MetaLanguage/\">\r\nIncoding Meta Language</a>&nbsp;, it adds the necessary dll to the package, as well as IncodingStart.cs and DispatcherController.cs (part\r\n<a title=\"Habrahabr: Model View Dispatcher (cqrs over mvc)\" href=\"http://habrahabr.ru/post/221585/\">\r\nMVD</a>) files required to work Domain.</p>\r\n<pre>public static class IncodingStart\n{\n    public static void PreStart()\n    {\n        Bootstrapper.Start();\n        new DispatcherController(); // init routes\n    }\n}</pre>\r\n<pre>public class DispatcherController : DispatcherControllerBase\n{\n    #region Constructors\n\n    public DispatcherController()\n            : base(typeof(Bootstrapper).Assembly) { }\n\n    #endregion\n}</pre>\r\n<p style=\"text-align:justify\">After the installation, the client logic is added to\r\n<strong>UI</strong>&nbsp;using&nbsp;<a title=\"Habrahabr: Incoding rapid development framework\" href=\"http://habrahabr.ru/post/209734/\" target=\"_blank\">IML</a>.</p>\r\n<h3>UnitTests</h3>\r\n<p style=\"text-align:justify\">During the installation of <a title=\"Nuget: Incoding tests helpers\" href=\"https://www.nuget.org/packages/Incoding.MSpecContrib/\">\r\nIncoding tests helpers</a>, the project is added by the MSpecAssemblyContext.csis file, in which connection is customize to the test dtabse.</p>\r\n<pre>public class MSpecAssemblyContext : IAssemblyContext\n{\n    #region IAssemblyContext Members\n\n    public void OnAssemblyStart()\n    {\n        //Configuration data base\n        var configure = Fluently\n                .Configure()\n                .Database(MsSqlConfiguration.MsSql2008\n                                            .ConnectionString(ConfigurationManager.ConnectionStrings[&quot;Example_Test&quot;].ConnectionString)\n                                            .ShowSql())\n                .Mappings(configuration =&gt; configuration.FluentMappings.AddFromAssembly(typeof(Bootstrapper).Assembly));\n\n        PleasureForData.StartNhibernate(configure, true);\n    }\n\n    public void OnAssemblyComplete() { }\n\n    #endregion\n}</pre>\r\n<h2>Part 1. Installation.</h2>\r\n<p style=\"text-align:justify\">So, we proceed to the task of the <em>disclamer&nbsp;</em> and start writing our application. The first phase of building the application is to create solution structure of a project and to add the projects to it. The project solution\r\n will be called Example and, as was already mentioned in the introduction, will have 3 projects. We begin with the project that is responsible for business logic of the application - Domain.</p>\r\n<p style=\"text-align:justify\">Create class library&nbsp;<strong>Domain</strong>.</p>\r\n<p style=\"text-align:justify\"><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/Domain.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/Domain-e1433938652855.png\" alt=\"Domain\" width=\"800\" height=\"553\"></a></p>\r\n<p style=\"text-align:justify\">Then we proceed to the front-end &ndash; create and install ASP.NET Web Application UI with links to the MVC packages as template, empty project.</p>\r\n<p><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/UI1.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/UI1-e1433938677813.png\" alt=\"UI1\" width=\"800\" height=\"553\"></a>\r\n<a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/UI2.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/UI2-e1433938757884.png\" alt=\"UI2\" width=\"770\" height=\"540\"></a></p>\r\n<p style=\"text-align:justify\">Finally, we add class library UnitTests that is responsible for unit testing.</p>\r\n<p><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/UnitTests.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/UnitTests-e1433938798326.png\" alt=\"UnitTests\" width=\"800\" height=\"553\"></a></p>\r\n<p style=\"text-align:justify\"><em><strong>Note:&nbsp;</strong>Alt<em>hough UnitTests are not an obligatory part of the application, we recommend you to cover the code with tests as it will help to avoid numerous problems in future with various possible faults\r\n in the code due to test automation. </em></em></p>\r\n<p>After having finished all the above activities, you will get following solution:\r\n<a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/Solution.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/Solution-e1433938901524.png\" alt=\"Solution\" width=\"664\" height=\"547\"></a> After we create the solution structure,\r\n we need to install<strong> Incoding Framework</strong> package from Nuget. The installation carried out by Nuget. There is the same algorithm of installation for all the projects:</p>\r\n<ol>\r\n<li>Right-click the project and select <strong>Manage Nuget Packages</strong>&hellip; in the context menu\r\n</li><li>Search <strong>incoding</strong> </li><li>Select necessary package and install it </li></ol>\r\n<p>First install <a title=\"Incoding framework\" href=\"https://www.nuget.org/packages/Incoding.Framework/\">\r\nIncoding framework</a> in <strong>Domain</strong>. <a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/Incoding_framework_1.png\">\r\n<img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/Incoding_framework_1-e1433940738743.png\" alt=\"Incoding_framework_1\" width=\"800\" height=\"539\"></a></p>\r\n<p style=\"text-align:justify\">Then add to the file <strong>Domain -&gt; Infrastructure -&gt; Bootstrapper.cs</strong> the link to StructureMap.Graph.</p>\r\n<p><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/StructureMap_ref.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/StructureMap_ref-e1433940776329.png\" alt=\"StructureMap_ref\" width=\"800\" height=\"63\"></a> 2 packages must\r\n be installed to UI:</p>\r\n<ol>\r\n<li><a title=\"Nuget: Incoding Meta Language\" href=\"https://www.nuget.org/packages/Incoding.MetaLanguage/\">Incoding Meta Language</a>\r\n</li><li><a title=\"Nuget: Incoding Meta Language Contrib\" href=\"https://www.nuget.org/packages/Incoding.MetaLanguage.Contrib/\">Incoding Meta Language Contrib</a>\r\n</li></ol>\r\n<p style=\"text-align:justify\"><strong><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/Incoding_Meta_Languge-e1433940844592.png\" alt=\"Incoding_Meta_Languge\" width=\"800\" height=\"539\"></strong></p>\r\n<p style=\"text-align:justify\"><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/MetaLanguageContrib_install.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/MetaLanguageContrib_install-e1433941058675.png\" alt=\"MetaLanguageContrib_install\" width=\"800\" height=\"539\"></a></p>\r\n<p style=\"text-align:justify\"><strong><em>Note:&nbsp;</em></strong><em>make sure that the Copy Local property is set to true in the</em><em><em> References -&gt; System.Web.Mvc.dll</em></em></p>\r\n<p style=\"text-align:justify\">Now change the file &nbsp;<strong>Example.UI -&gt; Views -&gt; Shared -&gt; _Layout.cshtml&nbsp;</strong>so that it looks as follows:</p>\r\n<pre>@using Incoding.MvcContrib\n&lt;!DOCTYPE html&gt;\n&lt;html &gt;\n&lt;head&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/jquery-1.9.1.min.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/jquery-ui-1.10.2.min.js&quot;)&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/underscore.min.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/jquery.form.min.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/jquery.history.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/jquery.validate.min.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/jquery.validate.unobtrusive.min.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/handlebars-1.1.2.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/incoding.framework.min.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/incoding.meta.language.contrib.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;@Url.Content(&quot;~/Scripts/bootstrap.min.js&quot;)&quot;&gt; &lt;/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Url.Content(&quot;~/Content/bootstrap.min.css&quot;)&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Url.Content(&quot;~/Content/themes/base/jquery.ui.core.css&quot;)&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Url.Content(&quot;~/Content/themes/base/jquery.ui.datepicker.css&quot;)&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Url.Content(&quot;~/Content/themes/base/jquery.ui.dialog.css&quot;)&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Url.Content(&quot;~/Content/themes/base/jquery.ui.theme.css&quot;)&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;@Url.Content(&quot;~/Content/themes/base/jquery.ui.menu.css&quot;)&quot;&gt;\n    &lt;script&gt;\n        TemplateFactory.Version = '@Guid.NewGuid().ToString()';\n    &lt;/script&gt;\n&lt;/head&gt;\n@Html.Incoding().RenderDropDownTemplate()\n&lt;body&gt;\n@RenderBody()\n&lt;/body&gt;\n&lt;/html&gt;</pre>\r\n<p>Then add the link to Bootstrapper.cs to the files <strong>Example.UI -&gt; App_Start -&gt; IncodingStart.cs and Example.UI -&gt; Controllers -&gt; DispatcherController.cs.</strong>\r\n<a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/IncodingStart_bootstrapper.png\">\r\n<img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/IncodingStart_bootstrapper-e1433941248848.png\" alt=\"IncodingStart_bootstrapper\" width=\"400\" height=\"240\"></a>\r\n<a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/DispatcherController_bootstrapper.png\">\r\n<img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/DispatcherController_bootstrapper-e1433941221806.png\" alt=\"DispatcherController_bootstrapper\" width=\"712\" height=\"185\"></a></p>\r\n<p style=\"text-align:justify\"><em><strong>Note:&nbsp;</strong></em><em>If you use MVC5, it&rsquo;s necessary for framework to add following code to Web.config file.</em></p>\r\n<pre>&lt;dependentAssembly&gt;\n  &lt;assemblyIdentity name=&quot;System.Web.Mvc&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; culture=&quot;neutral&quot; /&gt;\n  &lt;bindingRedirect oldVersion=&quot;0.0.0.0-5.0.0.0&quot; newVersion=&quot;5.0.0.0&quot; /&gt;\n&lt;/dependentAssembly&gt;</pre>\r\n<p style=\"text-align:justify\">Now install &nbsp;<a title=\"Nuget: Incoding tests helpers\" href=\"https://www.nuget.org/packages/Incoding.MSpecContrib/\">Incoding tests helpers</a> in<strong>UnitTests&nbsp;</strong>and add the link to Bootstrapper.cs in Example.UnitTests\r\n -&gt; MSpecAssemblyContext.cs.</p>\r\n<p><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/Incoding_tests_helpers.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/Incoding_tests_helpers-e1433941531335.png\" alt=\"Incoding_tests_helpers\" width=\"800\" height=\"539\"></a>\r\n<a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/MSpecAssemblyContext_bootstrapper.png\">\r\n<img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/MSpecAssemblyContext_bootstrapper-e1433941543161.png\" alt=\"MSpecAssemblyContext_bootstrapper\" width=\"800\" height=\"116\"></a> The last phase of the preparation the projects to work is to create\r\n folders structure for the projects. Add following folders to the <strong>Example.Domain\r\n</strong>project:</p>\r\n<ol>\r\n<li>Operations &ndash; command and query of the project </li><li>Persistences &ndash; entities for DB mapping </li><li>Specifications &ndash; where and order specifications for data cleaning when request is made\r\n</li></ol>\r\n<p><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/Example.Domain_folders.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/Example.Domain_folders-e1433942308588.png\" alt=\"Example.Domain_folders\" width=\"350\" height=\"154\"></a>\r\n In the <strong>Example.UnitTests </strong>project create just the same folders structure as in\r\n<strong>Example.Domain.</strong> <a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/UnitTests_folders.png\">\r\n<img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/UnitTests_folders-e1433942319802.png\" alt=\"UnitTests_folders\" width=\"310\" height=\"172\"></a></p>\r\n<h1><strong>Part 2. Setting up a DB connection.</strong></h1>\r\n<p>To begin this process, create DB with which you will work. Open SQL Managment Studio and create two DB: Example and Example_test.</p>\r\n<p style=\"text-align:justify\"><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/add_DB1.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/add_DB1-e1434366917892.png\" alt=\"add_DB\" width=\"525\" height=\"291\"></a></p>\r\n<p style=\"text-align:justify\"><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/example_db.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/example_db-e1434367010409.png\" alt=\"example_db\" width=\"525\" height=\"471\"></a></p>\r\n<p style=\"text-align:justify\"><a href=\"http://blog.incframework.com/wp-content/uploads/2015/06/example_test_db.png\"><img src=\"http://blog.incframework.com/wp-content/uploads/2015/06/example_test_db-e1434367032172.png\" alt=\"example_test_db\" width=\"525\" height=\"471\"></a></p>\r\n<p>In order to work with DB, you need to set up a connection. Add to the file <strong>\r\nExample.UI -&gt; Web.config and Example.UnitTests -&gt; app.config connection </strong>\r\nstring to the BD:</p>\r\n<pre>  &lt;connectionStrings&gt;\n    &lt;add name=&quot;Example&quot; connectionString=&quot;Data Source=INCODING-PC\\SQLEXPRESS;Database=Example;Integrated Security=false; User Id=sa;Password=1&quot; providerName=&quot;System.Data.SqlClient&quot; /&gt;\n    &lt;add name=&quot;Example_Test&quot; connectionString=&quot;Data Source=INCODING-PC\\SQLEXPRESS;Database=Example_Test;Integrated Security=true&quot; providerName=&quot;System.Data.SqlClient&quot; /&gt;\n  &lt;/connectionStrings&gt;</pre>\r\n<p>In the file<strong> Example.Domain -&gt; Infrastructure -&gt; Bootstrapper.cs</strong>, register the appropriate connection string using a key called Example:</p>\r\n<pre>//Настройка FluentlyNhibernate\nvar configure = Fluently\n        .Configure()\n        .Database(MsSqlConfiguration.MsSql2008.ConnectionString(ConfigurationManager.ConnectionStrings[&quot;Example&quot;].ConnectionString))\n        .Mappings(configuration =&gt; configuration.FluentMappings.AddFromAssembly(typeof(Bootstrapper).Assembly))\n        .ExposeConfiguration(cfg =&gt; new SchemaUpdate(cfg).Execute(false, true))\n        .CurrentSessionContext(); //Настройка конфигурации базы данных</pre>\r\n<p>In the file <strong>Example.UnitTests -&gt; MSpecAssemblyContext.cs</strong>, register the connection string to the BD using the key called Example_test:</p>\r\n<pre>//Настройка подключения к тестовой БД\nvar configure = Fluently\n        .Configure()\n        .Database(MsSqlConfiguration.MsSql2008\n                                    .ConnectionString(ConfigurationManager.ConnectionStrings[&quot;Example_Test&quot;].ConnectionString)\n                                    .ShowSql())\n        .Mappings(configuration =&gt; configuration.FluentMappings.AddFromAssembly(typeof(Bootstrapper).Assembly));</pre>\r\n<p><strong>Note</strong>: Example and Example_test databases must exist.</p>\r\n<h1>Part&nbsp;3. CRUD.</h1>\r\n<p>After the actions described above, we come to the most interesting part &ndash; code writing implementing the CRUD (<strong>c</strong>reate,\r\n<strong>r</strong>ead, <strong>u</strong>pdate, <strong>d</strong>elete) functionality of an application. To begin this process, create an entity class that will map to the DB. In our case, this is Human.cs that we add to the\r\n<strong>Example.Domain -&gt; Persistences folder</strong>.</p>\r\n<h6>Human.cs</h6>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System;\n    using Incoding.Data;\n\n    #endregion\n\n    public class Human : IncEntityBase\n    {\n        #region Properties\n\n        public virtual DateTime Birthday { get; set; }\n\n        public virtual string FirstName { get; set; }\n\n        public virtual string Id { get; set; }\n\n        public virtual string LastName { get; set; }\n\n        public virtual Sex Sex { get; set; }\n\n        #endregion\n\n        #region Nested Classes\n\n        public class Map : NHibernateEntityMap&lt;Human&gt;\n        {\n            #region Constructors\n\n            protected Map()\n            {\n                IdGenerateByGuid(r =&gt; r.Id);\n                MapEscaping(r =&gt; r.FirstName);\n                MapEscaping(r =&gt; r.LastName);\n                MapEscaping(r =&gt; r.Birthday);\n                MapEscaping(r =&gt; r.Sex);\n            }\n\n            #endregion\n        }\n\n        #endregion\n    }\n\n    public enum Sex\n    {\n        Male = 1,\n\n        Female = 2\n    }\n}</pre>\r\n<p>Our class contains several fields where we will write data and Nested Class Map.</p>\r\n<p style=\"text-align:justify\"><em><strong>Note:</strong> after creating the <strong>\r\nHuman</strong> class, you do not need to perform any operations (creating an XML mapping) due to &nbsp;<a title=\"Fluent Nhibernate\" href=\"http://www.fluentnhibernate.org/\">FluentNhibernate</a>.</em></p>\r\n<p>We can now add commands and queries, which are responsible for realization of the CRUD operations. The first command will be responsible for adding a new or change an existing record of the Human type.&nbsp; The command is quite simple: we either get an\r\n entity on a Repository using the key (ld) or, if no entity exist, we create a new one. Both of these entities get the values specified&nbsp;&nbsp; in the properties of the AddOrEditHumanCommand class. Add\r\n<strong>Example.Domain -&gt; Operations -&gt; AddOrEditHumanCommand.cs to the project.</strong></p>\r\n<h6>AddOrEditHumanCommand.cs</h6>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System;\n    using FluentValidation;\n    using Incoding.CQRS;\n    using Incoding.Extensions;\n\n    #endregion\n\n    public class AddOrEditHumanCommand : CommandBase\n    {\n        #region Properties\n\n        public DateTime BirthDay { get; set; }\n\n        public string FirstName { get; set; }\n\n        public string Id { get; set; }\n\n        public string LastName { get; set; }\n\n        public Sex Sex { get; set; }\n\n        #endregion\n\n        public override void Execute()\n        {\n            var human = Repository.GetById&lt;Human&gt;(Id) ?? new Human();\n\n            human.FirstName = FirstName;\n            human.LastName = LastName;\n            human.Birthday = BirthDay;\n            human.Sex = Sex;\n\n            Repository.SaveOrUpdate(human);\n        }\n    }\n}</pre>\r\n<p>The Read command is the second part of the CRUD. This is a request for reading entities from the DB. Add the file\r\n<strong>Example.Domain -&gt; Operations -&gt; GetPeopleQuery.cs</strong>.</p>\r\n<h6>GetPeopleQuery.cs</h6>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System.Collections.Generic;\n    using System.Linq;\n    using Incoding.CQRS;\n\n    #endregion\n\n    public class GetPeopleQuery : QueryBase&lt;List&lt;GetPeopleQuery.Response&gt;&gt;\n    {\n        #region Properties\n\n        public string Keyword { get; set; }\n\n        #endregion\n\n        #region Nested Classes\n\n        public class Response\n        {\n            #region Properties\n\n            public string Birthday { get; set; }\n\n            public string FirstName { get; set; }\n\n            public string Id { get; set; }\n\n            public string LastName { get; set; }\n\n            public string Sex { get; set; }\n\n            #endregion\n        }\n\n        #endregion\n\n        protected override List&lt;Response&gt; ExecuteResult()\n        {\n            return Repository.Query&lt;Human&gt;().Select(human =&gt; new Response\n                                                                 {\n                                                                         Id = human.Id,\n                                                                         Birthday = human.Birthday.ToShortDateString(),\n                                                                         FirstName = human.FirstName,\n                                                                         LastName = human.LastName,\n                                                                         Sex = human.Sex.ToString()\n                                                                 }).ToList();\n        }\n    }\n}</pre>\r\n<p>The Delete command is the remaining part of the CRUD. The command deletes records from the DB using the key (ld). Add the file\r\n<strong>Example.Domain -&gt; Operations -&gt; DeleteHumanCommand.cs</strong>.</p>\r\n<h6>DeleteHumanCommand.cs</h6>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using Incoding.CQRS;\n\n    #endregion\n\n    public class DeleteHumanCommand : CommandBase\n    {\n        #region Properties\n\n        public string HumanId { get; set; }\n\n        #endregion\n\n        public override void Execute()\n        {\n            Repository.Delete&lt;Human&gt;(HumanId);\n        }\n    }\n}</pre>\r\n<p>In order to populate the DB with initial data, add the file <strong>Example.Domain -&gt; InitPeople.cs\r\n</strong>that is derived from the ISetUP interface.</p>\r\n<h6 style=\"text-align:justify\">ISetup</h6>\r\n<pre>using System;\n\nnamespace Incoding.CQRS\n{\n  public interface ISetUp : IDisposable\n  {\n    int GetOrder();\n\n    void Execute();\n  }\n}</pre>\r\n<p>All the class instances from the ISetUp are registered with IoC in the Bootstrapper.cs (see Introduction) and run (public void Execute() ) in order (public int GetOrder() ).</p>\r\n<h6>InitPeople.cs</h6>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System;\n    using Incoding.Block.IoC;\n    using Incoding.CQRS;\n    using NHibernate.Util;\n\n    #endregion\n\n    public class InitPeople : ISetUp\n    {\n        public void Dispose() { }\n\n        public int GetOrder()\n        {\n            return 0;\n        }\n\n        public void Execute()\n        {\n            //get Dispatcher for execute Query or Command\n            var dispatcher = IoCFactory.Instance.TryResolve&lt;IDispatcher&gt;();\n            \n            //don't add new entity if exits\n            if (dispatcher.Query(new GetEntitiesQuery&lt;Human&gt;()).Any())\n                return;\n\n            //Adding new entity\n            dispatcher.Push(new AddOrEditHumanCommand\n                                {\n                                        FirstName = &quot;Hellen&quot;,\n                                        LastName = &quot;Jonson&quot;,\n                                        BirthDay = Convert.ToDateTime(&quot;06/05/1985&quot;),\n                                        Sex = Sex.Female\n                                });\n            dispatcher.Push(new AddOrEditHumanCommand\n                                {\n                                        FirstName = &quot;John&quot;,\n                                        LastName = &quot;Carlson&quot;,\n                                        BirthDay = Convert.ToDateTime(&quot;06/07/1985&quot;),\n                                        Sex = Sex.Male\n                                });\n        }\n    }\n}</pre>\r\n<p>The back-end implementation of the CRUD is ready. Now it is time to add a user code. As in the case of the back end, we begin the implementation with creating/editing a record. Add the file<strong> Example.UI -&gt; Views -&gt; Home -&gt; AddOrEditHuman.cshtml.&nbsp;</strong></p>\r\n<h6>AddOrEditHuman.cshtml</h6>\r\n<pre>@using Example.Domain\n@using Incoding.MetaLanguageContrib\n@using Incoding.MvcContrib\n@model Example.Domain.AddOrEditHumanCommand\n@*Submit form for  AddOrEditHumanCommand*@\n@using (Html.When(JqueryBind.Submit)\n            @*Prevent default behavior and submit form by Ajax*@\n            .PreventDefault()\n            .Submit()\n            .OnSuccess(dsl =&gt;\n                           {\n                               dsl.WithId(&quot;PeopleTable&quot;).Core().Trigger.Incoding();\n                               dsl.WithId(&quot;dialog&quot;).JqueryUI().Dialog.Close();\n                           })\n            .OnError(dsl =&gt; dsl.Self().Core().Form.Validation.Refresh())\n            .AsHtmlAttributes(new\n                                  {\n                                          action = Url.Dispatcher().Push(new AddOrEditHumanCommand()),\n                                          enctype = &quot;multipart/form-data&quot;,\n                                          method = &quot;POST&quot;\n                                  })\n            .ToBeginTag(Html, HtmlTag.Form))\n{\n    &lt;div&gt;\n        @Html.HiddenFor(r =&gt; r.Id)\n        @Html.ForGroup(r =&gt; r.FirstName).TextBox(control =&gt; control.Label.Name = &quot;First name&quot;)\n        &lt;br/&gt;\n        @Html.ForGroup(r =&gt; r.LastName).TextBox(control =&gt; control.Label.Name = &quot;Last name&quot;)\n        &lt;br/&gt;\n        @Html.ForGroup(r =&gt; r.BirthDay).TextBox(control =&gt; control.Label.Name = &quot;Birthday&quot;)\n        &lt;br/&gt;\n        @Html.ForGroup(r =&gt; r.Sex).DropDown(control =&gt; control.Input.Data = typeof(Sex).ToSelectList())\n    &lt;/div&gt;\n\n    &lt;div&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;Save&quot;/&gt;\n        @*Закрытие диалога*@\n        @(Html.When(JqueryBind.Click)\n              .PreventDefault()\n              .StopPropagation()\n              .Direct()\n              .OnSuccess(dsl =&gt; { dsl.WithId(&quot;dialog&quot;).JqueryUI().Dialog.Close(); })\n              .AsHtmlAttributes()\n              .ToButton(&quot;Cancel&quot;))\n    &lt;/div&gt;\n}</pre>\r\n<p>The IML-code creates the standard HTML form and works with AddOrEditHumanCommand, sending the appropriate Ajax query to the server. Then comes the template for data loading through the GetPeopleQuery. There is a description of the table that will be responsible\r\n not only for data output, but also for record deletion and editing: add the file\r\n<strong>Example.UI -&gt; Views -&gt; Home -&gt; HumanTmpl.cshtml.</strong></p>\r\n<h6>HumanTmpl.cshtml</h6>\r\n<pre>@using Example.Domain\n@using Incoding.MetaLanguageContrib\n@using Incoding.MvcContrib\n@{\n    using (var template = Html.Incoding().Template&lt;GetPeopleQuery.Response&gt;())\n    {\n        &lt;table class=&quot;table&quot;&gt;\n            &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;\n                    First name\n                &lt;/th&gt;\n                &lt;th&gt;\n                    Last name\n                &lt;/th&gt;\n                &lt;th&gt;\n                    Birthday\n                &lt;/th&gt;\n                &lt;th&gt;\n                    Sex\n                &lt;/th&gt;\n                &lt;th&gt;&lt;/th&gt;\n            &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n            @using (var each = template.ForEach())\n            {\n                &lt;tr&gt;\n                    &lt;td&gt;\n                        @each.For(r =&gt; r.FirstName)\n                    &lt;/td&gt;\n                    &lt;td&gt;\n                        @each.For(r =&gt; r.LastName)\n                    &lt;/td&gt;\n                    &lt;td&gt;\n                        @each.For(r =&gt; r.Birthday)\n                    &lt;/td&gt;\n                    &lt;td&gt;\n                        @each.For(r =&gt; r.Sex)\n                    &lt;/td&gt;\n                    &lt;td&gt;\n                        @*Open edit dialog form*@\n                        @(Html.When(JqueryBind.Click)\n                              .AjaxGet(Url.Dispatcher().Model&lt;AddOrEditHumanCommand&gt;(new\n                                                                                         {\n                                                                                                 Id = each.For(r =&gt; r.Id),\n                                                                                                 FirstName = each.For(r =&gt; r.FirstName),\n                                                                                                 LastName = each.For(r =&gt; r.LastName),\n                                                                                                 BirthDay = each.For(r =&gt; r.Birthday),\n                                                                                                 Sex = each.For(r =&gt; r.Sex)\n                                                                                         }).AsView(&quot;~/Views/Home/AddOrEditHuman.cshtml&quot;))\n                              .OnSuccess(dsl =&gt; dsl.WithId(&quot;dialog&quot;).Behaviors(inDsl =&gt;\n                                                                                   {\n                                                                                       inDsl.Core().Insert.Html();\n                                                                                       inDsl.JqueryUI().Dialog.Open(option =&gt;\n                                                                                                                        {\n                                                                                                                            option.Resizable = false;\n                                                                                                                            option.Title = &quot;Edit human&quot;;\n                                                                                                                        });\n                                                                                   }))\n                              .AsHtmlAttributes()\n                              .ToButton(&quot;Edit&quot;))\n                        @*Button delete*@\n                        @(Html.When(JqueryBind.Click)\n                              .AjaxPost(Url.Dispatcher().Push(new DeleteHumanCommand() { HumanId = each.For(r =&gt; r.Id) }))\n                              .OnSuccess(dsl =&gt; dsl.WithId(&quot;PeopleTable&quot;).Core().Trigger.Incoding())\n                              .AsHtmlAttributes()\n                              .ToButton(&quot;Delete&quot;))\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            }\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    }\n}</pre>\r\n<p><strong>Note:</strong>&nbsp;<em>The task of opening a dialog box is quite common, so the code that is responsible for this task can be exported to the extension.&nbsp;</em> Thus, it remains to change the start page so that during its loading AJAX query is\r\n transmitted to the server for obtaining data from the GetPeopleQuery and mapping of data using HumanTmpl: change the file\r\n<strong>Example.UI -&gt; Views -&gt; Home -&gt; Index.cshtml&nbsp;</strong>so that it looks as follows.</p>\r\n<h6>Index.cshtml</h6>\r\n<pre>@using Example.Domain\n@using Incoding.MetaLanguageContrib\n@using Incoding.MvcContrib\n@{\n    Layout = &quot;~/Views/Shared/_Layout.cshtml&quot;;\n}\n&lt;div id=&quot;dialog&quot;&gt;&lt;/div&gt;\n@*Fetch data from GetPeopleQuery, through HumanTmpl*@\n@(Html.When(JqueryBind.InitIncoding)\n      .AjaxGet(Url.Dispatcher().Query(new GetPeopleQuery()).AsJson())\n      .OnSuccess(dsl =&gt; dsl.Self().Core().Insert.WithTemplateByUrl(Url.Dispatcher().AsView(&quot;~/Views/Home/HumanTmpl.cshtml&quot;)).Html())\n      .AsHtmlAttributes(new { id = &quot;PeopleTable&quot; })\n      .ToDiv())\n@*Button add*@\n@(Html.When(JqueryBind.Click)\n      .AjaxGet(Url.Dispatcher().AsView(&quot;~/Views/Home/AddOrEditHuman.cshtml&quot;))\n      .OnSuccess(dsl =&gt; dsl.WithId(&quot;dialog&quot;).Behaviors(inDsl =&gt;\n                                                           {\n                                                               inDsl.Core().Insert.Html();\n                                                               inDsl.JqueryUI().Dialog.Open(option =&gt;\n                                                                                                {\n                                                                                                    option.Resizable = false;\n                                                                                                    option.Title = &quot;Add human&quot;;\n                                                                                                });\n                                                           }))\n      .AsHtmlAttributes()\n      .ToButton(&quot;Add new human&quot;))</pre>\r\n<p>In real-world applications, validation of input form data is one of the most frequent task. Therefore, we add data validation on the adding/editing form of the Human entity. First, we need to add a server code. Add the following code in AddOrEditHumanCommand\r\n as a nested class:</p>\r\n<pre>#region Nested Classes\n\npublic class Validator : AbstractValidator\n{\n    #region Constructors\n\n    public Validator()\n    {\n        RuleFor(r =&gt; r.FirstName).NotEmpty();\n        RuleFor(r =&gt; r.LastName).NotEmpty();\n    }\n\n    #endregion\n}\n\n#endregion</pre>\r\n<p>On the AddOrEditHuman.cshtml form, we used constructs like this:</p>\r\n<pre>@Html.ForGroup()</pre>\r\n<p>It is therefore not necessary to add</p>\r\n<pre>@Html.ValidationMessageFor()</pre>\r\n<p style=\"text-align:justify\">for the fields - <a title=\"Советы и подсказки\" href=\"http://blog.incframework.com/ru/tips-and-trick/\">\r\nForGroup()</a>&nbsp;will do it.</p>\r\n<p>So we have written the application code that implements the CRUD functionality for one DB entity.</p>\r\n<h1>Part&nbsp;4. Specifications - data cleaning.</h1>\r\n<p>Another task that often occurs in real projects is to clean requested data.&nbsp; Incoding Framework uses WhereSpecifications for convenient code writing and complying an encapsulation principle for cleaning data from Query. In the written code add a possibility\r\n to clean data from GetPeopleQuery by FirstName and LastName. First, add two specification files\r\n<strong>Example.Domain -&gt; Specifications -&gt; HumanByFirstNameWhereSpec.cs&nbsp;</strong>and&nbsp;<strong>Example.UI -&gt; Specifications -&gt; HumanByLastNameWhereSpec.cs</strong></p>\r\n<h6 style=\"text-align:justify\">HumanByFirstNameWhereSpec.cs</h6>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System;\n    using System.Linq.Expressions;\n    using Incoding;\n\n    #endregion\n\n    public class HumanByFirstNameWhereSpec : Specification\n    {\n        #region Fields\n\n        readonly string firstName;\n\n        #endregion\n\n        #region Constructors\n\n        public HumanByFirstNameWhereSpec(string firstName)\n        {\n            this.firstName = firstName;\n        }\n\n        #endregion\n\n        public override Expression&lt;Func&lt;Human, bool&gt;&gt; IsSatisfiedBy()\n        {\n            if (string.IsNullOrEmpty(this.firstName))\n                return null;\n\n            return human =&gt; human.FirstName.ToLower().Contains(this.firstName.ToLower());\n        }\n    }\n}</pre>\r\n<h6>HumanByLastNameWhereSpec.cs</h6>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System;\n    using System.Linq.Expressions;\n    using Incoding;\n\n    #endregion\n\n    public class HumanByLastNameWhereSpec : Specification\n    {\n        #region Fields\n\n        readonly string lastName;\n\n        #endregion\n\n        #region Constructors\n\n        public HumanByLastNameWhereSpec(string lastName)\n        {\n            this.lastName = lastName.ToLower();\n        }\n\n        #endregion\n\n        public override Expression&lt;Func&lt;Human, bool&gt;&gt; IsSatisfiedBy()\n        {\n            if (string.IsNullOrEmpty(this.lastName))\n                return null;\n\n            return human =&gt; human.LastName.ToLower().Contains(this.lastName);\n        }\n    }\n}</pre>\r\n<p>Now use the written specifications in GetPeopleQuery. .Or()/.And() relations allow to merge atomic specifications that helps to use the created specifications many times and fine-tune necessary data filters (in the example we use .Or() relation)</p>\r\n<h6>GetPeopleQuery.cs</h6>\r\n<pre>namespace Example.Domain\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System.Collections.Generic;\n    using System.Linq;\n    using Incoding.CQRS;\n    using Incoding.Extensions;\n\n    #endregion\n\n    public class GetPeopleQuery : QueryBase&lt;List&lt;GetPeopleQuery.Response&gt;&gt;\n    {\n        #region Properties\n\n        public string Keyword { get; set; }\n\n        #endregion\n\n        #region Nested Classes\n\n        public class Response\n        {\n            #region Properties\n\n            public string Birthday { get; set; }\n\n            public string FirstName { get; set; }\n\n            public string Id { get; set; }\n\n            public string LastName { get; set; }\n\n            public string Sex { get; set; }\n\n            #endregion\n        }\n\n        #endregion\n\n        protected override List&lt;Response&gt; ExecuteResult()\n        {\n            return Repository.Query(whereSpecification: new HumanByFirstNameWhereSpec(Keyword)\n                                            .Or(new HumanByLastNameWhereSpec(Keyword)))\n                             .Select(human =&gt; new Response\n                                                  {\n                                                          Id = human.Id,\n                                                          Birthday = human.Birthday.ToShortDateString(),\n                                                          FirstName = human.FirstName,\n                                                          LastName = human.LastName,\n                                                          Sex = human.Sex.ToString()\n                                                  }).ToList();\n        }\n    }\n}</pre>\r\n<p>Finally, it only remains to modify Index.cshtml in order to add a search box, which uses a Keyword field for data cleaning while a request is being processed.</p>\r\n<h6>Index.cshtml</h6>\r\n<pre>@using Example.Domain\n@using Incoding.MetaLanguageContrib\n@using Incoding.MvcContrib\n@{\n    Layout = &quot;~/Views/Shared/_Layout.cshtml&quot;;\n}\n&lt;div id=&quot;dialog&quot;&gt;&lt;/div&gt;\n@*При нажатии кнопки Find инициируется событие InitIncoding и PeopleTable выполняет запрос GetPeopleQuery с пара&#1084;етро&#1084; Keyword*@\n&lt;div&gt;\n    &lt;input type=&quot;text&quot; id=&quot;Keyword&quot;/&gt;\n    @(Html.When(JqueryBind.Click)\n          .Direct()\n          .OnSuccess(dsl =&gt; dsl.WithId(&quot;PeopleTable&quot;).Core().Trigger.Incoding())\n          .AsHtmlAttributes()\n          .ToButton(&quot;Find&quot;))\n&lt;/div&gt;\n\n@(Html.When(JqueryBind.InitIncoding)\n      .AjaxGet(Url.Dispatcher().Query(new GetPeopleQuery { Keyword = Selector.Jquery.Id(&quot;Keyword&quot;) }).AsJson())\n      .OnSuccess(dsl =&gt; dsl.Self().Core().Insert.WithTemplateByUrl(Url.Dispatcher().AsView(&quot;~/Views/Home/HumanTmpl.cshtml&quot;)).Html())\n      .AsHtmlAttributes(new { id = &quot;PeopleTable&quot; })\n      .ToDiv())\n\n@(Html.When(JqueryBind.Click)\n      .AjaxGet(Url.Dispatcher().AsView(&quot;~/Views/Home/AddOrEditHuman.cshtml&quot;))\n      .OnSuccess(dsl =&gt; dsl.WithId(&quot;dialog&quot;).Behaviors(inDsl =&gt;\n                                                           {\n                                                               inDsl.Core().Insert.Html();\n                                                               inDsl.JqueryUI().Dialog.Open(option =&gt;\n                                                                                                {\n                                                                                                    option.Resizable = false;\n                                                                                                    option.Title = &quot;Add human&quot;;\n                                                                                                });\n                                                           }))\n      .AsHtmlAttributes()\n      .ToButton(&quot;Add new human&quot;))</pre>\r\n<h1>Part&nbsp;5. Unit-test.</h1>\r\n<p>Let&rsquo;s cover the written code with tests. The first one is responsible for testing of Human entity mapping. Add the file When_save_Human.cs to the folder Persisteces of the UnitTests project.</p>\r\n<h6><strong>When_save_Human.cs</strong></h6>\r\n<pre>namespace Example.UnitTests.Persistences\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using Example.Domain;\n    using Incoding.MSpecContrib;\n    using Machine.Specifications;\n\n    #endregion\n\n    [Subject(typeof(Human))]\n    public class When_save_Human : SpecWithPersistenceSpecification\n    {\n        #region Fields\n\n        It should_be_verify = () =&gt; persistenceSpecification.VerifyMappingAndSchema();\n\n        #endregion\n    }\n}</pre>\r\n<p>The test works with a test database (Example_test): an instance of the Human class with automatically populated fields is created, then stored in the DB, retrieved from and compared to the created instance. Then add the tests for WhereSpecifications in a\r\n folder named Specifications.</p>\r\n<h6><strong>When_human_by_first_name.cs</strong></h6>\r\n<pre>namespace Example.UnitTests.Specifications\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using Example.Domain;\n    using Incoding.MSpecContrib;\n    using Machine.Specifications;\n\n    #endregion\n\n    [Subject(typeof(HumanByFirstNameWhereSpec))]\n    public class When_human_by_first_name\n    {\n        #region Fields\n\n        Establish establish = () =&gt;\n                                  {\n                                      Func&lt;string, Human&gt; createEntity = (firstName) =&gt;\n                                                                         Pleasure.MockStrictAsObject(mock =&gt;\n                                                                                                            mock.SetupGet(r =&gt; r.FirstName)\n                                                                                                                .Returns(firstName));\n\n                                      fakeCollection = Pleasure.ToQueryable(createEntity(Pleasure.Generator.TheSameString()),\n                                                                            createEntity(Pleasure.Generator.String()));\n                                  };\n\n        Because of = () =&gt;\n                         {\n                             filterCollection = fakeCollection\n                                     .Where(new HumanByFirstNameWhereSpec(Pleasure.Generator.TheSameString()).IsSatisfiedBy())\n                                     .ToList();\n                         };\n\n        It should_be_filter = () =&gt;\n                                  {\n                                      filterCollection.Count.ShouldEqual(1);\n                                      filterCollection[0].FirstName.ShouldBeTheSameString();\n                                  };\n\n        #endregion\n\n        #region Establish value\n\n        static IQueryable fakeCollection;\n\n        static List filterCollection;\n\n        #endregion\n    }\n}</pre>\r\n<h6><strong>When_human_by_last_name.cs</strong></h6>\r\n<pre>namespace Example.UnitTests.Specifications\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using Example.Domain;\n    using Incoding.MSpecContrib;\n    using Machine.Specifications;\n\n    #endregion\n\n    [Subject(typeof(HumanByLastNameWhereSpec))]\n    public class When_human_by_last_name\n    {\n        #region Fields\n\n        Establish establish = () =&gt;\n                                  {\n                                      Func&lt;string, Human&gt; createEntity = (lastName) =&gt;\n                                                                         Pleasure.MockStrictAsObject(mock =&gt;\n                                                                                                            mock.SetupGet(r =&gt; r.LastName)\n                                                                                                                .Returns(lastName));\n\n                                      fakeCollection = Pleasure.ToQueryable(createEntity(Pleasure.Generator.TheSameString()),\n                                                                            createEntity(Pleasure.Generator.String()));\n                                  };\n\n        Because of = () =&gt;\n                         {\n                             filterCollection = fakeCollection\n                                     .Where(new HumanByLastNameWhereSpec(Pleasure.Generator.TheSameString()).IsSatisfiedBy())\n                                     .ToList();\n                         };\n\n        It should_be_filter = () =&gt;\n                                  {\n                                      filterCollection.Count.ShouldEqual(1);\n                                      filterCollection[0].LastName.ShouldBeTheSameString();\n                                  };\n\n        #endregion\n\n        #region Establish value\n\n        static IQueryable fakeCollection;\n\n        static List filterCollection;\n\n        #endregion\n    }\n}</pre>\r\n<p>Now we have to add tests for the command and the query (Operations folder). For the command, you need to add two tests: the first one verifies the creation of a new entity; the second one verifies the editing of an existing entity.</p>\r\n<h6><strong>When_get_people_query.cs</strong></h6>\r\n<pre>namespace Example.UnitTests.Operations\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using System.Collections.Generic;\n    using Example.Domain;\n    using Incoding.Extensions;\n    using Incoding.MSpecContrib;\n    using Machine.Specifications;\n\n    #endregion\n\n    [Subject(typeof(GetPeopleQuery))]\n    public class When_get_people\n    {\n        #region Fields\n\n        Establish establish = () =&gt;\n                                  {\n                                      var query = Pleasure.Generator.Invent&lt;GetPeopleQuery&gt;();\n                                      //Create entity for test with auto-generate\n                                      human = Pleasure.Generator.Invent&lt;Human&gt;();\n\n                                      expected = new List&lt;GetPeopleQuery.Response&gt;();\n\n                                      mockQuery = MockQuery&lt;GetPeopleQuery, List&lt;GetPeopleQuery.Response&gt;&gt;\n                                              .When(query)\n                                              //&quot;Stub&quot; on query to repository\n                                              .StubQuery(whereSpecification: new HumanByFirstNameWhereSpec(query.Keyword)\n                                                                 .Or(new HumanByLastNameWhereSpec(query.Keyword)),\n                                                         entities: human);\n                                  };\n\n        Because of = () =&gt; mockQuery.Original.Execute();\n        \n        // Compare result \n        It should_be_result = () =&gt; mockQuery.ShouldBeIsResult(list =&gt; list.ShouldEqualWeakEach(new List&lt;Human&gt;() { human },\n                                                                                                (dsl, i) =&gt; dsl.ForwardToValue(r =&gt; r.Birthday, human.Birthday.ToShortDateString())\n                                                                                                               .ForwardToValue(r =&gt; r.Sex, human.Sex.ToString())\n                                                                               ));\n\n        #endregion\n\n        #region Establish value\n\n        static MockMessage&lt;GetPeopleQuery, List&lt;GetPeopleQuery.Response&gt;&gt; mockQuery;\n\n        static List&lt;GetPeopleQuery.Response&gt; expected;\n\n        static Human human;\n\n        #endregion\n    }\n}</pre>\r\n<h6><strong>When_add_human.cs</strong></h6>\r\n<pre>namespace Example.UnitTests.Operations\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using Example.Domain;\n    using Incoding.MSpecContrib;\n    using Machine.Specifications;\n\n    #endregion\n\n    [Subject(typeof(AddOrEditHumanCommand))]\n    public class When_add_human\n    {\n        #region Fields\n\n        Establish establish = () =&gt;\n                                  {\n                                      var command = Pleasure.Generator.Invent&lt;AddOrEditHumanCommand&gt;();\n\n                                      mockCommand = MockCommand&lt;AddOrEditHumanCommand&gt;\n                                              .When(command)\n                                              //&quot;Stub&quot; on repository\n                                              .StubGetById&lt;Human&gt;(command.Id, null);\n                                  };\n\n        Because of = () =&gt; mockCommand.Original.Execute();\n\n        It should_be_saved = () =&gt; mockCommand.ShouldBeSaveOrUpdate&lt;Human&gt;(human =&gt; human.ShouldEqualWeak(mockCommand.Original));\n\n        #endregion\n\n        #region Establish value\n\n        static MockMessage&lt;AddOrEditHumanCommand, object&gt; mockCommand;\n\n        #endregion\n    }\n}</pre>\r\n<h6><strong>When_edit_human.cs</strong></h6>\r\n<pre>namespace Example.UnitTests.Operations\n{\n    #region &lt;&lt; Using &gt;&gt;\n\n    using Example.Domain;\n    using Incoding.MSpecContrib;\n    using Machine.Specifications;\n\n    #endregion\n\n    [Subject(typeof(AddOrEditHumanCommand))]\n    public class When_edit_human\n    {\n        #region Fields\n\n        Establish establish = () =&gt;\n                                  {\n                                      var command = Pleasure.Generator.Invent&lt;AddOrEditHumanCommand&gt;();\n\n                                      human = Pleasure.Generator.Invent&lt;Human&gt;();\n\n                                      mockCommand = MockCommand&lt;AddOrEditHumanCommand&gt;\n                                              .When(command)\n                                              //&quot;Stub&quot; on repository\n                                              .StubGetById(command.Id, human);\n                                  };\n\n        Because of = () =&gt; mockCommand.Original.Execute();\n\n        It should_be_saved = () =&gt; mockCommand.ShouldBeSaveOrUpdate&lt;Human&gt;(human =&gt; human.ShouldEqualWeak(mockCommand.Original));\n\n        #endregion\n\n        #region Establish value\n\n        static MockMessage&lt;AddOrEditHumanCommand, object&gt; mockCommand;\n\n        static Human human;\n\n        #endregion\n    }\n}</pre>\r\n<h1>Study materials</h1>\r\n<ol>\r\n<li><a title=\"Cqrs vs N-layer\" href=\"http://blog.incframework.com/en/cqrs-vs-n-layer/\">CQRS\r\n</a>&nbsp;and <a title=\"CQRS advanced course\" href=\"http://blog.incframework.com/en/cqrs-advanced-course/\">\r\nCQRS </a>(advanced course) , <a title=\"Repository\" href=\"http://blog.incframework.com/en/repository/\">\r\nRepository&nbsp;</a>-&nbsp;back end architecture </li><li><a title=\"Blog: MVD\" href=\"http://blog.incframework.com/en/model-view-dispatcher/\">MVD</a> -a description of a Model View Dispatcher pattern\r\n</li><li><a title=\"IML TODO\" href=\"http://blog.incframework.com/en/iml-todo/\">IML </a>\r\n(TODO), <a title=\"AngularJs vs IML\" href=\"http://blog.incframework.com/en/angularjs-vs-iml/\">\r\nIML vs Angular</a> , <a title=\"Jquery vs IML\" href=\"http://blog.incframework.com/en/jqyery-style-vs-iml-style/\">\r\nIml vs Jquery</a> , <a title=\"Ajax.ActionLink vs IML\" href=\"http://blog.incframework.com/en/ajax-actionlink-vs-iml/\">\r\nIml vs ASP.NET Ajax</a>&nbsp;- incoding meta language </li><li><a title=\"Blog: Мощь селекторов\" href=\"http://blog.incframework.com/en/power-selector/\">IML</a>&nbsp;(selector)- &nbsp;a&nbsp;description of the selectors&rsquo; usage in IML\r\n</li><li><a title=\"Do,Action,Insert\" href=\"http://blog.incframework.com/en/do-action-insert/\">IML In Ajax</a> -&nbsp;a description of the IML Operation in relation to Ajax\r\n</li><li><a title=\"Client template\" href=\"http://blog.incframework.com/en/client-template/\">IML template</a>&nbsp;-&nbsp;Templates for data insertion\r\n</li><li><a title=\"Extensions\" href=\"http://blog.incframework.com/en/extensions/\">Extensions</a>- help with writing extensions to&nbsp; comply the\r\n<a title=\"Wiki: DRY\" href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">\r\n<strong>D</strong>on't<strong>R</strong>epeat<strong>Y</strong>ourself</a>&nbsp;principle\r\n</li><li><a title=\"Inc testing\" href=\"http://blog.incframework.com/en/inc-testing/\">Unit Test</a>&nbsp;and&nbsp;<a title=\"Command and query test scenario\" href=\"http://blog.incframework.com/en/command-test-scenario/\">Unit test scenario</a>\r\n</li></ol>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "cqrs,ajax,asp.net mvc,architecture,infrastructure,cross-cutting,iml,framework,.net 4.0,C#,mvc,Incoding Meta Langua,",
  "LastEdited": "2015-09-05T12:44:03.21-07:00"
}