{
  "ProjectName": "mathosparser",
  "Title": "Mathos Parser",
  "Description": "Mathos Parser is a math parser, which allows to parse all kinds of expressions, add custom functions, variables, and operators, and define their behaviour.",
  "MovedLink": "https://github.com/MathosProject",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>NB:&nbsp;</strong>Mathos Parser and other APIs based on Mathos Parser are from on developed on GitHub. The releases on this website are still up-to-date, however, the source code is currently stored on GitHub.</p>\r\n<ul>\r\n<li><a href=\"https://github.com/MathosProject/Mathos-Parser\">Mathos Parser (original)</a>\r\n</li><li><a href=\"https://github.com/MathosProject/Mathos-Parser-Portable\">Mathos Parser (portable)</a>\r\n</li><li><a href=\"https://github.com/MathosProject/Mathos-Parser-CIL\">Mathos Parser (expression compiler, CIL)</a>\r\n</li></ul>\r\n<hr>\r\n<p><strong>Mathos Parser</strong> is a mathematical expression parser, built on top of the .NET Framework, which allows you to parse all kinds of mathematical expressions, and in addition, add your own custom functions, operators, and variables (see the\r\n<a href=\"http://parser.mathosproject.com/\">online demo</a>).</p>\r\n<p>NEW: We have launched a new support site, Q&amp;A style:&nbsp;<a href=\"http://support.mathosproject.com/\">http://support.mathosproject.com/</a></p>\r\n<h3>Features</h3>\r\n<ul>\r\n<li>Parse all kinds of mathematical expressions. </li><li>Add conditional statements. </li><li>Customize operators. Add/edit existing operators, change behaviour of operators.\r\n</li><li>Programatically add variables before and on the run time. </li><li>Custom own functions with almost unlimited amount of arguments. </li><li>Using trig functions: sine, cosine, tangents, and also:&nbsp;arc sine,&nbsp;arc cosine,&nbsp;arc tangent.\r\n</li><li>Supports almost all of the functions available in System.Math, such as: pow, round, sqrt, rem, abs, and more!\r\n</li><li>Culture independent. No matter on what machine the library is being used - the same configurations for everyone.\r\n</li><li>Decimal operations. </li><li>And much more! </li></ul>\r\n<h3>Introduction</h3>\r\n<p>Mathos Parser is a part of Mathos, a project that provides useful methods, structures, etc, to make the life a little bit easier! This math parser is fully independent of Mathos project, so you can just use this library to archive a powerful math parsing\r\n experience.</p>\r\n<h3>How to use</h3>\r\n<p>It's really easy to use and understand this math parser. In this topic I will try to show you some (not all) key features of this library.</p>\r\n<ul>\r\n<li>Adding a custom operator. </li><li>Adding a custom function. </li><li>Functions with more than one argument. </li><li>Programatically add variables. </li></ul>\r\n<p><strong>Adding a custom operator</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// declaring the parser</span>\nMathParser parser = <span style=\"color:blue\">new</span> MathParser();\n\n<span style=\"color:green\">//customize the operator list</span>\nparser.OperatorList = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">string</span>&gt;() { <span style=\"color:#a31515\">&quot;^&quot;</span>, <span style=\"color:#a31515\">&quot;%&quot;</span>, <span style=\"color:#a31515\">&quot;*&quot;</span>, <span style=\"color:#a31515\">&quot;:&quot;</span>, <span style=\"color:#a31515\">&quot;/&quot;</span>, <span style=\"color:#a31515\">&quot;&#43;&quot;</span>, <span style=\"color:#a31515\">&quot;-&quot;</span>, <span style=\"color:#a31515\">&quot;&gt;&quot;</span>, <span style=\"color:#a31515\">&quot;&lt;&quot;</span>, <span style=\"color:#a31515\">&quot;=&quot;</span> };\n\n<span style=\"color:green\">// adding sqrt to the OperatorAction list</span>\nparser.OperatorAction.Add(<span style=\"color:#a31515\">&quot;^&quot;</span>, <span style=\"color:blue\">delegate</span>(<span style=\"color:blue\">decimal</span> numA, <span style=\"color:blue\">decimal</span> numB)\n{\n    <span style=\"color:blue\">return</span> (<span style=\"color:blue\">decimal</span>)Math.Pow((<span style=\"color:blue\">double</span>)numA, (<span style=\"color:blue\">double</span>)numB);\n});\n\n<span style=\"color:green\">// parsing and comparing</span>\nAssert.IsTrue(parser.Parse(<span style=\"color:#a31515\">&quot;3^2&quot;</span>) == (<span style=\"color:blue\">decimal</span>)Math.Pow (3,2));</pre>\r\n</div>\r\n<p><strong>Adding a custom function</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CustomFunctions()\n{\n    <span style=\"color:green\">/*\n     * This test demonstrates three ways of adding a function\n     * to the Math Parser\n     * \n     * 1) directly pointing to the function\n     * 2) lambda expression\n     * 3) anonymous method\n     */</span>\n\n    MathParser parser = <span style=\"color:blue\">new</span> MathParser();\n\n    <span style=\"color:green\">//for long functions</span>\n    parser.LocalFunctions.Add(<span style=\"color:#a31515\">&quot;numberTimesTwo&quot;</span>, NumberTimesTwoCustomFunction); <span style=\"color:green\">// adding the function</span>\n    <span style=\"color:blue\">decimal</span> resultA = parser.Parse(<span style=\"color:#a31515\">&quot;numberTimesTwo(3)&quot;</span>);\n\n    <span style=\"color:green\">//for short functions, use lambda expression, or anonymous method</span>\n    <span style=\"color:green\">// 1) using lambda epxression (recommended)</span>\n    parser.LocalFunctions.Add(<span style=\"color:#a31515\">&quot;square&quot;</span>, x =&gt; x[0] * x[0]);\n    <span style=\"color:blue\">decimal</span> resultB = parser.Parse(<span style=\"color:#a31515\">&quot;square(4)&quot;</span>);\n\n    <span style=\"color:green\">// 2) using anonymous method</span>\n    parser.LocalFunctions.Add(<span style=\"color:#a31515\">&quot;cube&quot;</span>, <span style=\"color:blue\">delegate</span>(<span style=\"color:blue\">decimal</span>[] x)\n    {\n        <span style=\"color:blue\">return</span> x[0] * x[0] * x[0];\n    });\n    <span style=\"color:blue\">decimal</span> resultC = parser.Parse(<span style=\"color:#a31515\">&quot;cube(2)&quot;</span>);\n\n}\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">decimal</span> NumberTimesTwoCustomFunction(<span style=\"color:blue\">decimal</span>[] input)\n{\n    <span style=\"color:blue\">return</span> input[0] * 2;\n}</pre>\r\n</div>\r\n<p><strong>Functions with more than one argument</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">/*\n * This example demonstrates the &quot;anonymous method&quot; way of adding\n * a function that can take more than one agument.\n */</span>\n\n MathParser parser = <span style=\"color:blue\">new</span> MathParser();\n\n<span style=\"color:green\">//for long functions</span>\nparser.LocalFunctions.Add(<span style=\"color:#a31515\">&quot;log&quot;</span>, <span style=\"color:blue\">delegate</span>(<span style=\"color:blue\">decimal</span>[] input) <span style=\"color:green\">// adding the function</span>\n{\n    <span style=\"color:green\">// input[0] is the number</span>\n    <span style=\"color:green\">// input[1] is the base</span>\n\n  <span style=\"color:blue\">if</span> (input.Length == 1)\n  {\n      <span style=\"color:blue\">return</span> (<span style=\"color:blue\">decimal</span>)Math.Log((<span style=\"color:blue\">double</span>)input[0]);\n  }\n  <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (input.Length == 2)\n  {\n      <span style=\"color:blue\">return</span> (<span style=\"color:blue\">decimal</span>)Math.Log((<span style=\"color:blue\">double</span>)input[0], (<span style=\"color:blue\">double</span>)input[1]);\n  }\n  <span style=\"color:blue\">else</span>\n  {\n      <span style=\"color:blue\">return</span> 0; <span style=\"color:green\">// false</span>\n  }\n});\n\n<span style=\"color:blue\">decimal</span> resultA = parser.Parse(<span style=\"color:#a31515\">&quot;log(2)&quot;</span>);\n<span style=\"color:blue\">decimal</span> resultB = parser.Parse(<span style=\"color:#a31515\">&quot;log(2,3)&quot;</span>);</pre>\r\n</div>\r\n<p><strong>Programatically add variables</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">/* \n* when parsing an expression that requires \n* for instance a variable name declaration \n* or change, use ProgramaticallyParse().\n*/</span>\nMathParser parser = <span style=\"color:blue\">new</span> MathParser();\n          \n<span style=\"color:green\">// first way, using let varname = value</span>\n<span style=\"color:blue\">decimal</span> resultA = parser.ProgrammaticallyParse(<span style=\"color:#a31515\">&quot;let a = 2pi&quot;</span>);\nAssert.IsTrue (parser.Parse (<span style=\"color:#a31515\">&quot;a&quot;</span>) == (<span style=\"color:blue\">decimal</span>)Math.PI*2);\n\n<span style=\"color:green\">// second way, using varname :=  value</span>\n<span style=\"color:blue\">decimal</span> resultC = parser.ProgrammaticallyParse(<span style=\"color:#a31515\">&quot;b := 20&quot;</span>);\nAssert.IsTrue(parser.Parse(<span style=\"color:#a31515\">&quot;b&quot;</span>) == 20);\n\n<span style=\"color:green\">// third way, using let varname be value</span>\n<span style=\"color:blue\">decimal</span> resultD = parser.ProgrammaticallyParse(<span style=\"color:#a31515\">&quot;let c be 25&quot;</span>);\nAssert.IsTrue(resultD == 25);</pre>\r\n</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "math parser,parser,Mathematics,",
  "LastEdited": "2015-01-03T06:56:04.597-08:00"
}