{
  "ProjectName": "PhysicsHelper",
  "Title": "Physics Helper for Blend, Silverlight, WP7 and Farseer",
  "Description": "The Physics Helper project contains several user controls which allow you to draw objects in Expression Blend 3, and have those objects translated directly into Physics objects using the Farseer Physics Engine. Version 3 has Behaviors for both Silverlight and WPF.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rThe Physics Helper for Blend, Silverlight and Windows Phone 7 contains several Behaviors which allow you to draw objects in Expression Blend 4, and have those objects translated into Physics objects using the <a href=\"http://www.codeplex.com/farseerphysics\">Farseer Physics Engine</a>. This can be a great timesaver for creating games, as it is traditionally difficult to line up underlying physics bodies and geometries with your Blend artwork.<br /><br />\n<hr /> <b>NOTE: INTERESTED IN WINDOWS 8 METRO DEVELOPMENT? </b><br />Check out the port of the Physics Helper to <a href=\"http://physicshelperxaml.codeplex.com/\">Physics Helper XAML</a> for Metro style app development in C# or VB.\n<hr />\n<br />New to Version 4 of the Physics Helper:\n<ul><li>Now supports Farseer Physics Engine 3\n<ul><li>Bullets</li>\n<li>Continuous Collision Detection</li>\n<li>Resting Bodies</li>\n<li>see the <a href=\"http://www.codeplex.com/farseerphysics\">Farseer project page</a> for more details on this release of the Farseer Engine!</li></ul></li>\n<li>Installer (msi) makes setup easier</li></ul>\n\n<h1>Intro Videos</h1>\rWatch these short videos to see how easy it can be to design physics using Expression Blend 3, Silverlight 3, and the Physics Helper Behaviors:<br /><br /><b>VIDEO ON VERSION 4.0</b> <a href=\"http://www.andybeaulieu.com/video/PhysicsHelper4Intro.wmv\">VIEW</a><br />This is an intro video on using the Behaviors to apply Physics in Expression Blend.<br /><br /><b>VIDEO ON VERSION 3.0</b> <a href=\"http://www.andybeaulieu.com/video/PhysicsHelper3Demo.wmv\">VIEW</a><br />This is an intro video on using the Behaviors to apply Physics in Expression Blend.<br /><br /><b>VIDEO ON VERSION 3.0 &quot;JOINTS + PROGRAMMING&quot;</b> <a href=\"http://www.andybeaulieu.com/video/Physics Helper - Joints + Code.wmv\">VIEW</a> <br />A more advanced video on using Behaviors to create Joints and accessing objects via code-behind.<br /><br /><b>CODING4FUN SHOW</b> <a href=\"http://channel9.msdn.com/shows/Coding4FunTV/The-Coding4Fun-Show-Physics-Helper-for-Silverlight-by-Andy-Beaulieu/\">VIEW</a><br />Brian Peek interviews Andy Beaulieu on the Physics Helper. Note that this demos Version 1, which is based on the User Controls instead of Behaviors. <br /><br /><b>MIX09 SHOW OFF!</b> <a href=\"http://www.andybeaulieu.com/video/PhysicsHelperShowOff.wmv\">VIEW</a><br />The Physics Helper Library took 1st Place at the 2009 MIX Show Off! Event. This is the winning video. <br />\n<h1>Demos</h1>\rThese demos were created with minimal or no coding using the Physics Helper Behaviors:<br /><br /><a href=\"http://www.andybeaulieu.com/silverlight/4.0/physicshelper4/testpage.html\">DEMOS for Version 4.0</a><br /><br /><a href=\"http://www.andybeaulieu.com/silverlight/3.0/physicshelper3/index.htm\">DEMOS for Version 3.0</a><br /><br /><img src=\"http://www.andybeaulieu.com/Portals/1/Helper4.png\" />    <br />\n<h1>Other Documentation Sources</h1>\r*<a href=\"http://www.farseergames.com/storage/farseerphysics/Manual2.1.htm\">Farseer Physics Manual</a><br />*<a href=\"http://blogs.msdn.com/b/coding4fun/archive/2010/06/15/10025512.aspx\">Creating a Shuffleboard Game for Windows Phone 7 Using Silverlight</a><br />*<a href=\"http://blogs.msdn.com/b/coding4fun/archive/2009/11/30/9896181.aspx\">Creating a Pinball Game in Silverlight</a><br />\n<h1>Notes</h1>\r<ul><li>run the .msi to &quot;install&quot; the Behaviors into Blend 4</li>\n<li>If you want the demo source code, download the latest Change Set under &quot;Source Code&quot;</li>\n<li>remember to use Canvas layout containers, NOT Grid containers!</li>\n<li>when using Raster Images as Physics Objects, be sure that you have a Clean Outline. That is, make sure there are no stray pixels in the background - because the boundary detection algorithm must be able to &quot;trace&quot; the complete outline of the image.</li>\n<li>if your boundaries are not being determined correctly, it may be because of Rotate or Scale Transforms that you applied in Blend. To work around this issue, Group your element into a Canvas and then apply the Physics Behaviors to the Canvas instead of the shape. You can easily Group things into a Canvas in Blend by right-clicking the object and selecting Group Into/Canvas.</li>\n<li>Remember you can set DebugMode on the PhysicsController to see the boundary determined by the helper.</li></ul>\n\n<h1>Coding Techniques</h1>\rBehaviors are great, but it would be difficult to complete a full game using only the behaviors included in the library. So at some point, you will need to add code to do AI, control levels and game state, and other tasks. To do this more advanced coding you will need to get access to the underlying Physics simulation and Physics bodies.  Here are some pointers to get started with that:<br /><br />Once you drop a PhysicsController Behavior onto your main Canvas, you can later get a reference to that Physics Controller (the object that contains the simulation context) in code. Suppose your main Canvas is named &quot;LayoutRoot&quot; then you can get a reference as follows:<br /><br /><pre>PhysicsControllerMain _physicsController = LayoutRoot.GetValue(PhysicsControllerMain.PhysicsControllerProperty) as PhysicsControllerMain; \n</pre><br /><br />After you have a reference to the PhysicsController, you can modify any of the Farseer Physics Geometry or Body objects by getting a reference through the PhysicsObjects dictionary. You can also get a reference to the main Farseer Physics simulation to change things such as gravity (for details on the classes provided by the Farseer Physics Engine, <a href=\"http://farseerphysics.codeplex.com\">go here</a>):<br /><br /><pre>\n_physicsController.PhysicsObjects[&quot;ball&quot;].BodyObject.IsStatic = false;\n_physicsController.Simulator.Gravity = new Vector2(0, 500);\n</pre><br /><br />In the newer versions of Farseer Physics, some properties are nested inside Fixtures - which are the geometry shapes used for collision. You can get at these through the FixtureList...<br /><br /><pre>\n            foreach (PhysicsSprite spr in _physicsController.PhysicsObjects.Values)\n            {\n                    foreach (Fixture f in spr.BodyObject.FixtureList)\n                    {\n                        // grapple hook should collide with both bottom and boxes\n                        f.CollisionCategories = Category.Cat2;\n                        f.CollidesWith = Category.Cat1;\n                    }                \n            }\n</pre><br /><br />You can also handle events, such as the Collision event, raised by the PhysicsController when two physics geometries collide:<br /><br /><pre>\n    _physicsController.Collision += new PhysicsControllerMain.CollisionHandler(_physicsController_Collision);\n\n    void _physicsController_Collision(PhysicsSprite sprite1, PhysicsSprite sprite2)\n    {\n        if (sprite1 == sprShip &amp;&amp; sprite2.Name.StartsWith(&quot;asteroid&quot;))\n        {\n            // blow up the ship\n        }\n    }\n</pre><br /><br />... and you can also get a reference to the oringal XAML UI Element using the uiElement property of the Physics Object:<br /><br /><pre>\nEllipse ball = _physicsController.PhysicsObjects[&quot;ball&quot;].uiElement as Ellipse;\nball.Fill = new SolidColorBrush(Colors.Red);\n</pre><br /><br /><br /><br />The Physics Helper is currently in Beta and is still a work in progress. You can find out more at Andy Beaulieu&#39;s blog: <a href=\"http://www.andybeaulieu.com/Home/tabid/67/EntryID/123/Default.aspx\">Here</a> and <a href=\"http://www.andybeaulieu.com/Home/tabid/67/EntryID/115/Default.aspx\">Here</a><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "silverlight,physics,xna,Cool,",
  "LastEdited": "2011-09-24T08:15:18.957-07:00"
}