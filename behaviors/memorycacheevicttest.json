{
  "ProjectName": "memorycacheevicttest",
  "Title": "MemoryCache Eviction Behavior Tests",
  "Description": "Test program to examine MemoryCache eviction performance under different garbage collection scenarios.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Test program to examine MemoryCache eviction performance under different garbage collection scenarios.<br /><br /><b>Summary</b><br /><br />Please see <a href=\"http://stackoverflow.com/questions/5655439/net-4-memorycache-leaks-with-concurrent-garbage-collection\">the original StackOverflow question</a> for background.<br /><br />Also see the submitted <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/661340/memorycache-evictions-do-not-fire-when-memory-limits-are-reached\">Microsoft Connect issue</a>.<br /><br />The new .Net 4 MemoryCache do not evict objects when size limits are reached in certain cases -- in some cases, to the effect that an OutOfMemoryException can occur.  This simple console test application demonstrates at least one such case.<br /><br />The test routines are setup to be run with different garbage collection settings (set in the app.config), which will effect the behavior of the MemoryCache evictions.  See the code for details on how the tests are run.  Run the code to see actual results.<br /><br />To change the garbage collection options for the test cases (and effect different MemoryCache eviction behaviors):\n<ul><li>Change (in the app.config), gcConcurrent enabled -- true (the default) will display leaky behavoir, false evictions will occur as expected.</li>\n<li>Swap <b>gcConcurrent</b> for <b>gcServer</b>, with <b>enabled = true</b>.  Will behave close to when gcConcurrent is enabled</li>\n<li>Set <b>forceGc = true</b> in the test cases.  This will force evictions, for <u>any</u> gc setting.</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-04-16T10:04:20.63-07:00"
}