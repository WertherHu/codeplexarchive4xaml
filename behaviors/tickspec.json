{
  "ProjectName": "tickspec",
  "Title": "TickSpec: An F# BDD Framework",
  "Description": "A lightweight Behaviour Driven Development (BDD) framework. Describe behaviour in plain text using the Gherkin business language, i.e. given, when, then. Easily execute the behaviour against matching F# tick methods (let ``tick method`` () = true) or attributed C# or F# methods.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Please note TickSpec has now moved to <a href=\"https://github.com/fsprojects/TickSpec\">GitHub</a></b><br /><br /><b>Project Description</b><br />A lightweight Behaviour Driven Development &#40;BDD&#41; framework. Describe behaviour in plain text using the Gherkin business language, i.e. given, when, then. Easily execute the behaviour against matching F&#35; tick methods &#40;let &#96;&#96;tick method&#96;&#96; &#40;&#41; &#61; true&#41; or attributed C&#35; or F&#35; methods.<br /><br /><b>Installation</b><br />Simply reference TickSpec via <a href=\"https://www.nuget.org/packages/TickSpec/\">Nuget</a>, download the assembly or build the project from source.<br />TickSpec works in Visual Studio 2008, 2010 &amp; 2012 and supports both .Net and Silverlight projects.<br /><br /><div class=\"video\" style=\"text-align:Center\"><span class=\"player\"><object height=\"285px\" width=\"320px\"><param name=\"movie\" value=\"http://www.youtube.com/v/UuTL3nj9fIE\"></param><param name=\"wmode\" value=\"transparent\"></param><embed height=\"285px\" width=\"320px\" type=\"application/x-shockwave-flash\" wmode=\"transparent\" src=\"http://www.youtube.com/v/UuTL3nj9fIE\" /></object></span><br /><span class=\"external\"><a href=\"http://www.youtube.com/watch?v=UuTL3nj9fIE\" target=\"_blank\">Launch in another window</a></span></div><br /><br /><b>Feature specification (Plain text)</b><br /><br /><pre>Feature: Refunded or replaced items should be returned to stock\n\nScenario 1: Refunded items should be returned to stock\n\tGiven a customer buys a black jumper\n\tAnd I have 3 black jumpers left in stock \n\tWhen he returns the jumper for a refund \n\tThen I should have 4 black jumpers in stock \n</pre><br /><br /><b>Step definitions (F#)</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">let</span> mutable stockItem = { <span style=\"color:Blue;\">Count</span> = 0 }\n\n<span style=\"color:Blue;\">let</span> [&lt;Given&gt;] ``a customer buys a black jumper`` () = ()\n      \n<span style=\"color:Blue;\">let</span> [&lt;Given&gt;] ``I have (.*) black jumpers left <span style=\"color:Blue;\">in</span> stock`` (n:int) =  \n    stockItem &lt;- { stockItem <span style=\"color:Blue;\">with</span> <span style=\"color:Blue;\">Count</span> = n }\n      \n<span style=\"color:Blue;\">let</span> [&lt;<span style=\"color:Blue;\">When</span>&gt;] ``he returns the jumper <span style=\"color:Blue;\">for</span> a refund`` () =  \n    stockItem &lt;- { stockItem <span style=\"color:Blue;\">with</span> <span style=\"color:Blue;\">Count</span> = stockItem.<span style=\"color:Blue;\">Count</span> + 1 }\n      \n<span style=\"color:Blue;\">let</span> [&lt;<span style=\"color:Blue;\">Then</span>&gt;] ``I should have (.*) black jumpers <span style=\"color:Blue;\">in</span> stock`` (n:int) =     \n    <span style=\"color:Blue;\">let</span> passed = (stockItem.<span style=\"color:Blue;\">Count</span> = n)\n    Debug.Assert(passed)\r\n</pre></div><br /><b>Step definitions (C#)</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> StockStepDefinitions\n{\n   <span style=\"color:Blue;\">private</span> StockItem _stockItem;\n\n   [Given(<span style=\"color:#A31515;\">@&quot;a customer buys a black jumper&quot;</span>)]\n   <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> GivenACustomerBuysABlackJumper()\n   {\n   }\n\n   [Given(<span style=\"color:#A31515;\">@&quot;I have (.*) black jumpers left in stock&quot;</span>)]\n   <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> GivenIHaveNBlackJumpersLeftInStock(<span style=\"color:Blue;\">int</span> n)\n   {\n      _stockItem = <span style=\"color:Blue;\">new</span> StockItem() { Count = n };  \n   }\n\n   [When(<span style=\"color:#A31515;\">@&quot;he returns the jumper for a refund&quot;</span>)]\n   <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> WhenHeReturnsTheJumperForARefund()\n   {\n      _stockItem.Count += 1;\n   }\n\n   [Then(<span style=\"color:#A31515;\">@&quot;I should have (.*) black jumpers in stock&quot;</span>)]\n   <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> ThenIShouldHaveNBlackJumpersInStock(<span style=\"color:Blue;\">int</span> n)\n   {\n      Debug.Assert(_stockItem.Count == n);\n   }\n}\r\n</pre></div><br /><b>Contributing</b><br />Contributions are welcome, particularly examples and documentation. If you have an issues or suggestions please report on the Issues list or Discussions. If you&#39;d like to contribute to the code base please get in touch via e-mail (phill at trelford dot com) or on <a href=\"http://twitter.com/ptrelford\">Twitter</a>.<br /><br />TickSpec builds <a href=\"http://teamcity.codebetter.com/project.html?projectId=project410\">continuously</a> with <a href=\"http://www.jetbrains.com/teamcity/\">TeamCity</a> on <a href=\"http://codebetter.com/kylebaley/2010/02/11/codebetter-ci-server-update-or-how-to-plead-your-case/\">CodeBetter&#39;s CI Server</a>.<br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": ".NET,F#,C#,BehaviorDrivenDesign,testing framework,regex,Reflection,silverlight 4,debugging,bdd,",
  "LastEdited": "2017-10-21T16:19:07.493-07:00"
}