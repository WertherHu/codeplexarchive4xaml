{
  "ProjectName": "collectionextensions",
  "Title": "CollectionExtensions",
  "Description": "Use SortingObservableCollection and stop worrying about ever having to keep your items in order!",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Use SortingObservableCollection and stop worrying about ever having to keep your items in order&#33;<br /><br /><br />Right now, this only contains SortingObservableCollection, which derives from ObservableCollection. This is different from other implementations that I&#39;ve seen because XAML controls like GridView don&#39;t work with you unless you inherit from ObservableCollection (see <a href=\"http://stackoverflow.com/questions/1945461/how-do-i-sort-an-observable-collection/5401474?noredirect=1#comment28453374_5401474\">http://stackoverflow.com/questions/1945461/how-do-i-sort-an-observable-collection/5401474?noredirect=1#comment28453374_5401474</a>).<br /><br />Currently, it&#39;s unit tested to 98% code coverage. I&#39;ve used it in several projects with success. Available on NuGet: <a href=\"https://www.nuget.org/packages/sortingobservablecollection/\">https://www.nuget.org/packages/sortingobservablecollection/</a><br /><br />Sample usage:<br /><br />var collection = new SortingObservableCollection&lt;MyViewModel, int&gt;(Comparer&lt;int&gt;.Default, model =&gt; model.IntPropertyToSortOn);<br /><br />collection.Add(new MyViewModel(3));<br />collection.Add(new MyViewModel(1));<br />collection.Add(new MyViewModel(2));<br />// At this point, the order is 1, 2, 3<br />collection<a href=\"https://collectionextensions.codeplex.com/wikipage?title=0&referringTitle=Home\">0</a>.IntPropertyToSortOn = 4; // As long as IntPropertyToSortOn uses INotifyPropertyChanged, this will cause the collection to resort correctly</div><div class=\"ClearBoth\"></div>",
  "TagList": "windows store,metro,.NET,observablecollection,PCL,",
  "LastEdited": "2014-01-30T10:02:09.403-08:00"
}