{
  "ProjectName": "tcimultilanguage",
  "Title": "WPF Globalization and Multi-language Application",
  "Description": "Multilingual User Interfaces providing support for switching UIs from one language to another. ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Multilingual User Interfaces providing support for switching UIs from one language to another. <br /><img src=\"/projects/tcimultilanguage/e416b5b7-8c2a-49a8-80cc-b7409f822355\" alt=\"shot1.jpg\" title=\"shot1.jpg\" /><br /><img src=\"/projects/tcimultilanguage/e55ac7a4-1e74-4c1f-941b-d43aa911b631\" alt=\"shot2.jpg\" title=\"shot2.jpg\" /><br /><br />This is a trivially simple WPF application whose purpose is to change languages dynamically and to support additional languages without the need for modify the code.  Language support is implemented through a resource only assembly.<br />\n<h2>Design Patterns </h2>\r\n<ul><li> <b>Model View View Model</b>  The Model View ViewModel (MVVM) is an architectural pattern used in software engineering that originated from Microsoft as a specialization of the Presentation Model design pattern introduced by Martin Fowler.<a href=\"https://tcimultilanguage.codeplex.com/wikipage?title=1&referringTitle=Home\">1</a> Largely based on the model–view–controller pattern (MVC), MVVM is a specific implementation targeted at UI development platforms which support the event-driven programming in Windows Presentation Foundation (WPF) and Silverlight on the .NET platforms using XAML and .NET languages. Technically different, but similar, Presentation Model design patterns are available in HTML5 through AngularJS,<a href=\"https://tcimultilanguage.codeplex.com/wikipage?title=2&referringTitle=Home\">2</a><a href=\"https://tcimultilanguage.codeplex.com/wikipage?title=3&referringTitle=Home\">3</a> KnockoutJS,<a href=\"https://tcimultilanguage.codeplex.com/wikipage?title=4&referringTitle=Home\">4</a> Ext JS,<a href=\"https://tcimultilanguage.codeplex.com/wikipage?title=5&referringTitle=Home\">5</a> Vue.js, and for Java the ZK framework (Model-View-Binder). (source: <a href=\"http://en.wikipedia.org/wiki/Model_View_ViewModel\">http://en.wikipedia.org/wiki/Model_View_ViewModel</a>)</li></ul>\n\n<ul><li><b>Dependency Injection</b>  Dependency injection (DI) is a prime technique for building loosely coupled applications. It provides opportunities to simplify code, abstract and handle dependencies between objects, and automatically generate dependent object instances. Dependency injection describes the process of designing applications so that, rather than specifying concrete dependencies within the application at design time and creating the required objects in the code, the application decides at run time what objects it needs, and generates and injects these into the application. (source <a href=\"http://msdn.microsoft.com/en-us/library/ff953186(v=pandp.50).aspx\">http://msdn.microsoft.com/en-us/library/ff953186(v=pandp.50).aspx</a></li></ul>\n\n<ul><li> <b>Command Pattern</b>  In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to represent and encapsulate all the information needed to call a method at a later time. This information includes the method name, the object that owns the method and values for the method parameters. (source <a href=\"http://en.wikipedia.org/wiki/Command_pattern\">http://en.wikipedia.org/wiki/Command_pattern</a>  )</li></ul>\n\n<ul><li><b>Module Discovery</b>  The application uses a discovery technique to locate and decode the languages it will support.</li></ul>\n\n<ul><li><b>Loose Coupling</b> In computing and systems design a loosely coupled system is one in which each of its components has, or makes use of, little or no knowledge of the definitions of other separate components. The notion was introduced into organizational studies by Karl Weick. Sub-areas include the coupling of classes, interfaces, data, and services. (source: <a href=\"http://en.wikipedia.org/wiki/Loose_coupling\">http://en.wikipedia.org/wiki/Loose_coupling</a>)</li></ul>\n<br />\n<h2>Test Driven Development</h2>\r\nThe project contains a suite of unit tests that use the native test libraries available in Visual Studio. <br />\n<h2>Component Assemblies</h2>\r\n<b>CultureResources</b> (a stand-alone assembly which contains one resource file for each language)<br /><b>Application Payload</b> (Separate modules for View, ViewModel, and Model)<br />\n<h2>Build Information</h2>\rThe application is written in C# and is targeted for the .NET 4.5 Framework.<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2014-06-09T08:49:18.95-07:00"
}