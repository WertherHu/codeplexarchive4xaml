{
  "ProjectName": "ironpythonide",
  "Title": "IronPythonIDE",
  "Description": "Iron Python Ide that you can embed in your project to enable scripting support ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Iron Python Ide that you can embed in your project to enable scripting support <br /><br /><br />The primary objective of this project is to provide a minimal basic functional IronPython integration for scripting extensibility into your projects. <br />Most projects that enable scripting would simply suffice with just access to:\n<ul><li>A syntax highlighter.</li>\n<li>An API for common types of dialogs</li>\n<li>An Intellisense Provider</li>\n<li>A debugger:\n<ul><li>Console Access to the debugged code.</li>\n<li>A Variable Watcher. </li>\n<li>A Call Stack.</li></ul></li>\n<li>A Visual Designer. Very low priority for me but still. </li></ul>\n<br />These things will be implemented in the same order. <br />Basically it aims to be same as VBA for your applications except that it is going to use IronPython!<br /><br /><b>Why make an embeddable IronPython IDE</b><br />The conventional wisdom nowadays is that DSLs should be created that are closest to the business logic as possible. I feel that it complicates the problem and nobody wins. The prime reason given for DSLs is that the end user will appreciate the effort. I disagree because: \n<ul><li>DSLs are great for configuration files but not for logic. Embedded DSLs although can carry the complete syntax over when the user feels he has hit a wall he may not feel comfortable asking help on online forums. </li>\n<li>People like to learn things that can be reused. e.g. Making a modified runtime of Javascript although functional will increase the learning curve. Also knowing that the user might be learning some new syntax particular only to your application might make him uncomfortable. </li>\n<li>The same is true for great programmers. They might not agree with your language design. But they are more than likely to agree with Python&#39;s. </li>\n<li>Time and effort required to make your own DSL is high. Designing the language might not be that difficult but making tools for it certainly is. Polishing your DSL IDE to perfection is hard.</li>\n<li>Python has been called &quot;Executable Pseudocode&quot; way too often. Your users will be able to focus on the algorithms. <a href=\"http://www.google.se/search?q=executable+pseudocode\">http://www.google.se/search?q=executable+pseudocode</a></li>\n<li>Python is a highly respected language. There is a general notion that only good programmers learn python. It also ranks high in Tiobe Index. </li></ul>\n<br /><b>License</b><br />The reason the project is LGPL is because this depends highly on code written for SharpDevelop (The BEST ide for IronPython development).  Also I can use other cool OSI Libraries as well. If you believe that this project can be MIT even if it uses GPLed Libraries be sure to guide me :) <br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "IronPython,WPF,.NET 4.0,C#,C# 4.0,python,",
  "LastEdited": "2010-11-01T22:36:21.717-07:00"
}