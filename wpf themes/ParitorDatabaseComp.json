{
  "ProjectName": "ParitorDatabaseComp",
  "Title": "Are two SQL Databases the Same",
  "Description": "As a software product evolves it is inevitable that the underlying database schema changes and you have to make sure any changes you make in the development cycle are made to all other database as the software is distributed.  In all our products we include a database management module that propagates changes out to live databases and ensures the version of the software matches the database schema.\n\nIn the early stages of development though the schema changes made by designers and developers come fast and furious and it can be difficult keeping track of them and propagating them to other databases.  At Paritor we have this problem and find it can be a long winded job comparing databases manually.  There are tools out in the marketplace to analyse databases, show differences and even script any necessary changes but apart from the fact  that they all cost money they all seem to be a \"Sledge Hammer to Crack a Walnut\".  I therefore sat down the other morning and put together a simple utility to open up two database, analyse the differences and report on what it finds.\n\nI wrote it as a WPF application, mainly because I wanted to use the WPF Document namespace to create the report and show it using the WPF Document Viewer.  You could easily write it as a Windows forms and use System.Drawing.Print or even produce a Crystal Report.\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />As a software product evolves it is inevitable that the underlying database schema changes and you have to make sure any changes you make in the development cycle are made to all other database as the software is distributed.  In all our products we include a database management module that propagates changes out to live databases and ensures the version of the software matches the database schema.<br /><br />In the early stages of development though the schema changes made by designers and developers come fast and furious and it can be difficult keeping track of them and propagating them to other databases.  At Paritor we have this problem and find it can be a long winded job comparing databases manually.  There are tools out in the marketplace to analyse databases, show differences and even script any necessary changes but apart from the fact  that they all cost money they all seem to be a &#34;Sledge Hammer to Crack a Walnut&#34;.  I therefore sat down the other morning and put together a simple utility to open up two database, analyse the differences and report on what it finds.<br /><br />I wrote it as a WPF application, mainly because I wanted to use the WPF Document namespace to create the report and show it using the WPF Document Viewer.  You could easily write it as a Windows forms and use System.Drawing.Print or even produce a Crystal Report.<br /><br /><br /><img src=\"/projects/ParitorDatabaseComp/6eded4ed-1df7-4ac5-bdbc-a289800e6582\" alt=\"pic1.jpg\" title=\"pic1.jpg\" /><br /><br /><img src=\"/projects/ParitorDatabaseComp/c7836a49-5629-4bbc-b2b6-c85036d6d40a\" alt=\"pic2.jpg\" title=\"pic2.jpg\" /><br /><br />The program requests details of the two databases to compare and opens up a SQL connection to each. <br /><br /> CollapsePrivate Sub btnAnalyse_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs) Handles btnAnalyse.Click<br />&#39;<br />&#39; Try and open database 1<br />&#39;<br />    Try<br />    Me.lblProgress.Content = &quot;Open &quot; &amp; Me.txtServer1.Text &amp; &quot; &quot; &amp; Me.txtDatabase1.Text<br />    Dim cnnString As String = &quot;Initial Catalog=&quot; &amp; Me.txtDatabase1.Text &amp; &quot;;Connect Timeout=60;Data Source=&quot; &amp; Me.txtServer1.Text &amp; &quot;;user id=&quot; &amp; Me.txtSQLLogin1.Text &amp; &quot;;password=&quot; &amp; Me.txtSQLPassword1.Text<br />    cnn1 = New SqlConnection(cnnString)<br />    cnn1.Open()<br />    Catch ex As Exception<br />    MessageBox.Show(&quot;Connection to Database 1 Failed - &quot; &amp; ex.Message, &quot;SQL Connection&quot;, MessageBoxButton.OK, MessageBoxImage.Error)<br />    Exit Sub<br />    End Try<br /><br />&#39;<br />&#39; Try and open database 2<br />&#39;<br />    Try<br />    Me.lblProgress.Content = &quot;Open &quot; &amp; Me.txtServer2.Text &amp; &quot; &quot; &amp; Me.txtDatabase2.Text<br />    Dim cnnString As String = &quot;Initial Catalog=&quot; &amp; Me.txtDatabase2.Text &amp; &quot;;Connect Timeout=60;Data Source=&quot; &amp; Me.txtServer2.Text &amp; &quot;;user id=&quot; &amp; Me.txtSQLLogin2.Text &amp; &quot;;password=&quot; &amp; Me.txtSQLPassword2.Text<br />    cnn2 = New SqlConnection(cnnString)<br />    cnn2.Open()<br />    Catch ex As Exception<br />    MessageBox.Show(&quot;Connection to Database 2 Failed - &quot; &amp; ex.Message, &quot;SQL Connection&quot;, MessageBoxButton.OK, MessageBoxImage.Error)<br />    cnn1.Close() &#39; Close each connection<br />    Exit Sub<br />    End Try<br />    Me.lblProgress.Content = &quot;&quot;<br /><br />    Analyse     &#39; Call Analyse method differences between databases<br /><br />    Try<br />    cnn1.Close() &#39; Close each connection<br />    cnn2.Close()<br />    Catch ex As Exception<br />    MessageBox.Show(&quot;Connection to Database 2 Failed - &quot; &amp; ex.Message, &quot;SQL Connection&quot;, MessageBoxButton.OK, MessageBoxImage.Error)<br />    End Try<br /><br />End Sub<br /><br />It then creates two lists containing the user table names in each database. The following SQL returns the ID and Name of each table. <br /><br />select id,Name from sysobjects where xType=&#39;U&#39;<br /><br />It then makes a pass through each list checking for an entry in the other list. This lets us know where we have a table in one database but not in the other. I created a couple of private classes to hold details of the issues it finds with each table and declare a dictionary list of these.<br /><br /> CollapsePrivate AnalyseTables As Dictionary(Of String, AnalyseTable)<br /><br /><br />#Region &quot;Private Classes&quot; <br />  Private Class AnalyseTable<br />    Friend ExistsInDatabase1 As Boolean<br />    Friend ExistsInDatabase2 As Boolean<br />    Friend Database1ID As Integer<br />    Friend Database2ID As Integer<br />    Friend AnalyseColumns As New Dictionary(Of String, AnalyseColumn)<br /><br />    Friend Sub New(ByVal Database1ID As Integer, ByVal Database2ID As Integer, ByVal ExistsInDatabase1 As Boolean, ByVal ExistsInDatabase2 As Boolean)<br />        Me.Database1ID = Database1ID<br />        Me.Database2ID = Database2ID<br />    Me.ExistsInDatabase1 = ExistsInDatabase1<br />    Me.ExistsInDatabase2 = ExistsInDatabase2<br />    End Sub<br />  End Class<br /><br />  Private Class AnalyseColumn<br />    Friend Difference As String<br /> <br />    Friend Sub New(ByVal Difference As String)<br />    Me.Difference = Difference<br />    End Sub<br />  End Class<br /> <br />#End Region<br /><br /> <br /><br />As you can see there is a Dictionary list of the class AnalysisTable which holds details of each table including a dictionary list of the AnalysisColumn class which holds details of each column issue. <br /><br /> CollapsePrivate Sub CheckTables()<br />&#39;<br />&#39; Pass through each table in Database 1 and look to see if it exists in<br />&#39; Database 2. Then pass through each table in database 2 and check it exists<br />&#39; in Database 1.<br />&#39;<br />&#39; Create an entry in the collection of tables for each unique table<br />    Dim ds1 As New DataSet<br />    Dim ds2 As New DataSet<br />&#39;<br />&#39; Get list of user tables from database 1<br />&#39;<br />    Try<br />    Dim cmd1 As New SqlCommand(&quot;select id,Name from sysobjects where xType=&#39;U&#39;&quot;, cnn1)<br />    Dim da1 As New SqlDataAdapter(cmd1)<br />    da1.Fill(ds1)<br />    Catch ex As Exception<br />    MessageBox.Show(&quot;Reading tables from Database 1 Failed - &quot; &amp; ex.Message, &quot;SQL Connection&quot;, MessageBoxButton.OK, MessageBoxImage.Error)<br />    Exit Sub<br />    End Try<br />&#39;<br />&#39; Get list of user tables from database 2<br />&#39;<br />    Try<br />    Dim cmd2 As New SqlCommand(&quot;select id,Name from sysobjects where xType=&#39;U&#39;&quot;, cnn2)<br />    Dim da2 As New SqlDataAdapter(cmd2)    <br />    da2.Fill(ds2)<br />    Catch ex As Exception<br />    MessageBox.Show(&quot;Reading tables from Database 2 Failed - &quot; &amp; ex.Message, &quot;SQL Connection&quot;, MessageBoxButton.OK, MessageBoxImage.Error)<br />        Exit Sub<br />    End Try<br />&#39;<br />&#39; For each table in database1 look to see if it exists in database 2<br />&#39; and add the result to the tables collection<br />&#39;<br />    For Each dr1 As DataRow In ds1.Tables(0).Rows<br />    Dim ExistsInDatabase2 As Boolean = False<br />    Dim Database2ID As Integer = 0<br />    For Each dr2 As DataRow In ds2.Tables(0).Rows<br />        If dr2(&quot;Name&quot;) = dr1(&quot;Name&quot;) Then<br />        ExistsInDatabase2 = True<br />        Database2ID = dr2(&quot;ID&quot;)<br />        Exit For<br />        End If<br />    Next<br />    AnalyseTables.Add(dr1(&quot;Name&quot;), New AnalyseTable(dr1(&quot;ID&quot;), Database2ID, True, ExistsInDatabase2))<br />    Next<br />&#39;<br />&#39; For each table in database2 look to see if it exists in the tables collection<br />&#39; If it dosn&#39;t we need to add an item for this table to the tables collection<br />&#39;<br />    For Each dr2 As DataRow In ds2.Tables(0).Rows<br />    If AnalyseTables.ContainsKey(dr2(&quot;Name&quot;)) = False Then<br />        AnalyseTables.Add(dr2(&quot;Name&quot;), New AnalyseTable(0, dr2(&quot;ID&quot;), False, True))<br />    End If<br />    Next<br />End Sub<br /><br /><br />Once the analysis has completed checking for missing tables if then looks though the AnalysisTable collection and where its recorded the table existing in both databases it build a list of the tables columns. The following SQL provides this. <br /><br />select name,xtype,length from syscolumns where id={the id of the table}<br /><br />It performs a similar task on these column lists as it did with the table lists i.e. it checks to see if te columns exists in each list and where they do it looks to see that the data type and length are the same.<br /><br /> CollapsePrivate Sub CheckColumns()<br />&#39;<br />&#39; Where the tables exists in both databases we need to compare the fields in each<br />&#39;<br />&#39;<br />&#39; Pass through each table<br />&#39;<br />For Each TableName As String In AnalyseTables.Keys<br />&#39;<br />&#39; Look to see if the table exists in both databases and if so<br />&#39;<br />    Dim ds1 As New DataSet<br />    Dim ds2 As New DataSet<br />    If AnalyseTables(TableName).ExistsInDatabase1 = True And AnalyseTables(TableName).ExistsInDatabase2 = True Then<br />&#39;<br />&#39; Get list of columns for the table from database 1<br />&#39;<br />      Try<br />    Dim cmd1 As New SqlCommand(&quot;select name,xtype,length from syscolumns where id=&quot; &amp; AnalyseTables(TableName).Database1ID, cnn1)<br />    Dim da1 As New SqlDataAdapter(cmd1)<br />    da1.Fill(ds1)<br />      Catch ex As Exception<br />    MessageBox.Show(&quot;Reading table columns from Database 1 Failed - &quot; &amp; ex.Message, &quot;SQL Connection&quot;, MessageBoxButton.OK, MessageBoxImage.Error)<br />    Exit Sub<br />      End Try<br />&#39;<br />&#39; Get list of columns for table from database 2<br />&#39;<br />      Try<br />    Dim cmd2 As New SqlCommand(&quot;select name,xtype,length from syscolumns where id=&quot; &amp; AnalyseTables(TableName).Database2ID, cnn2)<br />    Dim da2 As New SqlDataAdapter(cmd2)<br />    da2.Fill(ds2)<br />      Catch ex As Exception<br />    MessageBox.Show(&quot;Reading table columns from Database 2 Failed - &quot; &amp; ex.Message, &quot;SQL Connection&quot;, MessageBoxButton.OK, MessageBoxImage.Error)<br />    Exit Sub<br />      End Try<br />&#39;<br />&#39; For each column in database1 table look to see if it exists in database 2 table<br />&#39; and add the result to the tables columns collection collection<br />&#39;<br />      For Each dr1 As DataRow In ds1.Tables(0).Rows<br />    Dim Difference As String = &quot;&quot;<br />    Dim ExistsInDatabase2 As Boolean = False<br />    For Each dr2 As DataRow In ds2.Tables(0).Rows<br />       If dr2(&quot;Name&quot;) = dr1(&quot;Name&quot;) Then<br />          If dr2(&quot;xtype&quot;) &lt;&gt; dr1(&quot;xtype&quot;) Then<br />        Difference = &quot;Type is Different - Database 1 has type of &quot; &amp; dr1(&quot;xtype&quot;) &amp; &quot; Database 2 has type of &quot; &amp; dr2(&quot;xtype&quot;)<br />          End If<br />          If dr2(&quot;length&quot;) &lt;&gt; dr1(&quot;length&quot;) Then<br />        Difference = &quot;Length is Different - Database 1 has length of &quot; &amp; dr1(&quot;length&quot;) &amp; &quot; Database 2 has length of &quot; &amp; dr2(&quot;length&quot;)<br />          End If<br />          ExistsInDatabase2 = True<br />          Exit For<br />        End If<br />    Next<br />    If ExistsInDatabase2 = False Then<br />      Difference = &quot;Does not exists in Database 2&quot;<br />    End If<br />    If Difference &lt;&gt; &quot;&quot; Then<br />      AnalyseTables(TableName).AnalyseColumns.Add(dr1(&quot;Name&quot;), New AnalyseColumn(Difference))<br />    End If<br />      Next<br />&#39;<br />&#39; For each column in database2 table look to see if it exists in database 1 table<br />&#39; If it doesn&#39;t we need to add it to the tables columns collection<br />&#39;<br />      For Each dr2 As DataRow In ds2.Tables(0).Rows<br />    Dim ExistsInDatabase1 As Boolean = False<br />    For Each dr1 As DataRow In ds1.Tables(0).Rows<br />      If dr2(&quot;Name&quot;) = dr1(&quot;Name&quot;) Then<br />        ExistsInDatabase1 = True<br />        Exit For<br />      End If<br />    Next<br />    If ExistsInDatabase1 = False Then<br />      AnalyseTables(TableName).AnalyseColumns.Add(dr2(&quot;Name&quot;), New AnalyseColumn(&quot;Does not exist in Database 1&quot;))<br />    End If<br />      Next<br />  End If<br />Next<br />End Sub<br /><br /><br />After completing the analysis it generates a report. It first creates a flow document and writes details of all the differences found. When complete it converts the flow document into a XPS Fixed Page document so that it can add a header and footer. <br /><br /> CollapsePrivate Sub GenerateReport()<br />&#39;<br />&#39; Produce a Flow Document containing info on the differences found<br />&#39;<br />Dim MemStream As New System.IO.MemoryStream<br />Dim xpsPackage As Package = Package.Open(MemStream, FileMode.CreateNew)<br />Dim FlowDocument As New FlowDocument<br />Dim Section As New Section<br />Dim Para As Paragraph<br />&#39;<br />&#39; Show the databases we have analysed<br />&#39;<br />Para = New Paragraph<br />Section.Blocks.Add(Para)<br />Para.FontSize = 12<br />Para.Inlines.Add(&quot;Paritor Database Compare results for the following databases.&quot;)<br />Para = New Paragraph<br />Section.Blocks.Add(Para)<br />Para.FontSize = 12<br />Para.Inlines.Add(&quot;Database 1:&quot;)<br />Dim Table As Table<br />Dim currentRow As TableRow<br />Table = New Table<br />Table.Columns.Add(New TableColumn)<br />Table.Columns.Add(New TableColumn)<br />Table.Columns(0).Width = New GridLength(50)<br />Table.FontSize = 10<br />Table.RowGroups.Add(New TableRowGroup())<br />currentRow = New TableRow()<br />Table.RowGroups(0).Rows.Add(currentRow)<br />currentRow.Cells.Add(New TableCell(New Paragraph(New Run(&quot;Server&quot;))))<br />currentRow.Cells.Add(New TableCell(New Paragraph(New Run(Me.txtServer1.Text))))<br />currentRow = New TableRow()<br />Table.RowGroups(0).Rows.Add(currentRow)<br />currentRow.Cells.Add(New TableCell(New Paragraph(New Run(&quot;Database&quot;))))<br />currentRow.Cells.Add(New TableCell(New Paragraph(New Run(Me.txtDatabase1.Text))))<br />Section.Blocks.Add(Table)<br />Para = New Paragraph<br />Section.Blocks.Add(Para)<br />Para.FontSize = 12<br />Para.Inlines.Add(&quot;Database 2:&quot;)<br />Table = New Table<br />Table.Columns.Add(New TableColumn)<br />Table.Columns.Add(New TableColumn)<br />Table.Columns(0).Width = New GridLength(50)<br />Table.FontSize = 10<br />Table.RowGroups.Add(New TableRowGroup())<br />currentRow = New TableRow()<br />Table.RowGroups(0).Rows.Add(currentRow)<br />currentRow.Cells.Add(New TableCell(New Paragraph(New Run(&quot;Server&quot;))))<br />currentRow.Cells.Add(New TableCell(New Paragraph(New Run(Me.txtServer2.Text))))<br />currentRow = New TableRow()<br />Table.RowGroups(0).Rows.Add(currentRow)<br />currentRow.Cells.Add(New TableCell(New Paragraph(New Run(&quot;Database&quot;))))<br />currentRow.Cells.Add(New TableCell(New Paragraph(New Run(Me.txtDatabase2.Text))))<br />Section.Blocks.Add(Table)<br />Para = New Paragraph<br />Section.Blocks.Add(Para)<br />Para.FontSize = 12<br />Para.Inlines.Add(&quot;The following tables produced differences&quot;)<br />&#39;<br />&#39; Pass through the table collection and print details of the differences<br />&#39;<br />Dim ChangesExists As Boolean = False<br />For Each TableName As String In AnalyseTables.Keys<br />Dim AnalyseTable As AnalyseTable = AnalyseTables(TableName)<br />If AnalyseTable.ExistsInDatabase1 &lt;&gt; AnalyseTable.ExistsInDatabase2 Or AnalyseTable.AnalyseColumns.Count Then<br />ChangesExists = True<br />Para = New Paragraph<br />Section.Blocks.Add(Para)<br />Para.FontSize = 14<br />Para.Inlines.Add(TableName)<br />If AnalyseTable.ExistsInDatabase1 = False Then<br />Para = New Paragraph<br />Para.FontSize = 10<br />Para.Foreground = Brushes.DarkBlue<br />Section.Blocks.Add(Para)<br />Para.Inlines.Add(&quot; &quot; &amp; &quot;This table does not exits in database 1&quot;)<br />End If<br />If AnalyseTable.ExistsInDatabase2 = False Then<br />Para = New Paragraph<br />Para.FontSize = 10<br />Para.Foreground = Brushes.DarkBlue<br />Section.Blocks.Add(Para)<br />Para.Inlines.Add(&quot; &quot; &amp; &quot;This table does not exits in database 2&quot;)<br />End If<br />For Each ColumnName As String In AnalyseTable.AnalyseColumns.Keys<br />Para = New Paragraph<br />Section.Blocks.Add(Para)<br />Para.FontSize = 10<br />Para.Foreground = Brushes.Maroon<br />Para.Inlines.Add(&quot; &quot; &amp; ColumnName &amp; &quot; &quot; &amp; AnalyseTable.AnalyseColumns(ColumnName).Difference)<br />Next<br />End If<br />Next<br />If ChangesExists = False Then<br />Para = New Paragraph<br />Section.Blocks.Add(Para)<br />Para.FontSize = 12<br />Para.Inlines.Add(&quot;No defferences found&quot;)<br />End If<br />FlowDocument.Blocks.Add(Section)<br />&#39;<br />&#39; Convert Flowdocument to Fixed Page<br />&#39;<br />Dim xpsDocument As New XpsDocument(xpsPackage, CompressionOption.Maximum)<br />Dim paginator As DocumentPaginator = CType(FlowDocument, IDocumentPaginatorSource).DocumentPaginator<br />Dim rsm As New XpsSerializationManager(New XpsPackagingPolicy(xpsDocument), False)<br />paginator = New DocumentPaginatorWrapper(paginator, New Size(768, 1056), New Size(48, 48))<br />rsm.SaveAsXaml(paginator)<br />xpsDocument.Close()<br />xpsPackage.Close()<br />Dim DisplayReport As New DisplayReport<br />DisplayReport.OpenStream(MemStream)<br />DisplayReport.Show()<br />End Sub<br /><br /><br />Finally it calls a second form that contains a WPF Document Viewer control and passes it the document to display. <br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "SQL ,Database Compare,WPF,VB.NET,",
  "LastEdited": "2008-01-17T00:34:18.187-08:00"
}