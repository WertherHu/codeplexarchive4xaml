{
  "ProjectName": "fastwpfgrid",
  "Title": "Fast WPF Grid",
  "Description": "Fast WPF datagrid control designed to work with large datasets, with mandatory data virtualization.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Fast WPF datagrid control designed to work with large datasets, with mandatory data virtualization.<br /><br />\n<ul><li>fast DataGrid control for .NET - WPF</li>\n<li>designed for large data sets</li>\n<li>both columns and rows are defined in model</li>\n<li>uses MVVM design pattern, but (for performance reasons) does not use classic WPF binding</li>\n<li>works only with data virtualization (UI virtualization is not needed as in other WPF datagrid controls)</li>\n<li>for rendering is used <a href=\"http://writeablebitmapex.codeplex.com/\">WriteableBitmapEx</a> library</li></ul>\n\n<h2>Features</h2>\r<ul><li>Fast scrolling and rendering</li>\n<li>Excel-like mouse-drag selecting</li>\n<li>Hide columns/rows</li>\n<li>Frozen columns/rows</li>\n<li>Own rendering, WPF templates are not used. Supported objects - text (with italic, bold attributes), images, image buttons</li></ul>\n<br /><img src=\"/projects/fastwpfgrid/68b78cc1-f348-4363-9100-6328da6ca250\" alt=\"grid1.png\" title=\"grid1.png\" /><br /><img src=\"/projects/fastwpfgrid/87d92a3a-6af5-4ea2-adf8-39ec732743d0\" alt=\"grid2.png\" title=\"grid2.png\" /><br />\n<h2>References</h2>\rFastWPFGrid is used in DbMouse project ( <a href=\"http:///www.jenasoft.com/dbmouse\">http:///www.jenasoft.com/dbmouse</a> )<br />\n<h2>Model implementation</h2>\rGrid control is bind to model, which controls displayed data. Below is example of model implementation.<br /><br /><pre>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing FastWpfGrid;\n\nnamespace FastWpfGridTest\n{\n    public class GridModel1 : FastGridModelBase\n    {\n        private Dictionary&lt;Tuple&lt;int, int&gt;, string&gt; _editedCells = new Dictionary&lt;Tuple&lt;int, int&gt;, string&gt;();\n        private static string[] _columnBasicNames = new[] { &quot;&quot;, &quot;Value:&quot;, &quot;Long column value:&quot; };\n\n        public override int ColumnCount\n        {\n            get { return 100; }\n        }\n\n        public override int RowCount\n        {\n            get { return 1000; }\n        }\n\n        public override string GetCellText(int row, int column)\n        {\n            var key = Tuple.Create(row, column);\n            if (_editedCells.ContainsKey(key)) return _editedCells[key];\n\n\n            return String.Format(&quot;{0}{1},{2}&quot;, _columnBasicNames[column % _columnBasicNames.Length], row + 1, column + 1);\n        }\n\n        public override void SetCellText(int row, int column, string value)\n        {\n            var key = Tuple.Create(row, column);\n            _editedCells[key] = value;\n        }\n\n        public override IFastGridCell GetGridHeader(IFastGridView view)\n        {\n            var impl = new FastGridCellImpl();\n            var btn = impl.AddImageBlock(view.IsTransposed ? &quot;/Images/flip_horizontal_small.png&quot; : &quot;/Images/flip_vertical_small.png&quot;);\n            btn.CommandParameter = FastWpfGrid.FastGridControl.ToggleTransposedCommand;\n            btn.ToolTip = &quot;Swap rows and columns&quot;;\n            return impl;\n        }\n    }\n}\n\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2015-03-23T15:36:02.86-07:00"
}