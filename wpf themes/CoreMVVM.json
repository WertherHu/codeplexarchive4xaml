{
  "ProjectName": "CoreMVVM",
  "Title": "CoreMVVM - A Simple MVVM Framework",
  "Description": "CoreMVVM is a simple basic MVVM framework that covers the *most* common development scenarios. Its a good place to start with MVVM. Its not as barebones as the MVVM Toolkit and neither is it as heavyweight as Prism\\Cinch.\n\nDeveloped in C#.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />The MVVM Toolkit is a pretty barebones template for MVVM and is a good place to start with if you are new to this pattern. Over time, as i played around with this toolkit, the library grew in size. Its been useful for me - so i thought i might as well share it out :) .. The code is an extension of the Toolkit and pulls in a lot of concepts\\code from other fameworks out in the wild like Cinch, Prism... Will have a subsequent post on these frameworks. So getting back to this library, it includes support for:<br />\n<ul><li>Delegating Commands\\Keybinding </li>\n<li>Messaging between VM&#39;s </li>\n<li>Handling events as commands with attached behaviors </li>\n<li>Handling dialogs (and more) as services</li></ul>\n<br />A very simple sample is also included to show the various parts in action. (Nothing fancy)<br /><br /><img src=\"http://blogs.msdn.com/photos/llester/images/9904929/original.aspx\" /><br /><br />To make the writing of commands with Attached behaviors you could use Damian&#39;s code snippet <a href=\"http://cid-09f63fc7ac065e5e.skydrive.live.com/self.aspx/p%7C0p%20Samples/CommandBehaviorSnippet.vsi\">installer</a><br />Once you install, edit the snippet to include <b>CommandParameter = e;</b> at the beginning of the last function <b>(On$EventType$)</b> in the file. The file is placed under <i>Documents\\Visual Studio 2008(10)\\Code Snippets\\Visual C#\\My Code Snippets</i>. The shortcut for its usage in code is <b>cmdbehavior</b><br /><br />You would need to fill 4 parts in the snippet:<br />\n<ul><li>CommandAction - Descriptive name of what the command performs </li>\n<li>BehaviorName - Attached behavior name (this hooks the event) </li>\n<li>ControlType - Type of control to which the command will attach </li>\n<li>EventName - Name of the control event that the behavior hooks up</li></ul>\n<br />As mentioned earlier the library several frameworks were used as references\n<ul><li>Cinch - mainly for the Services and the necessary plumbing</li>\n<li>Josh\\Marlon&#39;s Mediator library</li>\n<li>Prism </li>\n<li>Mark&#39;s MVVM Helpers</li></ul>\n<br />Hopefully you&#39;ll find the library useful. Also, this library by no means covers all possible scenarios. Have fun coding.<br /><br />Aside from MVVM, an interesting Test API library is <a href=\"http://testapi.codeplex.com/\">TestAPI</a><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF frameworks,MVVM,WPF framework,Model View ViewModel,MVC,",
  "LastEdited": "2009-10-26T17:17:51.89-07:00"
}