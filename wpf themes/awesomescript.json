{
  "ProjectName": "awesomescript",
  "Title": "AwesomeScript",
  "Description": "A JavaScript library that makes doing complicated things on a web page yourself. AwesomeScripts tries to get you to treat the HTML page as a declarative way of creating your UI, much like WPF and XAML.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong><span style=\"color:#4f81bd; font-size:large\">AwesomeScript is now .NinJa (dotNinja)</span></strong></p>\r\n<p>A new version of AwesomeScript, now know as dotNinja, is being released soon. This current project will be closed soon with a new one started.</p>\r\n<p><strong>What is AwesomeScript?</strong></p>\r\n<p>AwesomeScript is a JavaScript framework with Intellisense in mind. It&rsquo;s a wrapping framework that exposes methods and properties of HTML elements through property functions, fields and events. The key component to AwesomeScript is the reference functions.\r\n Referencing functions are dollar signs ($) followed by an element or object type. To refer to an anchor with the id &ldquo;myanchor&rdquo;, you simply use $Anchor(&quot;myanchor&quot;). If you are using Visual Studio and you have included Awesome-vsdoc.js in the same\r\n directory as your Awesome.js, then Intellisense will display several functions and fields associated with the Anchor wrapper object, including Href(), Enabled() and Text().</p>\r\n<p>Not only does AwesomeScript provide excellent Intellisense support, but it makes JavaScript feel like it has a stronger type language and it makes reading the code much easier. Code such as document.getElementById('input_id') is hard to distinguish between\r\n referencing a text box input, a checkbox or any of the other input tags. But $CheckBox(&lsquo;input_id&rsquo;) makes it very clear that we are working with a CheckBox.</p>\r\n<p><strong>How is this different from other scripting frameworks?</strong></p>\r\n<p>This framework was built with Intellisense in mind. The framework also takes an Object Oriented Programming approach to wrapping the HTML elements so that they can be created as normal UI elements and not simply parts of an HTML DOM. It&rsquo;s much easier\r\n to think of an input field as a TextBox and retrive the Text() property rather than the value. It&rsquo;s a different way of web programming but it feels more natural for those who are trying to develop desktop style applications on a web platform. If you&rsquo;re\r\n not using an editor that supports JavaScript Intellisense, you may not like working with AwesomeScript.</p>\r\n<p>But AwesomeScript provides much more than Intellisense. It provides a stronger event model that supports parameterized function calls, event arguments passed to event handlers, Ajax (what framework doesn&rsquo;t), querying arrays (similar to LINQ) and several\r\n controls.</p>\r\n<p>Finally, AwesomeScript allows users to easily extend elements with the Extensions feature on every major element type. You simply use &lt;ElementType&gt;.Extensions.Add(newType) where newType is the constructor of a new type. The newType function will be\r\n passed a reference to the element as the first parameter. From here you can do whatever you please with the element.</p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>How to read the documentation</strong></p>\r\n<p>Before you go diving in, here&rsquo;s a few things to keep in mind about my documentation style. Each page will have the name of the object or topic. Objects will be followed by &ldquo;inheritance&rdquo;. There is no true inheritance in JavaScript the way\r\n most might be used to, but any &ldquo;inheritance&rdquo; object that follows an object can be guarantee to have the same applicable documentation.</p>\r\n<p>An example is the Anchor. The Anchor has a few fields, functions and property functions unique to it, such as Href and Target. These are listed on its page, but the Anchor also has things such as BackgroundColor and Bold, these are not unique to the Anchor,\r\n but common to all Elements. Thus, the top of the Anchor page will show Anchor &gt; Element. Clicking on Element will take you to the documentation that will also apply to the anchor. This is to reduce redundant writing and to help you find what you specifically\r\n want.</p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>Compatibility</strong></p>\r\n<p>So far, the core of AwesomeScript (Awesome.js) has been thoroughly tested on 4 major browsers:</p>\r\n<p>Google Chrome</p>\r\n<p>FireFox 4</p>\r\n<p>Internet Explorer 8 and 9</p>\r\n<p>Safari</p>\r\n<p>Older browser may have issues and are not guaranteed to be compatible. Awesome was designed to take advantage of only current day browsers that are easily and widely available. This is a bold move and the company I work for has even pushed its clientele\r\n to move forward and use the latest browsers rather than spending copious amounts of development time to cater to the small group that refuses to use the latest software.</p>\r\n<p><span style=\"color:#4f81bd; font-size:small\"><strong><br>\r\n</strong></span></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "JavaScript Framework,javascript,ASP.NET,ajax,html,Awesome,AwesomeScript,",
  "LastEdited": "2012-06-15T09:50:40.67-07:00"
}