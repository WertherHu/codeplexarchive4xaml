{
  "ProjectName": "Ribbon",
  "Title": "A Professional Ribbon control",
  "Description": "A project on an Office-like Ribbon control.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<div style=\"padding:10px; background:lightpink; font-size:12pt\">\r\n<h2>We have moved!</h2>\r\nThis website will become READ ONLY on November 27th 2017. Therefore, we have moved to new site. This site is no more maintained. Please visit new site at:<br>\r\n<a href=\"https://github.com/RibbonWinForms/RibbonWinForms\">https://github.com/RibbonWinForms/RibbonWinForms</a>.<br>\r\nThanks.<br>\r\n<br>\r\nby adriancs, November 23, 2017</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Project Description</strong><br>\r\nA project on an Office-like Ribbon control.</p>\r\n<p>&nbsp;</p>\r\n<h2><del>The development/support of this project is continued at new site, please visit:\r\n<a href=\"http://officeribbon.codeplex.com\">http://officeribbon.codeplex.com</a></del></h2>\r\n<p>&nbsp;</p>\r\n<h2>Orb and QuickAccess toolbar now on Non-Client Area!</h2>\r\n<p><strong>Important</strong>: Read the guide for <a href=\"http://www.menendezpoo.com/a.php?h=a49fa2cc7a3523\">\r\nembedding the ribbon on the non-client area</a>.<br>\r\n<br>\r\n<br>\r\nThis is a Microsoft Office 2007 Ribbon Bar - like control for .NET, as all of the code in\r\n<a href=\"http:www.menendezpoo.com\">my site</a>, is <strong>free and open source</strong>. At the time this is being written, is yet the best ribbon available for free.<br>\r\n<br>\r\nPlease refer to my site/blog <a href=\"http://www.menendezpoo.com\">www.menendezpoo.com</a> for more on usage, development and news about this project<br>\r\n<br>\r\n<img title=\"ribbon_0.4.001.jpg\" src=\"/projects/Ribbon/bcffb1ae-8553-4424-9895-33f0950e8030\" alt=\"ribbon_0.4.001.jpg\"><br>\r\n<br>\r\n<img title=\"ribbon_0.4.005.jpg\" src=\"/projects/Ribbon/31eeaf36-507a-43c9-abcf-9a466b7b8f8d\" alt=\"ribbon_0.4.005.jpg\"></p>\r\n<h1>Introduction</h1>\r\n<p>Because of the lack of good free Ribbon controls on the web, I decided to write one myself. I've analyzed previous work on ribbon-controls. Unfortunately, most existent controls are merely bad tries. Why? well, some lack nice rendering, some lack resizing\r\n features, some lack almost everything. Of course, well developed Ribbon controls are available at a price.\r\n<strong>This ribbon is free</strong>.</p>\r\n<h2>Some of the design goals</h2>\r\n<p><strong>Performance</strong> - This ribbon is contained on a Control window, and every element inside of it is managed as a bunch of bounds inside the control, just as the ToolStrip control does. Altough this is difficult to manage from the ribboon's inside\r\n code, this is a way to keep it at the best performed ribbon. Believe me, download the demo, run it and resize the window. It peforms beautifully.<br>\r\n<br>\r\n<strong>Consistency with Office's ribbon</strong> - I read once about Jakob Nielsen saying that most users prefer the programs they use look just like word, excel or powerpoint. This is quite obvious, because people use this software every day. Providing visual\r\n consistency with the office's ribbon is very important because people already know what to expect from a ribbon-like interface. I've tried to every element in the ribbon look and behave exactly like it does in the Office's ribbon.<br>\r\n<br>\r\n<strong>Ease of use for programmers</strong> - The naming of components is consistent with most WinForms names, even more with the ToolStrip elements. Property, event and method names for similar elements are named just like in the ToolStrip technology items.<br>\r\n<br>\r\n<strong>Designer support</strong> - I will be adding more and more designer support so you can manage the ribbon 100% from the designer.</p>\r\n<h1>Using the Ribbon</h1>\r\n<p>The ribbon is located in the System.Windows.Forms namespace, just as every other control, I think it's annoying to use controls named as MyCoolFirm.MyCoolNameSpace.MyCoolSubNameSpace, and so on (Please do that only for bussiness objects).<br>\r\n<br>\r\nYou can add a reference to the compiled dll: System.Windows.Forms.Ribbon.dll or you can directly copy the source files to a folder on your project. The code is currently designed so you can just copy the source files, it doesn't need any extra resources.</p>\r\n<h1>Hands on: Quick Guide</h1>\r\n<p>The ribbon is composed mainly by three kind of elements, the tabs, the panels on the tabs (other developers call them groups) and the items inside the panels.<br>\r\n<br>\r\n<img title=\"ribbontab.gif\" src=\"/projects/Ribbon/2c4e0192-00cd-4985-aee3-824eb1d95bfc\" alt=\"ribbontab.gif\"><br>\r\n<br>\r\n<img title=\"ribbonpanel.gif\" src=\"/projects/Ribbon/3065cec2-aac4-4f30-9281-5f4a58e9d0da\" alt=\"ribbonpanel.gif\"><br>\r\n<br>\r\n<img title=\"ribbonitems.gif\" src=\"/projects/Ribbon/b8e1d145-c3cd-443e-8e0b-525478ce5889\" alt=\"ribbonitems.gif\"><br>\r\n<br>\r\nThese elements are represented by RibbonTab, RibbonPanel and RibbonItem types. RibbonItem is an abstract class that provides basic functionality for any item hosted on a RibbonPanel or on a RibbonDropDown.<br>\r\n<br>\r\nYou can add tabs from the smart tag of the Ribbon, you can add panels to the tab by selecting the tab and calling the &quot;AddPanel&quot; verb on the bottom part of the property grid.<br>\r\n<br>\r\nThe elements on the ribbon are resized according to the available space for the ribbon. This is a key feature of the ribbon. It tries to bring all possible commands to the screen by resizing them, instead of hiding them on an overflow button like the old ToolStrip.<br>\r\n<br>\r\nI treat this as three kinds of sizes: Large, Medium and Compact. An additional size is used for panels because panels can be collapsed, and then they will adopt the Overflow size.<br>\r\n<br>\r\n<img title=\"ribbonpanelsizes.gif\" src=\"/projects/Ribbon/a1f2939b-3669-4831-997d-1e4cdd4a7fce\" alt=\"ribbonpanelsizes.gif\"><br>\r\n<br>\r\nNote: There's no way to directly affect the bounds of the elements on the ribbon, the size will always be determined the layout engine inside the ribbon. In fact, the layout depends on two factors: the available horizontal space on the ribbon and the size modes\r\n on the items.<br>\r\n<br>\r\nIf there's no available space on the ribbon for a panel, panel will be collapsed. If all panels are collapsed and space is not available yet, a scroll button will appear so user can scroll the panels horizontally.<br>\r\n<br>\r\n<img title=\"ribbonsizes.gif\" src=\"/projects/Ribbon/8e9fe9bb-e14a-4097-89dd-693aafd05300\" alt=\"ribbonsizes.gif\"></p>\r\n<h2>Buttons</h2>\r\n<p>There's only one type of button: RibbonButton. It can be set to three styles:<br>\r\n<br>\r\n<img title=\"ribbonbuttonstyles.gif\" src=\"/projects/Ribbon/fcf2510a-3fc3-4499-ae56-87426544b71a\" alt=\"ribbonbuttonstyles.gif\"><br>\r\n<br>\r\n<br>\r\nRibbonButton adds the SmallImage property so you can set the image shown when button is in medium or compact mode. Although it's not restricted by functionality, it's highly recommended to use just 32 x 32 pixels for Image property and 16 x 16 for SmallImage\r\n property. Results are unexpected when sizes are different.<br>\r\n<br>\r\nNote: Use the DropDownItems property to add items to the dropdown of the button.<br>\r\n<br>\r\nThe appearance of the buttons vary through size modes.</p>\r\n<h2>ItemGroups</h2>\r\n<p>The buttons like those on the Font and Paragraph panels are RibbonButton buttons hosted inside a RibbonItemGroup group.<br>\r\n<br>\r\n<img title=\"ribbonitemgroup.gif\" src=\"/projects/Ribbon/4d5fb797-bae5-4bcc-b9cb-0698e41aceec\" alt=\"ribbonitemgroup.gif\"><br>\r\n<br>\r\n<br>\r\nItems added to RibbonItemGroup will always be measured and treated in compact size mode.<br>\r\n<br>\r\nImportant: If a RibbonPanel will host RibbonItemGroup objects, you must set the RibbonPanel.FlowsTo property to Right. The layout on those items are treated differently because groups flow as rows.</p>\r\n<h2>Lists</h2>\r\n<p>Lists are represented by RibbonButtonList and provide two collections: Buttons and DropDownItems. This is because the list can be scrolled on the ribbon and can dropdown more items. The dropdown of list supports resizing by a grip on the south east corner.<br>\r\n<br>\r\nIf you want the buttons on the list to be shown on the dropdown, you will have to explicitly add another list with those buttons to the DropDownItems property.</p>\r\n<h2>Separators</h2>\r\n<p>Separators are represented by RibbonButtonSeparator and provides the well known separator functionality. When in a dropdown, separators can actually contain text. When they contain text, they will be rendered differently.<br>\r\n<br>\r\n<img title=\"ribbondropdown.gif\" src=\"/projects/Ribbon/b4c52c79-8d42-4e68-b7aa-478c9051ce4e\" alt=\"ribbondropdown.gif\"></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,Controls,monitoring,Windows Forms,Ribbon,UI Controls,UI,Ribbon winforms,Controlli Windows,WPF,WPF Ribbon,Ribbonbar,",
  "LastEdited": "2017-11-23T18:37:57.25-08:00"
}