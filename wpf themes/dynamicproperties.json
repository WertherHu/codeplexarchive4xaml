{
  "ProjectName": "dynamicproperties",
  "Title": "Dynamic Properties",
  "Description": "This project allows you easily add dynamic properties to any existing instance without creating derived type in .NET (C# or VB.NET). This approach is similar as attached dependency properties in WPF. It can be used as attribute system for complex definition of data model behavior or just to create temporary properties on existing object model.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Dynamic Properties (for .NET)</h1>\r\n<h2>What is project Dynamic Properties?</h2>\rThis project allows you easily add dynamic properties to any existing instance without creating derived type in .NET &#40;C&#35; or VB.NET&#41;. This approach is similar as attached dependency properties in WPF. It can be used as attribute system for complex definition of data model behavior or just to create temporary properties on existing object model.<br />\n<h2>How can I use it?</h2>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// define dynamic property for any reference type - &quot;bool&quot; property for &quot;Customer&quot; type</span>\n<span style=\"color:Blue;\">var</span> dpMyProperty = <span style=\"color:Blue;\">new</span> DynamicProperty&lt;Customer, <span style=\"color:Blue;\">bool</span>&gt;(<span style=\"color:#A31515;\">&quot;MyProperty&quot;</span>, defaultValue: <span style=\"color:Blue;\">false</span>);\n\n<span style=\"color:Green;\">// set property value to any instance</span>\ndpMyProperty.Set(customer, <span style=\"color:Blue;\">true</span>);\n\n<span style=\"color:Green;\">// and read it when you need it</span>\n<span style=\"color:Blue;\">bool</span> isSelected = dpMyProperty.Get(customer);\r\n</pre></div>\n<h2>Why should I use it?</h2>\rThere is lot of situations when you need to add some properties to classes in C# or VB.NET. In most cases you can simply add property to class definition or create derived class type with new property or use something like decorator design pattern. But it is not always possible to do. For example:\n<ul><li>Class definition is <b>sealed or in assembly of 3rd party libraries</b> (including .NET Framework) so you cannot change it.</li>\n<li>Adding properties to class is impossible because there are lot of other depending <b>assemblies that do not expect changes</b> of classes design.</li>\n<li>You don&#39;t want to change class because <b>new property is used only is some specific parts of application</b>.</li></ul>\nIn all of these cases you can use dynamic properties. It allows you to easily create property definition and then assign value of this property to any reference type instance without changing its code or creating derived class.<br />\n<h2>Download with Nuget</h2>\rYou can download Dynamic Properties binaries as <b>Nuget package</b>. <br />Name: <b>DynamicProperties</b> (<a href=\"http://nuget.org/List/Packages/DynamicProperties\">http://nuget.org/List/Packages/DynamicProperties</a>)<br />But if you can&#39;t use Nuget for some reason (or simply you don&#39;t like it) then you can download binaries or source code manually of course.<br />\n<h2>Is this something like attached dependency property in WPF?</h2>\rYes. In Windows Presentation Foundation there is feature called <b>attached dependency property</b> that you can use for defining new properties on existings data types. But there is one major restriction - this can be used only on types derived from <i>DependencyObject</i> which is not possible to do in most cases. But <b>Dynamic Properties</b> can be used with <b>any reference data type</b>.<br />\n<h2>What are features of Dynamic Properties?</h2>\r<ul><li>Dynamic properties objects are generic so you can use properties manipulation methods as <b>strongly-typed with full intellisense</b>.</li>\n<li>You can attach callback to <b>OnChanged</b> event on <b>specific object</b> or <b>globally</b> on property definition so you can react to every change of specific dynamic property.</li>\n<li>You can use 3 types of default values for dynamic properties:\n<ol><li><b>default</b> - null for reference types, default(T) for value types</li>\n<li><b>static</b> - default value is shared</li>\n<li><b>delegate</b> - you code take care about providing default value instance</li></ol></li>\n<li>Dynamic properties are linked to target objects with weak refence so it will be automatically disposed by GC when your code stop using it - just as you expected with normal objects.</li>\n<li>You can use your own specific instance of <b>Extender</b> class responsible for storing values of dynamic properties in memory. So you can use Dynamic Properties in isolated part of your application or independently in several places. But in most cases you do not need to know this and use only default global storage in <b>Extender.Global</b>.</li>\n<li>Methods of Dynamic Properties are <b>thread safe</b>. That means you can use it for example to notify UI about progress of processing collection in different thread.</li>\n<li>Simple usage, only one assembly, no useless namespace prefix - only <i>DynamicProperties</i> namespace.</li>\n<li>Unit tests included!</li></ul>\n\n<h2>Quick how to samples</h2>\r<h3>How to subscribe for OnChange event?</h3>\rSubscribe global &quot;OnChange&quot; event to recieve all property changes:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> dpMyProperty = <span style=\"color:Blue;\">new</span> DynamicProperty&lt;Customer, <span style=\"color:Blue;\">int</span>&gt;(<span style=\"color:#A31515;\">&quot;MyProperty&quot;</span>, OnChange);\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> OnChange(Customer target, DynamicPropertyChangedParams&lt;Customer, <span style=\"color:Blue;\">int</span>&gt; args) {\n    <span style=\"color:Green;\">// your code here</span>\n}\r\n</pre></div>Or subscribe local &quot;OnChange&quot; event so you recieve property changes for specific object instance:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\nExtender.Global.RegisterOnChanged(someInstance, dpMyProperty, OnChange);\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> OnChange(Customer target, DynamicPropertyChangedParams&lt;Customer, <span style=\"color:Blue;\">int</span>&gt; args) {\n    <span style=\"color:Green;\">// your code here</span>\n}\r\n</pre></div>\n<h3>How to check if value is defined?</h3>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">int</span> result;\n<span style=\"color:Blue;\">if</span>(dpMyProperty.TryGet(someInstance, <span style=\"color:Blue;\">out</span> result))\n{\n    <span style=\"color:Green;\">// value is defined!</span>\n}\r\n</pre></div>\n<h2>Available samples</h2>\r<h3>Sample: ColoredStrings</h3>\rSimple console application shows how to attach dynamic property to string.<br /><img src=\"/projects/dynamicproperties/744432a2-629a-4ffa-9a20-a9fd7d98f8cb\" alt=\"coloredStrings.png\" title=\"coloredStrings.png\" />\n<h3>Sample: AsyncProgressNotify</h3>\rThis WPF project contains simple &quot;Task&quot; class with only &quot;Name&quot; property. There is also asynchnrounous processor of this task that use dynamic property to let UI know about its progress.<br /><img src=\"/projects/dynamicproperties/7d765124-e71b-4273-b373-2b90bde773fe\" alt=\"asyncProccess.png\" title=\"asyncProccess.png\" /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-09-24T09:17:55.56-07:00"
}