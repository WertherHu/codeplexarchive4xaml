{
  "ProjectName": "DotChess",
  "Title": "DotChess",
  "Description": "Play chess against yourself in WinForms or WPF: A demonstration of Strict MVC architecture.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Play chess against yourself in WinForms or WPF&#58; A demonstration of Strict MVC architecture.<br /><br /><b>Overview</b><br /><br />DotChess is a pair of applications that are an exercise intended to:<br /><br />1. Serve as a demonstration for the Strict Model-View-Controller architectural pattern.<br />2. Model the game of chess as a demonstration of object oriented design.<br /><br />What DotChess is not:<br /><br />- It is not intended to be used to play chess competitively.  You can&#39;t play against the computer and you can&#39;t play over a network (although network play could easily be added).<br />- It is NOT a demonstration of amazing GUI graphics.  This project was not intended to compete with games such as Microsoft&#39;s Chess Titans and I do not anticipate spending the time that would require.<br /><br /><b>Contents</b><br /><br />DotChess ultimately consists of two installers:  One installs a WinForms version of DotChess and the other installs a WPF version.  The codebase has been factored so that any commonality between the two programs is programmed only once.  That is where Strict MVC architecture comes in.<br /><br /><b>Strict MVC architecture</b><br /><br />Strict MVC is a variation of the popular MVC architectural design pattern that has been around since the early days of Smalltalk.  This pattern establishes a separation of concerns.  It consists of:<br />\n<ul><li>Model (M): The application domain that is is updated by the controller.</li>\n<li>View (V): The presentation interface which processes domain changes and shows them on the user interface.</li>\n<li>Controller (C):  The visible controls and user input.  Each GUI has its own view.</li></ul>\n<br />The Strict MVC variation of MVC introduces one more concern:<br />\n<ul><li>Model base:  A read-only subset of the domain that is accessed by the view.</li></ul>\n<br />The C# language provides the constructs necessary to implement such a pattern.  The model base provides accessors along with events that will notify the view when it needs to be updated while denying any attempt by the controller to update the model.  The controller provides its user interface to the view for updating while hiding its own knowledge of the model.  The model provides an API to the application domain while hiding the model base&#39;s indirect knowledge of the view.<br /><br />Below is the class diagram of the WinForms version of DotChess.  The model consists of ChessModel with its base ChessModelBase.  The view is named ChessView.  The controller is named ChessController.<br /><br /><img src=\"/projects/DotChess/57a6a58a-08a2-4bbb-a539-14134da8f691\" alt=\"WinClasses-v0.6.0-075.png\" title=\"WinClasses-v0.6.0-075.png\" /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "game,architecture,Chess,",
  "LastEdited": "2013-01-09T09:50:30.02-08:00"
}