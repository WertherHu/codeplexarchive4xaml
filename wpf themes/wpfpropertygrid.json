{
  "ProjectName": "wpfpropertygrid",
  "Title": "WPF PropertyGrid Control",
  "Description": "WPF PropertyGrid Control",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>WPF PropertyGrid Control</h1>\r\n<b>Update</b>: The project has moved to GitHub. You can get access to the most recent sources <a href=\"https://github.com/DenisVuyka/WPG\">here</a>.<br /><br />WPF PropertyGrid control follows the .Net Windows Forms and Expression Blend PropertyGrid paradigms. It was written in the way to reduce development efforts for customization and supports a variety of features required to cover different scenarios.<br /><br />The most remarkable features of WPF PropertyGrid controls are as follows:<br />\n<ul><li>Categorized properties view</li></ul>\n<img src=\"/projects/wpfpropertygrid/c44949e6-1009-4d0c-b092-18eaa68eb090\" alt=\"screenshot1.png\" title=\"screenshot1.png\" /><br />\n<ul><li>Alphabetical properties view</li></ul>\n<img src=\"/projects/wpfpropertygrid/743976d7-a90d-4a98-abed-f3444c5aa2d0\" alt=\"screenshot2.png\" title=\"screenshot2.png\" /><br />\n<ul><li>Extended editor tabs (<b>unique feature</b>)</li></ul>\nThis is a unique feature allowing you opening property editors within separate property tabs. You can have a “Basic” or inline editor covering most common scenarios and “Extended” editor providing more complex UI. Each extened editor occupies full separate Tab and can be closed by user (there’s a way restricting tabs to be closed if required). It is supported natively by default Tabbed Layout however PropertyGrid model allows you implementing your own Views that suport this very feature.<br /><br />For example entering &quot;extended&quot; mode for &quot;Login&quot; property:<br /><br /><img src=\"/projects/wpfpropertygrid/9747b76c-7bd9-489c-8d23-1167e7ad192d\" alt=\"screenshot3.png\" title=\"screenshot3.png\" /><br /><br />Editing property value within a separate property tab that can be closed at any moment:<br /><br /><img src=\"/projects/wpfpropertygrid/a1297e38-3945-4ad8-91ba-b770412006fb\" alt=\"screenshot4.png\" title=\"screenshot4.png\" /><br /><br />Upon closing the &quot;extended editor&quot; tab user is navigated back to the categorized or alphabetical view:<br /><br /><img src=\"/projects/wpfpropertygrid/32853b73-5e3e-456b-bb9f-75e4b7b00da0\" alt=\"screenshot5.png\" title=\"screenshot5.png\" /><br /><br /><i>Note that extended editor tab can contain any type of the UI. It is possible to provide rich property editing capabilities and avoid modal dialogs approach. </i><br />\n<ul><li>Dialog Editors</li></ul>\nDialog editors are also supported. You can embed dialog logic into your custom editors or intercept dialog calls in order to provide external editing support within your application.<br />\n<ul><li>Multiple objects selection</li></ul>\nBoth single and multiple objects selection is fully supported. Categories (if property grid is set to Categorized mode) preserve their viewstates when changing amount of objects selected or switching between different objects. MergablePropertyAttribute is supported for scenarios when there’s a need to exclude some of the properties from multi-selection editing.<br />\n<ul><li>Rich infrastructure for managing property and category editors</li></ul>\nThere are several ways declaring editors for your business objects or view models. You can declare an editor for a Type, for single property of the Type or an editor for the whole category. Editors can be declared via XAML, code behind or custom attributes. Besides edited value each editor has access to owning property grid control and all the metadata (custom attributes the edited property is marked with). It is easy binding controls in editor template directly to metadata values (like marking property with some Range attribute and binding Slider editor values to Range.Minimum and Range.Maximum). Category Editor control parts can be easily bound to different properties directly from XAML.<br /><br />There is a set of default common types editors. The ways introducing custom editors for properties and categories as long as organizing editor control templates are extremely easy and vary.<br />\n<ul><li>More Access Over Property Items and Categories</li></ul>\nIt is possible gaining explicit control over properties regardless initial property state. You can control whether and when to show or hide any property (especially usefull when introducing conditionally visible properties or complex editors). The same goes for Categories. PropertyGrid provides effient infrastucture accessing properties and items by names either from code behind or XAML. Object model allows you configuring properties and categories easily. There is a set of attributes that allow defining property orders, controlling visibility of properties/categories without having access to them and without the need to override/replace properties of parent Type just in order to mark them with some attribute.<br />\n<ul><li>Custom Layout</li></ul>\nPropertyGrid allows you configuring different Views for your business objects. You can choose whether to use a single or multiple views (Property Tabs) within your application. By default there are three modes supported: Categorized, Alphabetical and Tabbed layouts. Tabbed Layout allows you combining Views on several pages. You can totally replace PropertyGrid presentation with a custom View based on existing infrastructure. Developer guide will give you a sample on how to display each Category of the the edited object in a separate property tab easily just by modifying XAML markup in your application.<br />\n<ul><li>Separate theming</li></ul>\nNo theme is applied by default so it is easy to apply internal corporate or custom themes. Extenal themes were moved to a separate “Themes” assembly (by default version 2.0 supports original black also known as “Kaxaml” theme). Each theme can be applied either to PropertyGrid or overall Window/Application.<br /><br /><b>Default Theme:</b><br /><br /><img src=\"/projects/wpfpropertygrid/867742e8-e3b7-42c4-91a1-86209fefd280\" alt=\"wpg-2-0-default-view.png\" title=\"wpg-2-0-default-view.png\" /><br /><br /><b>&quot;Kaxaml&quot; Theme:</b><br /><br /><img src=\"/projects/wpfpropertygrid/1f1b9a03-ff99-46e1-bf41-a4ce733e48c5\" alt=\"wpg-2-0-default-kaxaml-theme.png\" title=\"wpg-2-0-default-kaxaml-theme.png\" /><br />\n<ul><li>Expression Blend-like property filter box</li></ul>\nAs it can be seen from the screenshots above a brand new property filter box was introduced in this version. It occupies less space and can be switched of/on by means of appropriate properties from either XAML or code. Like Expression Blend, property filtering supports filtering both by property display names and property types.<br />\n<ul><li>Custom categories</li></ul>\nFull support for custom categories. It is now possible providing any layout for the whole category. Layoutting procedure is as close as possible to Microsoft custom categories guides. The screenshot below demonstrates custom category layout copy-pasted from MSDN site: “<a href=\"http://msdn.microsoft.com/en-gb/library/bb907331.aspx\">Walkthrough: Creating a Category Editor</a>”.<br /><br /><img src=\"/projects/wpfpropertygrid/dfe0f2b8-d337-43e9-a89b-29502717d48f\" alt=\"wpg-2-0-custom-category.png\" title=\"wpg-2-0-custom-category.png\" /><br /><br />And a lot of other features.</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF Controls,",
  "LastEdited": "2010-12-01T05:14:54.533-08:00"
}