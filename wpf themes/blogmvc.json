{
  "ProjectName": "blogmvc",
  "Title": "Blog MVC.NET",
  "Description": "A Blog Engine based on ASP.NET MVC framework.  It seems several of these projects have begun, with little or no action.  I would like to begin this project and make sure that it stays alive by frequent code posting (every 2 or 3 weeks) and posting to discussions (at least once a week).  Also we will try to respond to all who inquire about participating in the project.\n\nI was hoping to find a more inventive name, but this is all I came up with so far.  Perhaps we can change it later.\n\nWe will most likely follow along some guidelines such as the Rob Conery MVC storefront screencasts.\n\nThe engine should be simple, yet designed powerfully enough from the beginning to handle the requirements.  The goals will be as follows:\n\n1.  Utilize built-in features such as ASP.NET Membership\n2.  Utilize other open-source frameworks such as the ASP.NET Membership MVC starter kit.\n4.  Provide for multiple blogs per installation\n5.  Provider for multiple authors per blog\n6.  Use AJAX where appropriate\n7.  Most likely use JQuery for AJAX and other client-side effects\n8.  Try to avoid \"heavy\" implementation such as excessive http handlers, etc.\n9.  Not try to be all things.  For example, this will be a blog engine, not a CMS.\n10.  Allow for easy integration into existing websites and with other products  such as a CMS.\n11.  As much as possible use TDD though with a pragmatic approach.\n12.  Utilize Design patterns where appropriate\n13.  Have a simple skinning/theming architecture, but one that makes most modifications by way of CSS and have a theming architecture that plays nicely with existing websites and doesn't \"take over\" everything.\n14.  Provide a layered architecture whereby users may make use of an API if they desire to include some features in their own views for example if they are using web forms.\n15.  Use SQL Server for the data store\n16.  Use a repository pattern for data access and testing\n17.  Utilize LinqToSQL or perhaps the Entity Framework\nOther ideas?...",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Update as of 12/25/2008</h2>\r\n<b>This project is currently on hold till I evaluate Oxite</b><br /><br /><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>_<br /><br /><br /><b>Project Description</b><br />A Blog Engine based on ASP.NET MVC framework.  It seems several of these projects have begun, with little or no action.  I would like to begin this project and make sure that it stays alive by frequent code posting &#40;every 2 or 3 weeks&#41; and posting to discussions &#40;at least once a week&#41;.  Also we will try to respond to all who inquire about participating in the project.<br /><br />I was hoping to find a more inventive name, but this is all I came up with so far.  Perhaps we can change it later.<br /><br />We will most likely follow along some guidelines such as the Rob Conery MVC storefront screencasts.<br /><br />The engine should be simple, yet designed powerfully enough from the beginning to handle the requirements.  The goals will be as follows&#58;<br /><br />1.  Utilize built-in features such as ASP.NET Membership<br />2.  Utilize other open-source frameworks such as the ASP.NET Membership MVC starter kit.<br />4.  Provide for multiple blogs per installation<br />5.  Provider for multiple authors per blog<br />6.  Use AJAX where appropriate<br />7.  Most likely use JQuery for AJAX and other client-side effects<br />8.  Try to avoid &#34;heavy&#34; implementation such as excessive http handlers, etc.<br />9.  Not try to be all things.  For example, this will be a blog engine, not a CMS.<br />10.  Allow for easy integration into existing websites and with other products  such as a CMS.<br />11.  As much as possible use TDD though with a pragmatic approach.<br />12.  Utilize Design patterns where appropriate<br />13.  Have a simple skinning&#47;theming architecture, but one that makes most modifications by way of CSS and have a theming architecture that plays nicely with existing websites and doesn&#39;t &#34;take over&#34; everything.<br />14.  Provide a layered architecture whereby users may make use of an API if they desire to include some features in their own views for example if they are using web forms.<br />15.  Use SQL Server for the data store<br />16.  Use a repository pattern for data access and testing<br />17.  Utilize LinqToSQL or perhaps the Entity Framework<br />Other ideas&#63;...</div><div class=\"ClearBoth\"></div>",
  "TagList": "ASP.NET MVC,MVC,blog engine,LINQ TO SQL,blog,Blog MVC.NET Oxite,",
  "LastEdited": "2009-06-23T11:57:53.507-07:00"
}