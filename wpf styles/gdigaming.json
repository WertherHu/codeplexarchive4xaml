{
  "ProjectName": "gdigaming",
  "Title": "GdiGaming API - GDI+ Based .Net Game Engine",
  "Description": "The GdiGaming API provides a simple framework from which any number of classic 2D-style video games can be created.  Designed for use with Windows Forms applications, the API provides an easy to use GameEngine component and RenderCanvas user control. Games are created by dragging an instance of GameEngine and RenderCanvas to a Form, pointing the engine at the canvas, and then developing GameScene and GameObject derived classes.\r\n\r\nGame logic is implemented by adding code to overriden methods of GameObject derived classes such as OnInput, OnUpdate, and OnDraw. The GameEngine handles all method calls to backgrounds, objects, and HUD elements. This simple pattern allows for a large variety of game engine design implementations, as GameObjects can represent logic controllers or state machines, as well as interactive elements (such as characters and enemies).\r\n\r\nMinimal .Net coding experience is required as the framework assumes only that you have basic working knowledge of classes and object oriented design.\r\n\r\nWritten in VB.Net 2010 Client Framework 4.0",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>GdiGaming API</h1>\r<h2>Project Description</h2>\rThe GdiGaming API provides a simple framework from which any number of classic 2D-style video games can be created.  Designed for use with Windows Forms applications, the API provides an easy to use GameEngine component and RenderCanvas user control. Games are created by dragging an instance of GameEngine and RenderCanvas to a Form, pointing the engine at the canvas, and then developing GameScene and GameObject derived classes.<br /><br />Game logic is implemented by adding code to overriden methods of GameObject derived classes such as OnInput, OnUpdate, and OnDraw. The GameEngine handles all method calls to backgrounds, objects, and HUD elements. This simple pattern allows for a large variety of game engine design implementations, as GameObjects can represent logic controllers or state machines, as well as interactive elements &#40;such as characters and enemies&#41;.<br /><br />Minimal .Net coding experience is required as the framework assumes only that you have basic working knowledge of classes and object oriented design.<br /><br />Written in VB.Net 2010 Client Framework 4.0\n<h2>Current Version</h2>\r<b>CTP 2 (v 0.0.2.5)</b>\n<h2>Project Overview</h2>\rThe GdiGaming API is a small and simplified, yet complete, game-engine framework for Windows Forms applications which uses GDI+ for rendering graphics, Windows Media for playing sound, and Control event handlers for mouse and keyboard input.<br /><br />The API provides a GameEngine component and RenderCanvas control which can be placed on a Form at design-time to setup a game-engine environment.  Individual projects then define classes for players, enemies, and other interactive game elements which each inherit from the API provided GdiGaming.GameObject base class.  <br /><br />Each custom class needs only to override appropriate methods of GameObject such as OnInput, OnUpdate, OnCollision, etc. in order to implement its game-logic.  Each GameObject instance is assigned to a GameScene instance, and the GameEngine automatically runs its currently assigned GameScene.  <br /><br />Basic asset-managment is also provided to automatically handle loading and reusing image and sound assets. Assets such as images and sounds are added to a special &quot;Assets&quot; folder which you create in the solution explorer of the project.  The AssetManager then allows your GameObjects to refer to these assets by their file names.  The AssetManager takes care of locating the appropriate file based on the type of asset requested, and also caches assets to increase performance.<br /><br />While the GameEngine&#39;s AssetManager instance is responsible for overall asset management, individual GameObjects should request their resources from the GameEngine&#39;s CurrentScene since the GameScene will locally cache assets from the AssetManager.<br /> <h2>Features</h2>\r<ul><li>Simplistic Object-Oriented Design </li>\n<li>Resource/Asset Management </li>\n<li>Automatic Rendering of Sprites &amp; Backgrounds </li>\n<li>Full Collision </li>\n<li>Animation </li>\n<li>Mouse and Keyboard Input </li>\n<li>Multiple Simultaneous Sounds </li>\n<li>Support for an Event-Driven Model </li></ul>\n<h2>GameObject Logic Methods</h2>\r<ul><li>OnCollision(ByVal e As CollisionEventArgs)</li>\n<li>OnDraw(ByVal e As DrawEventArgs)</li>\n<li>OnLoad(ByVal e As GameEngineEventArgs)</li>\n<li>OnInput(ByVal e As GameEngineEventArgs)</li>\n<li>OnMouseDown(ByVal e As GameEngineEventArgs)</li>\n<li>OnMouseUp(ByVal e As GameEngineEventArgs)</li>\n<li>OnUpdate(ByVal e As GameEngineEventArgs)</li></ul>\n<h2>More Information</h2>\r<a href=\"https://gdigaming.codeplex.com/wikipage?title=Background%20Information&referringTitle=Home\">Background Information</a>\n<h2>Original Project</h2>\rThis project originally began on a MSDN Forums thread.  The original CTP1 thread is located at: <a href=\"http://social.msdn.microsoft.com/Forums/en-US/vbgeneral/thread/8cb8d926-6f79-41d2-a906-edf1c1aab650\">http://social.msdn.microsoft.com/Forums/en-US/vbgeneral/thread/8cb8d926-6f79-41d2-a906-edf1c1aab650</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "Game,Game Engine,VB.Net,API,GDI+,Easy,.Net 4.0,C#,",
  "LastEdited": "2012-03-31T10:59:02.263-07:00"
}