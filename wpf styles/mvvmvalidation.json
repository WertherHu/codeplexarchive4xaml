{
  "ProjectName": "mvvmvalidation",
  "Title": "MVVM Validation Helpers",
  "Description": "MVVM Validation Helpers is a little framework that makes it easier for developers to implement validation in their WPF/Silverlight MVVM applications. You'll no longer have to implement IDataErrorInfo and INotifyDataErrorInfo interfaces manually in your view models. \r\n\r\nWith this lightweight framework you can define and keep all your validation rules conveniently in one place. It saves you from all the boilerplate of maintaining error list for each of the validation targets (properties). You just define a set of validation rules that need to be checked for each of the targets and later, when appropriate, it is easy to just validate a target and get the validation result back without worrying what rules need to be checked.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>The source code is moved to GitHub:</b> <a href=\"https://github.com/pglazkov/mvvmvalidation\">https://github.com/pglazkov/mvvmvalidation</a><br />\n<h2>Project Description</h2>\rMVVM Validation Helpers is a little framework that makes it easier for developers to implement validation in their WPF&#47;Silverlight MVVM applications. You&#39;ll no longer have to implement IDataErrorInfo and INotifyDataErrorInfo interfaces manually in your view models. <br /><br />With this lightweight framework you can define and keep all your validation rules conveniently in one place. It saves you from all the boilerplate of maintaining error list for each of the validation targets &#40;properties&#41;. You just define a set of validation rules that need to be checked for each of the targets and later, when appropriate, it is easy to just validate a target and get the validation result back without worrying what rules need to be checked.<br />\n<h2>Examples</h2>\r<b>Creating an instance of the helper</b><br />In order to use the library you need to create an instance of the <i>ValidationHelper</i> helper class and store it in an instance field of the class where you want to implement validation. <br />If you do a lot of validation, it is probably the best to do it in your <i>ViewModelBase</i> class.<br /><br /><pre>\npublic class ViewModelBase\n{\n    public ViewModelBase()\n    {\n        Validator = new ValidationHelper();\n    }\n\n    protected ValidationHelper Validator { get; private set; }\n}\n</pre><br /><b>Adding a simple validation rule</b><br /><br /><pre>Validator.AddRule(() =&gt; FirstName,\n                  () =&gt; RuleResult.Assert(!string.IsNullOrEmpty(FirstName), &quot;First Name is required&quot;));\n</pre><br />OR<br /><br /><pre>\nValidator.AddRequiredRule(() =&gt; FirstName, &quot;First Name is required&quot;);\n</pre><br /><b>Adding a rule that depends on two different properties</b><br />Such a rule will be executed whenever you validate either of those properties.<br /><br /><pre>\nValidator.AddRule(() =&gt; RangeStart,\n                  () =&gt; RangeEnd,\n                  () =&gt; RuleResult.Assert(RangeEnd &gt; RangeStart, &quot;RangeEnd must be grater than RangeStart&quot;);\n</pre><br /><b>Adding an asynchronous rule</b><br />Such rule can perform more complex validation that may take long time or cannot be executed synchronously, for example, a call to a web service.<br /><br /><pre>\nValidator.AddAsyncRule(() =&gt; UserName,\n    async () =&gt;\n    {\n        var isAvailable = await UserRegistrationService.IsUserNameAvailable(UserName).ToTask();\n\n        return RuleResult.Assert(isAvailable, \n            string.Format(&quot;User Name {0} is taken. Please choose a different one.&quot;, UserName));\n    });\n</pre><br /><b>Executing validation</b><br /><br /><pre>\n// Validate all (execute all validation rules)\nValidationResult validationResult = Validator.ValidateAll();\n\n// Validate a specific target\nValidationResult validationResult = Validator.Validate(() =&gt; FirstName);\n// OR\nValidationResult validationResult = Validator.Validate(&quot;FirstName&quot;);\n</pre><br /><b>Executing validation asynchronously</b><br /><br /><pre>\n// Validate all (execute all validation rules)\nValidator.ValidateAllAsync(result =&gt; {\n    // Analyze the result\n});\n\n// Validate a specific target\nValidator.ValidateAsync(() =&gt; FirstName, result =&gt; {\n    // Analyze the result\n});\n</pre><br /><b>Getting current validation state at any point of time</b><br />Any time you can request current validation state for the entire object or for specific validation targets.<br /><br /><pre>\n// Get validation result for the entire object\nvar validationResult = Validator.GetResult();\n\n// Get validation result for a target\nvar firstNameValidationResult = Validator.GetResult(() =&gt; FirstName);\n</pre><br /><b>Receive notifications when validation result changes</b><br /><br /><pre>\nValidator.ResultChanged += OnValidationResultChanged;\n</pre><br /><pre>\nprivate void OnValidationResultChanged(object sender, ValidationResultChangedEventArgs e)\n{\n    // Get current state of the validation\n    ValidationResult validationResult = Validator.GetResult();\n\n    UpdateValidationSummary(validationResult);\n}\n</pre><br /><b>Implement <i>IDataErrorInfo</i> and <i>INotifyDataErrorInfo</i> interfaces</b><br />The library includes <i>DataErrorInfoAdapter</i> and <i>NotifyDataErrorAdapter</i> classes that make the implementation of <i>IDataErrorInfo</i> and <i>INotifyDataErrorInfo</i> interfaces in your view models trivial.<br /><br /><i>IDataErrorInfo</i>:<br /><br /><pre>\npublic class ValidatableViewModelBase : IDataErrorInfo\n{\n        protected ValidationHelper Validator { get; private set; }\n\n        private DataErrorInfoAdapter DataErrorInfoAdapter { get; set; }\n\n        public ValidatableViewModelBase()\n        {\n            Validator = new ValidationHelper();\n\n            DataErrorInfoAdapter = new DataErrorInfoAdapter(Validator);\n        }\n\n        public string this[string columnName]\n        {\n            get { return DataErrorInfoAdapter[columnName]; }\n        }\n\n        public string Error\n        {\n            get { return DataErrorInfoAdapter.Error; }\n        }\n}\n</pre><br /><br /><i>INotifyDataErrorInfo</i>:<br /><br /><pre>\npublic class ValidatableViewModelBase : INotifyDataErrorInfo\n{\n    protected ValidationHelper Validator { get; private set; }\n    private NotifyDataErrorInfoAdapter NotifyDataErrorInfoAdapter { get; set; }\n\n    public ValidatableViewModelBase()\n    {\n        Validator = new ValidationHelper();\n\n        NotifyDataErrorInfoAdapter = new NotifyDataErrorInfoAdapter(Validator);\n    }\n\n    public IEnumerable GetErrors(string propertyName)\n    {\n        return NotifyDataErrorInfoAdapter.GetErrors(propertyName);\n    }\n\n    public bool HasErrors\n    {\n        get { return NotifyDataErrorInfoAdapter.HasErrors; }\n    }\n\n    public event EventHandler&lt;DataErrorsChangedEventArgs&gt; ErrorsChanged\n    {\n        add { NotifyDataErrorInfoAdapter.ErrorsChanged += value; }\n        remove { NotifyDataErrorInfoAdapter.ErrorsChanged -= value; }\n    }\n}\n</pre><br /><br /><b>For more examples download the source code and check out the example project.</b><br /><br /><img src=\"http://www.codeplex.com/Download?ProjectName=mvvmvalidation&amp;DownloadId=310097\" /></div><div class=\"ClearBoth\"></div>",
  "TagList": "MVVM,validation,Validation Framework,Validation Rule,validation rules,WPF,Silverlight,.NET,C#,",
  "LastEdited": "2015-11-10T13:59:24.61-08:00"
}