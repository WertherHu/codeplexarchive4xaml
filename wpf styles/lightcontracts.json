{
  "ProjectName": "lightcontracts",
  "Title": "LightContracts: Simple, small and lightweight 'Design by Contract' library",
  "Description": "LightContracts is a simple, small and lightweight library supporting 'Design by Contract' style of programming. It let you specify simple pre- and postconditions with a fluent API, without using an heavy AOP framework. It is developed in C#.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h3>Project Description</h3>\rLightContracts is a simple, small and lightweight library supporting &#39;Design by Contract&#39; style of programming. It let you specify simple pre- and postconditions with a fluent API, without using an heavy AOP framework. It is developed in C&#35;.<br />\n<h4>Overview</h4>\rIn his famous book &quot;Object-Oriented Software Construction&quot; Bertrand Meyer described a design technique called &quot;Design by Contract&quot; (DBC) which can improve software quality dramatically. His programming language Eiffel supports this design technique inherently. This valuable technique is universal and widely accepted and can be used regardless in which programming language you are developing. To apply this technique also in .NET several initiatives have been started ( E.g. <a href=\"https://lightcontracts.codeplex.com/wikipage?title=http%3a%2f%2fcontractdriven.codeplex.com%2f&referringTitle=Home\">ContractDriven.NET</a> or <a href=\"https://lightcontracts.codeplex.com/wikipage?title=http%3a%2f%2fcontractn.codeplex.com%2f&referringTitle=Home\">ContractN</a>). Recently Microsoft announced that its <a href=\"https://lightcontracts.codeplex.com/wikipage?title=http%3a%2f%2fmsdn.microsoft.com%2fen-us%2fdevlabs%2fdd491992.aspx&referringTitle=Home\">Code Contracts</a> projects would be included as part of .Net 4.0. <br />\n<h4>Why should I use LightContracts</h4>\rAll mentioned projects are quite heavyweight. They are using aspect-oriented programming (AOP) frameworks to inject code, require to inherit from a base class or need special tools and compiler settings. My observation is that 90% of all assertions are very simple and do not justify the use of heavy tools. LightContracts is a small DLL which can simply be referenced by any .NET project, without installing additional software. It has a fluent API which allows reading pre- and postconditions nearly like natural language. This allows simply copying these assertions into the method comments.<br />\n<h4>How can I Use LightContracts</h4>\r<ol><li>Download the <a href=\"https://lightcontracts.codeplex.com/releases/view/33680\">LightContracts DLL</a></li>\n<li>Add a reference to the LightContracts.dll in your .NET project</li>\n<li>Insert a &quot;using LightContracts;&quot; statement.</li>\n<li>Write your pre- and postconditions directly in the methods</li>\n<li>Copy the pre- and postconditions to the method comments to enrich the method documentation for clients of you class</li></ol>\n\n<h4>Example</h4>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> System.Collections.Generic;\n<span style=\"color:Blue;\">using</span> LightContracts;\n\n<span style=\"color:Blue;\">namespace</span> LightContractsExamples\n{\n\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> TextStorage\n\t{\n\t\t<span style=\"color:Blue;\">private</span> IDictionary&lt;<span style=\"color:Blue;\">string</span>,<span style=\"color:Blue;\">string</span>&gt; texts = <span style=\"color:Blue;\">new</span> Dictionary&lt;<span style=\"color:Blue;\">string</span>,<span style=\"color:Blue;\">string</span>&gt;();\n\t\t\t\t\n\t\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">bool</span> Contains(<span style=\"color:Blue;\">string</span> text)\n\t\t{\n\t\t\t<span style=\"color:Blue;\">return</span> texts.ContainsKey(text);\n\t\t}\n\t\t\n\t\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Count\n\t\t{\n\t\t\t<span style=\"color:Blue;\">get</span>{ <span style=\"color:Blue;\">return</span> texts.Count;}\n\t\t}\n\t\t\n\t\t<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n\t\t<span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Add text.</span>\n\t\t<span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Requires.IsNotNull(newText,&quot;newText&quot;);</span>\n\t\t<span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Requires.That(!Contains(newText),&quot;Not Contains({0})&quot;,newText);</span>\n\t\t<span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> Ensures.That(Count &gt; 0,&quot;Count &gt; 0&quot;);</span>\n\t\t<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n\t\t<span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;param name=&quot;newText&quot;&gt;</span><span style=\"color:Green;\">The text to be added&lt;/param&gt;</span>\n\t\t<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> AddText(<span style=\"color:Blue;\">string</span> newText)\n\t\t{\n\t\t\tRequires.IsNotNull(newText,<span style=\"color:#A31515;\">&quot;newText&quot;</span>);\n\t\t\tRequires.That(!Contains(newText),<span style=\"color:#A31515;\">&quot;Not Contains({0})&quot;</span>,newText);\n\t\t\t\n\t\t\ttexts.Add(newText,newText);\n\t\t\t\n\t\t\tEnsures.That(Count &gt; 0,<span style=\"color:#A31515;\">&quot;Count &gt; 0&quot;</span>);\n\t\t}\n\t\t\n\t}\n}\r\n</pre></div>  </div><div class=\"ClearBoth\"></div>",
  "TagList": "DbC,Design by Contract,Assertion,Preconditions,Postconditions,Assertions,Postcondition,Precondition,.NET,C#,",
  "LastEdited": "2009-11-12T02:41:25.65-08:00"
}