{
  "ProjectName": "uisandbox",
  "Title": "UISandbox",
  "Description": "UISandbox is a sample C# source code showing how to deal with plugins requiring sandbox, when those plugins must interact with WPF application interface (classically display child controls inside application window).",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Project description</h2>\r<div style=\"clear:both;height:0;\">&nbsp;</div><img style=\"float:right;padding-left:.5em;\" src=\"/projects/uisandbox/1a617b8d-a9d8-49aa-b558-3fa54bf334c6\" alt=\"pelican140.png\" title=\"pelican140.png\" /><br />UISandbox is a sample C&#35; source code showing how to deal with plugins requiring sandbox, when those plugins must interact with WPF application interface &#40;classically display child controls inside application window&#41;.<br />\n<h2>Project purpose</h2>\rI had to develop a project with some sort of extensibility: a main application window had one or several child controls provided through plug-ins.<br /><br />One of the requirements was to provide some protection against plug-ins, while users downloaded those plug-ins from not-so-trusted sources. Limiting global application privileges was not a solution.<br /><br />With those requirements, the project can turn into nightmare. In fact, the first thing to note is that UserControl is not serializable. That means that it is not possible to put the window in main, full-trusted application, and all the controls in plug-ins in sandbox, because only serializable objects can be used through two AppDomains. The second thing to note is that if a plug-in uses a common method from a library which is intended to have a full-trust, it can&#39;t &quot;just call&quot; the method. Finally, .NET Framework 4.0 has a different approach of permissions and CAS.<br /><br />During development, I had too much pain to find a good solution to respond to the requirements. There were no easy to understand samples on the web, and resources, articles and documentation was still using .NET 3.5, and was mostly missing for .NET 4.0. Having <a href=\"http://stackoverflow.com/questions/2438374/executing-untrusted-code\">a broad choice of approaches</a>, from System.AddIn to hardly understandable solutions which are depreciated in .NET 4.0, I was unhappy with any of them.<br /><br /><b>So to help others to start with plug-ins development for WPF applications and to not spend weeks, searching for an approach which works, I provide the source code of the project</b>. In this project, a window is opened, containing two controls from two plug-ins. Each control can load and save a file. The work is done by a common library, since plug-ins do not have permissions to access file system.<br /><br /><img src=\"/projects/uisandbox/dd4975ea-867b-4d72-99d3-36984b36f4ef\" alt=\"Screenshot.png\" title=\"Screenshot.png\" /><br /><br />Feel free to modify the project for your own needs. Having questions or comments? Contact me, and I will be happy to help.<br />\n<h2>Misc</h2>\rMicrosoft StyleCop rules: <b>followed</b>.<br />Microsoft FxCop rules: <b>not followed</b>.<br />Accessibility: <b>N/A</b>.<br />Technical documentation provided: <b>no</b>.</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2010-04-14T13:28:31.21-07:00"
}