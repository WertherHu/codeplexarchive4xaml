{
  "ProjectName": "RegExpGenerator",
  "Title": "Regex Express Generator",
  "Description": "Windows regex-styled generator with GUI\r\nExpress Generator High Quality Code",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><br /><b>Windows Form Regex-lexer generator with GUI interface.</b><br /><br />Additional information on starting a new project is available here: <a href=\"http://codeplex.codeplex.com/wikipage?title=Start%20a%20Project\">Project Startup Guide</a>.<br /><br />==============================================<br />A regular expression, or regex for short, is a pattern describing a certain amount of text. On this website, regular expressions are highlighted in red as regex.<br /><br />This first example is actually a perfectly valid regex. It is the most basic pattern, simply matching the literal text regex. Matches are highlighted in blue on this site.<br /><br />We use the term &quot;string&quot; to indicate the text that the regular expression is applied to. Strings are highlighted in green.<br />==============================================<br />\n<h1>.Net</h1>\rThere are no differences in the regex flavor supported by .NET versions 2.0 through 4.5. There are a few differences between the regex flavor in .NET 1.x compared with 2.0 and later. In .NET 2.0 a few bugs were fixed. The Unicode categories \\p{Pi} and \\p{Pf} are no longer reversed, and Unicode blocks with hyphens in their names are now handled correctly. One feature was added in .NET 2.0: character class subtraction. It works exactly the way it does in XML Schema regular expressions. The XML Schema standard first defined this feature and its syntax.<br />\n<h2>The System.Text.RegularExpressions.Match Class</h2>\r\nIf you want more information about the regex match, call Regex.Match() to construct a Match object. If you instantiated a Regex object, use Dim MatchObj as Match = RegexObj.Match(&quot;subject&quot;). If not, use the static version: Dim MatchObj as Match = Regex.Match(&quot;subject&quot;, &quot;regex&quot;).<br /><br />Either way, you will get an object of class Match that holds the details about the first regex match in the subject string. MatchObj.Success indicates if there actually was a match. If so, use MatchObj.Value to get the contents of the match, MatchObj.Length for the length of the match, and MatchObj.Index for the start of the match in the subject string. The start of the match is zero-based, so it effectively counts the number of characters in the subject string to the left of the match.<br /><br />If the regular expression contains capturing parentheses, use the MatchObj.Groups collection. MatchObj.Groups.Count indicates the number of capturing parentheses. The count includes the zeroth group, which is the entire regex match. MatchObj.Groups(3).Value gets the text matched by the third pair of parentheses. MatchObj.Groups(3).Length and MatchObj.Groups(3).Index get the length of the text matched by the group and its index in the subject string, relative to the start of the subject string. MatchObj.Groups(&quot;name&quot;) gets the details of the named group &quot;name&quot;.<br /><br />To find the next match of the regular expression in the same subject string, call MatchObj.NextMatch() which returns a new Match object containing the results for the second match attempt. You can continue calling MatchObj.NextMatch() until MatchObj.Success is False.<br /><br />Note that after calling RegexObj.Match(), the resulting Match object is independent from RegexObj. This means you can work with several Match objects created by the same Regex object simultaneously.<br />\n<h2>WORK IN PROGRESS</h2>\r<img src=\"/projects/RegExpGenerator/8da1ffca-7338-49d8-987b-ff7d0c5bf232\" alt=\"pokaz.png\" title=\"pokaz.png\" /><br /><br /><img src=\"/projects/RegExpGenerator/6284ed87-3608-4b3e-b2c4-eee1b7a49d65\" alt=\"test1.png\" title=\"test1.png\" /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2014-11-21T00:48:15.893-08:00"
}