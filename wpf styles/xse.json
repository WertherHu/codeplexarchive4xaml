{
  "ProjectName": "xse",
  "Title": "XNA Shooter Engine",
  "Description": "The XNA Shooter Engine is a game engine for XNA designed specifically with first-person-shooter-style games in mind. It's being developed for an as-of-yet unannounced XNA title.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>What is XSE?</h1>\rThe XNA Shooter Engine, or XSE for short, is a set of libraries and tools aiding in creating FPS-style games using the XNA Framework. It is being created for an as-of-yet unannounced XNA title.<br />\n<h2>What&#39;s <i>In</i> XSE?</h2>\r<b>XSE Game Development Kit</b><br />The GDK consists of our own home-grown, scratch-made tools used for building content for the engine. The centerpiece of the toolkit is XSE GameStudio (name likely to change), an application for handling virtually everything the engine can import, from object libraries to map files. Also included is Model Viewer, a tool for previewing and optimizing your shaders to work with your object without having to build and test each version in-game.<br /><br /><b>XSE Game Engine</b><br />The engine itself is largely incomplete at this point, but the framework structure is decided and we&#39;re confident it&#39;ll work brilliantly. The engine development is driven by the development of the tools, allowing us to figure out what works and what doesn&#39;t in our own home-grown testing tools before committing it to the engine. This development strategy prevents the engine from becoming too fragmented with bits of code from many different revisions of features.<br /><br /><b>Open-Source Goodness</b><br />A lot of commonly-asked questions about XNA are solved in our code. Things like model manipulation, shaders, lights and using XNA outside of game contexts are all used by the engine or its tools. Not only is our source freely available, we&#39;ll be creating a sort of FAQ-style mini-book that hopefully answers so many of these commonly-asked questions. Obviously, sites like Riemers definitely help, but I feel they aren&#39;t written as a one-question-solution; they&#39;re written as part of an entire project, which can make picking out the relevant pieces of information fairly difficult.<br />\n<hr />\n<h2>News</h2>\r\n<h3>July 19, 2010</h3>\rApologies for the lack of updates recently. We&#39;ve had some setbacks and have missed a few goals we had set for ourselves. That said, here&#39;s what&#39;s new:<br /><br /><b>The GDK</b><br />Our big, ambitious GDK tool has taken a back seat for now so we can get the engine up to a feature-complete version sooner. In changes I&#39;ll describe later, the tool we had planned may even become unnecessary.<br /><br /><b>Effect Class Generator</b><br />One of the tools that have been whipped up is a cool little utility for pre-compiling shaders and generating classes for them. The reason we needed to do that was because we&#39;re hoping to keep content files from having to float around with our library. What the tool does is allow you to compile a shader and through various options, output a strongly-typed C# representation of that class. If you choose to have the compiled shader output as a separate class instead of a binary file you would have to add to your project resources, everything is pre-wired up and ready to drag-and-drop into your project.<br /><br />It&#39;s not XSE-specific and will work with just the XNA framework itself. What it does is create a class of a specified name that inherits from XNA&#39;s Effect class. It will then generate the proper constructors based on what options you&#39;ve selected. Effect parameters are read from the shader and properly-typed properties along with matching backing fields are created. A method for automatically initializing the properties is generated and called from the constructor.<br /><br />What this allows you to do is set parameters and techniques just as you would any other class, much like XNA&#39;s BasicEffect class. This provides several advantages:\n<ul><li>You don&#39;t have to repeatedly type out effect.Paramters<a href=\"https://xse.codeplex.com/wikipage?title=%22name%22&referringTitle=Home\">&#34;name&#34;</a>.SetValue(val) anymore</li>\n<li>Removes risk of misspelling or not knowing the parameter&#39;s proper name</li>\n<li>Strangely-named parameters like g_WorldIT are easily changed into dev-friendly names like WorldInverseTranspose without modifying the shader</li>\n<li>Classes using the effects won&#39;t need to require a ContentManager object to manually load each effect</li>\n<li>Allows you to set up custom logic not available in HLSL like checking support in the GraphicsDevice or setting default values based on other data</li></ul>\n<br />It&#39;s saved us loads of repetitive work. Once I fix some bugs in it, I&#39;ll throw it up for mass consumption.<br /><br /><b>The Engine</b><br />We&#39;re working very hard to finish our rendering engine as that will be the largest and hardest piece to implement. The rendering engine is of the deferred shading persuasion and supports HDR, bloom, screen-space ambient occlusion, and VSM shadow mapping, along with a complete post-processing pipeline.<br /><br />Earlier when I mentioned the GDK was going on the backburner, I said it might not be necessary anymore. We&#39;ve expanded the design of our content pipeline to allow a much higher amount of data to be passed between artist and programmer via opaque data. This move made sense as it removed the burden of having to create our own world editor and allowed us to set properties like lights, spawn points, etc. all from within our tool of choice, Autodesk&#39;s 3ds Max 2011. I&#39;m assuming other programs allow similar functionality. If not, you can always easily create your own pre-processor to inject the data you need for your game.<br /><br />We should have our rendering engine feature-complete very soon here and from that point it should be much smoother we&#39;re hoping. Once we get some higher-quality artwork pumped into our game, I&#39;ll put up some screenshots to show off the gorgeous glory that is our rendering engine.<br /><br />-Eric<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2010-07-19T08:23:39.61-07:00"
}