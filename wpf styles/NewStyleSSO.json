{
  "ProjectName": "NewStyleSSO",
  "Title": "New Style SSO for use in BizTalk Projects",
  "Description": "A new style of SSO config.\n\nThe purpose of this project is to make it very easy to store items in SSO. Although there are several projects dedicated to SSO none of them were easy enough to use straight away. \n\nThe idea is to have a base class that knows how to save/load itself from SSO. So when you need a config item stored in SSO,  simply create a new class with some properties, Inherit from SSO Base functionality and Presto. You are done. Your class will have some extra methods to help you.\n\nClass.Load() will load the Configuration data from SSO.\nClass.Save() will save the configuration data to SSO.\n\nCouldn't be more easier.\n\nThe Class data is cached by the base functionality. So if a application class is retrieved from SSO it will retrieve the next instance from the cache instead. This can prevent some locking errors in situations where SSO is heavily used.\n\nIt comes complete with a commandline to perform the following actions :\n- Import\n- Export\n- Delete\n- List  SSO configuration items\n- Flush Cache\n\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">A new style of SSO config.<br /><br />Simply create a new class with some properties, Inherit from SSOConfig Item and Presto. You are done. Your class will have some extra methods to help you.<br /><br />Class.Load() will load the Configuration data from SSO.<br />Class.Save() will save the configuration data to SSO.<br /><br />Couldn&#39;t be more easier.<br /><br />The Application data is cached by the base functionality. So if a application class is retrieved from SSO it will retrieve the next instance from the cache instead. Saving a new or changed item to SSO will reset the cache. <br /><br />It comes complete with a commandline to Import/Export/Delete/List SSO configuration items. <br /><br />Your class could simply look like this.<br /><br /><br /><pre>\n     [Serializable]\n    public class SampleConnectionData:SSOConfigItem \n    {\n        public SampleConnectionData(string ApplicationName)\n        {\n            base.SSO_ApplicationSettingName = ApplicationName;\n        }\n\n        public SampleConnectionData()\n        {\n        }\n\n        private string dataSource = string.Empty;\n        private string database = string.Empty;\n        private string applicationName = string.Empty;\n        private string userName = string.Empty;\n        private string password = string.Empty;\n        private bool trustedConnection = false ;\n\n        public bool TrustedConnection\n        {\n            get { return trustedConnection; }\n            set { trustedConnection = value; }\n        }\n \n        public string Password\n        {\n            get { return password; }\n            set { password = value; }\n        }\n\n        public string UserName\n        {\n            get { return userName; }\n            set { userName = value; }\n        }\n \n\n        public string ApplicationName\n        {\n            get { return applicationName; }\n            set { applicationName = value; }\n        }\n \n        public string DataSource\n        {\n            get { return dataSource; }\n            set { dataSource = value; }\n        }\n       \n\n        public string Database\n        {\n            get { return database; }\n            set { database = value; }\n        }\n   }\n\n</pre><br /><br />And then you will have functionality like this :<br /><br /><pre>\n// Create a SSO connection class.\nSampleConnectionData objConnection = new SampleConnectionData(&quot;SomeApplicationName&quot;);\n\n// Set properties \nobjConnection.TrustedConnection = true;\nobjConnection.DataSource = &quot;(Local)&quot;;\nobjConnection.Database = &quot;Master&quot;;\nobjConnection.ApplicationName = &quot;DemonstrateUsage&quot;;\n\n// Create the applications\nobjConnection.CreateApplication();\n\n// Save the application\nobjConnection.Save();\n\n// Get a new Object\nSampleConnectionData OtherConnection = new SampleConnectionData(&quot;SomeApplicationName&quot;);\n// Load properties from SSO Configuration Store\nOtherConnection.Load()\n\n</pre><br /><br />In your orchestration or code  you can use :<br /><br /><pre>\nSampleConnectionData objConnection = new SampleConnectionData(&quot;SomeApplicationName&quot;);\nobjConnection.Load();\n</pre><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "SSO,",
  "LastEdited": "2008-07-29T00:20:21.437-07:00"
}