{
  "ProjectName": "xtrememvvm",
  "Title": "Xtreme MVVM Framework ( Loose XAML )",
  "Description": "This project is an implementation of MVVM in WPF that works with loose XAML.\r\n\r\nThe project is called Xtreme MVVM as there does not need to be a reference from the View to the ViewModel or vice-versa.  All bindings, events and routed commands are resolved at runtime.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This project is an implementation of MVVM in WPF that works with loose XAML.<br /><br />The project is called Xtreme MVVM as there does not need to be a reference from the View to the ViewModel or vice-versa.  All bindings, events and routed commands are resolved at runtime.<br /><br /><b>Why Unity?</b><br />The Unity framework, from <a href=\"http://msdn.microsoft.com/en-us/practices\">Microsoft&#39;s Patterns &amp; Practices</a> team, was chosen because it is unique in  offering the ability to configure it in code or in a configuration file.  I <b>really</b> like the option of configuring dependency injection with a configuration file as it allows for a single build to be &quot;blessed&quot; for release by QA using mock objects and then by changing the values in a text file, inject the &quot;real&quot; objects (<i>no new build required</i>!).  You can try this out in the sample app by changing the .config file in the appropriate &lt;BIN&gt; directory.<br /><br />1. Build and run the sample app<br />2. Change the line in the appropriate .config file from:<br />    &lt;register type=&quot;ICustomer&quot; mapTo=&quot;SampleModel.Customer, SampleModel&quot; /&gt;<br />  to:<br />    &lt;register type=&quot;ICustomer&quot; mapTo=&quot;SampleModel.MockCustomer, SampleModel&quot; /&gt;<br />3. Run the app again<br /><br />You&#39;ll see the difference in the default values in the text boxes demonstating the ICustomer interface is being resolved to the MockCustomer object instead of the Customer object.<br /><br /><b>Notes</b><br />This is the first release of this framework, so the documentation is not yet available, but the ZIP file in the downloads section contains both the framework source as well as the source for a sample app that demonstates how to use the framework using data binding to dependency properties, event handlers and routed commands.<br /><br />If you look at the framework, you&#39;ll note that the values for dependency properties are set with the framework instead of directly.  This is so multi-threaded apps can set the values.  In testing this framework it was able to read values off a bar code reader via the COM port at more than 20 bar codes per second and update the UI accordingly.</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-07-27T11:42:06.22-07:00"
}