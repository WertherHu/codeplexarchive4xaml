{
  "ProjectName": "specunit",
  "Title": "specunit - BDD-style extension for unit testing frameworks",
  "Description": "A simple BDD-style extension for unit testing frameworks.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h2>Project Description</h2>\r\n<p>A simple class for extending unit testing frameworks with BDD-style (Given-When-Then) tests.</p>\r\n<h2>Background</h2>\r\n<p>Inspired by <a href=\"http://www.specflow.org\">SpecFlow</a> and <a href=\"http://subspec.codeplex.com\">\r\nSubSpec</a>, I wanted a minimally intrusive BDD extension that provided the following capabilities:</p>\r\n<ul>\r\n<li>fluent interface (ideally with minimal language noise) for testing Given-When-Then-style specifications within a single method;\r\n</li><li>support for parameterised / data-driven tests (e.g. <a href=\"http://www.nunit.org/index.php?p=testCaseSource&r=2.5\">\r\nTestCaseSource</a> and <a href=\"http://www.nunit.org/index.php?p=theory&r=2.5\">Theory</a> as found in NUnit, etc);\r\n</li><li>output formattable specifications in plain English; </li><li>ability to have multiple assertions per specification, and to have all assertions exercised even if one of them fails;\r\n</li><li>the extension should be unit test framework agnostic; </li><li>minimal footprint, with no additional plugins required (e.g. for Visual Studio, Resharper, etc.).\r\n</li></ul>\r\n<h2>NUnit Example</h2>\r\n<pre>[<span style=\"color:#2b91af\">Test</span>, <span style=\"color:#2b91af\">TestCaseSource</span>(<span style=\"color:#a31515\">&quot;DataForInsufficientFunds&quot;</span>)]\r\n<span style=\"color:blue\">public void </span>AccountHasInsufficientFunds(<span style=\"color:blue\">int </span>accountBalance, <span style=\"color:blue\">int </span>withdrawlAmount)\r\n{\r\n    <span style=\"color:blue\">var </span>atm = <span style=\"color:blue\">default</span>(<span style=\"color:#2b91af\">AutomatedTellerMachine</span>);\r\n    <span style=\"color:blue\">var </span>card = <span style=\"color:blue\">default</span>(<span style=\"color:#2b91af\">Card</span>);\r\n\r\n    <span style=\"color:blue\">var </span>cashInAtm = accountBalance &#43; 10;\r\n\r\n    IsSatisfiedBy(\r\n        Scenario(<span style=\"color:#a31515\">&quot;Cardholder has insufficient funds&quot;</span>)\r\n            .Given(<span style=\"color:#a31515\">&quot;the ATM has {0}&quot;</span>, cashInAtm)\r\n                [() =&gt; atm = <span style=\"color:blue\">new </span><span style=\"color:#2b91af\">AutomatedTellerMachine</span>(cashInAtm)]\r\n            .And(<span style=\"color:#a31515\">&quot;the account has {0}&quot;</span>, accountBalance)\r\n                [() =&gt; card = <span style=\"color:blue\">new </span><span style=\"color:#2b91af\">Card</span>(<span style=\"color:blue\">true</span>, accountBalance)]\r\n\r\n            .When(<span style=\"color:#a31515\">&quot;the account holder requests {0}&quot;</span>, withdrawlAmount)\r\n                [() =&gt; atm.RequestMoney(card, withdrawlAmount)]\r\n\r\n            .Then(<span style=\"color:#a31515\">&quot;the ATM should dispense $0&quot;</span>)\r\n                [() =&gt; <span style=\"color:#2b91af\">Assert</span>.AreEqual(0, atm.DispenseValue)]\r\n            .And(<span style=\"color:#a31515\">&quot;the account balance should be unchanged&quot;</span>)\r\n                [() =&gt; <span style=\"color:#2b91af\">Assert</span>.AreEqual(accountBalance, card.AccountBalance)]\r\n            .And(<span style=\"color:#a31515\">&quot;the ATM should display Insufficient Funds&quot;</span>)\r\n                [() =&gt; <span style=\"color:#2b91af\">Assert</span>.AreEqual(<span style=\"color:#2b91af\">DisplayMessage</span>.InsufficientFunds, atm.Message)]\r\n\r\n            .AsScript);\r\n}\r\n\r\n<span style=\"color:blue\">public static </span><span style=\"color:#2b91af\">IEnumerable </span>DataForInsufficientFunds\r\n{\r\n    <span style=\"color:blue\">get\r\n    </span>{\r\n        <span style=\"color:blue\">yield return new </span><span style=\"color:#2b91af\">TestCaseData</span>(10, 20);\r\n        <span style=\"color:blue\">yield return new </span><span style=\"color:#2b91af\">TestCaseData</span>(100, 110);\r\n    }\r\n}\r\n\r\n\r\n</pre>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,Testing,Specification,",
  "LastEdited": "2012-05-17T02:20:51.273-07:00"
}