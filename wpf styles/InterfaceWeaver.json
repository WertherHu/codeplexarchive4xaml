{
  "ProjectName": "InterfaceWeaver",
  "Title": "Interface weaver Custom Tool",
  "Description": "A CustomTool for vs auto implementing interface based on aspects (auto INotifyPropertychanged implementation, auto command, dependency property mapping...).",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />A CustomTool for vs auto implementing interface based on aspects &#40;auto INotifyPropertychanged implementation, auto command, dependency property mapping...&#41;.<br /><br /><b>How to</b>\n<ul><li><b>Step1</b>: Add a new item to your project:</li></ul>\n<img src=\"/projects/InterfaceWeaver/e7cfa395-98e8-4b1a-8f89-27db812e7c64\" alt=\"step1.png\" title=\"step1.png\" /><br /><br />\n<ul><li><b>Step2</b>: Choose the WeavedType file:</li></ul>\n<img src=\"/projects/InterfaceWeaver/4bdc5f94-387f-4aef-a8c9-9f417ac13b01\" alt=\"step2.png\" title=\"step2.png\" /><br /><br />\n<ul><li><b>Step3</b>: That&#39;s it!\n<ul><li>The weaved file is added in code behind</li>\n<li>The AopCore assembly contains specific InterfaceWeaver aspects</li></ul></li></ul>\n<img src=\"/projects/InterfaceWeaver/dec75bf0-3702-44be-99be-bce4ef6af865\" alt=\"step3.png\" title=\"step3.png\" /><br /><br /><b>INotifyPropertyChanged Auto implementation</b><br />Interface Declaration:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">namespace</span> Bench\n{\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">interface</span> IWeaveTest\n    {\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The Name</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        [ImplementINotifyPropertyChanged]\n        <span style=\"color:Blue;\">string</span> Name { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n    }\n}\r\n</pre></div><br />Resulting auto implementation:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">namespace</span> Bench\n{\n    <span style=\"color:Blue;\">using</span> System.Windows.Input;\n    <span style=\"color:Blue;\">using</span> AopCore;\n    \n    \n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> WeaveTest : IWeaveTest, System.ComponentModel.INotifyPropertyChanged\n    {\n        \n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span> name;\n        \n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The Name</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name\n        {\n            <span style=\"color:Blue;\">get</span>\n            {\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>.name;\n            }\n            <span style=\"color:Blue;\">set</span>\n            {\n                <span style=\"color:Blue;\">this</span>.name = value;\n                System.ComponentModel.PropertyChangedEventHandler propertyChanged = <span style=\"color:Blue;\">this</span>.PropertyChanged;\n                <span style=\"color:Blue;\">if</span> ((propertyChanged != <span style=\"color:Blue;\">null</span>))\n                {\n                    propertyChanged(<span style=\"color:Blue;\">this</span>, <span style=\"color:Blue;\">new</span> System.ComponentModel.PropertyChangedEventArgs(<span style=\"color:#A31515;\">&quot;Name&quot;</span>));\n                }\n            }\n        }\n        \n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">event</span> System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\n    }\n}\r\n</pre></div><br /><br /><b>Old property value check before notification</b><br />Interface declaration:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">namespace</span> Bench\n{\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">interface</span> IWeaveTest\n    {\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The Name</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        [ImplementINotifyPropertyChanged]\n        [CheckPropertySetterChanges]\n        <span style=\"color:Blue;\">string</span> Name { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n    }\n}\r\n</pre></div><br />Resulting auto implementation:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">namespace</span> Bench\n{\n    <span style=\"color:Blue;\">using</span> System.Windows.Input;\n    <span style=\"color:Blue;\">using</span> AopCore;\n    \n    \n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> WeaveTest : IWeaveTest, System.ComponentModel.INotifyPropertyChanged\n    {\n        \n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span> name;\n        \n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The Name</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name\n        {\n            <span style=\"color:Blue;\">get</span>\n            {\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>.name;\n            }\n            <span style=\"color:Blue;\">set</span>\n            {\n                <span style=\"color:Blue;\">if</span> ((<span style=\"color:Blue;\">this</span>.name != value))\n                {\n                    <span style=\"color:Blue;\">this</span>.name = value;\n                    System.ComponentModel.PropertyChangedEventHandler propertyChanged = <span style=\"color:Blue;\">this</span>.PropertyChanged;\n                    <span style=\"color:Blue;\">if</span> ((propertyChanged != <span style=\"color:Blue;\">null</span>))\n                    {\n                        propertyChanged(<span style=\"color:Blue;\">this</span>, <span style=\"color:Blue;\">new</span> System.ComponentModel.PropertyChangedEventArgs(<span style=\"color:#A31515;\">&quot;Name&quot;</span>));\n                    }\n                }\n            }\n        }\n        \n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">event</span> System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\n    }\n}\r\n</pre></div><br /><b>Aspects generalization and skip features</b><br />Interface Declaration:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">namespace</span> Bench\n{\n    [ImplementINotifyPropertyChanged]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">interface</span> IWeaveTest\n    {\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The Id</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        [SkipImplementINotifyPropertyChanged]\n        <span style=\"color:Blue;\">int</span> Id { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The Name</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">string</span> Name { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n    }\n}\r\n</pre></div><br />Resulting auto implementation:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">namespace</span> Bench\n{\n    <span style=\"color:Blue;\">using</span> System.Windows.Input;\n    <span style=\"color:Blue;\">using</span> AopCore;\n    \n    \n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> WeaveTest : IWeaveTest, System.ComponentModel.INotifyPropertyChanged\n    {\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">int</span> Id;        \n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span> name;\n\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The Id</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Id\n        {\n            <span style=\"color:Blue;\">get</span>\n            {\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>.id;\n            }\n            <span style=\"color:Blue;\">set</span>\n            {\n                <span style=\"color:Blue;\">this</span>.id= value;\n            }\n        }\n        \n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;summary&gt;</span>\n        <span style=\"color:Gray;\">///</span><span style=\"color:Green;\"> The Name</span>\n        <span style=\"color:Gray;\">///</span> <span style=\"color:Gray;\">&lt;/summary&gt;</span>\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name\n        {\n            <span style=\"color:Blue;\">get</span>\n            {\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>.name;\n            }\n            <span style=\"color:Blue;\">set</span>\n            {\n                <span style=\"color:Blue;\">this</span>.name = value;\n                System.ComponentModel.PropertyChangedEventHandler propertyChanged = <span style=\"color:Blue;\">this</span>.PropertyChanged;\n                <span style=\"color:Blue;\">if</span> ((propertyChanged != <span style=\"color:Blue;\">null</span>))\n                {\n                    propertyChanged(<span style=\"color:Blue;\">this</span>, <span style=\"color:Blue;\">new</span> System.ComponentModel.PropertyChangedEventArgs(<span style=\"color:#A31515;\">&quot;Name&quot;</span>));\n                }\n            }\n        }\n        \n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">event</span> System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\n    }\n}\r\n</pre></div><br /><b>... And many more features</b><br />... to come...<br /><br /> <a href=\"http://www.charly-studio.com\">My Website</a>.</div><div class=\"ClearBoth\"></div>",
  "TagList": "interface,aop,INotifyPropertyChang,WPF,Silverlight,aspect,weaver,weave,c#,customtool,",
  "LastEdited": "2013-02-08T06:29:17.98-08:00"
}