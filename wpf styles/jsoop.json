{
  "ProjectName": "jsoop",
  "Title": "JsOOP",
  "Description": "JsOOP is a framework for object-oriented programming (OOP-style) in JavaScript (< 2.0). It allows to define classes in the static language manner. Inheritance and emulation of strong-typing is supported.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />JsOOP is a framework for object-oriented programming &#40;OOP-style&#41; in JavaScript &#40;&#60; 2.0&#41;. It allows to define classes in the static language manner. Inheritance and emulation of strong-typing is supported.<br /><br />The example:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// namespace Zoo</span>\n<span style=\"color:Blue;\">var</span> Zoo = Zoo || {};\n \nZoo.Animal = Class\n({\n    construct: <span style=\"color:Blue;\">function</span>(name)\n    {\n        <span style=\"color:Blue;\">this</span>._name = name;\n    },\n \n    vars:\n    {\n        _name: Type.String\n    },\n \n    methods:\n    {\n        Scream: <span style=\"color:Blue;\">null</span>,\n \n        SayName: <span style=\"color:Blue;\">function</span>()\n        {\n            <span style=\"color:Blue;\">return</span> Zoo.Animal.QuoteName(<span style=\"color:Blue;\">this</span>._name);\n        }\n    },\n \n    statics:\n    {\n        QuoteName: <span style=\"color:Blue;\">function</span>(name)\n        {\n            <span style=\"color:Blue;\">return</span> <span style=\"color:#A31515;\">&quot;{ &quot;</span> + name + <span style=\"color:#A31515;\">&quot; }&quot;</span>;\n        }\n    }\n})\n \nZoo.Dog = Class\n({\n    base: Zoo.Animal,\n \n    construct: <span style=\"color:Blue;\">function</span>(name, bark, loudness)\n    {\n        <span style=\"color:Blue;\">this</span>.$base()(name);\n        <span style=\"color:Blue;\">this</span>._bark = bark;\n        <span style=\"color:Blue;\">this</span>._loudness = loudness;\n    },\n \n    vars:\n    {\n        _bark: Type.String,\n        _loudness: Type.Number\n    },\n \n    methods:\n    {\n        Scream: <span style=\"color:Blue;\">function</span>()\n        {\n            <span style=\"color:Blue;\">var</span> s = <span style=\"color:#A31515;\">&quot;&quot;</span>;\n            <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">var</span> i = 0; i &lt; <span style=\"color:Blue;\">this</span>._loudness; i++)\n            {\n                s += <span style=\"color:Blue;\">this</span>._bark;\n            }\n            <span style=\"color:Blue;\">return</span> s;\n        },\n \n        SayName: <span style=\"color:Blue;\">function</span>()\n        {\n            <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>._bark + <span style=\"color:#A31515;\">&quot; &quot;</span> + <span style=\"color:Blue;\">this</span>.$base(<span style=\"color:#A31515;\">&#39;SayName&#39;</span>)();\n        }\n    }\n})\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "js,javascript,OOP,inheritance,classes,Object-Oriented,strong typing,",
  "LastEdited": "2008-12-06T03:22:41.61-08:00"
}