{
  "ProjectName": "DropDownCheckBoxes",
  "Title": "Drop Down CheckBoxList control (DropDownCheckBoxes)",
  "Description": "DropDownCheckBoxes is an ASP.NET server control directly inheriting from standard ASP.NET CheckBoxList control. It supports parent's API (except members responsible for rendering and styling) and in most cases CheckBoxList control can be simply replaced with DropDownCheckBoxes without any need to change data binding code, event handlers etc..\r\n\r\nIn normal state the control is displayed as a select (DropDownList) control. Clicking the expand button (arrow) shows a list with check boxes. When the selcetion is completed by a user a postback event may occur in following cases: \r\n- on leaving the control (clicking outside it, ) when property 'AutoPostBack = true'  \r\n- clicking 'OK' button in the drop down list (if the corresponding option is active for the control, property 'UseButtons = true') \r\n- During any postback from other page controls (property 'AutoPostBack = false')\r\n\r\nThe control can be styled using CSS and custom properties. Also in the assembly you'll find ExtendedRequiredFieldValidator component which allows doing client & server side validation against CheckBoxList and DropDownCheckBoxes controls.\r\n\r\nThe control was tested in FF, Chrome, Safari, Opera (latest version as of May 2011) and IE 8. \r\n\r\nIt supports both synchronous and asynchronous ASP.NET postback models (can work within UpdatePanel). The current version of the control is built for .NET 3.5 but there's no problem with using it with ASP.NET 4.0. If needed the control source code can be recompiled for other target framework (2.0, 4.0) with little or no pain.\r\n\r\nThe control is for ASP.NET WebForms 3.5, 4.0, not for ASP.NET MVC.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br /><br />DropDownCheckBoxes is an ASP.NET server control directly inheriting from standard ASP.NET CheckBoxList control. It supports parent&#39;s API &#40;except members responsible for rendering and styling&#41; and in most cases CheckBoxList control can be simply replaced with DropDownCheckBoxes without any need to change data binding code, event handlers etc..<br /><br />In normal state the control is displayed as a select &#40;DropDownList&#41; control. Clicking the expand button &#40;arrow&#41; shows a list with check boxes. When the selcetion is completed by a user a postback event may occur in following cases&#58; <br />- on leaving the control &#40;clicking outside it, &#41; when property &#39;AutoPostBack &#61; true&#39;  <br />- clicking &#39;OK&#39; button in the drop down list &#40;if the corresponding option is active for the control, property &#39;UseButtons &#61; true&#39;&#41; <br />- During any postback from other page controls &#40;property &#39;AutoPostBack &#61; false&#39;&#41;<br /><br />The control can be styled using CSS and custom properties. Also in the assembly you&#39;ll find ExtendedRequiredFieldValidator component which allows doing client &#38; server side validation against CheckBoxList and DropDownCheckBoxes controls.<br /><br />The control was tested in FF, Chrome, Safari, Opera &#40;latest version as of May 2011&#41; and IE 8. <br /><br />It supports both synchronous and asynchronous ASP.NET postback models &#40;can work within UpdatePanel&#41;. The current version of the control is built for .NET 3.5 but there&#39;s no problem with using it with ASP.NET 4.0. If needed the control source code can be recompiled for other target framework &#40;2.0, 4.0&#41; with little or no pain.<br /><br />The control is for ASP.NET WebForms 3.5, 4.0, not for ASP.NET MVC.<br /><br /><img src=\"http://download.codeplex.com/download?ProjectName=dropdowncheckboxes&amp;DownloadId=245729\" /><br /><br /><b>NOTE:</b> The assembly with the control also has ExtendedRequiredFieldValidator control which is capable of doing &#39;Is Empty&#39; validation against CheckBoxList control, i.e. it can validate the DropDownCheckBoxes control too.<br /><br /><b>NOTE:</b> If you&#39;re developing under VS 2008 and have &#39;Ambiguous match found&#39; error then use &lt;Style2&gt; instead of &lt;Style&gt; tag within &lt;asp:DropDownCheckboxes/&gt;.<br /><br /><b>NOTE</b> No support for Design Mode when editing .aspx or .ascx files (don&#39;t know how the control looks or works when the page is displayed in VS in design mode, how Property Explorer treats complex properties, etc.)<br /><br /><b>To Proceed</b><br />\n<ul><li>You may download VS 2010 project with control source code and sample ASP.NET application at <a href=\"http://dropdowncheckboxes.codeplex.com/releases/view/70874#DownloadId=264124\">http://dropdowncheckboxes.codeplex.com/releases/view/70874#DownloadId=264124</a></li>\n<li>You may download the assembly with the control at <a href=\"http://dropdowncheckboxes.codeplex.com/releases/view/70874#DownloadId=264125\">http://dropdowncheckboxes.codeplex.com/releases/view/70874#DownloadId=264125</a></li>\n<li>Also there&#39;re blog posts about the control here <a href=\"http://saplin.blogspot.com/2011/05/dropdwoncheckboxes-introduction.html\">http://saplin.blogspot.com/2011/05/dropdwoncheckboxes-introduction.html</a> and here <a href=\"http://saplin.blogspot.com/2011/05/dropdowncheckboxes-using-control.html\">http://saplin.blogspot.com/2011/05/dropdowncheckboxes-using-control.html</a></li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "DropDwonCheckBoxs,Really Great effort!,",
  "LastEdited": "2012-01-26T01:45:08.367-08:00"
}