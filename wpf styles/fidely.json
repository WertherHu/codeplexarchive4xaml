{
  "ProjectName": "fidely",
  "Title": "Fidely - Search Query Compilation Framework",
  "Description": "Fidely is a framework to implement a search query compiler that parses a search query string and builds up an expression tree (Expression<Func<T, bool>>) to filter a collection object. Fidely allows you to customize processes of parsing a query string and building up an expression tree, so you can create various search query compilers.\r\nThe goal of this project is to make it easy to implement collection filtering features into your application.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Welcome to Fidely Project Web Site</h1>\r\n<h2>What&#39;s Fidely</h2>\rFidely is a framework to implement a search query compiler that parses a search query string and builds up an expression tree &#40;Expression&#60;Func&#60;T, bool&#62;&#62;&#41; to filter a collection object. Fidely allows you to customize processes of parsing a query string and building up an expression tree, so you can create various search query compilers.<br />The goal of this project is to make it easy to implement collection filtering features into your application.<br />\n<h2>Introduction</h2>\rFidely provides the feature to generate a search query compiler that compiles a <b>search query</b> (e.g. <i>&quot;X1 &lt; 1024 OR (X2 : Foo AND X3 &gt;= 0)&quot;</i>) into an <b>expression tree (Expression&lt;Func&lt;T, bool&gt;&gt;)</b>. It can be used to filter a collection object.<br /><br />The following is the simplest code to use Fidely search query compiler.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> IEnumerable&lt;XXXEntity&gt; Search(IEnumerable&lt;XXXEntity&gt; entities)\n{\n    SearchQueryCompiler&lt;XXXEntity&gt; compiler = \n        SearchQueryCompilerBuilder.Instance.BuildUpDefaultCompilerForObject&lt;XXXEntity&gt;();\n\n    <span style=\"color:Blue;\">string</span> query = <span style=\"color:#A31515;\">&quot;Name:Laptop AND (10000 &lt;= UnitPrice * 1.05 &lt;= 50000)&quot;</span>;\n    Expression&lt;Func&lt;XXXEntity, <span style=\"color:Blue;\">bool</span>&gt;&gt; filter = compiler.Compile(query);\n\n    <span style=\"color:Blue;\">return</span> entities.AsQueryable().Where(filter);\n\n    <span style=\"color:Green;\">// You can also write as follows:</span>\n    <span style=\"color:Green;\">// Func&lt;XXXEntity, bool&gt; func= filter.Compile();</span>\n    <span style=\"color:Green;\">// return entities.Where(func);</span>\n}\r\n</pre></div><br />By compiler.Compile(query), an expression tree that is equivalent to <i>(XXXEntity o) =&gt; o.Name.Contains(&quot;Laptop&quot;) &amp;&amp; (10000 &lt;= o.UnitPrice * 1.05 &amp;&amp; o.UnitPrice * 1.05 &lt;= 50000)</i> will be generated.<br />\n<h2>Features</h2>\r<ul><li><b>Easy To Use</b></li></ul>\n<blockquote>Fidely provides the default search query compiler that consists of built-in operand evaluators and operators. It supports basic calculating operators (+, -, *, /), comparative operators (=, !=, &lt;, &lt;=, &gt;, &gt;=), prefix search, suffix search and partial matching. You can begin using the powerful search query compiler without any configuration.</blockquote><ul><li><b>Powerful Parser</b></li></ul>\n<blockquote>Fidely parser supports parentheses (&#39;(&#39; and &#39;)&#39;), quotation marks (&#39; and &quot;), logical operators (AND and OR) and any comparative and calculating operators. You don&#39;t have to make an effort to parse a search query.</blockquote><ul><li><b>Flexible Customization</b></li></ul>\n<blockquote>Fidely allows you to customize processes of parsing a query string and building up an expression tree. For example, you can assign any symbol as an operator. The default search query compiler defines <b>=</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>, <b>&gt;</b> and <b>&gt;=</b> as comparative operators, but you can change operator symbols to <b>eq</b>, <b>ne</b>, <b>lt</b>, <b>le</b>, <b>gt</b> and <b>ge</b>.</blockquote><blockquote>Fidely has also many customizable points. For more detail, refer to <a href=\"https://fidely.codeplex.com/wikipage?title=Architecture&referringTitle=Home\">this page</a>.</blockquote><ul><li><b>UI Integration</b></li></ul>\n<blockquote>Fidely also provides UI components to make it easy to implement a search box into your application.</blockquote><blockquote><img src=\"/projects/fidely/99de7133-6ac3-4409-b60f-3672ea6859e8\" alt=\"ui_integration.png\" title=\"ui_integration.png\" /></blockquote>\n<br /><i>I welcome all your feedback. If you have any problems, feature requests and so on, please send me feedback via <a href=\"http://twitter.com/home/?status=@sasaminn%20\">Twitter</a> or <a href=\"http://fidely.codeplex.com/workitem/list/basic\">CodePlex issue tracker</a>.</i></div><div class=\"ClearBoth\"></div>",
  "TagList": "parser,WPF,Expression,Search,compiler,autocomplete,expression trees,Compiler Framework,",
  "LastEdited": "2011-06-11T15:05:08.65-07:00"
}