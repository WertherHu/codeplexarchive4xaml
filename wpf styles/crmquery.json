{
  "ProjectName": "crmquery",
  "Title": "Microsoft Dynamics CRM Query - T4 Template",
  "Description": "In short, this project provides a LINQ style data access solution for Microsoft CRM 4.0.\n\nIt provides a T4 Template that generates code leveraging LINQ to SQL and the MS-CRM 4.0 API to give a MS-CRM CRUD data access solution.  Special Support for WCF RIA Services is also provided",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />In short, this project provides a LINQ style data access solution for Microsoft CRM 4.0.<br /><br />It provides a T4 Template that generates code leveraging LINQ to SQL and the MS-CRM 4.0 API to give a MS-CRM CRUD data access solution.  Special Support for WCF RIA Services is also provided<br /><br /><b>Requirements</b>\n<ol><li>Visual Studio 2008/2010 </li>\n<li>Microsoft Dymanics CRM 4.0</li></ol>\n<br /><b>Features</b>\n<ol><li>Uses LINQ to SQL for Querying the CRM database, but uses the CRM 4.0 API for Create, Update, Delete operations - so data integrity is maintained.</li>\n<li>Refreshes the Data for each entity after a Create or Update so that values changed in plugins and any default values are set to the latest value.</li>\n<li>Can generate only selected entities, rather than the entire CRM Entity list.</li>\n<li>Support for WCF RIA services and any other technology that takes advantage of LINQ to SQL</li>\n<li>The T4 Templates are customizable, so if you don&#39;t like the way somethings done or you want to extend the functionality, it&#39;s completely transparent and you can just change it.</li>\n<li>Generation of code is done within the Visual Studio IDE, no need to call any external tools to re-generate the code when CRM Schema changes.</li>\n<li>The User Roles / Business Units security are applied to filter the data when using integrated security on your connection string.</li>\n<li>Generates all the 1:N, N:1 and N:N relationships between CRM entities.</li>\n<li>Generates all the Picklist values as statically typed variables.</li>\n<li>Can be used from an external application, a plugin or a workflow activity.</li></ol>\n<br /><b>How can I try it out?</b>\n<ol><li>Download the Source Code</li>\n<li>Edit the Template\\Include\\Settings.ttinclude file to point toward your MS CRM Organization and Database</li>\n<li>Click the &quot;Transform All Templates&quot; button (Found in the Solution Explorer Window)</li>\n<li>Edit the app.Config file in the Unit Test Project to point toward your MS CRM Organization and Database</li>\n<li>Run the unit test project</li>\n<li>** NOTE: If you use Windows Explorer to unzip, you may need to &quot;Unblock&quot; all the *.dll, *.tt and *.ttinclude files through windows explorer (e.g. file properties, &quot;Unblock&quot; button), otherwise it will not let you generate the templates</li></ol>\n<br /><b>How does it work?</b>\n<ol><li>LINQ to SQL&#39;s SQLMetal.exe tool is invoked and all the FilteredViews are extracted from the database into DBML</li>\n<li>The DBML is manipulated, changing entity and attribute names and adding 1:N and M:M relationships between entities.</li>\n<li>The DBML is then used to Generate Standard LINQ to SQL Code in C#</li>\n<li>The LINQ to SQL Classes that are generated are extended via partial classes to offer alternative Insert, Update and Delete operations that go throught the CRM API.</li>\n<li>Check the Unit Tests to find examples of how to do some common operations.</li></ol>\n<br /><b>Troubleshooting</b>\n<ol><li>Make sure that you have System Administrator Rights in MS CRM and that you have sufficient rights to extract the database schema information in SQL Server when you transform the template.</li>\n<li>Check the SQLMetalPath in the settings.ttinclude file and make sure you have the correct path to the SQLMetal.exe tool.</li>\n<li>Check the Template\\CrmEntities.SQLMetalOutput.txt file to make sure that SQLMetal Ran Correctly.</li>\n<li>If you have issues Updating or Creating, check to see what you would normally do in CRM - make sure that you are only updating those fields that you would normally do (e.g. updating status attribute directly in CRM is not allowed by CRM and hence is not allowed by this tool).</li>\n<li>If you want to debug the T4 template, please do! In order to do a debug of the template:\n<ol><li>Simply open another instance of Visual Studio</li>\n<li>Use Tools --&gt; Attach to Process and Choose the Visual Studio instance which contains the T4 Template</li>\n<li>You cannot use standard break points, so in the T4 Template code put in the following line where you want a break point:\n<ol><li>if(System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Break();</li></ol></li>\n<li>In Solution Explorer, use the &quot;Transform All Templates&quot; button to force execution of the template.</li>\n<li>If you get permissions errors, you may need to &quot;Unblock&quot; all the *.dll, *.tt and *.ttinclude files through windows explorer (e.g. file properties, &quot;Unblock&quot; button), otherwise it will not let you generate the templates.</li></ol></li></ol>\n<br /><b>Known Limitations</b>\n<ol><li>Self referencing Many to Many Relationships are ignored\n<ol><li>If a Many to Many relationships is referencing the same entity on both ends, this relationship will not be generated.  Hopefully, this is very rare - it is possible to support and I will get around to fixing it at some stage.</li></ol></li>\n<li>Multi-Targeted Relationships not fully implemented\n<ol><li>When a Lookup Targets multiple entities, those targetted entities will not have a child to parent relationship, however the parent to child relationship exists.</li></ol></li>\n<li>Cascading Deletes for relationships not implemented yet - you will need to manually do this for the time being.</li>\n<li>Only Generates C# Classes at this stage.</li></ol></div><div class=\"ClearBoth\"></div>",
  "TagList": "CRM,LINQ TO SQL,Microsoft CRM,Microsoft CRM 4.0,Microsoft Dynamics,LINQ to CRM,",
  "LastEdited": "2011-01-23T12:58:50.16-08:00"
}