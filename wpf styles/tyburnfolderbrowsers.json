{
  "ProjectName": "tyburnfolderbrowsers",
  "Title": "WPF Folder Browsers (2012)",
  "Description": "This is a demonstration project that shows three different folder selectors implemented as wpf user controls.\r\n\r\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This is a demonstration project that shows three different folder selectors implemented as wpf user controls.<br /><br /><br />These are folder selectors designed to integrate with WPF projects that use the Model View View-Model (MVVM) design pattern.<br /><img src=\"/projects/tyburnfolderbrowsers/5e905824-b07d-4806-8064-7ac55e484e38\" alt=\"FolderSelectorSample.jpg\" title=\"FolderSelectorSample.jpg\" /><br />The first control, shown here on the left, allows the user to drag-drop the desired folder.  To be consistent with the MVVM pattern, the drop event is converted into a command using &#39;attached behaviour&#39;.  This code leverages off an article appearing at <a href=\"http://www.wpfsharp.com/2012/03/22/mvvm-and-drag-and-drop-command-binding-with-an-attached-behavior/\">http://www.wpfsharp.com/2012/03/22/mvvm-and-drag-and-drop-command-binding-with-an-attached-behavior/</a>.  The control itself uses a rigorously compliant &#39;view model&#39; approach so as to integrate with a larger MVVM project.<br /><br />The second control, shown here in the middle with the heading &#39;Multi Directory Selector&#39;, allows the user to select multiple folders.  Each folder is presented with a check box for selection or deselection.  The list is bound to a collection of bespoke objects in the view model.  The control itself uses a rigorously compliant &#39;view model&#39; approach so as to integrate with a larger MVVM project.  <br /><br />The third control, shown on the right, is a more traditional folder browser and selector.  It is a wpf list box which is populated with standard C# DirectoryInfo objects.  The user is meant to navigate to the desired folder by double clicking the relevant list box items.  In order to be compliant with MVVM principles, the double click event is translated into a command using an &#39;attached behaviour&#39;.  The control itself uses a rigorously compliant &#39;view model&#39; approach so as to integrate with a larger MVVM project.  <br /><br />Commanding is done using the Relay Command class <a href=\"http://msdn.microsoft.com/en-us/magazine/dd419663.aspx\">http://msdn.microsoft.com/en-us/magazine/dd419663.aspx</a> which is implemented in its own assembly.  This class can be easily substituted for Prism&#39;s &#39;Delegate Command&#39; class.<br /><br />The application itself has no other purpose than to show these controls.</div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,WPF,Data Binding,Drag And Drop,User Control,MVVM,VS2012,folder selector,directory selector,attached behaviour,attached behavour,commanding,view model,folder browser,",
  "LastEdited": "2013-01-12T00:26:56.877-08:00"
}