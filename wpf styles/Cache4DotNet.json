{
  "ProjectName": "Cache4DotNet",
  "Title": "Cache Providers For .NET",
  "Description": "Cache Provider for .NET helps enterprise applications use popular Provider model.  It ships with AppFabric Cache Provider (code named Velocity) and Classic Cache Provider and can be used with ASP.NET, Windows Forms, Windows Services, WCF and WPF.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b><u>Update:</u>25th-Sep-2012 </b>\n<ul><li>New download is available with Dependency Management support for Oracle.  <a href=\"https://cache4dotnet.codeplex.com/wikipage?title=Dependency%20Management%20support%20for%20Oracle&referringTitle=Home\">Dependency Management support for Oracle</a></li></ul>\n<b><u>Update:</u>24th-Sep-2012 </b><br /><b>Dependency Management support for Oracle coming soon.....stay tuned!</b><br /><b><u>Introduction</u>:</b><br /><br /><b><i>Cache Provider for .NET</i></b> helps enterprise applications leverage the benefits of the established Provider Model in .NET while enabling Cache for the applications. Driven by configuration, it abstracts application code from the Cache Store and provides an API which is easy to use.  It ships with <b>AppFabric Cache Provider</b> (code named Velocity) and <b>Classic Cache Provider</b> and can be used with the following Application Models: ASP.NET, Windows Forms, Windows Services, WCF and WPF.<br /><br /><b><u>Usage Scenarios:</u></b>\n<ul><li>As a cache layer in .NET applications to improve performance by encaching reference data with the benefit of replaceable caching store through configuration.</li>\n<li>Caching Service Responses (WCF,ASMX) wherever suitable.  <i>See utilities in the source code for How-to</i></li>\n<li>Caching ASP.NET Page responses wherever suitable. <i>See utilities in the source code for How-to</i></li>\n<li>Automatic Cache Sync as dependencies change.  Facilitates zero cache-miss when a client accesses the same data next time.</li></ul>\n<br /><br /><b><u>Benefits</u>:</b><br />\n<ul><li>Cache Store can be changed using configuration settings.</li>\n<li>One provider for <b>In-Proc</b> and  one for <b>out-of-proc</b> Cache shipped.</li>\n<li>Dependency management support for both In-Proc and out-of-proc Cache.  Currently, provides support for SQL Server.</li>\n<li>Support to automatically update cache with new data incase dependencies change. Callbacks can be invoked on the UI thread irrespective of Application model.</li>\n<li>Support to manage dependencies for out-of-proc Cache even if all the cache client applications go out-of-scope through a separate windows service.</li>\n<li>Sample usage scenarios for ASP.NET, WCF, WPF, Win Forms provided in the download.</li>\n<li><b>Custom HttpModule</b> based caching for ASP.NET response provided.</li>\n<li><b>Custom OperationBehavior</b> based WCF Operation response caching provided.</li></ul>\n<br /><b><u>Steps to use CacheProvider in a .NET solution</u></b><br />1.\tInstall and configure Windows Server AppFabric (if you want to use AppFabric Cache) <br />                <a href=\"http://www.microsoft.com/downloads/en/details.aspx?FamilyID=467e5aa5-c25b-4c80-a6d2-9f8fb0f337d2&amp;displaylang=en\">http://www.microsoft.com/downloads/en/details.aspx?FamilyID=467e5aa5-c25b-4c80-a6d2-9f8fb0f337d2&amp;displaylang=en</a><br /><br />2.\tTo enable SqlDependency notification, run the following statements in the DB in context:<br /><br /><pre>                ALTER DATABASE &lt;DB_NAME&gt; SET ENABLE_BROKER;\n                CREATE QUEUE ContactChangeMessages;\n                CREATE SERVICE ContactChangeNotifications  ON QUEUE ContactChangeMessages   \n                ([http://schemas.microsoft.com/SQL/Notifications/PostQueryNotification]);\n</pre><br /><br />3.\tMake sure to enable Notifications support for the CacheName(s) required by following these steps:<br /><b></b>.\tStart <b>“Caching Administration Windows PowerShell”</b> from AppFabric Menu.\n<ul><li>Type the command: <b>Get-CacheConfig &lt;CacheName&gt;</b></li></ul>\n\tWhere CacheName is the NamedCache value or “default”\n<ul><li>Note that the property “NotificationsEnabled” is set to True.  If not, run the following command to set it: </li>\n<li><b>Set-CacheConfig -CacheName &lt;CacheName&gt; -NotificationsEnabled True</b></li></ul>\n<br />4.\tAdd Reference to “CacheProvider.dll” or CacheProvider project (if using Source code).<br />5.\tAdd reference to “CacheProvider.Classic.dll” and\\or “CacheProvider.AppFabric.dll” depending on which provider you want to use.<br /><br />6.              <b><u>Sample Configuration</u>:</b><br /><br /><pre>  &lt;cacheProvider defaultProvider=&quot;ClassicCacheProvider&quot;&gt;\n    &lt;providers&gt;\n      &lt;add name=&quot;ClassicCacheProvider&quot;\n           type=&quot;CacheProvider.Classic.ClassicCacheProvider, CacheProvider.Classic&quot;\n           defaultExpirationTimeInMS=&quot;20000&quot; /&gt;\n\n      &lt;add name=&quot;AppFabricCacheProvider&quot;\n           type=&quot;CacheProvider.AppFabric.AppFabricCacheProvider, CacheProvider.AppFabric&quot;\n           defaultExpirationTimeInMS=&quot;20000&quot;\n           dataCacheFactoryPoolSize=&quot;5&quot;\n           eagerPooling=&quot;true&quot; /&gt;\n    &lt;/providers&gt;\n  &lt;/cacheProvider&gt;\n\n &lt;!--AppFabric Configuration--&gt;\n  &lt;dataCacheClient&gt;\n    &lt;!--pollInterval is in seconds--&gt;\n    &lt;clientNotification pollInterval=&quot;1&quot; maxQueueLength=&quot;10000&quot;/&gt;\n    &lt;hosts&gt;\n      &lt;host\n         name=&quot;Rahul-PC&quot;\n         cachePort=&quot;22233&quot;/&gt;\n    &lt;/hosts&gt;\n    &lt;!--&lt;securityProperties mode=&quot;Transport&quot; protectionLevel=&quot;EncryptAndSign&quot; /&gt;\n    &lt;transportProperties connectionBufferSize=&quot;131072&quot; maxBufferPoolSize=&quot;268435456&quot;\n                         maxBufferSize=&quot;8388608&quot; maxOutputDelay=&quot;2&quot; channelInitializationTimeout=&quot;60000&quot;\n                         receiveTimeout=&quot;600000&quot;/&gt;--&gt;\n  &lt;/dataCacheClient&gt;\n\n</pre><br /><br />7.              <b><u>Sample Usage</u>:</b><br /><br /><pre>        public List&lt;Product&gt; GetProductList()\n        {\n\n            const string key = &quot;SqlDependencyCache&quot;;\n\n            var products = CacheBroker.Get&lt;List&lt;Product&gt;&gt;(key);\n\n            if (products == null)\n            {\n                products = GetProductsFromDB();\n\n                CacheBroker.Put(key, products);                \n            }\n\n            return products;\n        }\n\n        private static List&lt;Product&gt; GetProductsFromDB()\n        {\n            var products = new List&lt;Product&gt;();\n            using (var connection = new SqlConnection(GetConnectionString()))\n            using (var sqlCommand = new SqlCommand(GetSQL(), connection))\n            {\n                connection.Open();\n                IDataReader reader = sqlCommand.ExecuteReader();\n                if (reader != null)\n                {\n                    int productIdIndex = reader.GetOrdinal(&quot;ProductId&quot;);\n                    int productNameIndex = reader.GetOrdinal(&quot;ProductName&quot;);\n                    int productLocationIndex = reader.GetOrdinal(&quot;Location&quot;);\n                    int productQuantityIndex = reader.GetOrdinal(&quot;Quantity&quot;);\n                    while (reader.Read())\n                    {\n                        var product = new Product()\n                                          {\n                                              ProductId = reader.GetInt32(productIdIndex),\n                                              Name = reader.GetString(productNameIndex),\n                                              Location = reader.GetString(productLocationIndex),\n                                              Quantity = reader.GetInt16(productQuantityIndex)\n                                          };\n                        products.Add(product);\n                    }\n                }\n            }\n\n            return products;\n        }\n\n</pre><br /><br />8.              <b><u>Sampe Usage with Dependency</u>:</b><br /><br /><pre>\n            const string cacheKey = &quot;Products&quot;;\n            var products = CacheBroker.Get&lt;List&lt;ProductInfo&gt;&gt;(cacheKey); //ProductInfo is an entity\n            if (products == null)\n            {\n                using (var context = new AdventureworksDataContext(GetConnectionString())) //using LINQ2SQL\n                {\n                    products = GetProductDetails(context); //Retuns List&lt;ProductInfo&gt;\n\n                    var dependencyCommand = from product in context.Products\n                                            select product;\n\n                    var dependencyInfo = new DependencyInfo(DependencyInfo.DependencyTypes.SQLDependency)\n                                                           {\n                                                               DBConnectionString = GetConnectionString(),\n                                                               DBName = &quot;AdventureWorks&quot;,\n                                                               IsSQLSelectQuery = true,\n                                                               SelectQuery = context.GetCommand(dependencyCommand).CommandText\n                                                           };\n\n                    CacheBroker.Put(cacheKey, products, dependencyInfo);\n                }\n            }\n</pre><br /><br />9.              <b><u>Logical Block Diagram</u>:</b><br /><br /><img src=\"/projects/Cache4DotNet/1fbdba5d-25fb-4a35-9778-14631f22ae60\" alt=\"CacheProviderBlockDiagram1.jpg\" title=\"CacheProviderBlockDiagram1.jpg\" /><br /><br /><br />To download, please visit the Source Code tab.</div><div class=\"ClearBoth\"></div>",
  "TagList": "cache,AppFabric Caching,AppFabric,provider,WCF Cache,ASP.NET Cache,Distributed Cache,.NET Cache,Caching,Cashe,",
  "LastEdited": "2012-09-25T07:21:13.963-07:00"
}