{
  "ProjectName": "expect",
  "Title": "Expect framework",
  "Description": "Expect is a framework for writing tests in natural language (including BDD style) and as executable specifications.\nIt integrates with your unit test framework and with VisualStudio, in order to provide a smooth development workflow.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rExpect is a framework for writing tests in natural language &#40;including BDD style&#41; and as executable specifications.<br />It integrates with your unit test framework and with VisualStudio, in order to provide a smooth development workflow.<br /><br />If you have any question, you could join the mailing list &quot;expect-framework&quot; on <a href=\"http://groups.google.com/group/expect-framework\">http://groups.google.com/group/expect-framework</a>.<br />You could also check the blog here <a href=\"http://expectframework.wordpress.com\">http://expectframework.wordpress.com</a>.<br />\n<h2>What is an executable specification ?</h2>\rThe goal is to have a document that describe the way your system behave (a specification), and to be able to prove that document against the actual system.<br /><br />One of the precursor for this kind of testing is Fit (<a href=\"http://fit.c2.com/\">http://fit.c2.com/</a>). Fit inspire a lot of other projects : Fitnesse (<a href=\"http://fitnesse.org/\">http://fitnesse.org/</a>) and GreenPepper (<a href=\"http://www.greenpeppersoftware.com/\">http://www.greenpeppersoftware.com/</a>), Concordion, ...<br /><br />With this kind of tools, you usually have a specification document in one form or another (text, html, word, etc) and you write fixture to bridge specification and system under test.<br /><br />A typical Expect specification looks like this within Visual Studio :<br /><br /><pre>\nMy grand-mother loves | a lot of things |\n| name       | love level |\n| apple pie  | very much  |\n| ice-cream  | much       |\n\n#this is a text description that is not considered as executable\nBut she don&#39;t love |spiders|\n</pre><br /><br />From this text specifications, you could generate a specification document that you could version, and share with others. <br />\n<h2>Why another tool ?</h2>\r\nMost tool in this field use a Wiki as a repository for specifications. The problem is that Wikis are not practical from the developper point of view. The wiki is not integrated in your environment, and you have to version your specification along with the system, which could be very hard with a wiki.<br /><br />The primary motivation for using Wikis was to get the customer involved in writing the specifications. Experience shows that most of the time, they don&#39;t... And they probably should not. Customers have to provide their own added value...<br />Customers must get involved in defining and validating specifications, but they usually have better use of their time than writing specifications.<br /><br />The goal of Expect framework is to provide a tool that is developper friendly and fully integrated into Visual Studio. Developper write specification, fixtures, and generate specification document from within Visual Studio. The specifications are stored in your source control repository like any other file. <br /><br />The specification run with your favorite unit test framework, and could be generated from the command line. It means that Expect integrate nicely in your continuous integration system without new skills or configuration.<br /><br />The syntax is very flexible and allow for writing atomic specifications (like BDD style) but also for larger scale specifications (like integration tests).<br /><br />Moreover, there are not so many (free) tools in the .Net ecosystem in this field.<br />\n<h2>Roadmap</h2>\r\n<b>Beta 3</b> : Enhancing report generation <br /><b>RC</b>                          : Bugfix and Visual Studio integration improvements<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "Visual Studio,testing framework,Testing,test,Specification,BDD,executable spec,",
  "LastEdited": "2010-09-07T06:45:46.803-07:00"
}