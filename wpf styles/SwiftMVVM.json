{
  "ProjectName": "SwiftMVVM",
  "Title": "SwiftMVVM",
  "Description": "An extremely fast, easily refactorable implementation of INotifyPropertyChanged/ing, using dynamic proxy generation, as well as a robust change tracking engine.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Swift MVVM</strong><br>\r\n<br>\r\nThe purpose of Swift MVVM is twofold, first we wanted to solve the problem of invoking the PropertyChanged, and optionally PropertyChanging events of INotifyPropertyChanged, and INotifyChanging respectively. Secondly we wanted to see how well we could leverage\r\n the information generated by these events to monitor changes to the object graph from any point in time. Using that change data to log changes to the model, provide undo/redo logic, and even generate database change statements.</p>\r\n<p>One of the problems many developers run into is making sure the property name that they pass to their changed/ing events properly match the property that just changed. Since it&rsquo;s just a string they&rsquo;re passing, it&rsquo;s really easy to run into\r\n problems when refactoring. We&rsquo;ve seen some frameworks that require you to derive from a base class that handles the notification. The approach we&rsquo;ve taken is to only require that you implement INotifyPropertyChanged( and optionally INotifyPropertyChanging),\r\n then at runtime we generate a type that derives from your type overriding the property setter. Our overridden setter will then fire the property changed/ing events for you.</p>\r\n<p>So rather than write code like this, where you need to define a backing field and make sure the string you pass to RaiseXXX matches your actual property name.</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#0000ff\">private\r\n</span><span style=\"color:#4bacc6\">int </span>premium;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#0000ff\">public </span>\r\n<span style=\"color:#4bacc6\">int </span>Premium<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#0000ff\">\r\nget</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return\r\n<span style=\"color:#0000ff\">this</span>.premium;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#0000ff\">\r\nset</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (<span style=\"color:#0000ff\">this</span>.premium !=\r\n<span style=\"color:#0000ff\">value</span>)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RaisePropertyChanging(<span style=\"color:#c0504d\">&quot;Premium&quot;</span>);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:#0000ff\">this</span>.premium = <span style=\"color:#0000ff\">value</span>;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RaisePropertyChanged(<span style=\"color:#c0504d\">&quot;Premium&quot;</span>);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>You can now write code like this, and we generate the rest. By marking your property virtual (and as you can see we support automatic properties), we override the property_set to fire off property changed in a proxy class.</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#9bbb59\">&nbsp;</span><span style=\"color:#646b86\">/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// <span style=\"color:#9bbb59\">Represents the premium of a policy</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#4bacc6\"><span style=\"color:#000000\">[</span>NotificationProperty</span><span style=\"color:#000000\">]</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#0000ff\">public virtual</span>\r\n<span style=\"color:#4bacc6\">int </span>Premium { <span style=\"color:#0000ff\">get</span>;\r\n<span style=\"color:#0000ff\">set</span>; }</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,INotifyPropertyChang,Undo Redo Framework,MVVM,NotifyPropertyChange,Dynamic Assembly,POCO,Model View ViewModel,automatic properties,OpCodes,Reflection.Emit,",
  "LastEdited": "2012-07-04T21:18:30.533-07:00"
}