{
  "ProjectName": "SobrietyEngine",
  "Title": "SobrietyEngine",
  "Description": "Extensible object-oriented C# game engine using XNA 4.0, based on a design philosophy of data-driven, reusable COM-style actor components and event based communication between engine services. \r\nThe current focus is on 2 and 2.5D games, using Farseer Physics Engine for collision and physics simulation. Full 3D is supported, but collision and physics do not have built in support yet.\r\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">&lt; <a href=\"https://sobrietyengine.codeplex.com/wikipage?title=current%20screenshots&referringTitle=Home\">current screenshots</a> &gt;<br /><br /><b>Update</b><br />I am currently unable to continue work on this project due to my employers non-compete agreement. If anyone is interested in taking it over, send me a message.<br /><br /><b>Project Description</b><br />Extensible object-oriented C&#35; game engine using XNA 4.0, based on a design philosophy of data-driven, reusable COM-style actor components and event based communication between engine services. <br />The current focus is on 2 and 2.5D games, using Farseer Physics Engine for collision and physics simulation. Full 3D is supported, but collision and physics do not have built in support yet.<br /><br />SobrietyEngine was designed with extensibility in mind, using Event based communication and a data-driven COM design to create maximum reuse of the core engine. Every object and class is designed to be extended and modified. The projects main focus is for my personal projects, but hopefully its being written in such a way others can make use of it or learn from it. Current development is being done on windows, but there are plans for xbox testing.<br /><br /><b>Current Development Info</b><br />Progress will be slow for the next couple of months, due to time constraints and other projects.<br /><br /><i>note</i> : Undergoing heavy refactoring and development. <br /><i>Warning</i> : All progress is accomplished in an agile way (read: features added and fixed as my projects require it).<br /><br />Beta will be released once I have cleaned up and documented all code, as well as completed at least one or two small games as examples. This will likely happen early 2012.<br /><br /><b>Recent Major Progress</b>\n<ul><li>Displaying of older Doom style sector floors, walls, ceilings, including concave/convex sectors with arbitrary number of holes.</li>\n<li>Simple mercury particle engine integration</li></ul>\n<br /><b>Examples</b><br />There are currently no official example projects, however, a testbed game project is included that is use for testing, and will continue to be kept up to date.<br />The example game can be found at:<br />CheckoutDir\\ExamplesAndTests\\TestGame\\VoidGame\\<br /><br /><br /><b>Latest Screenshot</b><br />Latest development screenshot:<br />Screenshot showing a random Mesh obtained from google sketchup warehouse with 8K faces, auto generating farseer static geometry. The grey circles and green lines are farseer debug drawings of active physics objects.<br /><img src=\"/projects/SobrietyEngine/0ea3cf97-3041-4a5a-9a0f-980f1e978a8f\" alt=\"current.png\" title=\"current.png\" /><br /><br /><b>Currently Supported Platforms </b>\n<ul><li>Windows 7</li>\n<li>Plans to allow Running in: Silverlight, Winforms, 360, Windows Phone</li></ul>\n<br /><b>Currently implemented features (in varying stages of completeness):</b><br />\n<ul><li>Event system: Components and game services subscribe and throw events to communicate and respond without tightly coupling objects. In cases where performance is required, direct accessing of systems and components is possible.</li>\n<li>Level / Scene creation: Current implementation allows loading of a 3D level mesh, slicing it by a 2D plane, and creating 2D level geometry (static farseer physics edges) based on the cross section. </li>\n<li>Object GUIDs: creates and handles unique guids for game objects - allows for specific naming and retrieval of objects by user defined names or by use of run time created GUIDs. Allows for quick comparison between objects without having its specific instance. </li>\n<li>Actor Game Service: handles loading and creating of actors from actor template files (actor definitions).</li>\n<li>Actor Template Editor: (in progress) - editor for actor template files, linked to actor components and populated with customizable component parameters for easy editing</li>\n<li>Actor Components: COM design for actors, handles components used to define and build actors. Components currently include: Animations, Life, Movement, Collision Bodies, Responders, Physics Bodies, Sound Effectors, User controllers, Collision Responders, Post Processing shaders, Model components, textured quads, cameras</li>\n<li>Scene game service: Manages game scenes. Scenes handle storing, updating, rendering of actors. Currently there is a simple Scene that stores actors in a list. Plans include adding scene graph examples.</li>\n<li>Input Handling: Event based system to decouple input from actions in game, allows for easy creating of various input devices. currently supports Xbox360 controller and keyboard</li>\n<li>Screen management: Screen based menu/gameplay system</li>\n<li>Texture Management: handles loading and tracking of used and unused textures for sprites</li>\n<li>Animation Management: Components and animation library for animations of sprites</li>\n<li>Farseer Physics Engine integration: Actor Components and physics system for use of farseer</li>\n<li>Sound and Music Management: event based sound system</li></ul>\n<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "XNA,game engine,game,XBox360,Physics,Farseer Physics,2d,3D,2.5d,.NET,C#,",
  "LastEdited": "2011-12-06T15:43:08.343-08:00"
}