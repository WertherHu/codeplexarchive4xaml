{
  "ProjectName": "MVVMFramework",
  "Title": "MVVM Framework",
  "Description": "MVVM Framework is a set of base implementation of MVVM principles and components helping to quick and efficient develop WPF business applications.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rMVVM Framework is a set of base implementation of MVVM principles and components helping to quick and efficient develop WPF business applications.<br /><br />The MVVM Framework makes it easier to develop WPF applications using the Model-View-ViewModel design pattern. It covers three different layers.<br />\n<h1>Features</h1>\r\n<ul><li>Different view models</li>\n<li>Amazing implementation of INotifyPropertyChanged</li>\n<li>Basic view layer</li>\n<li>Binding converters</li>\n<li>And other useful classes, approaches and MVVM features</li></ul>\n\n<h1>View</h1>\rThe MVVMFramework.View library contains a base implementation of Window. This realization contains basic communication with view model, such as closing Window by view model request.<br />Also this library contains value converters you can use to data-binding operations.<br />\n<h3>Controls</h3>\r\n<blockquote><blockquote><b>Expander</b></blockquote></blockquote>\n<blockquote><blockquote><blockquote><img src=\"/projects/MVVMFramework/57b5febc-d847-433b-a019-77af3c312a70\" alt=\"expander.png\" title=\"expander.png\" /></blockquote></blockquote></blockquote>\n<blockquote><blockquote><b>Watermark</b></blockquote></blockquote>\n<blockquote><blockquote><blockquote><img src=\"/projects/MVVMFramework/6a46cde6-eb19-44fd-953f-e808de82fe85\" alt=\"watermark.png\" title=\"watermark.png\" /></blockquote></blockquote></blockquote>\n<blockquote><blockquote><b>DateTimePicker</b></blockquote></blockquote>\n<blockquote><blockquote><blockquote><img src=\"/projects/MVVMFramework/d07059f3-b59b-41bf-b532-54b63f873bdd\" alt=\"datetimepicker.png\" title=\"datetimepicker.png\" /></blockquote></blockquote></blockquote>\n<h3>Converters</h3>\r<blockquote><blockquote><b>BoolToVisibilityConverter</b></blockquote></blockquote><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">BoolToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">VisibleIfTrue</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">BoolToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">CollapsedIfTrue</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">IsReversed</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">True</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">BoolToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">HiddenIfFalse</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">UseHidden</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">True</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">BoolToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">HiddenIfTrue</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">UseHidden</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">True</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">IsReversed</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">True</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\r\n</pre></div><br /><blockquote><blockquote><b>IntegerToVisibilityConverter</b></blockquote></blockquote><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">IntegerToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">VisibleIfZero</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">IntegerValue</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">0</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">IntegerToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">CollapsedIfZero</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">IntegerValue</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">0</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">IsReversed</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">True</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">IntegerToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">VisibleIfSeven</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">IntegerValue</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">7</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">FallbackBehavior</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">ThrowException</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\r\n</pre></div><br /><blockquote><blockquote><b>DefaultValueToVisibilityConverter</b></blockquote></blockquote><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">DefaultValueToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">VisibleIfDefault</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">view</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">DefaultValueToVisibilityConverter</span> <span style=\"color:Red;\">x:Key</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">CollapsedIfDefault</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">IsReversed</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">True</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\r\n</pre></div>\n<h1>View Models</h1>\rThe MVVMFramework.ViewModel library contains a base implementations of view models for use it in a different situations:\n<ul><li><b>Browse view</b>.  Browse is one of the primary views that contains a list of items usually presented as DataGrid or ListView. In this case you can use <b>BrowseEntityViewModel</b>. It helps you to quick build datacontext for this sort of view.</li></ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">class</span> UsersVM : BrowseEntitiesViewModel&lt;User&gt;\n    {\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">string</span> GetTitle()\n        {\n            <span style=\"color:Blue;\">return</span> <span style=\"color:#A31515;\">&quot;Users&quot;</span>;\n        }\n\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> IEnumerable&lt;User&gt; LoadEntities()\n        {\n            <span style=\"color:Blue;\">return</span> AppModel.Instance.GetUsers();\n        }\n\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">bool</span> RunRequest(User entity, Requests request, <span style=\"color:Blue;\">out</span> User result)\n        {\n            <span style=\"color:Blue;\">if</span> (request == Requests.Insert)\n                entity = <span style=\"color:Blue;\">new</span> User();\n\n            UserVM vm = <span style=\"color:Blue;\">new</span> UserVM(entity, request);\n            UserView view = <span style=\"color:Blue;\">new</span> UserView(vm);\n            <span style=\"color:Blue;\">if</span> (view.ShowDialog() == <span style=\"color:Blue;\">true</span>)\n            {\n                result = entity;\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">true</span>;\n            }\n\n            result = <span style=\"color:Blue;\">null</span>;\n            <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">false</span>;\n        }        \n    }\r\n</pre></div>\n<ul><li><b>Edit view</b>.  It is a form for editing object. Contains a set of controls to edit fields of object. You need to use <b>EditEntityViewModel</b> for this sort of view.</li></ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">class</span> UserVM : EditEntityViewModelBase&lt;User&gt;\n    {\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">bool</span> Save(User entity)\n        {\n            <span style=\"color:Blue;\">try</span>\n            {\n                AppModel.Instance.SaveUser(entity);\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">true</span>;\n            }\n            <span style=\"color:Blue;\">catch</span> (Exception ex)\n            {\n                MessageBox.Show(GetExceptionMessage(ex), <span style=\"color:#A31515;\">&quot;Unable to save user&quot;</span>);\n            }\n            <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">false</span>;\n        }\n\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">bool</span> Validate(User entity, <span style=\"color:Blue;\">out</span> <span style=\"color:Blue;\">string</span> validationMessage)\n        {\n            <span style=\"color:Blue;\">if</span> (<span style=\"color:Blue;\">string</span>.IsNullOrEmpty(entity.UserName))\n            {\n                validationMessage = <span style=\"color:#A31515;\">&quot;User Name must be specified&quot;</span>;\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">false</span>;\n            }\n\n            validationMessage = <span style=\"color:Blue;\">null</span>;\n            <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">true</span>;\n        }\n\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">string</span> GetTitle()\n        {\n            <span style=\"color:Blue;\">if</span> (Request == Requests.View)\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">string</span>.Format(<span style=\"color:#A31515;\">&quot;{0}&quot;</span>, Entity.UserName);\n\n            <span style=\"color:Blue;\">if</span> (Request == Requests.Change)\n                <span style=\"color:Blue;\">return</span> <span style=\"color:#A31515;\">&quot;User will be changed&quot;</span>;\n\n            <span style=\"color:Blue;\">if</span> (Request == Requests.Insert)\n                <span style=\"color:Blue;\">return</span> <span style=\"color:#A31515;\">&quot;User will be added&quot;</span>;\n\n            <span style=\"color:Blue;\">return</span> <span style=\"color:#A31515;\">&quot;User&quot;</span>;\n        }\n    }\r\n</pre></div><br /><b>See <a href=\"https://mvvmframework.codeplex.com/documentation\">documentation</a> for more information</b><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-05-12T08:04:26.807-07:00"
}