{
  "ProjectName": "AoA",
  "Title": "Anything Over Anything (Network Tunneling)",
  "Description": "Tunneling software created using the Reactive Extensions framework! Rx is not just for events!!!",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong><span style=\"font-size:16pt\">Tunnelling software created using the Reactive Extensions SDK!</span></strong></p>\r\n<p><strong><span style=\"font-size:16pt; color:#c00000\">Rx is not just for events!!!</span></strong></p>\r\n<p><strong>Source Code</strong>:&nbsp;<a href=\"http://aoa.codeplex.com/releases/view/68178#DownloadId=249102\">http://aoa.codeplex.com/releases/view/68178#DownloadId=249102</a></p>\r\n<p>This is the example of one of the core classes responsible&nbsp;for routing Tcp packets!</p>\r\n<p>This application was written using the early beta of the RX framework, so some functions which are available now were not available then and had to be written from scratch.</p>\r\n<p>The core of the application is expressed in one small class (below)</p>\r\n<hr>\r\n<p>public class TcpTunnel //: ITunnel SOMETHING THAT TAKES A CHANNEL</p>\r\n<p>{<br>\r\n&nbsp; &nbsp; private readonly Subject&lt;TcpTunnelRoute&gt; _routes;</p>\r\n<p>&nbsp; &nbsp;&nbsp;public TcpTunnel(IMessageChannel channel)<br>\r\n&nbsp; &nbsp;&nbsp;{<br>\r\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;_routes = new Subject&lt;TcpTunnelRoute&gt;();</p>\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;channel.Output</p>\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.OfType&lt;TcpConnectionInitiated&gt;()</p>\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.Select(message =&gt; new TcpOutboundTunnel(channel, new TcpConnection(message.Host, &nbsp; &nbsp; message.Port), message.ConnectionId)).Subscribe();</p>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; channel.Output</p>\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.OfType&lt;AcceptTcpConnections&gt;()</p>\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.Select(message =&gt; new TcpInboundTunnel(channel, message.SourcePort, message.DestinationHost, message.DestinationPort)).Subscribe();</p>\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;_routes.Where(r =&gt; r.Direction == TcpTunnelDirection.Inbound)<br>\r\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.Select(r =&gt; new AcceptTcpConnections(r.SourcePort, r.DestinationHost, r.DestinationPort))<br>\r\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.Do(a =&gt; channel.Input.OnNext(a))<br>\r\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.Subscribe();</p>\r\n<p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;_routes.Where(r =&gt; r.Direction == TcpTunnelDirection.Outbound)<br>\r\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.Select(r =&gt; new TcpInboundTunnel(channel, r.SourcePort, r.DestinationHost, r.DestinationPort))<br>\r\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;.Subscribe();<br>\r\n&nbsp; &nbsp;&nbsp;}</p>\r\n<p>&nbsp; &nbsp;&nbsp;public IObserver&lt;TcpTunnelRoute&gt; Routes<br>\r\n&nbsp; &nbsp;&nbsp;{<br>\r\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;get { return _routes; }<br>\r\n&nbsp; &nbsp;&nbsp;}<br>\r\n}</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Reactive Extensio,Tunnel,Tcl,xaml,HTTP,Message,Link,Threading,Concurrency,",
  "LastEdited": "2016-04-26T04:34:52.573-07:00"
}