{
  "ProjectName": "FreeSilverlightChart",
  "Title": "Free Silverlight Chart Control",
  "Description": "Created by: venkata.guddanti\n\nThe FreeSilverlightChart Control provides charting solution in a silverlight environment. It uses XAML and C# to display charts on the silverlight platform. The FreeSilverlightChart Control supports the following chart types: verticalBar cylinderBar horizontalBar stackedVerticalBar stackedHorizontalBar pie area stackedArea line barLine areaLine barAreaLine XYLine scatterPlot radar radarArea funnel circularGauge semiCircularGauge. \n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Created by&#58; venkata.guddanti<br /><br />The FreeSilverlightChart Control provides charting solution in a silverlight environment. It uses XAML and C&#35; to display charts on the silverlight platform. The FreeSilverlightChart Control supports the following chart types&#58; verticalBar cylinderBar horizontalBar stackedVerticalBar stackedHorizontalBar pie area stackedArea line barLine areaLine barAreaLine XYLine scatterPlot radar radarArea funnel circularGauge semiCircularGauge. <br /><br /><br />You can download the original source code from here<br /><a href=\"http://home.comcast.net/~venkata.guddanti/FreeSilverlightChart/FreeSilverlightChart.zip\">http://home.comcast.net/~venkata.guddanti/FreeSilverlightChart/FreeSilverlightChart.zip</a><br /><br /><br /><br />\n<h1>Introduction</h1>\r\nThe FreeSilverlightChart Control provides charting solution in a silverlight environment. It uses XAML and C# to display charts on the silverlight platform.<br /><br />The FreeSilverlightChart Control supports the following chart types:<br /><br /><b>verticalBar</b> - A verticalBar chart uses a series of columns to compare values across groups. Groups are organized horizontally while values are displayed vertically in order to place more emphasis on comparing values and less emphasis on time.<br /><b>cylinderBar</b>  - Similar to veriticalBar; howver in perspective mode, the bars are draws as cylinders.<br />    <b>horizontalBar</b> - A horizontalBar chart uses a series of bars to compare values across groups. Groups are organized vertically while values are displayed horizontally in order to place more emphasis on comparing values and less emphasis on time.<br />    <b>stackedVerticalBar</b>  - A stacked vertical chart is used to compare the contribution of each value to a total across a series.<br />    <b>stackedHorizontalBar</b>  - Simlar to stackedVerticalBar except that the series and the groups are flipped<br />    <b>pie</b>  - One of the most widely used chart types, pie charts show how proportions of data contribute to a whole.<br />    <b>area</b>  - Area charts emphasize the degree of change over time, and also shows the relationship of parts to a whole.<br />    <b>stackedArea</b>  - A stacked area chart is an area chart that uses two or more data series and can be used to compare the degree of change to a total across a series<br />    <b>line</b>  - A line chart illustrates trends in data with the passing of time.<br />    <b>barLine</b>  - A barLine chart shows the combination of vertical bar and line chart. Each value from a series is alternated from a bar to a line, with the first series value displayed as a bar.<br />    <b>XYLine</b>  - An XYLine chart illustrates trends in data with the passing of time. It diffentiates from a normal line chart by having the X Values dictate the display along the X Axis.<br />    <b>scatterPlot</b>  - A scatterPlot chart uses value points to represent data. This chart needs both values along X and Y axis.<br />    <b>radar</b>  - A radar chart is a circular graph on which data are displayed in terms of values and angles.It is a circular chart used primarily as a comparative tool.<br />    <b>radarArea</b>  - This is similar to a radar chart except for the fact that the area enclosed by a series is filled.<br />    <b>funnel</b>  - A funnel charts show how proportions of data contribute to a whole. It is similar to a pie chart but displays as a funnel.<br />    <b>circularGauge</b>  - A circularGuage displays data in a gauge. It has a pivot point, around which a value is rotated so that it can be displayed in relation to maximum and a minimum.<br />    <b>semiCircularGauge</b>  - Similar to a circularGauge except for the fact that the gauge is semiCircular in shape.<br />\n<h1>The Chart Model</h1>\r\nThe FreeSilverlightChart Control uses a model to access the data for displaying a chart. The specific model class must be of type FreeSilverlight.ChartModel.<br /><br />The chart values are draw using YValues 2D array property by the chart modal. Each element in this array must contain an array of doubles. These values in this array represent a series values with in a group. For XYLine and Scatter plots XValues 2D array property is also required.<br /><br />For Pie chart and Funnel chart if the YValues array length is more than one, multiple charts are shown. Each array element in the YValues is used to draw one chart.<br /><br />For circular and semiCircular gauge charts only one series in the YValues is used. Multiple charts are displayed if size of YValues array is greater than one. Each array element in the YValues is used to draw one chart. <br />\n<h1>Rendering Chart in a Canvas</h1>\r\nThe FreeSilverlightChart Control can be easily drawn on any canvas once a ChartModel is specified and a particular chart type is choosen. The following is a code snipped showing its usage:<br /><br />      <i>// Load the chart model my data</i><br />      <i>ChartModel model = </i>loadChartModel();_<br />      <br />      <i>// create the chart and set the prefered properties</i><br />      <i>Chart chart = Chart.CreateChart(Chart.ChartType.PIE, model);</i><br />      <i>chart.IsPerspective = true;</i><br />      <i>chart.LegendPosition = location;</i><br />      <i>chart.AnimationDuration = 1.5;</i><br />      <i>chart.YMajorGridCount = yMajorCount;</i><br />      <i>chart.Format = myformat;</i><br />      <br />      <i>// set the bounds of the chart control</i> <br />      <i>chart.SetBounds(new Rect(0, 0, Width, Height));</i><br />      <br />      <i>// add the custom component</i><br />      <i>this.Children.Add(chart);</i><br />      <br />      <i>// setup the event handler</i><br />      <i>chart.ChartClicked += new ChartEventHandler(ChartClicked);</i><br />      <i>// now draw it</i><br />      <i>chart.Draw();</i><br />      <br />\n<h1>Labeling</h1>\r\nThe FreeSilverlightChart Control provides flexibility for labeling of chart data. The YValues and group labels are the two types of labels used in a chart. <br />\n<h1>YValue Labeling</h1>\rThe YValues(y axis labels for verticalBar, area, line etc. and x axis labels for horizontalBar) are labeled based on the YMajorGridLineCount. The maximum and minimum values are displayed for the YValues even if the YMajorGridLineCount=0.<br />\n<h1>Group Labeling</h1>\rThe group labels(x axis labels for verticalBar, area, line etc. and y axis labels for horizontalBar) are controlled by GroupLabels in the chart model. Please note that the size of the groupLabels may not match the size of the YValues. If the groupLabels size is larger than the YValues size, the chart will display blank after the missing values. This is sometimes useful to chart incomplete data. The groupLabels array may also contain blanks or nulls so that label for an index is ignored. If the groupLabels size is less than the YValues, the axis is divided into portions equal to the size of groupLabels. This feature is useful for labeling large data set.<br />\n<h1>Label Formatting</h1>\r\nThe formatting of the values displayed as labels is controlled by the Format property. The default format is &quot;$#,##0.00;($#,##0.00);0&quot;. <br />\n<h1>Grid Lines</h1>\r\nThe FreeSilverlightChart Control displays displays vertical and horizontal grid lines inside charts. <br />\n<h1>YValues Grid Lines</h1>\r\nThe grid line for YValues(y axis for verticalBar, area, line etc. and x axis for horizontalBar) are controlled by YMajorGridLineCount. The number of yValue labels displayed are also controlled by this attribute. The maximum and minimum values are displayed and then a value is displayed corresponding to each major grid line.<br /><br />For gauge charts minor grid lines are displayed within a major grid section. YMinorGridLineCount attribute is used to control this feature. <br />\n<h1>X Grid Lines</h1>\rThe property XMajorGridLineCount attribute controls the number of vertical major grid lines displayed in the chart. The default value is -1, which implies that the vertical major grid lines are controlled by the groupLabels in the chart model.<br />\n<h1>Legend</h1>\r\nThe FreeSilverlightChart Control displays the series labels as a legend. The LegendPosition property of the chart component controls the display of the legend. The legend can be turned off by setting this attribute to &quot;FreeSilverlightChart.Chart.LegendLocation.NONE&quot;. Please note that legend is never displayed for circular and semicircular gauge chart since these charts display only one series. <br />\n<h1>Perspective</h1>\r\nThe FreeSilverlightChart Control can be displayed in perspective(2.5D) or in 2D. The perspective is purely a visual representation and does not provide any additional detail from a chart in 2D. Please note that perspective flag does not have any effect on radar and gauge charts. <br />\n<h1>Animation</h1>\r\nThe FreeSilverlightChart Control provides support for animation during initial load. The animation is controlled by AnimationDuration property (in seconds). The default value is 1.5 seconds. Setting this attribute to 0 will turn off animation.<br /><br />Please note that the animation should be used with caution, it should not be used at the expense of usability. For e.g. if a page is periodically updating charts using a timer, animation will effect the usability of the chart. <br />\n<h1>Skinning</h1>\r\nThe FreeSilverlightChart Control provides support for skinning of the chart elements. The chart elements are rendered by using XAML returned by a class that implements FreeSilverlightChart.LookAndFeelinterface. A Look and Feel can be registered with the Control using Chart.RegisterLookAndFeel static method.<br /><br />The chart chart control comes with two LookAndFeel implementations : 1)GradientLookAndFeel and 2)TransparentLookAndFeel. A new LookAndFeel can be created by either extending one of these two classes or implementing FreeSilverlightChart.LookAndFeel interface. The GradientLookAndFeel is the default LookAndFeel that is registered with the Chart control. <br />\n<h1>Tooltips</h1>\r\nThe FreeSilverlightChart Control displays tooltips in response to the user moving the mouse on the chart data. The chart control may display multiple tooltips for area and radarArea charts if the user moves the mouse inside an area that is enclosed by multiple series. For line chart and area charts the tooltips display interpolated values. The tooltips display can be turned off by setting DisplayToolTip property to &quot;false&quot;. <br />\n<h1>DrillDown</h1>\r\nThe FreeSilverlightChart control triggers chartClicked event when the user drills clicks on the chart data. The event handler must have the following signature: <i>ChartClicked(object sender, ChartEventArgs e)</i><br /><br /><i>chart.ChartClicked += new ChartEventHandler(ChartClicked);</i><br /><i>....</i><br />    <i>private void ChartClicked(object sender, ChartEventArgs e)</i><br />    _{_<br />      _// Handle the click based on the data that was clicked_<br />    _}_<br />      <br /><br /><br />      <br /><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "Silverlight,Silverlight Controls,chart,FREE,C#,Animation,graph,plot,Charts,Pie Chart,Bar Chart,Line Chart,Funnel Chart,Area Chart,Scatter_Plot Chart,Radar Chart,CircularGauge Chart,Chart Model,Silverlight 2.0,Silverlight Chart,Free Silverlight Cha,",
  "LastEdited": "2008-06-19T12:26:37.897-07:00"
}