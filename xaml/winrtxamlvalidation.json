{
  "ProjectName": "winrtxamlvalidation",
  "Title": "WinRT XAML Validation",
  "Description": "\"WinRT XAML Validation\" is a small helper library to enable validation of user input in C#/XAML WinRT apps (validation definition, execution and UI displaying).",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>\r\n<h2>Project Description</h2>\r\n<p><b></b></p>\r\n<p></b>”WinRT XAML Validation” is a library to enable comprehensive validation of user input in C#/XAML WinRT apps. The implemented validation approach is based on Data Annotations and the\r\n<code>ValidationAttribute</code> class and extends those principles for implicit and explicit synchronous and asynchronous validation of properties and entities as a whole.<br>\r\n<br>\r\n</p>\r\n<p>The library gives you the following functionality:</p>\r\n<ul>\r\n<li><strong>Validation Attributes</strong>: Define custom validation logic with Data Annotations on your model entities. The library contains extended base attributes for validation with support of warnings/errors, async validation and validation logic, that\r\n spans more than one property. </li><li><strong>Implicit Validation Execution</strong>: Use the <code>ValidationBindableBase</code> class on your model entities to perform validation. You can opt-in to let validation execute automatically when a entity property changes (implicit validation).\r\n</li><li><strong>Explicit Validation Execution</strong>: Instead of running validation everytime a property changes on your model entities, you can call the\r\n<code>ValidationBindableBase.ValidateAsync()</code> method explicitly to validate the defined validation attributes.\r\n</li><li><strong>Manual Validation</strong>: Besides the use of validation attributes to define validation logic, you can easily perform custom validation logic and add corresponding validation messages to a Dictionary, using the\r\n<code>ValidationBindableBase.ValidationMessages.Add()</code> method. The provided UI controls will update themselves automatically.\r\n</li><li><strong>Validation UI Controls</strong>: There are two easy-to-use XAML UI controls to show validation messages. First there is the\r\n<code>ValidationPanel</code> control that wraps a control whose bound property should be validated (for example a\r\n<code>TextBox</code>). If validation fires for the property, the <code>ValidationPanel</code> will show a red border (orange for warnings) and optionally the validation message. More than one validation message is supported. The second control is the\r\n<code>ValidationSummary</code>, which can show aggregated validation messages for a whole form and its bound entity. Both controls update immediately when validation messages change, even in async scenarios.</li></ul>\r\n<p>Take a look at the <a href=\"https://winrtxamlvalidation.codeplex.com/documentation\" target=\"_blank\">\r\nDocumentation</a> page for more information how to use the library. And of course feel free to download the current release or the sourcecode and take a look at the readme files and the code documentation.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-09-10T03:21:48.693-07:00"
}