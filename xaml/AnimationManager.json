{
  "ProjectName": "AnimationManager",
  "Title": "Animation Manager",
  "Description": "The Animation Manager project is designed to be a very simple way of adding animations to XAML content.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Animation Manager for Xaml</h1>\r\n<img src=\"/projects/AnimationManager/ce04ee4e-5164-4f91-8097-e08b295c4e69\" alt=\"AnimatedHead.gif\" title=\"AnimatedHead.gif\" /><br />\n<h1>Moved to GitHub</h1>\r<a href=\"https://github.com/brainoffline/AnimationManager\">https://github.com/brainoffline/AnimationManager</a><br /><br />Animation Manager is designed to animate xaml controls in a very very easy way.  These animations work the same way on both Windows 8 as well as Windows Phone 8.<br /><br />There are a number of <b>pain</b> points when animating Xaml controls.  \n<ul><li>If it ain&#39;t easy, it ain&#39;t gonna get done</li>\n<li>It is more often just left out as not seen as important</li>\n<li>There is no design language for animation (Windows 8 has made a good start).  You are most often given images straight out of Photoshop</li>\n<li>Animations start behind the splash screen and are often missed.</li>\n<li>MVVM implementations often complicate the separation of view and model.  View models make animation difficult.  MVCB may be a better approach.</li></ul>\n<br /><b>Animation Manager</b> attempt to address some of these issues.\n<ul><li>Simple is best, but drop down to the next level to do something more powerful</li></ul>\n<br />\n<h2>Three Levels</h2>\rThere are three different approaches to using the Animation Manager.\n<ol><li>Declarative in XAML</li>\n<li>Call built in animations from code</li>\n<li>Define your own animations</li></ol>\n\n<h2>Declarative Animation in XAML</h2>\rThere are three staging for declaring animations\n<ol><li>When a page loads</li>\n<li>When a page closes</li>\n<li>When idling</li></ol>\n<br />Here is an example of animating a button<br /><pre>\n&lt;Button Content=&quot;Hello, World&quot; &gt;\n    &lt;bam:ObjectAnimation.Open&gt;\n        &lt;bam:BounceInUpAnimation Delay=&quot;0.3&quot;/&gt;\n    &lt;/bam:ObjectAnimation.Open&gt;\n    &lt;bam:ObjectAnimation.Idle&gt;\n        &lt;bam:PulseAnimation Duration=&quot;4.0&quot;/&gt;\n    &lt;/bam:ObjectAnimation.Idle&gt;\n    &lt;bam:ObjectAnimation.Close&gt;\n        &lt;bam:BounceOutUpAnimation/&gt;\n    &lt;/bam:ObjectAnimation.Close&gt;\n&lt;/Button&gt;\n</pre><br /><br />The default animations are simple and quick and quickly add to the polish of an app.<br />For the above button, it will bounce in when the screen is loaded, slowly pulsate while the screen is displayed, then bounce out as the screen closes.<br /><br /><b>Animate ListBox Items</b><br />Here is an example of animating a ListBox<br /><pre>\n&lt;Page.Resources&gt;\n\t&lt;bam:FadeInUpAnimation x:Key=&quot;ListBoxAnimation1&quot; Delay=&quot;0.03&quot; Duration=&quot;0.3&quot; Distance=&quot;150&quot; /&gt;\n&lt;/Page.Resources&gt;\n\n&lt;ListBox ItemsSource=&quot;{Binding ExperimentTitleList}&quot; \n    bam:ListAnimation.LoadItem=&quot;{StaticResource ListBoxAnimation1}&quot; \n    bam:ListAnimation.LoadItemDelay=&quot;0.1&quot; /&gt;\n</pre><br /><br /><b>Splash Screen Aware</b>  Animations do not start until the splash screen has been dismissed.<br /><br /><b>Navigating</b> can be a pain if you want to make it pretty. You want your animations to finish before navigating away from current screen.  <br />This is not yet automatic and planned for the 1.0 release.<br /><br /><b>Page Transitions</b><br />Lots of cool page transitions.<br /><br /><br />\n<h2>Animations from Code</h2>\rAsync rocks for animation.  This next bit of code awaits for all animations to finish, before navigating to the next screen.<br /><pre>\n        private async void HelloButton_OnClick(object sender, RoutedEventArgs e)\n        {\n            await Task.WhenAll(\n                ObjectAnimation.AnimateClose(),\n                HelloButton.AnimateAsync(new FlipAnimation()),\n                HelloButton.AnimateAsync(new BounceOutDownAnimation()),\n                SponsorText.AnimateAsync(new LightSpeedOutLeftAnimation())\n            );\n\n            NavigationService.Navigate(new Uri(&quot;/MenuPage.xaml&quot;, UriKind.Relative));\n        }\n</pre><br /><br />\n<h2>Full Control over animations</h2>\rFor those control freaks out there, there is also great control over animations<br /><pre>\nvar sb = new Storyboard();\nvar a1 = grid.AnimateProperty&lt;DoubleAnimationUsingKeyFrames&gt;(\n         &quot;(UIElement.Projection).(PlaneProjection.RotationY)&quot;)\n         .AddEasingKeyFrame(0, 0)\n         .AddEasingKeyFrame(0.3, -90)\n         .AddEasingKeyFrame(0.6, 0, new CubicEase { EasingMode = EasingMode.EaseOut});\nsb.Children.Add(a1);\nsb.Completed += (s, a) =&gt; { };\nsb.Begin();\n</pre><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2014-04-07T09:00:13.847-07:00"
}