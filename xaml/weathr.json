{
  "ProjectName": "weathr",
  "Title": "Weathr (C++, DirectX, and XAML)",
  "Description": "Weathr is a 3D weather app for Windows 8.1 using C++, DirectX, and XAML.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Weathr is a 3D weather app for Windows 8.1 using C&#43;&#43;, DirectX, and XAML.<br />\n<h1>Why a weather app?</h1>\rWhile working on the <a href=\"http://hilo.codeplex.com\">Hilo C++</a> project, I really wanted to further explore the intersection among C++, DirectX, and XAML in the context of a Windows Store app. A 3D weather app seemed novel (I&#39;ve never seen one before) yet doable (arguably easier to implement than a game.) I&#39;m publishing this sample as a way of sharing what I learned and getting your feedback. <br /><br />Although you&#39;re free to use any of the code and patterns you see here in your own apps, remember this is a personal side project of mine -- there&#39;s surely room to improve the architecture and design patterns that are used. Please report any feedback you have on the code in the Issues or Discussions tab. If you find any parts to be particularly useful, or would like to see more discussion on, please let me know that as well!<br /><br />Click the image below for a quick video tour of the app.<br /><a href=\"http&#58;&#47;&#47;www.youtube.com&#47;watch&#63;v&#61;8qZ6X14JzMw\"><img src=\"/projects/weathr/d037d133-7ff9-49b4-9cb5-522d5decdc86\" alt=\"My&#32;Image\" title=\"My&#32;Image\" /></a><br /><br />(Some folks have asked me if this app is in the Windows Store. It is not yet!)<br /><br />\n<h1>What&#39;s needed to run it?</h1>\r<ul><li><a href=\"http://windows.microsoft.com/en-us/windows-8/meet\">Windows 8.1</a></li>\n<li>Visual Studio 2013. Get Visual Studio Express 2013 <a href=\"http://www.microsoft.com/visualstudio/eng/downloads#d-2013-express\">here</a>.</li>\n<li><b>A Bing Maps API key</b>. Get a trial key <a href=\"http://msdn.microsoft.com/en-us/library/ff428642.aspx\">here</a>.</li>\n<li><b>A World Weather Online API key</b>.  Get a trial key <a href=\"http://developer.worldweatheronline.com/member/register\">here</a>.</li></ul>\nAdd your API keys to <b>ServiceKeys.h</b>.<br /><br />I know it&#39;s a bit of a pain, but it&#39;s pretty straight-forward to register for the API keys. You can still run the app without the API keys; you simply won&#39;t be able to access weather data or search for locations.<br />\n<h1>What&#39;s it demonstrate?</h1>\r\nHere are some of the features to look for in this sample. Also see the <a href=\"http://weathr.codeplex.com/documentation\">Documentation</a> tab for technical info about various parts of this project.<br />\n<ul><li>How to use ISO C++ to implement the core logic and C++/CX along the &quot;boundary&quot; where you work Windows Runtime.</li>\n<li>How to use DirectX to manage 3D content and XAML to manage 2D content.</li>\n<li>Using <a href=\"http://msdn.microsoft.com/en-us/library/dd492427.aspx#task_class\">PPL tasks</a> to load assets asynchronously and to perform background work.</li>\n<li>Rendering shared 3D content across pages.</li>\n<li>Capturing 3D content for later use (such as on the live tile and location management page.)</li>\n<li>Displaying current weather info on the live tile.</li>\n<li>Using the secondary tile to bookmark to a specific experience.</li>\n<li>Rendering cloud and star effects in a way that works on both Intel and ARM-based devices.</li>\n<li>Using the <a href=\"http://msdn.microsoft.com/en-us/library/jj969455.aspx\">C++ REST SDK</a> to connect to the weather and Bing Maps services.</li>\n<li>Throttling HTTP requests to limit the number of requests made per second.</li>\n<li>Using app bars to browse the 5 day forecast and perform interesting commands.</li>\n<li>Using <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.input.gesturerecognizer.aspx\">GestureRecognizer</a> to read input events for manipulating the globe.</li>\n<li>Using Semantic Zoom to enable fast navigation. </li>\n<li>Using <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.popups.messagedialog.aspx\">MessageDialog</a> to confirm commands.</li>\n<li>Using the Search contract to search for locations from Bing Maps.</li>\n<li>Downloading and caching images for later use.</li>\n<li>Using app settings to set preferences.</li>\n<li>Using a basic logger to display diagnostic messages on the UI.</li></ul>\n\n<h1>Who worked on it?</h1>\r<ul><li>Development: Thomas Petchel (Microsoft)</li>\n<li>Beta testing: Megan Petchel</li>\n<li>Logo image: Deborah Steinke (Graphic Designer, adaQuest, Inc.)</li>\n<li>Special thanks to Michael Thompson (Microsoft) for helping me with some of the math (before I wised up to using DirectXMath!) and for helping me troubleshoot some of my DirectX code. Also big thanks to Michael B. McLaughlin (Microsoft MVP) and Giovanni Dicanio (Microsoft MVP) for reviewing portions of the code and providing valuable feedback. </li>\n<li>Thanks also to Jennifer Leaf (Microsoft) &amp; Michael Blome (Microsoft) for trying the app out and providing feedback, and to my manager Billie Jo Smith (Microsoft) for supporting this project.</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "DirectX,c++,xaml,Search,Services,Touch,tiles,PPL,C++/CX,Windows Runtime,GestureRecognizer,C++ REST SDK,Casablanca,Windows 8.1,concurrency::task,Secondary Tile,SemanticZoom,Settings Charm,Async,",
  "LastEdited": "2013-12-30T11:26:29.077-08:00"
}