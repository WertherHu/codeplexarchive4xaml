{
  "ProjectName": "pybinding",
  "Title": "PyBinding",
  "Description": "A new binding that allows you to embed tiny, and efficient IronPython scripts in your XAML files.   This helps reduce the number of one-off value converters that tend to plague XAML based applications.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />A new binding that allows you to embed tiny, and efficient IronPython scripts in your XAML files.   This helps reduce the number of one-off value converters that tend to plague XAML based applications.<br /><br />PyBinding derives from MultiBinding, and will run a tiny IronPython script and update the value when property changes occur.  When defining the script you to reference your DataContext and other elements in the visual tree using a shortcut syntax.  (See below)\n<h5>Authors and contributors</h5>\r<a href=\"http://kutruff.wordpress.com\">Andy Kutruff</a>:  Binding architecture, sub-binding syntax implementation, and script caching<br /><a href=\"http://blog.pixelingene.com/\">Pavan Podila</a>:  Very slick interfacing with IronPython and original ScriptConverter<br />Rehan Azam: Script caching and performance improvements<br />David Nazarov: Being an all around bad ass \n<h3>Examples</h3>\r<h4>Conditonal tests</h4>\rDisplay &quot;Null&quot; in a text field if the &quot;People&quot; property off your DataContext is null otherwise display &quot;Not Null&quot;:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock</span> <span style=\"color:Red;\">Text</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{p:PyBinding \\&#39;Null\\&#39; if $[.People] \\=\\= None else \\&#39;Not Null\\&#39;}</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\r\n</pre></div><h4>Math</h4>\rAdds the value of a slider with x:Name=&quot;TheSlider&quot; with the Age property off your data context and rounds the value:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock</span> <span style=\"color:Red;\">Text</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{p:PyBinding Math.Round($[TheSlider.Value] + $[.Age])}</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\r\n</pre></div><h4>Drawing</h4>\rGenerate a line based on a slider value:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Polyline</span> <span style=\"color:Red;\">Points</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{p:PyBinding PointCollection([Point(1\\,$[TheSlider.Value])\\, Point(3\\,4)])}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Stroke</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Black</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">StrokeThickness</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">2</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Stretch</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Fill</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\r\n</pre></div><h3>Sub-binding syntax</h3>\rIn order to use your DataContext, and your VisualTree inside the scripts, you embed sub-bindings with a compact syntax.  These sub-bindings are all contained in a dollar sign and two brackets:  $[]   Under the covers, these are stripped out of the python script and replaced with real WPF bindings.  This is similar to IdentityMine&#39;s EvalBinding.  (An excellent system, however it does not work with Blend and hence the need for PyBinding.)\n<h4>To DataContext</h4>\rAll references to DataContext begin with a period: $[.]  This period means \n<ul><li>$[.] - The object that is your DataContext</li>\n<li>$[.Age] - The age property off your DataContext</li>\n<li>$[.People[0]] - The first object in the People collection off the DataContext.  </li></ul>\n<h4>To UI Elements</h4>\rAll references to other objects in the visual tree use the x:Name of the object.  Note: There is no period at the start of the sub-binding that references a visual element.\n<ul><li>$[NameTextBlock.Text] - The text property of the element with x:Name equal to &quot;NameTextBlock&quot;</li>\n<li>$[NameTextBlock] - An actual TextBlock instance, rather than one of its properties</li>\n<li>$[{Self}] - Bind to your self.  Equivalent to {Binding RelativeSource={RelativeSource Self}}</li>\n<li>$[{Self}.Text] - The Text property off your self.  Equivalent to {Binding Path=Text, RelativeSource={RelativeSource Self}}</li></ul>\n\n<h3>StartupScript.py</h3>\rIn order to reference types beyond standard system types, you should define a file called StartupScript.py in the same directory as your executable.  (Add a file called StartupScript.py to your executable project.  Then, set the &quot;Copy to Output Directory&quot; to &quot;Copy if newer&quot; in the property pane for StartupScript.py.)  Inside this file you should put import statement to types you use in your scripts,as well as any utility functions.  <br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nfrom System <span style=\"color:Blue;\">import</span> *\nfrom System <span style=\"color:Blue;\">import</span> Environment\nfrom System.Windows <span style=\"color:Blue;\">import</span> *\nfrom System.Windows.Media <span style=\"color:Blue;\">import</span> *\nfrom System.Windows.Media.Animation <span style=\"color:Blue;\">import</span> *\nfrom System.Windows.Controls <span style=\"color:Blue;\">import</span> *\nfrom System.Windows.Shapes <span style=\"color:Blue;\">import</span> *\n\ndef BooleanToVisibility(bool):\n    <span style=\"color:Blue;\">return</span> Visibility.Visible <span style=\"color:Blue;\">if</span> bool <span style=\"color:Blue;\">else</span> Visibility.Collapsed\n    \ndef BooleanToHidden(bool):\n    <span style=\"color:Blue;\">return</span> Visibility.Visible <span style=\"color:Blue;\">if</span> bool <span style=\"color:Blue;\">else</span> Visibility.Hidden\n\ndef IsNotNull(value):\n\t<span style=\"color:Blue;\">return</span> value is not None\r\n</pre></div><h4>FindAncestor, StaticResource, and DynamicResource</h4>\rWe designed PyBinding to work inside Expression Blend.  However, Blend is still not able to deal with custom markup extensions gracefully, and PyBinding can&#39;t use the compact sub-binding syntax for constructs that need x:Type or reference resources.  To support this scenario, you must use the expanded binding syntax to specify your sub-bindings.  Though a little bit annoying, it&#39;s not too bad.  For example:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock</span> <span style=\"color:Red;\">Text</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Status</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n   <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock.Foreground</span><span style=\"color:Blue;\">&gt;</span>\n      <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">pb</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">PyBinding</span> <span style=\"color:Red;\">Script</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">var_1 if var_0 &gt;= 0 else var_2</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n         <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Binding</span> <span style=\"color:Red;\">Path</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">CurrentValue</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n         <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Binding</span> <span style=\"color:Red;\">Source</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{StaticResource RedColorBrush}</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n         <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Binding</span> <span style=\"color:Red;\">Source</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{StaticResource GreenColorBrush}</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n      <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">pb</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">PyBinding</span><span style=\"color:Blue;\">&gt;</span>\n   <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TextBlock.Foreground</span><span style=\"color:Blue;\">&gt;</span>\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TextBlock</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div><br />In the above sample, you&#39;ll notice that the IronPython code is inside of a script attribute, and it also does not contain any $[] in that script.  Instead, you see var_0.   var_0 refers to the first child binding below.  In this case, it would be the &quot;CurrentValue&quot; property on the DataContext.   var_1 refers to a red brush that is defined in our resources.   var_2 refers to a green brush also defined in our resources.  In other words, to refer to a sub-binding, use the index of the sub-binding after  var_<br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2010-01-06T08:26:29.757-08:00"
}