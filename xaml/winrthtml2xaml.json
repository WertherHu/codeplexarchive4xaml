{
  "ProjectName": "winrthtml2xaml",
  "Title": "WinRT.Html2Xaml",
  "Description": "A simple project to facilitate converting badly formed html into WinRT-compatible xaml markup.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />A simple project to facilitate converting badly formed html into WinRT-compatible xaml markup.<br />\n<h1>Html2Xaml</h1>\rIt turns out that converting html into Windows 8 xaml is more complex than I had imagined initially. A commendable start has been made by Vincent H at <a href=\"https://github.com/MacawNL/WinRT-RichTextBlock.Html2Xaml\">RichTextBlock.Html2Xaml</a>. Since his solution depends on an xslt conversion, however, it tends not to be useful for badly-formed html. A lot of what I was working with had really poor lists and tables and a simple xslt translation just became unworkable.<br /><br />In the end, I ended up using his framework to get the html bound to the RichTextBlock element, but dropped down to my own library for converting the html. Since no other solution I&#39;ve found handles the kind of scenario I&#39;m embroiled in, I thought I&#39;d make my library accessible to others. This library makes use of the marvelous Html Agility Pack to parse the html and a set of statically configured tag definitions to parse html into Xaml.<br /><br />Customization at this point (besides downloading the code and making your own adjustments) is limited to being able to add attributes to the Xaml elements based on the html tag used. This will allow desired formatting, but is pretty limiting all-told. If demand exists, we can look at building in more functionality.<br /><br />I&#39;ve never done a NuGet package, but that&#39;s probably another good idea to get around to. For now, here&#39;s what we have.<br />\n<h1>Using the library</h1>\rDownload the source or binary and add the reference in your project. When it comes time to convert into Xaml, call one of the two overloads on the Html2XamlConverter class:<br /><br /><pre>Html2XamlConverter.Convert2Xaml(string HtmlString)\nor\nHtml2XamlConverter.Convert2Xaml(string HtmlString, Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; TagAttributers)</pre><br />The second is the one that allows you to add attributes to the Xaml elements emitted. The first key is the html tag, the second is the attribute/value key pair to add. Calling this should go something like:<br /><br /><pre>\nstring XamlString = Html2XamlConverter.Convert2Xaml(Text, new Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; { \n\t{ &quot;p&quot;, new Dictionary&lt;string, string&gt; { { &quot;Margin&quot;, &quot;0,10,0,0&quot; } } },\n\t{&quot;table&quot;, new Dictionary&lt;string, string&gt; { { &quot;Foreground&quot;, &quot;#FF663C00&quot; } } }\n}));\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-12-31T11:17:35.223-08:00"
}