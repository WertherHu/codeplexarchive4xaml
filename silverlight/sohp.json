{
  "ProjectName": "sohp",
  "Title": "SOHP - Sockets Over Hypertext Protocol",
  "Description": "SOHP is a connection proxy/tunnel based on the HTTP protocol designed to allow socket connections from behind strict firewalls. It can also be used to circumvent the security restrictions placed on the Silverlight socket class.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />SOHP is a connection proxy&#47;tunnel based on the HTTP protocol designed to allow socket connections from behind strict firewalls. It can also be used to circumvent the security restrictions placed on the Silverlight socket class.<br /><br /><b>Milestones</b><br /><del>12/28/2011</del> Basic connection tunneling completed. <i>Completed 12/28/2011</i><br /><del>01/06/2012</del> Test via HTTPS/SSL. <i>Completed 12/29/2011</i><br /><del>01/13/2012</del> Change CrossAccessPolicy serving to be configurable. <i>Completed 12/29/2011</i><br /><b>01/13/2012</b> Add support to restrict target hosts for security purposes.<br />01/20/2012 Fully document SOHP protocol.<br /><br /><br /><br /><b>If you are using SOHP in your project, please let us know! We&#39;d like to know what it&#39;s being used for, how it&#39;s being used, and what we can do to improve it.</b><br /><br /><b>Sample Server Implementation</b><br /><pre>\n    partial class SohpProxyServer : ServiceBase\n    {\n        private SohpServer.ProxyServer sohpServer;\n\n        public SohpProxyServer()\n        {\n            InitializeComponent();\n        }\n\n        protected override void OnStart(string[] args)\n        {\n            if (this.sohpServer == null)\n            {\n                 this.sohpServer = new SohpServer.ProxyServer(&quot;https://sohpuri/&quot;);\n                 this.sohpServer.AddCustomContentHandler(&quot;crossaccesspolicy.xml&quot;, SohpProxyServer.ServeCrossAccessPolicy);\n            }\n            this.sohpServer.StartServer(500);\n        }\n\n        private static void ServeCrossAccessPolicy(HttpListenerContext reqContext)\n        {\n            string policyXml = &quot;&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;utf-8\\&quot;?&gt;&lt;access-policy&gt;&lt;cross-domain-access&gt;&lt;policy&gt;&lt;allow-from http-methods=\\&quot;*\\&quot; http-request-headers=\\&quot;*\\&quot;&gt;&lt;domain uri=\\&quot;*\\&quot; /&gt;&lt;domain uri=\\&quot;http://*\\&quot; /&gt;&lt;domain uri=\\&quot;https://*\\&quot; /&gt;&lt;/allow-from&gt;&lt;grant-to&gt;&lt;resource path=\\&quot;/\\&quot; include-subpaths=\\&quot;true\\&quot;/&gt;&lt;/grant-to&gt;&lt;/policy&gt;&lt;policy&gt;&lt;allow-from http-request-headers=\\&quot;*\\&quot;&gt;&lt;domain uri=\\&quot;*\\&quot; /&gt;&lt;domain uri=\\&quot;http://*\\&quot; /&gt;&lt;domain uri=\\&quot;https://*\\&quot; /&gt;&lt;/allow-from&gt;&lt;grant-to&gt;&lt;resource path=\\&quot;/\\&quot; include-subpaths=\\&quot;true\\&quot;/&gt;&lt;/grant-to&gt;&lt;/policy&gt;&lt;/cross-domain-access&gt;&lt;/access-policy&gt;&quot;;\n            byte[] policyData = Encoding.Default.GetBytes(policyXml);\n            reqContext.Response.ContentType = &quot;text/xml&quot;;\n            reqContext.Response.ContentLength64 = policyData.Length;\n            reqContext.Response.OutputStream.Write(policyData, 0, policyData.Length);\n            reqContext.Response.Close();\n\n            return;\n        }\n    }\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-01-04T16:00:55.32-08:00"
}