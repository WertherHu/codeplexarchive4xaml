{
  "ProjectName": "graphlight",
  "Title": "GraphLight. Simple graph layout engine for silverlight.",
  "Description": "Graph layout engine for silverlight",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Graph layout engine for silverlight</h1>\r<h2>Summary</h2>\rThe goal of this project is to provide small simple library to edit and visualize directed graphs.<br />All ideas came from a greate tool <a href=\"http://graphviz.org\">GraphViz</a>.<br />I always wanted to have native C# implementation of souch tool, but there are no open source tools as cool as GraphViz.<br />\n<h2>News</h2>\r<b>08.11.2010</b>\n<ol><li><a href=\"http://graphlight.codeplex.com/releases/view/55298\">V 0.2 Alpha</a> released.</li>\n<li>Demo application updated. Now it supports manual edge routing.</li></ol>\n<b>13.10.2010</b> Demo application updated. Now it supports some Drag&amp;Drop operations.<br /><b>19.07.2010</b> Changed license from GPL v2 to MS-PL.<br /><b>17.06.2010</b> <a href=\"http://graphlight.codeplex.com/releases/view/39578\">V 0.1 Alpha</a> released.<br />\n<h2>Example</h2>\r<a href=\"http&#58;&#47;&#47;graphlight.narod.ru&#47;TestPage.html\"><img src=\"/projects/graphlight/47ae12fe-cfaa-4a85-84c4-4b2cc137e2aa\" alt=\"Click&#32;here&#32;to&#32;navigate&#32;to&#32;silverlight&#32;demo\" title=\"Click&#32;here&#32;to&#32;navigate&#32;to&#32;silverlight&#32;demo\" /></a><br /><br /><b>Click on image to go to online silverlight <a href=\"http://graphlight.narod.ru/TestPage.html\">demo</a>.</b><br />\n<h2>Implementation Details</h2>\rOriginal algorithms are described <a href=\"http://graphviz.org/Documentation/TSE93.pdf\">here</a>. The main concept is that there are four steps in directed graph layout algorithm:\n<ol><li>Node rank assignment</li>\n<li>Node ordering within ranks</li>\n<li>Setting node sizes and coordinates</li>\n<li>Make splines to draw edges</li></ol>\n\n<h3>My interpretation</h3>\rFirst two steps are pure mathematical problems and can be done without any graphics. The third step can be made almost automatically by SilverLight (WPF) engine. And the fourth step shoud be executed &quot;on demand&quot; when initial graph displays and when you drag&amp;drop any node. Morover when you drag&amp;drop node only edges linked to this node should be redrawn. Steps 3 and 4 can be done using data bindings and <a href=\"http://en.wikipedia.org/wiki/MVVM\">MVVM</a> pattern. Actually Graph is ViewModel in my implementation.<br />\n<h2>Roadmap</h2>\r<h3><a href=\"http://graphlight.codeplex.com/releases/view/55298\">V 0.2 Alpha</a></h3>\r<ol><li>Drag&amp;Drop existing nodes</li>\n<li>Manually route edges\n<ol><li>Moving existing control points</li>\n<li>Removing existing control points</li>\n<li>Adding new control points</li></ol></li>\n<li>Custom edge colors and thickness</li></ol>\n<h3>V 0.3 Alpha</h3>\r<ol><li>More node shapes</li>\n<li>Tooltips for each node and edge</li>\n<li>Graph designer (with Drag&amp;Drop support)\n<ol><li>Shapes and arrows toolbox</li>\n<li>Add nodes and arrows from toolbox to design surface</li>\n<li>Connect nodes  </li>\n<li>Edit edge and node properties</li></ol></li></ol>\n<h3><a href=\"https://graphlight.codeplex.com/wikipage?title=Bibliography&referringTitle=Home\">Bibliography</a></h3></div><div class=\"ClearBoth\"></div>",
  "TagList": "graph,layout,Silverlight,visualization,",
  "LastEdited": "2011-02-18T00:36:49.257-08:00"
}