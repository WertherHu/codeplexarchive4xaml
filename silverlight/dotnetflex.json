{
  "ProjectName": "dotnetflex",
  "Title": "DotNetFlex (DNF)",
  "Description": "A simple, sample architecture for those .NET developers who want to use Adobe Flex as their RIA client instead of Silverlight.  Provides a simple AMF Processor for communicating with Flex using your .NET objects in a non-obtrusive way.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rA simple, sample architecture for those .NET developers who want to use Adobe Flex as their RIA client instead of Silverlight.  Provides a simple AMF Processor for communicating with Flex using your .NET objects in a non-obtrusive way.<br /><br />Yes, I know, there are already several ways for your Flash/Flex components to talk to .NET (FluorineFX, WebOrb, BlazeDS, Adobe products, Red5, etc.) and the last thing we all need is another product to learn.  But, when I first started out developing my Flex applications there weren&#39;t as many options (Adobe also had not released the official AMF specification), and the options that did exist had a pretty big impact on how my website project would be structured (page object inheritance, Http modules injected into my processing queue, object structures, lot of configuration to do mapping between server and client types, etc.).  Not to mention, a lot of the solutions were Java based and I didn&#39;t want to go down that path.<br /><br />I already had a large web site application that I wanted to add a Flex component to, and I didn&#39;t want to have to inject another HttpModule or any other structural requirements into my existing application.  I just wanted a simple way for my Flex component to call into my ASP.NET back-end and utilize a lot of code I already had, including the ability to deal with objects on the server and client side in the same way (types, etc).<br /><br />As a result, over time I developed what I feel is a simple component for dealing with Flex/Flash to .NET communication that can be used in your ASP.NET applications and other .NET applications without dictating how you structure your site or application.  In addition, it is simple enough that you can build a much more complicated architecture on top of it using HttpModules or you can just use it on 1 web page or 1 web service.  It doesn&#39;t require any configuration and uses custom attributes to tell the processor how to serialize/deserialize your .NET objects in AMF format (very similar to the way you can customize Xml serialization/deserialization in .NET).<br /><br /><b>Examples</b><br />\n<h2><i>Using the component in an ASP.NET web page</i></h2>\r\nIn this example, let&#39;s assume you have a web page (FlexHandler.aspx) that handles a couple of requests that return the appropriate object to your Flash/Flex client.  Since no actual HTML output will be generated for this page, the .aspx looks like this:<br /><br /><pre>\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeFile=&quot;FlexHandler.aspx.cs&quot; Inherits=&quot;FlexHandler&quot; %&gt;\n</pre><br />The code behind is where we actually do our processing.  In this case, depending on the command requested we process the input parameters and return the appropriate object:<br /><br /><pre>\nusing System;\nusing System.Data;\nusing System.Configuration;\nusing System.Collections;\nusing System.Web;\nusing System.Web.UI;\nusing Kamacho.DNF.AMF;\nusing System.Threading;\n\npublic partial class FlexHandler : System.Web.UI.Page\n{\n    //reference to our processor\n    private AMFProcessor _processor;\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        //initialize the processor to handle the HttpRequest as the input stream\n        //and the HttpResponse as the output stream\n        _processor = new AMFProcessor(this.Request, this.Response);\n\n        //sets the event handler that will process the incoming requests\n        _processor.Command += new AMFProcessor.AMFCommandHandler(_processor_Command);\n        \n        //tells the processor to handle the request and output the results to the \n        //HttpResponse object\n        _processor.ProcessHttpRequest();\n    }\n\n    //is called by the AMFProcessor when it is ready to receive an output value\n    //for a request from the client\n    void _processor_Command(AMFClientRequest request)\n    {\n        switch (request.Command)\n        {\n            case &quot;LoadProfile&quot;:\n                LoadProfile(request);\n                break;\n            case &quot;LoadInvoice&quot;:\n                LoadInvoiceForUser(request);\n                break;\n        }\n    }\n\n    //example of returning a typed object\n    private void LoadProfile(AMFClientRequest request)\n    {\n        //get the profile id from the parameters sent in by the client\n        string profileId = request.GetString(0);\n\n        //normally you would call some component to load a profile object\n        //but in this case we will just initialize one\n        ProfileDTO profile = new ProfileDTO();\n        profile.Id = profileId;\n        profile.Name = &quot;Sample User&quot;;\n        profile.Email = &quot;suser@samples.com&quot;;\n\n        //set the response object to our DTO so we can use it on the client\n        request.Response = profile;\n    }\n\n    //example of returning a generic action script object\n    private void LoadInvoiceForUser(AMFClientRequest request)\n    {\n        //get the current user id, since this page is in our normal ASP.NET application\n        //we have access to anything in our normal AppDomain, including our security \n        //whether we are using Cookies, Sessions, etc....\n        //this way we let our security mechanism handle user params and identity instead\n        //of passing user id as a parameter on the wire\n        string userId = Thread.CurrentPrincipal.Identity.Name;\n\n        //create a generic action script container to return the profile of the current\n        //user and the invoice requested\n        ActionScriptObject aso = new ActionScriptObject();\n\n        //again, normally you would be loading these up from another component\n        ProfileDTO userProfile = new ProfileDTO();\n        userProfile.Id = userId;\n        userProfile.Name = &quot;Current User&quot;;\n        userProfile.Email = &quot;someuser@samples.com&quot;;\n\n        //add it to the action script object\n        aso.AddProperty(&quot;user&quot;, AMFDataType.AMFEnabledObject, userProfile);\n\n        //load up an invoice\n        InvoiceDTO invoice = new InvoiceDTO();\n        invoice.Id = Guid.NewGuid();\n\n        //add it to the action script object\n        aso.AddProperty(&quot;invoice&quot;, AMFDataType.AMFEnabledObject, invoice); \n\n        //add specific properties also\n        aso.AddProperty(&quot;loaded&quot;, AMFDataType.Boolean, true);\n\n        //set the response object\n        request.Response = aso;\n    }\n}\n</pre><br /><b><i>See the Documentation for more in depth examples, a sample website application is provided in the download so you can see the various ways to use this component toolkit</i></b></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2009-01-09T20:13:52.223-08:00"
}