{
  "ProjectName": "reactiveoauth",
  "Title": "ReactiveOAuth",
  "Description": "OAuth library for .NET Framework 4 Client Profile and Windows Phone 7. This is based on Reactive Extensions. All network access return IObservable<T> and everything is asynchronus.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1><b>This project is obsolete, plaease check <a href=\"https://github.com/neuecc/AsyncOAuth/\">AsyncOAuth</a></b></h1>\r<h1><a href=\"https://github.com/neuecc/AsyncOAuth/\">https://github.com/neuecc/AsyncOAuth/</a></h1>\r\n<br /><br /><br /><br /><b>Project Description</b><br />OAuth library for .NET Framework 4 Client Profile, Silverlight 4 and Windows Phone 7.<br />ReactiveOAuth is based on <a href=\"http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx\">Reactive Extensions(Rx)</a><br />All network access return IObservable&lt;T&gt; and everything is asynchronous.<br /><br />Rx is included in Windows Phone 7.<br />If you use ReactiveOAuth then can share code between WPF and Windows Phone 7.<br /><br /><b>Features</b><br />\n<ul><li>support .NET Framework 4 Client Profile, Silverlight 4 and Windows Phone 7.</li>\n<li>support twitter&#39;s xAuth</li>\n<li>easy operation and high affinity for streaming api.</li>\n<li>NuGet Online Package available (<a href=\"http://nuget.org/List/Packages/ReactiveOAuth\">ReactiveOAuth</a>, <a href=\"http://nuget.org/List/Packages/ReactiveOAuth-WP7\">ReactiveOAuth-WP7</a>)</li></ul>\n\n<h1>Tutorial for twitter gettoken/get/post/streaming</h1>\r\n<h2>GetAccessToken</h2>\r\n<img src=\"/projects/reactiveoauth/ef208c32-a177-40a4-8c77-93a02780af41\" alt=\"gettoken.jpg\" title=\"gettoken.jpg\" /><br /><br />GetRequestToken -&gt; BuildAuthorizeUrl(and navigate browser)<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// global variable</span>\n<span style=\"color:Blue;\">const</span> <span style=\"color:Blue;\">string</span> ConsumerKey = <span style=\"color:#A31515;\">&quot;consumerkey&quot;</span>;\n<span style=\"color:Blue;\">const</span> <span style=\"color:Blue;\">string</span> ConsumerSecret = <span style=\"color:#A31515;\">&quot;consumersecret&quot;</span>;\nRequestToken requestToken;\nAccessToken accessToken;\n\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> GetRequestTokenButton_Click(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n{\n    <span style=\"color:Blue;\">var</span> authorizer = <span style=\"color:Blue;\">new</span> OAuthAuthorizer(ConsumerKey, ConsumerSecret);\n    authorizer.GetRequestToken(<span style=\"color:#A31515;\">&quot;http://twitter.com/oauth/request_token&quot;</span>)\n        .Select(res =&gt; res.Token)\n        .ObserveOnDispatcher()\n        .Subscribe(token =&gt;\n        {\n            requestToken = token;\n            <span style=\"color:Blue;\">var</span> url = authorizer.BuildAuthorizeUrl(<span style=\"color:#A31515;\">&quot;http://twitter.com/oauth/authorize&quot;</span>, token);\n            webBrowser1.Navigate(<span style=\"color:Blue;\">new</span> Uri(url)); <span style=\"color:Green;\">// navigate browser</span>\n        });\n}    \r\n</pre></div><br /><img src=\"/projects/reactiveoauth/0ca34de8-4f51-44c2-9b09-1d5c9ce03767\" alt=\"authorized.jpg\" title=\"authorized.jpg\" /><br /><br />(user input pincode) -&gt; GetAccessToken(and other parameter)<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> GetAccessTokenButton_Click(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n{\n    <span style=\"color:Blue;\">var</span> pincode = PinCodeTextBox.Text; <span style=\"color:Green;\">// userinput</span>\n\n    <span style=\"color:Blue;\">var</span> authorizer = <span style=\"color:Blue;\">new</span> OAuthAuthorizer(ConsumerKey, ConsumerSecret);\n    authorizer.GetAccessToken(<span style=\"color:#A31515;\">&quot;http://twitter.com/oauth/access_token&quot;</span>, requestToken, pincode)\n        .ObserveOnDispatcher()\n        .Subscribe(res =&gt;\n        {\n            <span style=\"color:Green;\">// response has Token and extra data(twitter is user_id and screen_name)</span>\n            UserIdTextBlock.Text = res.ExtraData[<span style=\"color:#A31515;\">&quot;user_id&quot;</span>].First();\n            ScreenNameTextBlock.Text = res.ExtraData[<span style=\"color:#A31515;\">&quot;screen_name&quot;</span>].First();\n            accessToken = res.Token; <span style=\"color:Green;\">// AccessToken</span>\n        });\n}\r\n</pre></div>\n<h2>Get TimeLine</h2>\r\n<img src=\"/projects/reactiveoauth/13d08356-5add-4ee9-a37e-0df878d97698\" alt=\"gettimeline.jpg\" title=\"gettimeline.jpg\" /><br /><br />sorry, image&#39;s language is Japanese:)<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// set url and parameters.</span>\n<span style=\"color:Green;\">// parameter can use Collection Initializer</span>\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> GetTimeLineButton_Click(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n{\n    <span style=\"color:Blue;\">var</span> client = <span style=\"color:Blue;\">new</span> OAuthClient(ConsumerKey, ConsumerSecret, accessToken)\n    {\n        Url = <span style=\"color:#A31515;\">&quot;http://api.twitter.com/1/statuses/home_timeline.xml&quot;</span>,\n        Parameters = { { <span style=\"color:#A31515;\">&quot;count&quot;</span>, 20 }, { <span style=\"color:#A31515;\">&quot;page&quot;</span>, 1 } }\n    };\n    client.GetResponseText() <span style=\"color:Green;\">// OAuthClient have three methods, GetResponse/GetResponseText/GetResponseLines</span>\n        .Select(s =&gt; XElement.Parse(s))\n        .SelectMany(x =&gt; x.Descendants(<span style=\"color:#A31515;\">&quot;status&quot;</span>))\n        .Select(x =&gt; <span style=\"color:Blue;\">new</span>\n        {\n            Text = x.Element(<span style=\"color:#A31515;\">&quot;text&quot;</span>).Value,\n            Name = x.Element(<span style=\"color:#A31515;\">&quot;user&quot;</span>).Element(<span style=\"color:#A31515;\">&quot;screen_name&quot;</span>).Value\n        })\n        .ObserveOnDispatcher()\n        .Subscribe(\n            a =&gt; TimeLineViewListBox.Items.Add(a.Name + <span style=\"color:#A31515;\">&quot;:&quot;</span> + a.Text),\n            ex =&gt; MessageBox.Show(ex.ToString())); <span style=\"color:Green;\">// easy error handling</span>\n}\r\n</pre></div>\n<h2>Post Status</h2>\r\n<img src=\"/projects/reactiveoauth/329861a2-5df1-42c8-be2c-6a4d7ff8dd8a\" alt=\"post.jpg\" title=\"post.jpg\" /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// if post then set MethodType = MethodType.Post</span>\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> PostButton_Click(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n{\n    <span style=\"color:Blue;\">var</span> postText = PostTextBox.Text; <span style=\"color:Green;\">// user input</span>\n    \n    <span style=\"color:Blue;\">var</span> client = <span style=\"color:Blue;\">new</span> OAuthClient(ConsumerKey, ConsumerSecret, accessToken)\n    {\n        MethodType = MethodType.Post,\n        Url = <span style=\"color:#A31515;\">&quot;http://api.twitter.com/1/statuses/update.xml&quot;</span>,\n        Parameters = { { <span style=\"color:#A31515;\">&quot;status&quot;</span>, postText } }\n    };\n    client.GetResponseText() <span style=\"color:Green;\">// post and GetResponse</span>\n        .Select(s =&gt; XElement.Parse(s))\n        .ObserveOnDispatcher()\n        .Subscribe(x =&gt; MessageBox.Show(<span style=\"color:#A31515;\">&quot;Post Success:&quot;</span> + x.Element(<span style=\"color:#A31515;\">&quot;text&quot;</span>).Value));\n}\r\n</pre></div>\n<h2>StreamingAPI</h2>\r\n<img src=\"/projects/reactiveoauth/b288e5a6-3d15-455f-a44b-6ec3d7c1c31d\" alt=\"streaming.jpg\" title=\"streaming.jpg\" /><br /><br />WPF StreamingAPI sample<br />read JSON using with <a href=\"http://dynamicjson.codeplex.com/\">DynamicJson</a><br />Rx x ReactiveOAuth x DynamicJson make easy for use StreamingAPI.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n\nIDisposable streamingHandle = Disposable.Empty;\n\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> StreamingStartButton_Click(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n{\n    <span style=\"color:Blue;\">var</span> client = <span style=\"color:Blue;\">new</span> OAuthClient(ConsumerKey, ConsumerSecret, accessToken)\n    {\n         Url = <span style=\"color:#A31515;\">&quot;https://userstream.twitter.com/2/user.json&quot;</span>\n    };\n    streamingHandle = client.GetResponseLines()\n        .Where(s =&gt; !<span style=\"color:Blue;\">string</span>.IsNullOrWhiteSpace(s)) <span style=\"color:Green;\">// filter invalid data</span>\n        .Select(s =&gt; DynamicJson.Parse(s))\n        .Where(d =&gt; d.text()) <span style=\"color:Green;\">// has text is &quot;status&quot;</span>\n        .ObserveOnDispatcher()\n        .Subscribe(\n            d =&gt; StreamingViewListBox.Items.Add(d.user.screen_name + <span style=\"color:#A31515;\">&quot;:&quot;</span> + d.text));\n}\n\n<span style=\"color:Green;\">// call Dispose is stop streaming</span>\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> StreamingStopButton_Click(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n{\n    streamingHandle.Dispose();\n}\r\n</pre></div>\n<h2>Twitpic Upload</h2>\r\nTwitpicClient.cs is available in Sample/TwitpicClient.cs.<br />You can use copy the single .cs file.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// CameraCaptureTask&#39;s Completed Event</span>\n<span style=\"color:Blue;\">void</span> camera_Completed(<span style=\"color:Blue;\">object</span> sender, PhotoResult e)\n{\n    <span style=\"color:Blue;\">if</span> (e.TaskResult == TaskResult.OK)\n    {\n        <span style=\"color:Green;\">// photo picture(Stream) to byte array</span>\n        <span style=\"color:Blue;\">var</span> stream = e.ChosenPhoto;\n        <span style=\"color:Blue;\">var</span> buffer = <span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">byte</span>[stream.Length];\n        stream.Read(buffer, 0, buffer.Length);\n\n        <span style=\"color:Green;\">// set key, sercret, token</span>\n        <span style=\"color:Blue;\">new</span> TwitpicClient(ConsumerKey, ConsumerSecret, accessToken)\n            .UploadPicture(e.OriginalFileName, <span style=\"color:#A31515;\">&quot;from WP7!&quot;</span>, buffer)\n            .ObserveOnDispatcher()\n            .Catch((WebException ex) =&gt;\n            {\n                MessageBox.Show(<span style=\"color:Blue;\">new</span> StreamReader(ex.Response.GetResponseStream()).ReadToEnd());\n                <span style=\"color:Blue;\">return</span> Observable.Empty&lt;<span style=\"color:Blue;\">string</span>&gt;();\n            })\n            .Subscribe(s =&gt; MessageBox.Show(s), ex =&gt; MessageBox.Show(ex.ToString()));\n    }\n}\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "OAuth,Rx,Reactive,twitter,Windows Phone 7,Silverlight,Reactive Extensions,",
  "LastEdited": "2013-02-26T08:13:47.36-08:00"
}