{
  "ProjectName": "WriteableBitmapEx",
  "Title": "WriteableBitmapEx",
  "Description": "The WriteableBitmapEx library is a collection of extension methods for the WriteableBitmap. The library adds elementary (drawing) functionality.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1 style=\"text-align:center\"><strong>The source code is now on GitHub: </strong>\r\n<br>\r\n<strong><a href=\"https://github.com/teichgraf/WriteableBitmapEx/\">https://github.com/teichgraf/WriteableBitmapEx/</a></strong></h1>\r\n<h1>&nbsp;</h1>\r\n<h1>Description</h1>\r\n<p>The WriteableBitmapEx library is a collection of extension methods for the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.imaging.writeablebitmap%28VS.95%29.aspx\">\r\nWriteableBitmap</a>. The WriteableBitmap class is available for all XAML flavors including Windows Phone, WPF, WinRT Windows Store XAML, (Windows 10) UWP and Silverlight. It allows the direct manipulation of a bitmap and can be used for image manipulation,\r\n to generate fast procedural images by drawing directly to a bitmap and more. <br>\r\nThe WriteableBitmap API is very minimalistic and there's only the raw <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.imaging.writeablebitmap.pixels(VS.95).aspx\">\r\nPixels</a> array for such operations. The WriteableBitmapEx library tries to compensate that with extensions methods that are easy to use like built in methods and offer\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ms533797(v=VS.85).aspx\">GDI&#43;</a> like functionality. The library extends the WriteableBitmap class with elementary and fast (2D drawing) functionality, conversion methods and functions to combine (blit) WriteableBitmaps.\r\n<br>\r\nThe extension methods are grouped into different C# files using a partial class approach. It is possible to include just a few methods by using the specific source code files directly or the full functionality via the built binaries.<br>\r\n<br>\r\nThe latest binaries are always available as <a href=\"http://nuget.org/List/Packages/WriteableBitmapEx\">\r\nNuGet package</a>.<br>\r\n<br>\r\nWriteableBitmapEx was also ported to <a href=\"http://wbexembedded.codeplex.com\">Windows Embedded</a>.<br>\r\n<br>\r\nSee the <a href=\"http://writeablebitmapex.codeplex.com/WorkItem/List.aspx\">Issue Tracker</a> for a list of features that will be added in the future. Please use the\r\n<a href=\"https://github.com/teichgraf/WriteableBitmapEx/issues\">GitHub Issues functionality</a> to add new issues which are not already reported.<br>\r\n<br>\r\n<img title=\"wbx_announcement.png\" src=\"/projects/WriteableBitmapEx/5562d7a6-468f-407e-948b-f932cdd83018\" alt=\"wbx_announcement.png\"></p>\r\n<h1>Features</h1>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ms533797(v=VS.85).aspx\">GDI&#43;</a> like drawing functionality for the WriteableBitmap.<br>\r\nSupport for Windows Phone Silverlight, Windows Phone WinRT, desktop Silverlight, WPF, Windows 8/8.1 WinRT XAML and Windows 10 UWP.</p>\r\n<ul>\r\n<li>Base\r\n<ul>\r\n<li>Support for the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.color(VS.95).aspx\">\r\nColor structure</a> (alpha premultiplication will be performed) </li><li>Also overloads for faster int32 as color (assumed to be already alpha premultiplied)\r\n</li><li>SetPixel method with various overloads </li><li>GetPixel method to get the pixel color at a specified x, y coordinate </li><li>Fast Clear methods </li><li>Fast Clone method to copy a WriteableBitmap </li><li>ForEach method to apply a given function to all pixels of the bitmap </li></ul>\r\n</li><li>Transformation\r\n<ul>\r\n<li>Crop method to extract a defined region </li><li>Resize method with support for bilinear interpolation and nearest neighbor </li><li>Rotate in 90&deg; steps clockwise and any arbitrary angle </li><li>Flip vertical and horizontal </li></ul>\r\n</li><li>Shapes\r\n<ul>\r\n<li>Fast line drawing algorithms including various anti-aliased algorithm </li><li>Variable stroke thickness and penned / stamp lines </li><li>Ellipse, polyline, quad, rectangle and triangle </li><li>Cubic Bezi&eacute;r, Cardinal spline and closed curves </li></ul>\r\n</li><li>Filled shapes\r\n<ul>\r\n<li>Fast ellipse and rectangle fill method </li><li>Triangle, quad, simple and complex polygons </li><li>Bezi&eacute;r and Cardinal spline curves </li></ul>\r\n</li><li>Blitting\r\n<ul>\r\n<li>Different blend modes including alpha, additive, subtractive, multiply, mask and none\r\n</li><li>Optimized fast path for non blended blitting </li></ul>\r\n</li><li>Filtering\r\n<ul>\r\n<li>Convolution, Blur </li><li>Brightness, contrast, gamma adjustments </li><li>Gray/brightness, invert </li></ul>\r\n</li><li>Conversion\r\n<ul>\r\n<li>Convert a WriteableBitmap to a byte array </li><li>Create a WriteableBitmap from a byte array </li><li>Create a WriteableBitmap easily from the application resource or content </li><li>Create a WriteableBitmap from an any platform supported image stream </li><li>Write a WriteableBitmap as a <a href=\"http://en.wikipedia.org/wiki/Truevision_TGA\">\r\nTGA image</a> to a stream </li><li>Separate extension method to save as a <a href=\"http://en.wikipedia.org/wiki/Portable_Network_Graphics\">\r\nPNG image</a>. Download <a href=\"http://writeablebitmapex.codeplex.com/discussions/274445\">\r\nhere</a> </li></ul>\r\n</li><li>Windows Phone specific methods\r\n<ul>\r\n<li>Save to media library and the camera roll </li></ul>\r\n</li><li>External Code\r\n<ul>\r\n<li><a href=\"https://writeablebitmapex.codeplex.com/discussions/579148\">DrawString method implementation</a>\r\n</li></ul>\r\n</li></ul>\r\n<h1>Live samples</h1>\r\n<p>Silverlight samples that show the WriteableBitmapEx in action:</p>\r\n<ul>\r\n<li>The <a href=\"http://dl.dropbox.com/u/2681028/CodeplexData/WriteableBitmapEx/ShapeSample/TestPage.html\">\r\nShapes sample</a> includes various scenarios where different shapes are drawn. By default a little demo is shown called &quot;Breathing Flower&quot;. Basically different sized circles rotating around a center ring are generated. The sample also contains a static page\r\n showing some of the possible shapes. </li><li>The <a href=\"http://dl.dropbox.com/u/2681028/CodeplexData/WriteableBitmapEx/FillSample/WriteableBitmapExFillSampleTestPage.html\">\r\nFill sample</a> starts with a demo that animates the Cardinal spline's tension of the FillCurveClosed method, plus some random animated filled ellipses. The sample also contains a static page showing some of the possible filled shapes.\r\n</li><li>The <a href=\"http://dl.dropbox.com/u/2681028/CodeplexData/WriteableBitmapEx/CurveSample/WriteableBitmapExCurveSampleTestPage.html\">\r\nCurve sample</a> demonstrates the Bezi&eacute;r and Cardinal spline methods. The sample starts with a demo animation that uses the Cardinal spline DrawCurve method to draw an artificial plant that grows procedurally. The other part of the sample is interactive\r\n and allows to draw and manipulate Bezi&eacute;r and Cardinal splines with the mouse. See\r\n<a href=\"http://kodierer.blogspot.com/2010/01/rounder-faster-better-writeablebitmapex.html\">\r\nthis blog post</a> for further information. </li><li>The <a href=\"http://dl.dropbox.com/u/2681028/CodeplexData/WriteableBitmapEx/BlitSample/TestPage.html\">\r\nBlit sample</a> combines WriteableBitmaps and shows a neat particle effect. </li></ul>\r\n<p>Video of the <a href=\"http://vimeo.com/10220024\">Windows Phone Interactive Curve Sample</a>.<br>\r\n<br>\r\nExternal resources:<br>\r\nAdam Kinney made a <a href=\"http://adamkinney.wordpress.com/2010/01/09/image-blitting-in-silverlight-with-writeablebitmapex\">\r\ngreat sample</a> that uses the WriteableBitmapEx library to dynamically apply a torn weathered effect to a photo.<br>\r\nErik Klimczak from Calrity Consulting wrote a very good blog post about <a href=\"http://blogs.claritycon.com/blog/2011/03/30/advanced-animation-animating-15000-visuals-in-silverlight-2/\">\r\nAdvanced Animation: Animating 15,000 Visuals in Silverlight</a>. He uses the WriteableBitmapEx to get the best performance.<br>\r\nPeter Bromberg wrote a great article called <a href=\"http://www.eggheadcafe.com/tutorials/aspnet/d312fb6f-9610-449f-a191-26fcede58730/silverlight-4-martin-fractals-with-writeablebitmapex.aspx\">\r\nSilverlight 4 Martin Fractals with WriteableBitmapEx</a>.</p>\r\n<h1>Performance!</h1>\r\n<p>The WriteableBitmapEx methods are much faster than the XAML <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.shapes.shape(VS.95).aspx\">\r\nShape</a> subclasses. For example, the WriteableBitmapEx line drawing approach is more than 20-30 times faster than the Silverlight\r\n<a href=\"http://msdn.microsoft.com/en-us/library/system.windows.shapes.line(VS.95).aspx\">\r\nLine</a> element. If a lot of shapes need to be drawn, the WriteableBitmapEx methods are the right choice.</p>\r\n<h1>Easy to use!</h1>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Initialize the WriteableBitmap with size 512x512 and set it as source of an Image control</span>\nWriteableBitmap writeableBmp = BitmapFactory.New(512, 512);\nImageControl.Source = writeableBmp;\nusing(writeableBmp.GetBitmapContext())<br>{\n\n   <span style=\"color:green\">// Load an image from the calling Assembly's resources via the relative path</span>\n   writeableBmp = BitmapFactory.New(1, 1).FromResource(<span style=\"color:#a31515\">&quot;Data/flower2.png&quot;</span>);\n\n   <span style=\"color:green\">// Clear the WriteableBitmap with white color</span>\n   writeableBmp.Clear(Colors.White);\n\n   <span style=\"color:green\">// Set the pixel at P(10, 13) to black</span>\n   writeableBmp.SetPixel(10, 13, Colors.Black);\n\n   <span style=\"color:green\">// Get the color of the pixel at P(30, 43)</span>\n   Color color = writeableBmp.GetPixel(30, 43);\n\n   <span style=\"color:green\">// Green line from P1(1, 2) to P2(30, 40)</span>\n   writeableBmp.DrawLine(1, 2, 30, 40, Colors.Green);\n\n   <span style=\"color:green\">// Line from P1(1, 2) to P2(30, 40) using the fastest draw line method <br></span>   <span style=\"color:blue\">int</span>[] pixels = writeableBmp.Pixels;\n   <span style=\"color:blue\">int</span> w = writeableBmp.PixelWidth;\n   <span style=\"color:blue\">int</span> h = writeableBmp.PixelHeight;\n   WriteableBitmapExtensions.DrawLine(pixels, w, h, 1, 2, 30, 40, myIntColor);\n\n   <span style=\"color:green\">// Blue anti-aliased line from P1(10, 20) to P2(50, 70) with a stroke of 5</span>\n   writeableBmp.DrawLineAa(10, 20, 50, 70, Colors.Blue, 5);\n\n   <span style=\"color:green\">// Black triangle with the points P1(10, 5), P2(20, 40) and P3(30, 10)</span>\n   writeableBmp.DrawTriangle(10, 5, 20, 40, 30, 10, Colors.Black);\n\n   <span style=\"color:green\">// Red rectangle from the point P1(2, 4) that is 10px wide and 6px high</span>\n   writeableBmp.DrawRectangle(2, 4, 12, 10, Colors.Red);\n\n   <span style=\"color:green\">// Filled blue ellipse with the center point P1(2, 2) that is 8px wide and 5px high</span>\n   writeableBmp.FillEllipseCentered(2, 2, 8, 5, Colors.Blue);\n\n   <span style=\"color:green\">// Closed green polyline with P1(10, 5), P2(20, 40), P3(30, 30) and P4(7, 8)</span>\n   <span style=\"color:blue\">int</span>[] p = <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[] { 10, 5, 20, 40, 30, 30, 7, 8, 10, 5 };\n   writeableBmp.DrawPolyline(p, Colors.Green);\n\n   <span style=\"color:green\">// Cubic Bezi&eacute;r curve from P1(5, 5) to P4(20, 7) <br>   // with the control points P2(10, 15) and P3(15, 0)</span>\n   writeableBmp.DrawBezier(5, 5, 10, 15, 15, 0, 20, 7,  Colors.Purple);\n\n   <span style=\"color:green\">// Cardinal spline with a tension of 0.5 <br>   // through the points P1(10, 5), P2(20, 40) and P3(30, 30)<br></span>   <span style=\"color:blue\">int</span>[] pts = <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[] { 10, 5, 20, 40, 30, 30};\n   writeableBmp.DrawCurve(pts, 0.5,  Colors.Yellow);\n\n   <span style=\"color:green\">// A filled Cardinal spline with a tension of 0.5 <br>   // through the points P1(10, 5), P2(20, 40) and P3(30, 30) <br></span>   writeableBmp.FillCurveClosed(pts, 0.5,  Colors.Green);\n\n   <span style=\"color:green\">// Blit a bitmap using the additive blend mode at P1(10, 10)</span>\n   writeableBmp.Blit(<span style=\"color:blue\">new</span> Point(10, 10), bitmap, sourceRect, Colors.White, WriteableBitmapExtensions.BlendMode.Additive);\n\n   <span style=\"color:green\">// Override all pixels with a function that changes the color based on the coordinate</span>\n   writeableBmp.ForEach((x, y, color) =&gt; Color.FromArgb(color.A, (<span style=\"color:blue\">byte</span>)(color.R / 2), (<span style=\"color:blue\">byte</span>)(x * y), 100));\n\n} <span style=\"color:green\">// Invalidate and present in the Dispose call</span><br>\n<span style=\"color:green\">// Take snapshot</span>\n<span style=\"color:blue\">var</span> clone = writeableBmp.Clone();\n\n<span style=\"color:green\">// Save to a TGA image stream (file for example)</span>\nwriteableBmp.WriteTga(stream);\n\n<span style=\"color:green\">// Crops the WriteableBitmap to a region starting at P1(5, 8) and 10px wide and 10px high</span>\n<span style=\"color:blue\">var</span> cropped = writeableBmp.Crop(5, 8, 10, 10);\n\n<span style=\"color:green\">// Rotates a copy of the WriteableBitmap 90 degress clockwise and returns the new copy</span>\n<span style=\"color:blue\">var</span> rotated = writeableBmp.Rotate(90);\n\n<span style=\"color:green\">// Flips a copy of the WriteableBitmap around the horizontal axis and returns the new copy</span>\n<span style=\"color:blue\">var</span> flipped = writeableBmp.Flip(FlipMode.Horizontal);\n\n<span style=\"color:green\">// Resizes the WriteableBitmap to 200px wide and 300px high using bilinear interpolation</span>\n<span style=\"color:blue\">var</span> resized = writeableBmp.Resize(200, 300, WriteableBitmapExtensions.Interpolation.Bilinear);\n<br>\n</pre>\r\n</div>\r\n<h1>Additional Information</h1>\r\n<p>The WriteableBitmapEx library has its origin in several blog posts that also describe the implemenation and usage of some aspects in detail. The blog posts might be seen as the documentation.&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.com/2009/07/writeablebitmap-extension-methods.html\">WriteableBitmap Extension Methods</a> introduced the SetPixel methods.&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.com/2009/10/drawing-lines-silverlight.html\">Drawing Lines - Silverlight WriteableBitmap Extensions II</a> provided the DrawLine methods.&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.com/2009/11/drawing-shapes-silverlight.html\">Drawing Shapes - Silverlight WriteableBitmap Extensions III</a> brought the shape functionality (ellipse, polyline, quad, rectangle, triangle).&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.com/2009/11/convert-encode-and-decode-silverlight.html\">Convert, Encode And Decode Silverlight WriteableBitmap Data</a> came with the byte array conversion methods and hows how to encode / decode a WriteableBitmap to JPEG.&nbsp;\r\n<br>\r\n<a href=\"http://blogs.silverarcade.com/silverlight-games-101/15/silverlight-blitting-and-blending-with-silverlights-writeablebitmap/\">Blitting and Blending with Silverlight&rsquo;s WriteableBitmap</a> provided the Blit functions.&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.com/2009/12/writeablebitmapex-writeablebitmap.html\">WriteableBitmapEx - WriteableBitmap extensions now on CodePlex</a> announced this project.&nbsp;\r\n<br>\r\n<a href=\"http://nokola.com/blog/post/2010/01/21/Quick-and-Dirty-Output-of-WriteableBitmap-as-TGA-Image.aspx\">Quick and Dirty Output of WriteableBitmap as TGA Image</a> provided the original TgaWrite function.&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.com/2010/01/rounder-faster-better-writeablebitmapex.html\">Rounder, Faster, Better - WriteableBitmapEx 0.9.0.0</a> announced version 0.9.0.0 and gives some further information about the curve sample.&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.com/2010/03/let-it-ring-writeablebitmapex-for.html\">Let it ring - WriteableBitmapEx for Windows Phone</a> introtuced the WriteableBitmapEx version for the Windows Phone and a sample.&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.com/2010/06/filled-to-bursting-point.html\">Filled To The Bursting Point - WriteableBitmapEx 0.9.5.0</a> announced version 0.9.5.0, has some information about the new Fill methods and comes with a nice sample.&nbsp;\r\n<br>\r\n<a href=\"http://kodierer.blogspot.de/2012/05/one-bitmap-to-rule-them-all.html\">One Bitmap to Rule Them All - WriteableBitmapEx for WinRT Metro Style</a> announced version 1.0.0.0 and provides some background about the WinRT Metro Style version.&nbsp;</p>\r\n<h1>Support it</h1>\r\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=RPXX29MESX8A2\"><img title=\"Donate\" src=\"https://www.paypal.com/en_US/i/btn/btn_donateCC_LG_global.gif\" alt=\"Donate\" style=\"border:none\"></a></p>\r\n<h1>Credits</h1>\r\n<p><a href=\"http://blog.rene-schulte.info\">Rene Schulte</a> started this project, maintains it and provided most of the code.&nbsp;\r\n<br>\r\n<a href=\"http://www.linkedin.com/profile/view?id=54694225\">Dr. Andrew Burnett-Thompson and his team proposed the portability refactoring, provided the WPF port and much more beneficial functions.&nbsp;\r\n</a><br>\r\n<a href=\"http://nokola.com\">Nikola Mihaylov (Nokola) made some optimizations on the DrawLine and DrawRectangle methods, provided the original TgaWrite and the anti-aliased line drawing function.&nbsp;\r\n</a><br>\r\n<a href=\"http://blogs.silverarcade.com/silverlight-games-101\">Bill Reiss</a> wrote the Blit methods.&nbsp;\r\n<br>\r\n<a href=\"http://adamkinney.com\">Adam Kinney</a> added some Blending modes to the Blit method.&nbsp;\r\n<br>\r\n<a href=\"http://www.scottlogic.co.uk/blog/colin/\">Colin Eberhardt</a> contributed the ForEach method.&nbsp;\r\n<br>\r\n<a href=\"http://www.atalasoft.com/cs/blogs/stevehawley/default.aspx\">Steve Hawley</a> proposed an optimization of the Clear(Color) method.&nbsp;\r\n<br>\r\n<a href=\"http://www.liambateman.net/index.php/about/\">Liam Bateman</a> suggested the Color Keying BlendMode.&nbsp;&nbsp;&nbsp;\r\n<br>\r\n<a href=\"http://lotsacode.wordpress.com/about/\">Mattias Fagerlund suggested the convolution method.&nbsp;\r\n</a><br>\r\n<a href=\"http://www.woutware.com\">Wout de Zeeuw optimized the DrawLine method by 15%.&nbsp;\r\n</a><br>\r\n<a href=\"https://twitter.com/lachlankeown\">Lachlan Keown</a> fixed a bug in the Blit alpha blending.&nbsp;\r\n<br>\r\nJohn Ng San Ping added the AdjustBrightness, Contrast and Gray methods.&nbsp; <br>\r\nYour name here? We are always looking for valuable contributions.&nbsp;&nbsp;&nbsp;</p>\r\n<p><br>\r\n<br>\r\n<a href=\"http://www.ohloh.net/p/writeablebitmapex\">Ohloh statistics</a></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Silverlight,WriteableBitmap,Computer Graphics,Drawing,WP7,Windows Phone 7,.NET,imaging,windows phone,",
  "LastEdited": "2015-09-24T10:58:26.327-07:00"
}