{
  "ProjectName": "NLinear",
  "Title": "NLinear",
  "Description": "A generic linear algebra toolkit in C# Compatible with Silverlight.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nA generic linear algebra toolkit in C# Compatible with Silverlight. Created by&nbsp;<a title=\"vNeuron\" href=\"http://vneuron.com/\" target=\"_blank\">vNeuron</a></p>\r\n<p><br>\r\nThis library provides basic linear algebra routines for the .NET platform.&nbsp;It is a generic library designed to work with any numeric type (float, double, ...)</p>\r\n<ul>\r\n<li>2d vectors </li><li>3d vectors </li><li>3x3 matrices </li><li>4x4 matrices </li><li>Lines </li><li>Planes </li></ul>\r\n<p><br>\r\n<strong>Matrices</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre style=\"color:black\"><span style=\"color:green\">//Declare a 3x3 matrix</span>\nMatrix33&lt;<span style=\"color:blue\">double</span>&gt; m33 = <span style=\"color:blue\">new</span> Matrix33&lt;<span style=\"color:blue\">double</span>&gt;(6, -7, 10, 0, 3, -1, 0, 5, -7);\n\n<span style=\"color:green\">//Get the inverse</span>\nMatrix33&lt;<span style=\"color:blue\">double</span>&gt; m33Inv = m33.Inverse();\n\n<span style=\"color:green\">//Multiply the matrix by it's inverse</span>\nMatrix33&lt;<span style=\"color:blue\">double</span>&gt; result = m33 * m33Inv;\n\n<span style=\"color:green\">//Prints true if result equals the 4x4 identity matrix</span>\nConsole.WriteLine(result == Matrix33&lt;<span style=\"color:blue\">double</span>&gt;.Identity()); <span style=\"color:green\">//True</span></pre>\r\n<p style=\"color:black\"><strong>Vectors</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:green\">//Declare two unit vectors e1, e2</span>\n Vec3&lt;<span style=\"color:blue\">int</span>&gt; e1 = <span style=\"color:blue\">new</span> Vec3&lt;<span style=\"color:blue\">int</span>&gt;(1, 0, 0);\n Vec3&lt;<span style=\"color:blue\">int</span>&gt; e2 = <span style=\"color:blue\">new</span> Vec3&lt;<span style=\"color:blue\">int</span>&gt;(0, 1, 0);\n\n <span style=\"color:green\">//Calculate the dot-product :</span>\n <span style=\"color:blue\">int</span> proj = e1 ^ e2;\n\n <span style=\"color:green\">//Check if proj == 0</span>\n Console.WriteLine(proj == 0); <span style=\"color:green\">//True</span>\n\n <span style=\"color:green\">//Calculate the cross product</span>\n Vec3&lt;<span style=\"color:blue\">int</span>&gt; e3 = e1 % e2;\n\n Vec3&lt;<span style=\"color:blue\">int</span>&gt; e4 = <span style=\"color:blue\">new</span> Vec3&lt;<span style=\"color:blue\">int</span>&gt;(0, 0, 1);\n\n <span style=\"color:green\">//Check if e3 == (0, 0, 1)</span>\n Console.WriteLine(e3 == e4); <span style=\"color:green\">//True</span>\n\n</pre>\r\n</div>\r\n<strong style=\"color:black\">Version 1.6</strong><br>\r\n<p style=\"color:black\">Version 1.6&nbsp;has more relaxed type constraints. It works with numeric types such as complex and BigInteger.</p>\r\n<p style=\"color:black\"><strong>Complex Matrices:</strong></p>\r\n<p style=\"color:black\">In order to use complex and BigInteger class you must refernece the&nbsp;<span style=\"font-family:Consolas,'Courier New',Courier,monospace; white-space:pre\"><strong>System.Numerics</strong> assembly.</span></p>\r\n<p style=\"color:black\"><span style=\"font-family:Consolas,'Courier New',Courier,monospace; white-space:pre\">&nbsp;</span></p>\r\n<div style=\"color:black; background-color:white\">\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> i = Complex.ImaginaryOne;\n\n<span style=\"color:green\">//Declare a 4x4 matrix</span>\nMatrix44&lt;Complex&gt; m44 = <span style=\"color:blue\">new</span> Matrix44&lt;Complex&gt;(1, 1, 1, 1, 1, i, -1, -i, 1, -i, 1, -1, 1, -i, -1, i);\n\n<span style=\"color:green\">//Declare an identity matrix</span>\n<span style=\"color:green\">//We must provide the multiplicative identity</span>\n<span style=\"color:green\">//for complex numbers.</span>\nMatrix44&lt;Complex&gt; id = Matrix44&lt;Complex&gt;.Identity(1.0);\n\nConsole.WriteLine(id * m44 == m44);<span style=\"color:green\">//true</span>\n</pre>\r\n</div>\r\n</div>\r\n<p style=\"color:black\">&nbsp;</p>\r\n<p style=\"color:black\"><span style=\"font-family:Consolas,'Courier New',Courier,monospace\"><span style=\"white-space:pre\"><br>\r\n</span></span></p>\r\n</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Math,generic,Linear Algebra,Matrix,Algebra,",
  "LastEdited": "2015-01-07T01:25:21.877-08:00"
}