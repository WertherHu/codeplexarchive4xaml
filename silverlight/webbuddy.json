{
  "ProjectName": "webbuddy",
  "Title": "WebBuddy - AJAX made easy!",
  "Description": "WebBuddy is a growing plethora of simple Silverlight libraries designed to take the pain out of web requests. With WebBuddy, Uri's are easy to manipulate and AJAX calls are as easy as in JavaScript!",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>The WebBuddy Manifesto</h1>\r<i>(or &quot;What is WebBuddy&quot;?)</i><br />Face it, getting your <b>Silverlight Application</b> talking with your <b>web servers</b> can be a bit of a pain.  You have to muck with WebClient, build your REST query strings by hand, handle System.IO.Stream&#39;s containing <b>JSON</b> strings, and basically have a bad day.  Sure it might be easy for those guys running ASP.NET--they just do some magic in Visual Studio and everybody is happy, but your application stack is <b>Ruby</b>, <b>Perl</b>, or <b>PHP</b>.  Visual Studio gives you no love, the .NET library has nothing for you, and every wiz-bang example you find assumes you are talking with ASP.NET.  It&#39;s high time calling your web services with Silverlight is as easy as it is with JavaScript!<br /><img src=\"/projects/webbuddy/1968658a-671c-4f0f-b4e6-4061616354db\" alt=\"Now&#32;with&#32;Dog\" title=\"Now&#32;with&#32;Dog\" /><br />WebBuddy offers a growing plethora of quick-and-dirty utilities to make AJAX easy.  <b><a href=\"#UriBuddy\">UriBuddy</a></b> makes <b>manipulating query strings easy with a Dictionary</b>.  <b><a href=\"#AjaxBuddy\">AjaxBuddy</a></b> lets you make AJAX calls using <b>strongly typed callbacks</b> which will <b>pass back your deserialized data</b>.\n<h1>Get Started</h1>\r<ul><li><b><a href=\"https://webbuddy.codeplex.com/releases/view/24766\">Download the latest release</a></b></li>\n<li>Check out a <a href=\"https://webbuddy.codeplex.com/wikipage?title=SampleCode&referringTitle=Home\">nice, full sample</a></li>\n<li><b>Contribute to the project!</b>  Take a look at the <a href=\"http://webbuddy.codeplex.com/WorkItem/List.aspx\">list of things we&#39;d like to support</a> and </li></ul>\n<h1>WebBuddy Overview</h1>\r<ul><li><b><a href=\"#AjaxBuddy\">AjaxBuddy</a></b> - A library that attempts to make AJAX calls feel more like <a href=\"http://docs.jquery.com/Ajax\">jQuery</a> or <a href=\"http://www.prototypejs.org/api/ajax\">Prototype.js</a>.</li>\n<li><b><a href=\"#UriBuddy\">UriBuddy</a></b> - Makes handling query parameters easy.  No more string concatenation!</li>\n<li><b>JsonBuddy</b> - <i>(comming soon)</i> Paste a JSON string, click some buttons, and get a bunch of strongly typed C# classes to use for serialization. </li></ul>\n<h2>AjaxBuddy<a name=\"AjaxBuddy\"></a></h2>\rCall your backend and AjaxBuddy will call you back with a strongly typed result! <br /><a href=\"https://webbuddy.codeplex.com/wikipage?title=SampleCode&referringTitle=Home\">View a Full Sample</a><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> MakeQuery()\n{\n    <span style=\"color:Blue;\">string</span> requestUrl = <span style=\"color:#A31515;\">&quot;http://search.yahooapis.com/ImageSearchService/V1/imageSearch&quot;</span>;\n    <span style=\"color:Green;\">// Ask Yahoo about snow in Seattle and call us back with the strongly typed results...</span>\n    Dictionary&lt;String, String&gt; query = <span style=\"color:Blue;\">new</span> Dictionary&lt;<span style=\"color:Blue;\">string</span>, <span style=\"color:Blue;\">string</span>&gt;\n    {\n        {<span style=\"color:#A31515;\">&quot;appid&quot;</span>,<span style=\"color:#A31515;\">&quot;YahooDemo&quot;</span>},\n        {<span style=\"color:#A31515;\">&quot;query&quot;</span>,<span style=\"color:#A31515;\">&quot;Snow In Seattle&quot;</span>},\n        {<span style=\"color:#A31515;\">&quot;results&quot;</span>,<span style=\"color:#A31515;\">&quot;23&quot;</span>},\n        {<span style=\"color:#A31515;\">&quot;output&quot;</span>,<span style=\"color:#A31515;\">&quot;json&quot;</span>}\n    };\n    AjaxBuddy buddy = <span style=\"color:Blue;\">new</span> AjaxBuddy();\n    <span style=\"color:Green;\">// Notice how this looks kinda like jQuery?  Notice how there isn&#39;t any fuss with WebClient?</span>\n    buddy.Get&lt;YahooImageResult&gt;(\n        <span style=\"color:Blue;\">new</span> Uri(requestUrl),\n        query,\n        <span style=\"color:Blue;\">new</span> AjaxOptions&lt;TResponseType&gt;\n        {\n            Callback = queryCallback,\n            State = <span style=\"color:#A31515;\">&quot;my user state&quot;</span>,\n            FailureCallback = failureCallback\n        });\n}\n<span style=\"color:Green;\">// This is our callback when the AJAX request has completed.  Notice it passes in a strongly</span>\n<span style=\"color:Green;\">// typed result?  Nice, huh?</span>\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> queryCallback(YahooImageResult queryResults, <span style=\"color:Blue;\">object</span> userState)\n{\n    Console.WriteLine(<span style=\"color:#A31515;\">&quot;Got back {0} results&quot;</span>, queryResults.Results.totalResultsReturned);\n\n}\n<span style=\"color:Green;\">// This is our callback when the AJAX request has barfed on our shoes.  Exception contains</span>\n<span style=\"color:Green;\">// the exception passed in by WebClient</span>\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> failureCallback(Exception exception, <span style=\"color:Blue;\">object</span> userState)\n{\n    Console.WriteLine(<span style=\"color:#A31515;\">&quot;Barf: {0}&quot;</span>, exception);\n\n}\r\n</pre></div><h2><a name=\"UriBuddy\"></a>UriBuddy</h2>\rUse a Dictionary&lt;&gt; to hold your parameters.  Let us turn them into a properly escaped string.<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// Take a base url</span>\nUri sample = <span style=\"color:Blue;\">new</span> Uri(<span style=\"color:#A31515;\">&quot;http://www.nytimes.com&quot;</span>);\n\n<span style=\"color:Green;\">// some highly useful parameters</span>\nDictionary&lt;String, String&gt; query = <span style=\"color:Blue;\">new</span> Dictionary&lt;<span style=\"color:Blue;\">string</span>, <span style=\"color:Blue;\">string</span>&gt;\n{\n    {<span style=\"color:#A31515;\">&quot;param1&quot;</span>,<span style=\"color:#A31515;\">&quot;nice&quot;</span>},\n    {<span style=\"color:#A31515;\">&quot;param2&quot;</span>,<span style=\"color:#A31515;\">&quot;code man&quot;</span>}\n\n};\n\n\n<span style=\"color:Green;\">// create a new url using a chained style of coding</span>\nUri newSample = sample\n    .AppendPath(<span style=\"color:#A31515;\">&quot;/pages/world&quot;</span>)\n    .AppendQueryValues(query);\n\n\n<span style=\"color:Green;\">// or do something like this</span>\nUri somewhereElse = sample.AppendPath(<span style=\"color:#A31515;\">&quot;pages&quot;</span>)\n    .AppendPath(<span style=\"color:#A31515;\">&quot;world&quot;</span>)\n    .AppendQueryString(<span style=\"color:#A31515;\">&quot;param1=nice&amp;param2=code%20man&quot;</span>);\n\n\n<span style=\"color:Green;\">// prints: http://www.nytimes.com/pages/world?param1=nice&amp;param2=code%20man</span>\nConsole.WriteLine(newSample);\n\n\n<span style=\"color:Green;\">// turn the dictionary into a string with our famous extension method</span>\nString queryString = query.ToQueryString();\n\n\n<span style=\"color:Green;\">// prints: param1=nice&amp;param2=code%20man</span>\nConsole.WriteLine(queryString);\r\n</pre></div><br /><br /><i><b>Notice:</b> Project is under construction.  Code may not work as intended--patches are welcome.  No purchase necessary.  Actual cash value: $0.01.  Rules and free game pieces available on the web.  Offer void where prohibited by law.  May contain peanuts.</i></div><div class=\"ClearBoth\"></div>",
  "TagList": "JSON,Silverlight,Silverlight 2.0,Ajax,Library,Web Services,HTTP,Serialization,utility,WebBuddy,",
  "LastEdited": "2009-03-31T14:02:03.293-07:00"
}