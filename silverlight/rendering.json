{
  "ProjectName": "rendering",
  "Title": "Rendering.NET",
  "Description": "Rendering.NET is an abstraction for any visualization device and over several APIs like OpenGL, DirectX, XNA, WebGL, WPF, Silverlight, Mobile DirectX, etc.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Project Description</h2>\rRendering.NET is an abstraction for any visualization device and over several APIs like OpenGL, DirectX, XNA, WebGL, WPF, Silverlight, Mobile DirectX, etc.<br />Rendering.NET is an abstraction for any visualization device and an implementation that allows rendering over several APIs like OpenGL, DirectX, XNA, WebGL, WPF, Silverlight, Mobile DirectX, and others. This framework is designed using modern design patterns for an easy usability, integration and extensibility. It includes ways for managing commonly used device objects like graphic element buffers and presents a solution for high level shader programming.<br /><br />When using this abstraction, your graphical applications can be upgraded from one API to another without ANY changes. Graphics programmers can focus on a standard API to develop their applications. All kind of tools, like model generation, texture loading, scene managers and file formats; which are expanded on within the abstraction, will work for any finalized implementation.<br /><br />Itâ€™s implemented over .NET framework, and brings all the capabilities that this framework supports like: object oriented programming, static types, lambda expressions, etc.<br />\n<h2>Principal features</h2>\r<h3>Models</h3>\r<ul><li><a href=\"https://rendering.codeplex.com/wikipage?title=Manifold%20models%20generation&referringTitle=Home\">Manifold models generation</a></li>\n<li><a href=\"https://rendering.codeplex.com/wikipage?title=Flexible%20format%20for%20vertices%20and%20pixels&referringTitle=Home\">Flexible format for vertices and pixels</a></li>\n<li><a href=\"https://rendering.codeplex.com/wikipage?title=Allocation%20of%20resource%20on%20video%20memory&referringTitle=Home\">Allocation of resource on video memory</a></li>\n<li>CSG models</li></ul>\n\n<h3>Effects</h3>\r<ul><li><a href=\"https://rendering.codeplex.com/wikipage?title=Combination%20of%20effects&referringTitle=Home\">Combination of effects</a></li>\n<li><a href=\"https://rendering.codeplex.com/wikipage?title=High%20level%20shader%20programming%20support&referringTitle=Home\">High level shader programming support</a></li>\n<li>Support for native shaders</li></ul>\n\n<h3>Others</h3>\r<ul><li>Portability</li>\n<li>Maintenance</li>\n<li>Modularity</li>\n<li>Encapsulation</li>\n<li>Extensibility</li></ul>\n<br />If you have any questions or suggestions please contact us: <a href=\"mailto:renderingdotnet@gmail.com\">Rendering Dev Team</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "rendering,graphics,.NET,C#,render engine,engine,shaders,pipeline,Visual Studio 2010,visualization,",
  "LastEdited": "2013-01-11T13:33:32.72-08:00"
}