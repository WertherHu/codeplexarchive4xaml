{
  "ProjectName": "rialternative",
  "Title": "Rialternative",
  "Description": "Rialternative is lightweight framework to industrialize developments with Silverlight and WCF RIA Services",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong><font size=\"4\">Project Description</font></strong></p>\r\n<strong><font size=\"4\"></font></strong>\r\n<p>Rialternative is lightweight framework to industrialize developments with Silverlight and WCF RIA Services.</p>\r\n<p>It takes advantage of the great extensibility of WCF RIA Services to help developpers in Silverlight/WCF RIA Services solution design.</p>\r\n<p>&#160;</p>\r\n<p><strong><font size=\"4\">Basic approach</font></strong></p>\r\n<p align=\"justify\">Rialternative allows data access layer abstraction by providing a Repository pattern implementation adapted to WCF Ria services. You can take advantage of it by inheriting of\r\n<strong>RepositoryDomainService</strong> class when you are developping your domain service. This base class contains a property of type\r\n<font color=\"#000000\"><strong>IRepository </strong>which define C.R.U.D methods regardless of data access technology.\r\n</font><font color=\"#000000\">Besides, </font>Rialternative embeds two IRepository implementations, one for EntityFramework and one for unit testing.</p>\r\n<p>Finally, to define the object context of your domain service the repository will use,&#160; you can use the\r\n<strong>EntityDomainServiceDescriptionProvider</strong>. <br>\r\n</p>\r\n<span style=\"color:\"><font color=\"#000000\"></font></span>\r\n<p><span style=\"color:\"><font color=\"#000000\"><em>Example :</em></font></span></p>\r\n<pre style=\"font-family:; background:white; color:\"><font face=\"Consolas\"><font style=\"font-size:9.8pt\">[<span style=\"color:\"><font color=\"#2b91af\">EnableClientAccess</font></span>()]\n[<span style=\"color:\"><font color=\"#2b91af\">EntityDomainServiceDescriptionProvider</font></span>(<span style=\"color:\"><font color=\"#0000ff\">typeof</font></span>(<span style=\"color:\"><font color=\"#2b91af\">NorthwindEntities</font></span>))]\n<span style=\"color:\"><font color=\"#0000ff\">public</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">class</font></span>&#160;<span style=\"color:\"><font color=\"#2b91af\">NorthwindService</font></span> : <span style=\"color:\"><font color=\"#2b91af\">RepositoryDomainService</font></span>\n{<br>&#160;&#160;&#160;&#160; <span style=\"color:\"><font color=\"#0000ff\">public</font></span>&#160;<span style=\"color:\"><font color=\"#2b91af\">IQueryable</font></span><span style=\"color:\"><font color=\"#ff8000\">&lt;</font></span><span style=\"color:\"><font color=\"#2b91af\">Categories</font></span><span style=\"color:\"><font color=\"#ff8000\">&gt;</font></span> GetCategories()<br>&#160;&#160;&#160;&#160; {<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color:\"><font color=\"#0000ff\">return</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">this</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Repository<span style=\"color:\"><font color=\"#ff8000\">.</font></span>GetQuery<span style=\"color:\"><font color=\"#ff8000\">&lt;</font></span><span style=\"color:\"><font color=\"#2b91af\">Categories</font></span><span style=\"color:\"><font color=\"#ff8000\">&gt;</font></span>();<br>&#160;&#160;&#160;&#160; }\n}</font></font></pre>\r\n<p>&#160;</p>\r\n<p><font size=\"4\"><strong>Define standard C.R.U.D operations using AOP</strong></font></p>\r\n<p>Rialternative provides the <strong>EntityDomain</strong> C# attribute which allow to define easily the standard C.R.U.D operations that the domain service provides for an entity.</p>\r\n<p>You can also define within this attribute the requested authorizations for a specific operation.</p>\r\n<p><em>Example :</em></p>\r\n<pre style=\"font-family:; background:white; color:\"><font face=\"Consolas\"><font style=\"font-size:9.8pt\">[<span style=\"color:\"><font color=\"#2b91af\">EnableClientAccess</font></span>()]\n[<span style=\"color:\"><font color=\"#2b91af\">EntityDomain</font></span>(<span style=\"color:\"><font color=\"#0000ff\">typeof</font></span>(<span style=\"color:\"><font color=\"#2b91af\">Customers</font></span>), <span style=\"color:\"><font color=\"#2b91af\">EntityDomainOperations</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>All, </font></font><br><font face=\"Consolas\"><font style=\"font-size:9.8pt\">              DeleteRequiresRole <span style=\"color:\"><font color=\"#ff8000\">=</font></span>&#160;</font></font><font face=\"Consolas\"><font style=\"font-size:9.8pt\"><span style=\"color:\"><font color=\"#0000ff\">new</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">string</font></span>[] { <span style=\"color:\"><font color=\"#a31515\">&quot;CustomerManager&quot;</font></span>, <span style=\"color:\"><font color=\"#a31515\">&quot;Admin&quot;</font></span> })]\n[<span style=\"color:\"><font color=\"#2b91af\">EntityDomain</font></span>(<span style=\"color:\"><font color=\"#0000ff\">typeof</font></span>(<span style=\"color:\"><font color=\"#2b91af\">Products</font></span>), <span style=\"color:\"><font color=\"#2b91af\">EntityDomainOperations</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Query <span style=\"color:\"><font color=\"#ff8000\">|</font></span>&#160;<span style=\"color:\"><font color=\"#2b91af\">EntityDomainOperations</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Update, </font></font><br><font face=\"Consolas\"><font style=\"font-size:9.8pt\">              RequiresAuthentication <span style=\"color:\"><font color=\"#ff8000\">=</font></span>&#160;<span style=\"color:\"><font color=\"#2b91af\">EntityDomainOperations</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Update)]\n[<span style=\"color:\"><font color=\"#2b91af\">EntityDomainServiceDescriptionProvider</font></span>(<span style=\"color:\"><font color=\"#0000ff\">typeof</font></span>(<span style=\"color:\"><font color=\"#2b91af\">NorthwindEntities</font></span>))]\n<span style=\"color:\"><font color=\"#0000ff\">public</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">class</font></span>&#160;<span style=\"color:\"><font color=\"#2b91af\">NorthwindService</font></span> : <span style=\"color:\"><font color=\"#2b91af\">RepositoryDomainService</font></span>\n{\n}</font></font></pre>\r\n<p>Note : If you defined an operation using both the rialternative and the standard way, rialternative will retain the standard way.</p>\r\n<p>&#160;</p>\r\n<p><font size=\"4\"><strong>Generation of operations authorizations on client side</strong></font></p>\r\n<p align=\"justify\">Rialternative is able to introspect all your domain services to generate on the client proxy some properties which determinate the required authorizations to invoke an operation. You can use then these properties in the business logic of\r\n your application. The big advantage is if you want to change some authorizations of your domain service, Rialternative will update the client proxy at compilation time with the new rights and you do not have to change your business logic !</p>\r\n<p><em>Example :</em></p>\r\n<p><em>The following domain service settings….</em></p>\r\n<pre style=\"font-family:; background:white; color:\"><font face=\"Consolas\"><font style=\"font-size:9.8pt\">[<span style=\"color:\"><font color=\"#2b91af\">EnableClientAccess</font></span>()]\n[<span style=\"color:\"><font color=\"#2b91af\">RequiresAuthentication</font></span>]\n[<span style=\"color:\"><font color=\"#2b91af\">EntityDomain</font></span>(<span style=\"color:\"><font color=\"#0000ff\">typeof</font></span>(<span style=\"color:\"><font color=\"#2b91af\">Categories</font></span>), <span style=\"color:\"><font color=\"#2b91af\">EntityDomainOperations</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Query <span style=\"color:\"><font color=\"#ff8000\">|</font></span>&#160;<span style=\"color:\"><font color=\"#2b91af\">EntityDomainOperations</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Update, </font></font><br><font face=\"Consolas\"><font style=\"font-size:9.8pt\">              UpdateRequiresRole <span style=\"color:\"><font color=\"#ff8000\">=</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">new</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">string</font></span>[] { <span style=\"color:\"><font color=\"#a31515\">&quot;Admin&quot;</font></span>, <span style=\"color:\"><font color=\"#a31515\">&quot;CategoryManager&quot;</font></span> })]\n[<span style=\"color:\"><font color=\"#2b91af\">EntityDomainServiceDescriptionProvider</font></span>(<span style=\"color:\"><font color=\"#0000ff\">typeof</font></span>(<span style=\"color:\"><font color=\"#2b91af\">NorthwindEntities</font></span>))]\n<span style=\"color:\"><font color=\"#0000ff\">public</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">class</font></span>&#160;<span style=\"color:\"><font color=\"#2b91af\">NorthwindService</font></span> : <span style=\"color:\"><font color=\"#2b91af\">RepositoryDomainService</font></span>\n{\n}</font></font></pre>\r\n<p><em>…will generate the following properties in the client proxy :</em></p>\r\n<pre style=\"font-family:; background:white; color:\"><font face=\"Consolas\"><span style=\"color:\"><font color=\"#0000ff\"><font style=\"font-size:9.8pt\">public</font></font></span><font style=\"font-size:9.8pt\">&#160;<span style=\"color:\"><font color=\"#0000ff\">bool</font></span> CanGetCategories\n{\n<span style=\"color:\"><font color=\"#0000ff\"><font color=\"#000000\">   </font>get</font></span>\n   {\n<span style=\"color:\"><font color=\"#0000ff\"><font color=\"#000000\">      </font>return</font></span> System<span style=\"color:\"><font color=\"#ff8000\">.</font></span>ServiceModel<span style=\"color:\"><font color=\"#ff8000\">.</font></span>DomainServices<span style=\"color:\"><font color=\"#ff8000\">.</font></span>Client<span style=\"color:\"><font color=\"#ff8000\">.</font></span>ApplicationServices</font></font><font face=\"Consolas\"><font style=\"font-size:9.8pt\"><span style=\"color:\"><font color=\"#ff8000\">.</font></span><br><span style=\"color:\"><font color=\"#2b91af\">              WebContextBase</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Current<span style=\"color:\"><font color=\"#ff8000\">.</font></span>Authentication<span style=\"color:\"><font color=\"#ff8000\">.</font></span>User<span style=\"color:\"><font color=\"#ff8000\">.</font></span>Identity<span style=\"color:\"><font color=\"#ff8000\">.</font></span>IsAuthenticated;\n   }\n}\n<br>\n<span style=\"color:\"><font color=\"#0000ff\">public</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">bool</font></span> CanUpdateCategories\n{\n<span style=\"color:\"><font color=\"#0000ff\"><font color=\"#000000\">   </font>get</font></span>\n   {\n<span style=\"color:\"><font color=\"#0000ff\"><font color=\"#000000\">      </font>return</font></span> System<span style=\"color:\"><font color=\"#ff8000\">.</font></span>ServiceModel<span style=\"color:\"><font color=\"#ff8000\">.</font></span>DomainServices<span style=\"color:\"><font color=\"#ff8000\">.</font></span>Client<span style=\"color:\"><font color=\"#ff8000\">.</font></span>ApplicationServices<span style=\"color:\"><font color=\"#ff8000\">.</font></span><br><span style=\"color:\"><font color=\"#2b91af\">              WebContextBase</font></span></font></font><font face=\"Consolas\"><font style=\"font-size:9.8pt\"><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Current<span style=\"color:\"><font color=\"#ff8000\">.</font></span>Authentication<span style=\"color:\"><font color=\"#ff8000\">.</font></span>User<span style=\"color:\"><font color=\"#ff8000\">.</font></span>IsInRole(<span style=\"color:\"><font color=\"#a31515\">&quot;Admin&quot;</font></span>) <span style=\"color:\"><font color=\"#ff8000\">||</font></span><br>             System<span style=\"color:\"><font color=\"#ff8000\">.</font></span>ServiceModel<span style=\"color:\"><font color=\"#ff8000\">.</font></span>DomainServices<span style=\"color:\"><font color=\"#ff8000\">.</font></span>Client<span style=\"color:\"><font color=\"#ff8000\">.</font></span>ApplicationServices<span style=\"color:\"><font color=\"#ff8000\">.</font></span><br><span style=\"color:\"><font color=\"#2b91af\">              WebContextBase</font></span></font></font><font face=\"Consolas\"><font style=\"font-size:9.8pt\"><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Current<span style=\"color:\"><font color=\"#ff8000\">.</font></span>Authentication<span style=\"color:\"><font color=\"#ff8000\">.</font></span>User<span style=\"color:\"><font color=\"#ff8000\">.</font></span>IsInRole(<span style=\"color:\"><font color=\"#a31515\">&quot;CategoryManager&quot;</font></span>);\n   }\n}</font></font></pre>\r\n<p>&#160;</p>\r\n<p><font size=\"4\"><strong>Configure a Domain Service to use Rialternative</strong></font></p>\r\n<p align=\"justify\">To configure a Domain Service for Rialternative, the best way is to use the\r\n<font face=\"Consolas\">Application_Start</font> handler of the <font face=\"Consolas\">\r\nGlobal.asax</font> file of your web application. Rialternative need a dependency injection container to be able to inject the dedicated repository on demand but we did not want a strong relationship between Rialternative and a specific dependency injection\r\n container like Unity Application Block. In this way, Rialternative embed the IDIContainer interface that allow developpers to create their own implementation regarding the container they use in their application (Unity, Sprint.net, NInject, Func, etc…). To\r\n specify to Rialternative the implementation of IDIContainer you want to use to resolve your domain services, use the\r\n<strong>SetupContainer</strong> method of the <strong>Bootstrapper </strong>class. Then for each domain service you want to configure for Rialternative, use the\r\n<strong>ConfigureService</strong> method.</p>\r\n<p>Example :</p>\r\n<pre style=\"font-family:; background:white; color:\"><font face=\"Consolas\"><span style=\"color:\"><font color=\"#0000ff\"><font style=\"font-size:9.8pt\">public</font></font></span><font style=\"font-size:9.8pt\">&#160;<span style=\"color:\"><font color=\"#0000ff\">class</font></span>&#160;<span style=\"color:\"><font color=\"#2b91af\">Global</font></span> : System<span style=\"color:\"><font color=\"#ff8000\">.</font></span>Web<span style=\"color:\"><font color=\"#ff8000\">.</font></span><span style=\"color:\"><font color=\"#2b91af\">HttpApplication</font></span>\n{<br>&#160;&#160;&#160;&#160; <span style=\"color:\"><font color=\"#0000ff\">protected</font></span>&#160;<span style=\"color:\"><font color=\"#0000ff\">void</font></span> Application_Start(<span style=\"color:\"><font color=\"#0000ff\">object</font></span> sender, <span style=\"color:\"><font color=\"#2b91af\">EventArgs</font></span> e)<br>&#160;&#160;&#160;&#160; {<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color:\"><font color=\"#2b91af\">Bootstrapper</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>SetupContainer(<span style=\"color:\"><font color=\"#2b91af\">UnityProvider</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>Instance);<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style=\"color:\"><font color=\"#2b91af\">Bootstrapper</font></span><span style=\"color:\"><font color=\"#ff8000\">.</font></span>ConfigureService<span style=\"color:\"><font color=\"#ff8000\">&lt;</font></span><span style=\"color:\"><font color=\"#2b91af\">NorthwindService</font></span>, <span style=\"color:\"><font color=\"#2b91af\">EntityFrameworkRepository</font></span><span style=\"color:\"><font color=\"#ff8000\">&lt;</font></span><span style=\"color:\"><font color=\"#2b91af\">NorthwindEntities</font></span><span style=\"color:\"><font color=\"#ff8000\">&gt;&gt;</font></span>();<br>&#160;&#160;&#160;&#160; }\n}</font></font></pre>\r\n<p><em>See the documentation section to have an example of IDIContainer implementation (just Unity for now).</em></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "ria,RIA Services,wcf,wcf ria services,Silverlight,cool,gg,silverlight 4,Awesome,Industrialisation,Entity Framework,Rights Management,Unit Testing,extensibility,",
  "LastEdited": "2011-03-13T11:52:18.373-07:00"
}