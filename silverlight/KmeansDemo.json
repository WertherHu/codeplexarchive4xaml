{
  "ProjectName": "KmeansDemo",
  "Title": "Clustering Demo in Silverlight using K-Means Algorithm",
  "Description": "This explains clustering and K-means algorithm in an efficient way using a live demo in Silverlight. The demo can be used to understand the working of k-means algorithm through user-defined data points.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>Summary</h2>\rThis explains clustering and K-means algorithm in an efficient way using a live demo in Silverlight. The demo can be used to understand the working of k-means algorithm through user-defined data points.<br />\n<h2>Silverlight Screenshot</h2>\r\n<img src=\"/projects/KmeansDemo/e5f4ff13-1cf2-4539-ae83-90bf9f5c57ac\" alt=\"KMeans-Silverlight.JPG\" title=\"KMeans-Silverlight.JPG\" /><br /><br />For more explanation on how this algorithm is implemented in C# and Silverlight, and to see the live usable demo, visit: <a href=\"http://www.codeding.com/articles/k-means-algorithm\">http://www.codeding.com/articles/k-means-algorithm</a><br />\n<h2>Source Code Explanation</h2>\r\nThe following data-structure classes are created. The <i>Point</i> class represents a point in 2D space. The <i>PointCollection</i> represents a set of points and/or cluster.<br /><br /><pre>\npublic class Point\n{\n    public int Id { get; set; }\n    public double X { get; set; }\n    public double Y { get; set; }\n}\n\npublic class PointCollection : List&lt;Point&gt;\n{\n    public Point Centroid { get; set; }\n}\n</pre><br /><br />The following code implements the K-means algorithm, using the data-structures defined above.<br /><br /><pre>\npublic static List&lt;PointCollection&gt; DoKMeans(PointCollection points, int clusterCount)\n{\n    //divide points into equal clusters\n    List&lt;PointCollection&gt; allClusters = new List&lt;PointCollection&gt;();\n    List&lt;List&lt;Point&gt;&gt; allGroups = ListUtility.SplitList&lt;Point&gt;(points, clusterCount);\n    foreach (List&lt;Point&gt; group in allGroups)\n    {\n        PointCollection cluster = new PointCollection();\n        cluster.AddRange(group);\n        allClusters.Add(cluster);\n    }\n\n    //start k-means clustering\n    int movements = 1;\n    while (movements &gt; 0)\n    {\n        movements = 0;\n\n        foreach (PointCollection cluster in allClusters) //for all clusters\n        {\n            for (int pointIndex = 0; pointIndex &lt; cluster.Count; pointIndex++) //for all points in each cluster\n            {\n                Point point = cluster[pointIndex];\n\n                int nearestCluster = FindNearestCluster(allClusters, point);\n                if (nearestCluster != allClusters.IndexOf(cluster)) //if point has moved\n                {\n                    if (cluster.Count &gt; 1) //each cluster shall have minimum one point\n                    {\n                        Point removedPoint = cluster.RemovePoint(point);\n                        allClusters[nearestCluster].AddPoint(removedPoint);\n                        movements += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return (allClusters);\n}\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "sergiu,",
  "LastEdited": "2012-09-26T06:23:45.227-07:00"
}