{
  "ProjectName": "slstoryboardhelper",
  "Title": "Silverlight Storyboard Helper",
  "Description": "This is a project with a class called StoryboardHelper.cs.  This class currently has two static methods: FadeInFrameworkElement & FadeOutFrameworkElement.  They allow you to fade in or out any FrameworkElement in code behind.  I would like people to add to this functionality.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This project is StoryboardHelper.  It consists of a Silverlight project with a class called StoryboardHelper. Currently it has two public static methods called FadeInFrameworkElement and FadeIOutFrameworkElement.  They allow you to specify a FrameworkElement to be faded in or out over a specified duration after a specified delay time.  It is my hope that people will add to the StoryboardHelper class to make this the most comprehensive Silverlight Storyboard helper class around.<br /><br />Please download the project called StoryboardHelperProject and either use the StoryboardHelper class as is or add public static methods to assist with Silvelright Storyboards.<br /><br />When you open StoryboardHelperProject you will see that there is a Rectangle on the main page (MainPage.xaml) named TheRect.  It has an Opacity of 0 (meaning you cannot see it).  In MainPage.xaml.cs there is a loaded handler that specifies a MouseLeftDown event. The MainPage_MouseLeftButtonDown event handler checks to see if TheRect&#39;s Opacity is 0.  If it is it creates a Storyboard called FadeInRect that uses the StorybaordHelper.FadeInFrameworkElement method to create the Storyboard.  If it is not null then it Begins the Storyboard.  If the Opacity is 1 then it does the same thing except it fades out TheRect by using the StoryboardHelper.FadeOutFrameworkElement.  Here is the code:<br /><br />public partial class MainPage : UserControl<br />\t{<br />\t\tpublic MainPage()<br />\t\t{<br />\t\t\t// Required to initialize variables<br />\t\t\tInitializeComponent();<br />            Loaded += new RoutedEventHandler(MainPage_Loaded);<br />\t\t}<br /><br />        void MainPage_Loaded(object sender, RoutedEventArgs e)<br />        {<br />            MouseLeftButtonDown += new MouseButtonEventHandler(MainPage_MouseLeftButtonDown);<br />        }<br /><br />        void MainPage_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)<br />        {<br />            if (TheRect.Opacity == 0)<br />            {<br />                Storyboard fadeInRect = StoryboardHelper.FadeInFrameworkElement(TheRect, .5, 0);<br />                if (fadeInRect != null)<br />                {<br />                    fadeInRect.Begin();<br />                }<br />            }<br />            else<br />            {<br />                Storyboard fadeOutRect = StoryboardHelper.FadeOutFrameworkElement(TheRect, .5, 0);<br />                if (fadeOutRect != null)<br />                {<br />                    fadeOutRect.Begin();<br />                }<br />            }<br /><br />        }<br />\t}<br /><br />You may use this class as is or go ahead and add to the StoryboardHelper class.  An example of a new StoryboardHelper method would be a static method named MoveFrameworkElementXPosition that moves the specified object in the X coordinates to the new specfied X coordinate.  </div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2009-11-08T15:57:28.617-08:00"
}