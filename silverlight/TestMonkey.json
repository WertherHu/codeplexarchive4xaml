{
  "ProjectName": "TestMonkey",
  "Title": "Test Monkey",
  "Description": "Low level unit testing sucks. It sucks even more when you realize for every 100 properties that you test only one of them is going to have a bug. A nasty, impossible to find bug, that prompted your lead to have you write the stupid property tests in the first place.\r\n\r\nTest Monkey is an automatic Unit Test Generator for .NET/Silverlight. It is designed to write the trivial unit tests that, while very valuable, are incredibly tedious to write manually.\r\n\r\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Low level unit testing sucks. It sucks even more when you realize for every 100 properties that you test only one of them is going to have a bug. A nasty, impossible to find bug, that prompted your lead to have you write the stupid property tests in the first place.<br /><br />Test Monkey is an automatic Unit Test Generator for .NET&#47;Silverlight. It is designed to write the trivial unit tests that, while very valuable, are incredibly tedious to write manually.<br /><br /><br />\n<h1>Test Monkey Basic Tests</h1>\r\n<h2>Construtors</h2>\r<ul><li>All constructors are successful or throw ArgumentException</li></ul>\n\n<h2>Properties</h2>\r<ul><li>Setting a value will throw an ArgumentException or set the value</li>\n<li>Setting a value to itself will not throw</li>\n<li>Setting a value to null will throw an ArgumentNullException or set the value (Exception, strings can be changed from null to &quot;&quot;)</li>\n<li>Reading a property twice in a row will return the same value both times.</li></ul>\n\n<h2>Memory</h2>\r<ul><li>Creating and then nulling an object will allow it to be garbage collected.</li></ul>\n\n<h1>Test Monkey Interface Tests</h1>\r\n<h2>IBindingList</h2>\r<ul><li>AllowNew/AddNew Pair</li></ul>\n\n<h2>ICloneable</h2>\r<ul><li>Clone doesn&#39;t throw</li>\n<li>New properties are equal to original</li></ul>\n\n<h2>IComparable and IComparable&lt;T&gt;</h2>\r<ul><li>IComparable.Compare (equals, greater-than, and less-than)</li>\n<li>IComparable.Compare null check</li>\n<li>IComparable&lt;T&gt;.Compare (equals, greater-than, and less-than)</li>\n<li>IComparable&lt;T&gt;.Compare null check (if applicable)</li></ul>\n\n<h2>IDisposable</h2>\r<ul><li>Base case doesn&#39;t throw</li>\n<li>Calling a second time doesn&#39;t throw</li>\n<li>Repeat with each constructor</li></ul>\n\n<h2>IEditableObject</h2>\r<ul><li>Begin/End pair doesn&#39;t throw</li>\n<li>Begin/Cancel pair doesn&#39;t throw</li></ul>\n\n<h2>IEquatable&lt;T&gt;</h2>\r<ul><li>IEquatable.Equals (equals, not equals)</li>\n<li>IEquatable.Equals null check (if applicable)</li>\n<li>object.Equals(object)</li>\n<li>object.GetHashCode</li>\n<li>Object.Equals(object, object)</li></ul>\n\n<h2>INotifyPropertyChanged</h2>\r<ul><li>Raises an event when the value changes</li>\n<li>Doesn&#39;t eaise an event for an unchanged being set. (Note, other properties may be raised. This is to support calculated properties where you don&#39;t want the expense of seeing if they actaully changed.)</li></ul>\n<br /><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-07-13T16:31:35.58-07:00"
}