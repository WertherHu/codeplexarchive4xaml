{
  "ProjectName": "ilcalc",
  "Title": "ILCalc: Arithmetical Expressions Evaluator",
  "Description": "Small, lightweight and very quick .NET 2.0 library for evaluating arithmetical expressions using interpretation or runtime MSIL generation. Developed in C#. Silverlight 2.0 and CF 3.5 platforms are also supported.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Description:</b>\n<ul><li>Small library for parsing and evaluating arithmetical expressions defined by strings.</li>\n<li>Supports expressions with .NET primitive types: Int32, Int64, Single, Double, Decimal.</li>\n<li>Standard arithmetics operators supported (including &quot;raise to power&quot; operator).</li>\n<li>Implicit multiplication supported (more mathematical &amp; lightweight syntax).</li>\n<li>Works on .NET 2.0, .NET CF 2.0/3.5 and Silverlight 2.0 target platforms.</li>\n<li>Well-documented and very <a href=\"https://ilcalc.codeplex.com/wikipage?title=Quick%20Start%20%28CSharp%29&referringTitle=Home\">easy to use</a> API.</li></ul>\n<b>Performance</b> benefits:\n<ul><li>Very fast parsing, no need for building any expression trees.</li>\n<li>No parser generators used, own clearly written parser provided.</li>\n<li>It&#39;s <a href=\"https://ilcalc.codeplex.com/wikipage?title=Benchmark&referringTitle=Home\">really fast</a> for most common usage scenarios.</li>\n<li>Expressions is strongly-typed - no boxing/unboxing caused.</li>\n<li>Ability to validate expression without doing any other work.</li></ul>\n<b>Flexibility:</b>\n<ul><li>Choose between interpretation or runtime compilation to MSIL code.</li>\n<li>Best solutions for all usage scenarios, depending on needed evaluates count:\n<ul><li>Once - use quick interpretation mode (parse and evaluate by one pass).</li>\n<li>Many - create <u>Interpret</u> object and use it with different arguments, with no re-parse.</li>\n<li>Much many - create <u>Evaluator</u> object (using compiler - slow startup, fastest evaluation).</li>\n<li>Many in some <i>argument range</i> - create highly specialized <u>Tabulator</u> object.</li></ul></li></ul>\n<b>Evaluator&lt;T&gt;</b> and <b>Tabulator&lt;T&gt;</b> objects:\n<ul><li>Thread-safe - may be used in multi-threaded apps without any concurrency problems.</li>\n<li>Created objects are garbage-collected and independent from the expression&#39;s context.</li>\n<li>Fastest tabulation possible - compiling method with tabulation cycle with no delegate calls.</li></ul>\n<b>Interpret&lt;T&gt;</b> object:\n<ul><li>Independent from the expression&#39;s context, that may be collected by GC when no longer used.</li>\n<li>No memory allocations per evaluation (excepting when BCL performs the reflection calls).</li>\n<li>Replacing simple reflection calls with the delegates calls witch is much faster.</li></ul>\n<b>Expression optimizer</b>:\n<ul><li>Constants folding: 2^8 + x/(6+3+x) became 256 + x/(9+x).</li>\n<li>Functions folding: 2x * sin(pi/6) became 2x * 0.5 (beware of side-effects!).</li>\n<li>Pow optimization: x^4 became x*x*x*x (much faster to evaluate).</li></ul>\n<b>Customizability</b>:\n<ul><li>Parameterize expressions by using user-defined arguments list.</li>\n<li>Use constants from user-defined list (like <i>pi</i>, <i>e</i>, <i>inf</i>) into expressions.</li>\n<li>Import methods from any other .NET type into expression&#39;s context.</li>\n<li>Culture-sensitive parsing (string compare, decimal and arguments separators).</li>\n<li>There is ability to import built-in constants and functions easily.</li>\n<li>Optional case-sensitive mode for identifiers.</li>\n<li>Optional arithmetic overflow checks.</li></ul>\n<b>Other</b>:\n<ul><li><u>ValueRange&lt;T&gt;</u> class for representing ranges of values with handy features.</li>\n<li><u>SyntaxException</u> class provides detailed information about syntax errors.</li>\n<li>String resources may be easily localized (already included: en, ru, pl).</li></ul>\n<b>Wiki pages:</b>\n<ul><li><a href=\"https://ilcalc.codeplex.com/wikipage?title=Quick%20Start%20%28CSharp%29&referringTitle=Home\">Quick Start &#40;C&#35;&#41;</a> <a href=\"https://ilcalc.codeplex.com/wikipage?title=Quick%20Start%20%28VB.NET%29&referringTitle=Home\">&#40;VB.NET&#41;</a></li>\n<li><a href=\"https://ilcalc.codeplex.com/wikipage?title=Generics&referringTitle=Home\">Generics Help</a></li>\n<li><a href=\"https://ilcalc.codeplex.com/wikipage?title=Benchmark&referringTitle=Home\">Performance benchmarks</a></li></ul>\n<br /><b>License</b>:<br /><br />Project licensed under the LGPL: as long as you dynamically link (ie: add a reference) to the officially released assemblies, you can use it in commercial and non-commercial applications.<br /><br /><b>Few words about:</b><br /><br />This project was inspired by the <a href=\"http://www.codeplex.com/Flee/\">FLEE project</a>, but written in different, much easier way.<br />Sorry for my English, it is not my native language :)<br /><br /><b>Future plans:</b><br />\n<ul><li>CalcNetwork class for representing networks of expressions.</li>\n<li>Support for user-defined types as generic parameters.</li>\n<li>Improve expression optimizer&#39;s algorithms.</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "evaluator,expressions,Emit,Interpreter,Arithmetic,MSIL,code generation,parser,Silverlight 2.0,Silverlight,Compact Framework,C#,C# 2.0,CF,parser math,Expression,",
  "LastEdited": "2010-02-06T05:17:07.74-08:00"
}