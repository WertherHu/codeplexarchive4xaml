{
  "ProjectName": "javascriptbridge",
  "Title": "SharePoint 2010 Silverlight Web Part JavaScript Bridge",
  "Description": "This is a project template containing a number of base classes and JavaScript which allows SharePoint 2010 Silverlight web parts to communicate with each other inside the browser. It provides Silverlight web parts with the functionality normal web parts get from interfaces.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#ff0000\"><strong>New Changes</strong></span></p>\r\n<p>Just added a MVVM pattern. Demo can be switched between UserControl and MVVM mode by using the startPage WebPart property. Use 'mvvm' for MVVM demo and 'uc' for UserControl demo:</p>\r\n<p><img src=\"http://download.codeplex.com/download?ProjectName=javascriptbridge&DownloadId=231690\" alt=\"\"></p>\r\n<p><strong>Project Description</strong><br>\r\nThis is a project template containing a number of base classes and JavaScript which allows SharePoint 2010 Silverlight web parts to communicate with each other inside the browser. It provides Silverlight web parts with the functionality normal web parts get\r\n from interfaces.<br>\r\n<br>\r\n<a href=\"http://geoffwebbercross.blogspot.com/2011/02/sharepoint-2010-silverlight-web-part.html\">http://geoffwebbercross.blogspot.com/2011/02/sharepoint-2010-silverlight-web-part.html</a><br>\r\n<br>\r\n<strong>Overview</strong><br>\r\nThis template contains base classes and scripts enabling Silverlight web parts (and ASP.Net web parts) to be created enabling client-side interaction with other Silverlight Web Parts. A JavaScript file is injected into the page automatically and allows Web\r\n Parts to register themselves for interaction with the bridge. If only Silverlight to Silverlight communication is required, local messaging could be used as an alternative mechanism, however this technique allows interaction from both Silverlight and ASP.Net\r\n web parts which is more flexible for SharePoint applications.&nbsp; A Web Part using the base classes has the following properties required for JS Bridge connection:<br>\r\n<br>\r\n* JSClientID - Used to pass the JavaScript Bridge ClientID from the SharePoint UI to the Web Part. JSClientID is a simple identifier for components connecting to the JS Bridge.<br>\r\n<br>\r\n* JSClientSourceID - Used to pass the JavaScript Bridge ClientSourceID from the SharePoint UI to the Web Part. JSClientSourceID indicates to the JS Bridge where a components connection is sourced.<br>\r\n<br>\r\n* JSUniqueClientID - JSClientSourceID indicates to the JS Bridge the real ID of the component on the page. It is derived from the WebParts&rsquo;s ClientID with an &lsquo;SL&rsquo; suffix.<br>\r\n<br>\r\n<strong>Registering Clients</strong><br>\r\nWhen a client Web Part loads, it registers itself with the JS Bridge using the registerClient method, this allows the bridge to locate the Web Part on the page and lets it know where to route data.<br>\r\n<br>\r\n<strong>Writing to JS Bridge</strong><br>\r\nWhen a client WebPart wants to send something, it calls the JS Bridge using the JSBridgeWrite method, which looks at the ClientID and multicasts the data to any WebPart with a corresponding ClientSourceID.</p>\r\n<p><img src=\"http://1.bp.blogspot.com/-wFKKUM6pd4g/TV2T9VRnOeI/AAAAAAAAAB8/TN9m9iy69tA/s320/jsb6.PNG\" alt=\"\"></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-04-23T03:15:01.497-07:00"
}