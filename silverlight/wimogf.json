{
  "ProjectName": "wimogf",
  "Title": "WiMo Game Frameworks",
  "Description": "The WiMo Game Frameworks or WiMo-GF allows you to quickly and easily create casual games.  WiMo-GF currently targets Windows Mobile, Zune HD and Silverlight  3.0.\n",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">The WiMo Game Frameworks or WiMo-GF is an open source project that is intended to make it easier to write casual games for Mobile Devices using C# or Visual Basic .NET.<br /><br />WiMo-GF currently has support for \n<ul><li>Windows Mobile 5.0, 6.0, 6.1 and 6.5</li>\n<li>Zune HD</li>\n<li>Silverlight 3.0</li></ul>\n<br /><a href=\"http://www.wimo-gf.net/gotballs.htm\">GotBalls?  WiMo-GF Does!</a><br /><br /><a href=\"http://www.youtube.com/watch?v=Npi__De1Mlw\">WiMo-GF Running on Windows Mobile 6.1 and Zune HD</a><br /><br /><a href=\"http://www.wimo-gf.net/Yabog.html\">Y.A.B.O.G Running on Silverlight 3.0</a><br /><br /><a href=\"http://channel9.msdn.com/posts/dpeeast/Zune-Silverlight-and-WiMo-Game-Framwork-WiMoGF/\">WiMo-GF on Channel 9</a><br /><br />WiMo-GF is designed with extensibility and making your games future proof in mind.  By developing your game against a set of abstract interfaces you will be able to easily compile your game with implementations of those interfaces for different hardware and devices with making no or minimal changes to your game. <br /><br />Although WiMo-GF was built for the novice to get up to speed quickly and easily, it supports many advanced features such as physics, collision, accelerometer input and planned support for on-line services such as high-score and cooperative game play.  In addition if you need specialized functionality you can create a custom implementation of the interfaces to suite your needs.<br /><br /><img src=\"/projects/wimogf/75fa6146-f62f-4e44-bb4c-56c7980dfc66\" alt=\"WiMo-GF.png\" title=\"WiMo-GF.png\" /><br />\n<h1>Services Provided by WiMo-GF</h1>\rThe following services are provided by the frameworks and are roughly organized by interfaces defined in the core WiMo-GF project.<br />\n<h2>Device/Hardware Specific</h2>\rDisplayManager – Provides services to draw sprites to the display.  The initial implementation is DirectDraw for Windows Mobile.  Support is planned for Direct3D.  <br /><br />InputManager – Provides a layer of abstraction between the game and the input devices.  This includes hardware buttons, accelerometer and some on-screen soft buttons for devices with limited hardware interface.<br /><br />AudioManager – Provides a layer of abstraction between loading and playing sounds and music for your game.<br /><br />GameEngine – Implementation of the gaming loop and basic features for primitives such as Shapes, Text and Images.  The GameEngine also provides low level services to extract and load resources such as a images and audio files.  <br />\n<h2>Gaming Services</h2>\rPhysicsManager – Provides services to apply forces to your gaming sprites<br /><br />CollisionManager – Collision Detection Algorithms <br /><br />MenuManager – Simple way to display on-screen Menus<br /><br />To port your game to different platforms or use custom services, your game code stays the same, but Poor-Man&#39;s Dependency Injection allows you to use the different services.<br /><br />The following code shows how you would configure your game to use the Windows Mobile 5.0, 6.1 and 6.5 versions of the frameworks<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n        [MTAThread]\n        <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> Main()\n        {\n            <span style=\"color:Blue;\">var</span> gameEngine = <span style=\"color:Blue;\">new</span> WiMo.Games.WM5.GameEngine();\n            \n            gameEngine.PhysicsManager = <span style=\"color:Blue;\">new</span> WiMo.Games.StandardPhysics.PhysicsManager();\n            Size formSize = <span style=\"color:Blue;\">new</span> Size(gameEngine.Form.Size.Width, gameEngine.Form.Size.Height);\n            <span style=\"color:Blue;\">var</span> targetSize = <span style=\"color:Blue;\">new</span> Size(240, 320);\n            gameEngine.CollisionManager = <span style=\"color:Blue;\">new</span> WiMo.Games.StandardCollisions.CollisionManager(targetSize);\n            gameEngine.Display = <span style=\"color:Blue;\">new</span> WiMo.Games.DirectDrawDisplay.DisplayManager(gameEngine.Form.Handle, targetSize, \n                                          formSize, 96, WiMo.Games.Display.AspetRatioThreeByFour);\n            gameEngine.InputManager = <span style=\"color:Blue;\">new</span> WiMo.Games.StandardInput.InputManager(gameEngine.Form, gameEngine.Display);\n            gameEngine.AudioManager = <span style=\"color:Blue;\">new</span> WiMo.Games.StandardAudio.AudioManager(gameEngine.ContentManager);\n            gameEngine.MenuManager = <span style=\"color:Blue;\">new</span> WiMo.Games.StandardMenus.MenuManager();\n\n            <span style=\"color:Blue;\">var</span> game = <span style=\"color:Blue;\">new</span> Game(gameEngine);\n            gameEngine.Initialize(game);\n            gameEngine.Start();\n            Application.Run(gameEngine.Form);\n\n        }\r\n</pre></div><br /><img src=\"/projects/wimogf/84983dc7-2bec-4774-9c12-542aaf00ce6b\" alt=\"YABOG.png\" title=\"YABOG.png\" /><br /><br />After you have installed the gaming frameworks, you can download the source for YABOG.<br /><br /><a href=\"/projects/wimogf/75f74427-0c5c-4d61-8484-d9d9ea3262c9\">Yabog.zip</a><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "Zune HD,windows mobile,Silverlight,game engine,game,",
  "LastEdited": "2010-01-21T15:23:51.207-08:00"
}