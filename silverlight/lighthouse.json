{
  "ProjectName": "lighthouse",
  "Title": "Lighthouse - Versatile Unit Test Runner for Silverlight",
  "Description": "Lighthouse provides you with set of simple but powerful tools to run Silverlight Unit Tests from Command Line, Windows Test Runner Application and from Resharper plugin for Visual Studio.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong><span style=\"font-size:medium\">What is Lighthouse?&nbsp;&nbsp;&nbsp; <br>\r\n</span></strong></p>\r\n<p><br>\r\nLighthouse is open source project that provides you with tools to run Silverlight Unit Tests.</p>\r\n<p>Currently it only supports running Silverlight Unit Tests from Command Line &ndash; this is useful when running Unit Tests on Continuous Build Integration Server (For example\r\n<a href=\"http://sourceforge.net/projects/ccnet/\" target=\"_blank\">CCnet</a> or <a href=\"http://www.jetbrains.com/teamcity/\" target=\"_blank\">\r\nTeamCity</a>)</p>\r\n<p>In future we plan to add support for running tests from Windows Test Runner Application and from\r\n<a href=\"http://www.jetbrains.com/resharper/\" target=\"_blank\">Resharper</a> plugin for Visual Studio 2010.</p>\r\n<p>&nbsp;</p>\r\n<p><strong><span style=\"font-size:medium\">Features:</span></strong></p>\r\n<ul>\r\n<li>Running Silverlight Unit Tests written with <a href=\"http://archive.msdn.microsoft.com/silverlightut\" target=\"_blank\">\r\nSilverlight Unit Testing Framework</a> directly from command line without the need of Visual Studio (it does not even need to be installed on the machine)\r\n</li><li>Running Silverlight Unit Tests in XAP file </li><li>Running Silverlight Unit Tests by specifying one or multiple Silverlight assemblies (*.dll files) &ndash; you can specify each of the assemblies or use wildcards\r\n</li><li>Specifying by Filter Tag which Unit Tests to run </li><li>Saving results of each Unit Tests Run in known <a href=\"http://www.nunit.org/wiki/doku.php?id=dev:specs:xml_formats&s[]=xml\" target=\"_blank\">\r\nNUnit XML Unit Tests results file format</a> that is recognizable by any popular Continuous Integration Build Server (CCNet, TeamCity etc)\r\n</li><li>Fully configurable via command line parameters (see <a href=\"http://lighthouse.codeplex.com/wikipage?title=Lighthouse_Command_Line_Runner_Parameters_Documentation\" target=\"_self\">\r\nLighthouse Command Line Test Runner Documentatio</a>n for more info) </li><li>Sending log messages from your Silverlight Unit Tests to Lighthouse CMD Line Unit Test Runner\r\n</li></ul>\r\n<p><strong><span style=\"font-size:medium\">How it works?</span></strong></p>\r\n<blockquote>\r\n<p>When you specify XAP or specific Silverlight Assemblies Lighthouse analyzes them and behind the scenes creates new web page and modified Silverlight for controlled run of Unit Tests and then starts this application in separate browser instance and waits\r\n for the results of all Unit Tests. After its finished results are saved in NUnit xml results format.</p>\r\n<p>For more information see <a href=\"http://lighthouse.codeplex.com/documentation\" target=\"_self\">\r\nLighthouse Documentation</a>.</p>\r\n</blockquote>\r\n<p><strong><span style=\"font-size:medium\">How can I get started?</span></strong></p>\r\n<blockquote>\r\n<p>All you need to do is to crate a Silverlight assembly with some functionality and another assembly that contains Silverlight Unit Testing Framework Unit Tests for that functionality.</p>\r\n<p>Then you can package them all in standard XAP file that runs the tests (see this\r\n<a href=\"http://www.jeff.wilcox.name/2008/03/31/silverlight2-unit-testing/\">Introductory post by Jeff Wilcox</a> on how to do that) or just specify the desired assemblies via parameters in Lighthouse command line.</p>\r\n<p><strong><span style=\"font-size:medium\"><br>\r\n</span></strong></p>\r\n</blockquote>\r\n<p><a href=\"http://lighthouse.codeplex.com/wikipage?title=Lighthouse%20Release%20History\" target=\"_self\">Lighthouse Release History</a></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Silverlight,TDD,Unit Testing,ReSharper,Test,",
  "LastEdited": "2011-04-04T01:43:07.017-07:00"
}