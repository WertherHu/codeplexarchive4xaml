{
  "ProjectName": "Matrix3DEx",
  "Title": "Matrix3DEx",
  "Description": "The Matrix3DEx library is a collection of extension and factory methods for Silverlight's Matrix3D class. It includes factory methods for common transformation matrices that are not part of Silverlight like rotation, translation, look-at, projection and useful extension methods.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Description</h1>\rThe Matrix3DEx library is a collection of extension and factory methods for the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.media3d.matrix3d%28VS.95%29.aspx\">Matrix3D struct</a>. It&#39;s available for Windows WinRT including Universal Apps, Silverlight and Windows Phone Silverlight. The Matrix3D struct represents a 4x4 matrix that is used in combination with the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.matrix3dprojection%28VS.95%29.aspx\">Matrix3DProjection</a> to apply more complex semi-3D scenarios to any UIElement than are possible with the simple <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.planeprojection%28VS.95%29.aspx\">PlaneProjection</a>. This makes it possible to apply arbitrary model transformation matrices and perspective matrices to Silverlight elements. So it supports affine and non-affine transformations.<br />The Matrix3D struct is very minimalistic and has only a few <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.media3d.matrix3d_members%28VS.95%29.aspx\">members</a>. The Matrix3DEx library tries to compensate that with extension and factory methods for common transformation matrices that are easy to use like built in methods.<br /><br /><img src=\"/projects/Matrix3DEx/4a12094c-07e2-40b8-baa2-b42e795a40c8\" alt=\"screenshot.jpg\" title=\"screenshot.jpg\" />     <img src=\"/projects/Matrix3DEx/22bfd3f3-e659-4387-9d02-53f97596e936\" alt=\"cubemania.jpg\" title=\"cubemania.jpg\" />   <img src=\"/projects/Matrix3DEx/18c27b22-fa14-4f49-afe1-4a3a734f667d\" alt=\"gogoracer.jpg\" title=\"gogoracer.jpg\" /><br />\n<h1>Features</h1>\r<ul><li>Factory methods (<span class=\"codeInline\">Matrix3DFactory</span> class)\n<ul><li>Translation, scaling and rotation around x, y, z or any defined axis</li>\n<li>Perspective field of view and orthographic projection</li>\n<li>Camera (look-at) with position, target and up vector</li>\n<li>Support for left-handed and right-handed coordination systems</li></ul></li>\n<li>Extension methods\n<ul><li>Calculation of the matrix&#39; determinant</li>\n<li>Matrix transpose</li>\n<li>SwapHandedness to change from right-handed to left-handed coordination system and vice versa</li>\n<li>Dump of the values row by row into a formatted string </li></ul></li>\n<li>Math helper methods (<span class=\"codeInline\">MathHelper</span> class)\n<ul><li>Angle conversion from degrees to radians and vice versa</li></ul></li></ul>\n\n<h1>Live samples</h1>\rSamples that come with the Matrix3DEx source code in action:<br />The <a href=\"http://dl.dropbox.com/u/2681028/CodeplexData/Matrix3DEx/Sample/Matrix3DExSampleTestPage.html\">Basic Sample</a> loads some photos asynchronously and randomizes the position vector of each one. The sample uses most of the Matrix3DEx features and has some Sliders and CheckBoxes to change the parameters. Uncheck the &quot;Animate&quot; CheckBox to disable the camera movement and click on an Image to select it. The translation, scaling and the rotation matrices of the selected element can be changed with the corresponding Sliders. You can move the camera, change the target and the &quot;Field Of View&quot; with the other Sliders or fix the camera target at the selected element.<br />\n<h1>Great games</h1>\rDan Birch of vectorlight.net developed two great games using Matrix3DEx (see the screenshots above).<br /><a href=\"http://www.vectorlight.net/games/cubemania.aspx\">Cubemania</a> is a great and highly addictive rigid body physics game.<br /><a href=\"http://www.vectorlight.net/games/go_go_racer.aspx\">Go Go Racer!</a> is a nice 2.5D racing game.<br />\n<h1>Easy to use!</h1>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// Create transformations</span>\n\n<span style=\"color:Green;\">// Translate by x = 5, y = 4, z = -10</span>\n<span style=\"color:Blue;\">var</span> translate = Matrix3DFactory.CreateTranslation(5, 4, -10);         \n\n<span style=\"color:Green;\">// Rotate 30&#176; around x-axis</span>\n<span style=\"color:Blue;\">var</span> rotateX = Matrix3DFactory.CreateRotationX(MathHelper.ToRadians(30));\n\n<span style=\"color:Green;\">// Double the size on x-axis, invert y and don&#39;t change z</span>\n<span style=\"color:Blue;\">var</span> scale = Matrix3DFactory.CreateScale(2, -1, 1);\n\n<span style=\"color:Green;\">// Left-handed camera at the position x = 0, y = 5, z = 0 that looks to the negative z direction (z = -1)</span>\n<span style=\"color:Blue;\">var</span> lookAt = Matrix3DFactory.CreateLookAtLH(0, 5, 0, 0, 0, -1);\n\n<span style=\"color:Green;\">// Left-handed perspective projection with a 45&#176; field of view, a near view plane at 1 and a far view plane at 4000</span>\n<span style=\"color:Blue;\">var</span> aspectRatio = myCanvas.Width / myCanvas.Height;\n<span style=\"color:Blue;\">var</span> projection = Matrix3DFactory.CreatePerspectiveFieldOfViewLH(MathHelper.ToRadians(45), aspectRatio, 1, 4000);\n\n<span style=\"color:Green;\">// Viewport transformation</span>\n<span style=\"color:Blue;\">var</span> viewport = Matrix3DFactory.CreateViewportTransformation(myCanvas.Width, myCanvas.Height);\n\n\n<span style=\"color:Green;\">// Combine transformations</span>\n<span style=\"color:Blue;\">var</span> world = scale * rotateX * translate;\n<span style=\"color:Blue;\">var</span> viewProjection = Matrix3DFactory.CreateViewportProjection(world, lookAt, projection, viewport);\n\n\n<span style=\"color:Green;\">// Apply transformation to UIElement</span>\nmyImageControl.Projection = <span style=\"color:Blue;\">new</span> Matrix3DProjection { ProjectionMatrix = viewProjection };\n\n\n<span style=\"color:Green;\">// Trace final matrix</span>\nmyTextBlock.Text = viewProjection.Dump();\r\n</pre></div>\n<h1>Additional Information</h1>\r<a href=\"http://kodierer.blogspot.com/2010/01/matrix3dex-10-when-planeprojection-is.html\">Matrix3DEx 1.0 - When PlaneProjection is not enough</a> announced this project and provides some further information.<br /><a href=\"http://kodierer.blogspot.com/2014/09/matrix-of-universe-matrix3dex-now.html\">Matrix of the Universe - Matrix3DEx now available for Universal Apps</a> announced the WinRT Universal Apps support.<br /><br />\n<h1>Support it</h1>\r<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=MEX6JGW8E56MQ\"><img style=\"border:none;\" src=\"https://www.paypal.com/en_US/i/btn/btn_donateCC_LG_global.gif\" alt=\"Donate\" title=\"Donate\" /></a><br /><br /><a href=\"http://flattr.com/thing/1952/Matrix3DEx\"><img style=\"border:none;\" src=\"http://api.flattr.com/button/button-static-50x60.png\" alt=\"Flattr this\" title=\"Flattr this\" /></a><br />\n<h1>Credits</h1>\r<a href=\"http://rene-schulte.info\">Ren&#233; Schule</a> coder and coordinator of this project.</div><div class=\"ClearBoth\"></div>",
  "TagList": "Silverlight,Matrix3D,Matrix,Math,3D,computer graphics,",
  "LastEdited": "2014-09-25T01:02:23.907-07:00"
}