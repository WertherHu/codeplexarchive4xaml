{
  "ProjectName": "appservices",
  "Title": "AppServices - lightweight framework for IOC and Dependency Injection in SOA",
  "Description": "AppServices is a lightweight service container which can inject services into other objects, visual controls or components. It works with .NET Full, .NET Compact and Silverlight (included WP7). It manages automatically the service dependency. Its advantage is declarative configuration of services (attribute oriented). This makes referencing, injecting  and using services very easy.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h2>What is AppServices?</h2>\r\nMama says: &quot;<i>Avoid referencing concrete classes, rely on abstractions</i>&quot;. What does it mean? Instead of directly using <i>DateTime.Now</i>, use an abstraction - make an interface, i.e. <i>IDateTimeProvider.Now</i> and inject it with your class instance, i.e. <i>AlwaysHighNoonProvider</i>. Advantage? You are no more bound to the system time. It enormous simplifies testing of your app.<br /><br />AppServices can inject services into other objects, visual controls or components. It manages automatically the service dependency. <b>It works with .NET Full 2.0 or .NET Compact 2.0 and above, or Silverlight 3 and above</b>.<br /><br />AppServices is also a lightweight service container. It&#39;s like the built-in IServiceContainer/IServiceProvider from System.ComponentModel but it&#39;s much easier to use. Its advantage is declarative configuration of services (attribute oriented). This makes referencing, injecting  and using services very easy.<br /><br />If you&#39;re a friend of SOA - Service Oriented Architectures, and you need a lightweight container for your services, try AppServices - <b>It&#39;s free of charge for any purpose.</b><br />\n<h2>Why use AppServices?</h2>\r\nThere is MEF - Managed Extensibility Framework in .NET 4.0. But if you work with earlier versions of .NET there is no MEF. Apart from - MEF is much more than a service container. You don&#39;t need to buy a brewery to drink a beer and you don&#39;t need to learn MEF only to inject services to your app.<br /><br />ObjectBuilder from CAB - Composite Application Blocks, can also configure services in a declarative way, but be honest and tell me - how many times you desperately debugged your CAB-App and didn&#39;t know what depends on what. CAB is overloaded with functionality.<br />\n<h2>What are requirements of AppServices?</h2>\rAppServices works with .NET 2.0 and above, it&#39;s tested with Windows Forms, ASP.NET, WPF and Silverlight (WP7). <br />\n<h2>How does AppServices work?</h2>\r\n<b>1. Add services to the container.</b> (i.e. in program.cs)<br /><br /><pre>\nusing Polenter.Services;\nAppServices.Instance.AddService&lt;ITimeProvider&gt;(new MyTestTimeProviderWithConstantTime());\n// ... add further services\n</pre><br /><br /><b>2. Create your objects and make placeholders for your services.</b><br /><br /><pre>\npublic partial class Form1 : Form\n{\n    // ...\n    [Service] \n    private ITimeProvider _timeProvider;\n    // ...\n}\n</pre><br />It doesn&#39;t matter if your services are hold in properties of fields, or if they are private or public. They only must be marked with the <b>ServiceAttribute</b>.<br /><br /><br /><b>3. Inject the services to your object.</b> (You can do this in the constructor)<br /><br /><pre>\n    public Form()\n    {\n        InitializeComponent();\n        AppServices.Instance.InjectServices(this);\n    }\n</pre><br />From now on, all fields/properties which are marked with ServiceAttribute are injected with declared services.<br /><br /><br />If your services depend on each other, you can inject themself:<br /><br /><pre>\n    AppServices.Instance.InjectServices();\n</pre><br />During injection AppServices automatically detects dependencies between services and chooses the right injection order.<br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "soa,Services,service,container,service management,service manager,Service Broker,IOC,dependency injection,",
  "LastEdited": "2011-05-19T04:23:28.707-07:00"
}