{
  "ProjectName": "PDFx",
  "Title": "PDFx - Property Dependency Framework for WPF, Windows Store, Silverlight and WP",
  "Description": "The Property Dependency Framework is a lightweight library, which allows you to describe Property Dependency Relationships in C# code. Developed by Kevin Stumpf",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1><b>IMPORTANT: We have moved to GitHub <a href=\"https://github.com/interknowlogy/pdfx\">https://github.com/interknowlogy/pdfx</a> (1/18/2017)</b></h1>\r\n<h1>In a nutshell....</h1>\r\nThe Property Dependency Framework (PDFx) is a lightweight library, which allows you to describe dependencies between Properties in C# code. Once relationships are registered, the framework monitors property changes and ensures that the INotifyPropertyChanged.PropertyChanged event is fired for all directly and indirectly dependent properties in a very efficient way.<br /><br />This library was developed by <a href=\"https://www.codeplex.com/site/users/view/KevinStumpf\">Kevin Stumpf</a> and is now maintained by <a href=\"https://www.codeplex.com/site/users/view/dannydwarren\">Danny Warren</a> as an InterKnowlogy RECESS project and has endured several months of stress tests in production environments.<br />\n<h1>Quick Example</h1>\r\nSince pictures tell better stories than words, I would like to demonstrate the benefits of this workhorse with a small example:<br /><br /><img src=\"/projects/PDFx/f123e410-4fbc-4fe2-96bb-1705b155b131\" alt=\"PDFX.png\" title=\"PDFX.png\" /><br /><br />The depicted algebra hierarchy represents a C# class. Green circles stand for Input Properties while purple circles indicate calculated properties. The arrows show the underlying math operations as well as the property dependencies.<br />As the developer of such a scenario, you&#39;re responsible to ensure that all directly and indirectly dependent properties get reevaluated when an input property changes. Furthermore, for efficiency reasons, you also want to ensure that all unrelated properties do not get reevaluated.<br /><br />If, for example, Property D1 changes, it is necessary to reevaluate C1, B1 and A1.<br />However, a change of D3 requires a reevaluation of only C2, B1, B2 and A1.<br /><br />Using the PDFx, you don&#39;t have to manually hardcode those relationships anymore but can rather rely on the library taking care of this job for you.<br />All you have to do is register the relationships in human readable code within the implementation of a property:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">//....</span>\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> A1\n{\n\t<span style=\"color:Blue;\">get</span>\n\t{\n\t\tProperty(() =&gt; A1)\n\t\t\t.Depends(p =&gt; p.On(() =&gt; B1)\n\t\t\t               .AndOn(() =&gt; B2));\n\t\t\n\t\t<span style=\"color:Blue;\">return</span> B1 + B2;\n\t}\n}\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> B1\n{\n\t<span style=\"color:Blue;\">get</span>\n\t{\n\t\tProperty(() =&gt; B1)\n\t\t\t.Depends(p =&gt; p.On(() =&gt; C1)\n\t\t\t               .AndOn(() =&gt; C2));\n\t\t\n\t\t<span style=\"color:Blue;\">return</span> 2*C1 - C2;\n\t}\n}\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> B2\n{\n\t<span style=\"color:Blue;\">get</span>\n\t{\n\t\tProperty(() =&gt; B2)\n\t\t\t.Depends(p =&gt; p.On(() =&gt; C2)\n\t\t\t               .AndOn(() =&gt; C3));\n\t\t\n\t\t<span style=\"color:Blue;\">return</span> -C2 + C3;\n\t}\n}\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> C1\n{\n\t<span style=\"color:Blue;\">get</span>\n\t{\n\t\tProperty(() =&gt; C1)\n\t\t\t.Depends(p =&gt; p.On(() =&gt; D1)\n\t\t\t               .AndOn(() =&gt; D2));\n\n\t\t<span style=\"color:Blue;\">return</span> D1 + D2;\n\t}\n}\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> C2\n{\n\t<span style=\"color:Blue;\">get</span>\n\t{\n\t\tProperty(() =&gt; C2)\n\t\t\t.Depends(p =&gt; p.On(() =&gt; D3));\n\n\t\t<span style=\"color:Blue;\">return</span> 3*D3;\n\t}\n}\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> C3\n{\n\t<span style=\"color:Blue;\">get</span>\n\t{\n\t\tProperty(() =&gt; C3)\n\t\t\t.Depends(p =&gt; p.On(() =&gt; D4)\n\t\t\t               .AndOn(() =&gt; D5));\n\t\t\n\t\t<span style=\"color:Blue;\">return</span> D4 + D5;\n\t}\n}\n<span style=\"color:Green;\">//....</span>\r\n</pre></div>\n<h1>Advanced Features</h1>\r\n<ul><li>Dependencies on properties of external objects</li>\n<li>Dependencies on ObservableCollections</li>\n<li>Property Value Caching</li>\n<li>(Deferred) Callbacks for Property Changes</li></ul>\n\n<h1>Main Benefits</h1>\r\n<ul><li>The dependency registration resides within the Property Getter implementation. This way you&#39;re likely to notice immediately that an update of the registration is necessary when you change a property&#39;s implementation.</li>\n<li>The PDFx fires the PropertyChanged event only for Properties that are directly or indirectly dependent on the changed source property, thereby guaranteeing a high level of efficiency.</li>\n<li>Properties whose data relies completely on the value of other properties do not need to encapsulate backing fields. They can be implemented solely in the Property Getter, thereby ensuring full integrity.</li></ul>\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,Metro,MVVM,ViewModel,C#,Property,INotifyPropertyChang,PropertyChanged,",
  "LastEdited": "2017-01-18T16:53:22.683-08:00"
}