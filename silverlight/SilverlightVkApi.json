{
  "ProjectName": "SilverlightVkApi",
  "Title": "Silverlight vkontakte API",
  "Description": "This is a silverlight library that helps to perform JSON requests to vkontakte API directly from C# code avoiding interaction with java scripts.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This is a silverlight library that helps to perform JSON requests to vkontakte API directly from C&#35; code avoiding interaction with java scripts.<br /><br />Following text is going to be in russian language... sorry :)<br /><br /><br /><b>Предыстория</b><br />Когда узнал, что Silverlight приложения наконец-то доступны Вконтакте, решил мокнуться во взаимодействие с API, и как оказалось все не так радужно.<br /><br />Основная загвоздка - crossdomain communication, т.е. silverlight приложение не может напрямую взаимодействовать с API.<br /><br />Один из существующих workaround&#39;ов - использование JSON, но здесь тоже не все гладко. Готовые решения от других разработчиков требуют взаимодействия вашего silverlight application с JavaScrips, что лично мне совсем не по душе.<br /><br /><b>Инициализация API</b><br />VkApi это моя попытка перенести вызовы API исключительно в C# код. Все вызовы API доступны через singleton Vk. Для начала работы singleton должен быть инициализирован:<br /><pre>\nVk.Instance.VkInitSucceeded += new EventHandler(Instance_VkInitSucceeded); \nVk.Instance.VkInitFailed += new EventHandler(Instance_VkInitFailed);\n\n// objectID - ID элемента object содержащего ваше silverlight application \n// appID - ID вашего silverlight application (доступно на странице настроек) \n// secret - секрет вашего silverlight application (доступно на странице настроек) \n// uid - ID текущего пользователя \n// testMode - приложение в тестовом режиме \n\nVk.Instance.Initialize(objectID, appID, secret, uid, testMode);\n</pre><br /><br /><b>Взаимодействие с API</b><br />Для работы с Вконтакте API используйте метод Vk.Instance.Api.DirectRequest. Результат выполнения API будет приходить через событие Vk.Instance.Api.DirectRequestCallback в формате JSON. Описание доступных API смотрите <a href=\"http://vkontakte.ru/pages.php?o=-1&amp;p=%CE%EF%E8%F1%E0%ED%E8%E5%20%EC%E5%F2%EE%E4%EE%E2%20API\">здесь</a>.<br /><pre>\nVk.Instance.Api.DirectRequestCallback += new ApiResponse_Handler(Api_DirectRequestCallback); \nVk.Instance.Api.DirectRequest(&quot;photos.getAlbums&quot;, new Parameter[] { new Parameter(&quot;uid&quot;, uid) });\n</pre><br />Для некоторых методов уже существуют обертки, возвращающие результат в виде объектной модели. Чтобы &quot;обернуть&quot; все - понадобится время :) <br /><pre>\nVk.Instance.Api.GetGroupsFull(new ApiCallback(this.GetGroupsFullCallback));\n</pre><br />Взаимодействие с externals доступно через Vk.Instance.External. <br /><pre>\nVk.Instance.External.ShowPaymentBox();\n</pre><br />Так же вы можете просмотреть значения параметров, переданных в ваш IFrame, через Vk.Instance.Parameters. Доступны следующие параметры: <br /><pre>\nApplicationID \nApplicationSettings \nViewerID \nViewerType \nUserID \nGroupID \nIsApplicationUser \nAuthKey \nLanguage \nParentLanguage \nReferrer \nLcName\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "Silverlight,vkontakte,ВКонтакте,",
  "LastEdited": "2010-09-08T12:14:13.727-07:00"
}