{
  "ProjectName": "xnastoryboard",
  "Title": "XNA Storyboard",
  "Description": "XNA Storyboard provides a Storyboard system for XNA similar to Silverlight's, using DependencyObjects and DependencyProperties developed in C#.\n\nThe purpose of this project is to provide an easy to use, yet robust mechanism for animating virtually any kind of value over time.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rXNA Storyboard provides a Storyboard system for XNA similar to Silverlight&#39;s, using DependencyObjects and DependencyProperties developed in C&#35;.<br /><br />The purpose of this project is to provide an easy to use, yet robust mechanism for animating virtually any kind of value over time.<br />\n<h1>TargetAction usage</h1>\r<b>This method is the quickest to implement and will likely integrate the easiest into an existing code base since it does <i>not</i> require you to use DependencyObject/DependencyProperty.</b> <br /><b>The drawback to this method is that it requires consumption of the updated values on the developer&#39;s part, instead of updating a property directly</b><br />\n<h2>Basic Example</h2>\r1.  Create an instance of the Storyboard object<br /><div style=\"color:Black;background-color:White;\"><pre>\r\nStoryboard sb = <span style=\"color:Blue;\">new</span> Storyboard( yourGameInstance );\r\n</pre></div><i>Note:  Storyboard automatically adds itself to your game instance&#39;s Components collection, so it will receive Update messages automatically and simply do it&#39;s work after you call Begin</i><br /><br />2.  Create one or more animations you would like your Storyboard to perform<br /><div style=\"color:Black;background-color:White;\"><pre>\r\nStoryboard sb = <span style=\"color:Blue;\">new</span> Storyboard( yourGameInstance );\n\nFloatAnimation fa = <span style=\"color:Blue;\">new</span> FloatAnimation()\n{\n    Duration = TimeSpan.FromSeconds( 1.0 ),\n    From = 0.0f,\n    To = 1.0f\n};\n\nsb.Children.Add( fa );\r\n</pre></div><br />3.  Assign an Action that you would like to have called each time the animation updates, and in that Action use the updated value as you see fit<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">float</span> someNumberToChange = 0.0f;\n\nStoryboard sb = <span style=\"color:Blue;\">new</span> Storyboard( yourGameInstance );\n\nFloatAnimation fa = <span style=\"color:Blue;\">new</span> FloatAnimation()\n{\n    Duration = TimeSpan.FromSeconds( 1.0 ),\n    From = someNumberToChange,\n    To = 1.0f, \n    TargetAction = ( value ) =&gt;\n    {\n        someNumberToChange = value;\n    }\n};\n\nsb.Children.Add( fa );\r\n</pre></div><i>Note: the From property here is <b>not</b> optional when using TargetAction animation.  In most cases, you will want to set it to the current value of whatever you&#39;re going to be updating.</i><br /><br />4.  Begin the animation and (optionally) get informed when the animation is finished<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">float</span> someNumberToChange = 0.0f;\n\nStoryboard sb = <span style=\"color:Blue;\">new</span> Storyboard( yourGameInstance );\n\nFloatAnimation fa = <span style=\"color:Blue;\">new</span> FloatAnimation()\n{\n    Duration = TimeSpan.FromSeconds( 1.0 ),\n    From = someNumberToChange,\n    To = 1.0f, \n    TargetAction = ( value ) =&gt;\n    {\n        someNumberToChange = value;\n    }\n};\n\nsb.Children.Add( fa );\n\nsb.Completed += YourEventHandlingMethod;  <span style=\"color:Green;\">// Optional</span>\nsb.Begin();\r\n</pre></div>\n<h1>DependencyProperty usage</h1>\r<b>This method will seem the most familiar for developer who have used Silverlight&#39;s animation system</b>\n<ul><li>In order for an object to be the target of an animation it must inherit from DependencyObject</li>\n<li>For a property to be animated, it must be a DependencyProperty</li></ul>\n\n<h2>Basic example</h2>\r1. Create a class whose Property you would like to animate, and have it inherit from DependencyObject<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> XNAStoryboard;\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> ExampleObject : DependencyObject\n{\n\n}\r\n</pre></div><br />2. Add a new DependencyProperty to you object<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">using</span> XNAStoryboard;\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> ExampleObject : DependencyObject\n{\n        <span style=\"color:Blue;\">#region</span> Opacity\n        <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">readonly</span> DependencyProperty OpacityProperty = DependencyProperty.Register( <span style=\"color:#A31515;\">&quot;Opacity&quot;</span>, <span style=\"color:Blue;\">typeof</span>( <span style=\"color:Blue;\">float</span> ), <span style=\"color:Blue;\">typeof</span>( ExampleObject) );\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">float</span> Opacity\n        {\n            <span style=\"color:Blue;\">get</span>\n            {\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">this</span>.GetValue&lt;<span style=\"color:Blue;\">float</span>&gt;( ExampleObject.OpacityProperty );\n            }\n            <span style=\"color:Blue;\">set</span>\n            {\n                <span style=\"color:Blue;\">this</span>.SetValue( ExampleObject.OpacityProperty, value );\n                <span style=\"color:Blue;\">this</span>.NotifyPropertyChanged( <span style=\"color:#A31515;\">&quot;Opacity&quot;</span> );\n            }\n        }\n        <span style=\"color:Blue;\">#endregion</span>\n}\r\n</pre></div><i>Note: the syntax is similar to Silverlight, but with a slight difference in the parameters DependencyProperty.Register takes</i><br /><i>Also Note: the call to NotifyPropertyChanged is optional, but DependencyObject does implement a PropertyChanged event for your convenience if you would like to broadcast when your DependencyProperty&#39;s value has changed.</i><br /><br />3.  Create an instance of the Storyboard object<br /><div style=\"color:Black;background-color:White;\"><pre>\r\nStoryboard sb = <span style=\"color:Blue;\">new</span> Storyboard( yourGameInstance );\r\n</pre></div><i>Note:  Storyboard automatically adds itself to your game instance&#39;s Components collection, so it will receive Update messages automatically and simply do it&#39;s work after you call Begin</i><br /><br />4.  Create one or more animations you would like your Storyboard to perform<br /><div style=\"color:Black;background-color:White;\"><pre>\r\nStoryboard sb = <span style=\"color:Blue;\">new</span> Storyboard( yourGameInstance );\n\nFloatAnimation fa = <span style=\"color:Blue;\">new</span> FloatAnimation()\n{\n    Duration = TimeSpan.FromSeconds( 1.0 ),\n    From = 0.0f,\n    To = 1.0f,\n    Target = lr,\n    TargetProperty = UserControl.OpacityProperty\n};\n\nsb.Children.Add( fa );\r\n</pre></div><i>Note:  I opted for a slightly different mechanism for setting up the animation&#39;s target than Silverlight uses, hence the use of Target and TargetProperty properties.</i><br /><i>Also note: the From property here is optional when using DependencyProperty animation, since if you leave it null it will pull the current value from the DependencyProperty and use it.</i><br /><br />5.  Begin the animation and (optionally) get informed when the animation is finished<br /><div style=\"color:Black;background-color:White;\"><pre>\r\nStoryboard sb = <span style=\"color:Blue;\">new</span> Storyboard( yourGameInstance );\n\nFloatAnimation fa = <span style=\"color:Blue;\">new</span> FloatAnimation()\n{\n    Duration = TimeSpan.FromSeconds( 1.0 ),\n    From = 0.0f,\n    To = 1.0f,\n    Target = lr,\n    TargetProperty = UserControl.OpacityProperty\n};\n\nsb.Children.Add( fa );\n\nsb.Completed += YourEventHandlingMethod;  <span style=\"color:Green;\">// Optional</span>\nsb.Begin();\r\n</pre></div>\n<h1>Easing</h1>\r<ul><li>Easing can be accomplished by setting the EasingMode property on a given animation</li></ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\nFloatAnimation fa = <span style=\"color:Blue;\">new</span> FloatAnimation()\n{\n    Duration = TimeSpan.FromSeconds( 1.0 ),\n    From = 0.0f,\n    To = 1.0f,\n    Target = lr,\n    TargetProperty = UserControl.OpacityProperty,\n    EasingFunction = <span style=\"color:Blue;\">new</span> Back()\n    {\n        EasingMode = EasingModes.EaseOut\n    }\n};\r\n</pre></div><ul><li>The currently available easing modes can be found in the XNAStoryboard.Tweens namespace and include:\n<ul><li>Back</li>\n<li>Bounce</li>\n<li>Circular</li>\n<li>Elastic</li>\n<li>Exponential</li>\n<li>Linear</li>\n<li>Quadradic</li>\n<li>Quartic</li>\n<li>Quintic</li>\n<li>Sinusoidal</li></ul></li>\n<li>The equations behind these easing functions are all adaptations of those provide by the excellent <a href=\"http://xnatweener.codeplex.com\">XNA Tweener</a> project here on CodePlex</li></ul>\n\n<h1>Currently planned updates</h1>\r<ul><li>Add the ability to loop a storyboard</li>\n<li>Add BeginTime to Storyboard and to animations, so you can add a delay</li>\n<li>Add the ability to reverse a storyboard</li>\n<li>Improve documentation</li></ul></div><div class=\"ClearBoth\"></div>",
  "TagList": "xna,silverlight,storyboard,XNA Libraries,Xna Component,animation,xna animation,c#,",
  "LastEdited": "2010-09-17T15:00:24.353-07:00"
}