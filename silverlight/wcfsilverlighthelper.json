{
  "ProjectName": "wcfsilverlighthelper",
  "Title": "WCF-Silverlight Helper",
  "Description": "Class library to generate WCF DataContractSerializer-serializable and Silverlight (SL) -compatible classes. Useful, for example, if you have an assembly with classes that fail to serialize with DataContractSerializer. T4 Templates are used to auto-generate code.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong></p>\r\n<p>This project takes, as input, .NET assemblies or class libraries which are neither serializable by the WCF\r\n<a href=\"http://msdn.microsoft.com/en-us/library/system.runtime.serialization.datacontractserializer.aspx\">\r\nDataContractSerializer </a>nor compatible with Silverlight (SL) , and generates as output, the assembly in WCF-serializable and SL-compatible form. That is, the classes and structs from the source assembly will be output in their equivalent data representation\r\n (all properties but not methods).&nbsp;This project makes use of <a href=\"http://msdn.microsoft.com/en-us/library/bb126445.aspx\">\r\nT4 Text Templates</a>.<br>\r\n<br>\r\nThis project saves the development effort of having to modify the class library with DAL which other applications may currently rely on. Instead you can adapt the old, incompatible assembly to WCF 4.0 and Silverlight 4 by auto-generating a new, yet functionally\r\n equivalent assembly. This eliminates the worry of breaking existing code.<br>\r\n<br>\r\nAdditionally, this project contains a T4 Text Template project that will auto-generate methods to convert types from your source assembly to their WCF-serializable/SL-compatible type counterparts in the destination class library. This is useful for when your\r\n DAL is tightly coupled to the data classes in your source assembly. The conversion methods will marshal those types from the DAL to their serializable forms so that they can be serialized across WCF/SL boundaries.</p>\r\n<p><br>\r\n<em>Other benefits</em><strong>:</strong><br>\r\n- You can request the data objects you need directly and minimize payload size, without necessitating encapsulating the data in some container class or a SOAP\r\n<a href=\"http://msdn.microsoft.com/en-us/library/system.servicemodel.channels.message.aspx\">\r\nMessage</a>. You can bypass the overhead of these extra layers and can use options such as JSON and\r\n<a href=\"http://msdn.microsoft.com/en-us/magazine/dd315413.aspx\">REST</a> services (<a href=\"http://msdn.microsoft.com/en-us/library/system.servicemodel.webhttpbinding.aspx\">WebHttpBinding</a>) or net.tcp protocol (<a href=\"http://msdn.microsoft.com/en-us/library/ms731343.aspx\">NetTcpBinding\r\n</a>or CustomBinding).<br>\r\n<br>\r\n<em>Why not use svcutil.exe to auto-generate the classes? </em>svcutil.exe will actually fail to generate classes from your assembly if it detects that they are not serializable by DataContractSerializer.\r\n<br>\r\n<br>\r\n<strong>What the source code solution contains:</strong><br>\r\n- T4 Text Templates projects, configurable with application settings. For example, you can specify the output paths, namespace mappings, or types to exclude<em>.</em><br>\r\n- T4 Text Template to auto-generate the new WCF/SL compatible classes.<br>\r\n- T4 Text Template to generate Type conversion methods from your source assembly to the new, generated class library.<br>\r\n- Example Northwind projects and Unit Test projects which demonstrate (1) how a source assembly can fail to serialize, and (2) how the T4-generated classes which the project creates will successfully serialize.<br>\r\n- MSBuild tasks to automate the process from start to finish<br>\r\n<br>\r\n<strong>Who might find this useful:</strong><br>\r\n- if your .NET class library is designed for highly-customized serialization, or to be backwards-compatible for .ASMX web services.<br>\r\n- if you'd like to minimize your WCF response size, fetch only the data objects you need, and have other options besides SOAP Messages.<br>\r\n- if your .NET assembly's classes don't serialize with DataContractSerializer.<br>\r\n- if your .NET assembly's classes are incompatible with Silverlight.<br>\r\n<br>\r\nFeel free to send feedback or suggestions, or requests for documentation.<br>\r\n<br>\r\n<a title=\"blog\" href=\"http://regular-language.blogspot.com/\">blog</a>.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-06-01T17:14:05.127-07:00"
}