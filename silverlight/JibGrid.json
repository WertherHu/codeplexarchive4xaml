{
  "ProjectName": "JibGrid",
  "Title": "JibGrid - Silverlight DataGrid With Paging, Grouping, Freezing, and Filtering",
  "Description": "Jib.Grid is a reference implementation demonstrating how to add Paging, Grouping, Freezing, and Filtering to the base Silverlight 4 DataGrid.  This project can serve as the basis for your specific needs.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rJib.Grid is a reference implementation demonstrating how to add Paging, Grouping, Freezing, and Filtering to the base Silverlight 4 DataGrid. This project can serve as the basis for your specific needs.<br /> <object data=\"data:application/x-silverlight-2,\" type=\"application/x-silverlight-2\" style=\"height:600px;width:640px;\"><param name=\"source\" value=\"http://www.alwaysamanda.org/jibgrid/Jib.Testbed.xap\"></param><param name=\"windowless\" value=\"true\"></param><param name=\"minRuntimeVersion\" value=\"5.0.61118.0\"></param><param name=\"autoUpgrade\" value=\"true\"></param><p>You need to install Microsoft Silverlight to view this content. <a href=\"http://go.microsoft.com/fwlink/?LinkID=149156&v=5.0.61118.0\" style=\"text-decoration:none;\">Get Silverlight!<br /><img src=\"http://go.microsoft.com/fwlink/?LinkID=108181\" alt=\"Get Microsoft Silverlight\" style=\"border-style:none;\" /></a></p></object><iframe style=\"visibility:hidden;height:0;width:0;border-width:0;\"></iframe> <br />This project is intended to demonstrate how each of these features can be implemented using the standard DataGrid provided in Silverlight 4. In total, the solution consists of several hundred lines of code {excluding xaml :) }. This small code-base should help others in understanding the techniques used for each feature. While fully functional, this project should serve as a reference implementation not a final solution. In several edge cases simplicity was chosen over completeness. As such, there are several limitations to this control. Before you use the control, please review these limitations outlined below. As a side note, all these limitations can be resolved, but the solutions would add too much complexity and code for this projects intended purpose.<br /><br /> <br />\n<h1>Filtering</h1>\rThe filter headers are added to the DataGrid by creating a custom ColumnHeaderStyle. This implementation has a serious drawback. To make a long story short, there is no easy way of tying the filter control to the corresponding column. In the end I created a dependent property on the filter control and bound the header content of the column to this property. When the control is instantiated I iterate thought the grids column collection matching the column by its header content. Because of this solution, all columns which are to have a filter must have a unique header.<br /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> ColumnFilterHeader_Loaded(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n        {\n            <span style=\"color:Blue;\">var</span> header = sender <span style=\"color:Blue;\">as</span> ColumnFilterControl;\n            FilterHeaders.Add(header);\n            <span style=\"color:Blue;\">if</span> (header.HeaderContent != <span style=\"color:Blue;\">null</span>)\n            {\n                <span style=\"color:Blue;\">var</span> column = <span style=\"color:Blue;\">this</span>.Columns.Where(c =&gt; c.Header != <span style=\"color:Blue;\">null</span> &amp;&amp; c.Header.ToString() == header.HeaderContent.ToString()).FirstOrDefault();\n                header.Column = column;\n                header.Grid = <span style=\"color:Blue;\">this</span>;\n                header.PropertyChanged += <span style=\"color:Blue;\">new</span> System.ComponentModel.PropertyChangedEventHandler(header_PropertyChanged);\n                <span style=\"color:Blue;\">if</span> (<span style=\"color:Blue;\">this</span>.FilterType != <span style=\"color:Blue;\">null</span>)\n                    header.ResetFilterValues(CreateFilterColumnInfo(column));\n            }\n\n        }\r\n</pre></div><br />Since the ItemSource for the grid is a PagedCollectionView, filtering is done by generating a predicate composed of all the filters entered by the user. This predicate is composed by each filter control dynamically creating a lamda expression and then having the grid AND each predicate into the final predicate for the PagedCollectionView&#39;s filter. For simplicityâ€™s sake the lamda expression can only be generated off of first level properties. In addition to this, the filter controls do not support String Formatting (could not figure out how to apply it). It does support converters.<br /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n  PagedCollectionView view = <span style=\"color:Blue;\">this</span>.ItemsSource <span style=\"color:Blue;\">as</span> PagedCollectionView;\n            Predicate&lt;<span style=\"color:Blue;\">object</span>&gt; predicate = <span style=\"color:Blue;\">null</span>;\n            <span style=\"color:Blue;\">foreach</span> (<span style=\"color:Blue;\">var</span> filter <span style=\"color:Blue;\">in</span> FilterHeaders)\n                <span style=\"color:Blue;\">if</span> (filter.HasPredicate)\n                    <span style=\"color:Blue;\">if</span> (predicate == <span style=\"color:Blue;\">null</span>)\n                        predicate = filter.GeneratePredicate();\n                    <span style=\"color:Blue;\">else</span>\n                        predicate = predicate.And(filter.GeneratePredicate());\n            view.Filter = predicate;\r\n</pre></div> <br />\n<h1>Paging</h1>\rSince the grids ItemsSource is a PagedCollectionView, paging is supported with no additional code. A DataPager is added to the page with its source set to the grids ItemsSource.<br /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    &lt;sdk:DataPager HorizontalContentAlignment=<span style=\"color:#A31515;\">&quot;Center&quot;</span> x:Name=<span style=\"color:#A31515;\">&quot;myPager&quot;</span> Source=<span style=\"color:#A31515;\">&quot;{Binding Path=ItemsSource, ElementName=grid}&quot;</span> PageSize=<span style=\"color:#A31515;\">&quot;50&quot;</span> Grid.Row=<span style=\"color:#A31515;\">&quot;1&quot;</span> /&gt;\r\n</pre></div><br /> <br />\n<h1>Grouping </h1>\rThe grouping control is added to the grid by editting the columns ColumnHeaderStyle. Since the PagedCollectionView supports grouping, the grid only has to manage the current list of groups and grouping-state of each column.<br /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n                    <span style=\"color:Blue;\">case</span> Enums.ColumnOption.AddGrouping:\n                        optionCtrl.IsGrouped = <span style=\"color:Blue;\">true</span>;\n                        PagedCollectionView v = <span style=\"color:Blue;\">this</span>.ItemsSource <span style=\"color:Blue;\">as</span> PagedCollectionView;\n                        PropertyGroupDescription newGroup = <span style=\"color:Blue;\">new</span> PropertyGroupDescription(optionCtrl.FilterColumnInfo.PropertyPath, optionCtrl.FilterColumnInfo.Converter);\n                        ColumnGroups.Add(newGroup);\n                        v.GroupDescriptions.Add(newGroup);\n                        <span style=\"color:Blue;\">break</span>;\n                    <span style=\"color:Blue;\">case</span> Enums.ColumnOption.RemoveGrouping:\n                        optionCtrl.IsGrouped = <span style=\"color:Blue;\">false</span>;\n                        PagedCollectionView view = <span style=\"color:Blue;\">this</span>.ItemsSource <span style=\"color:Blue;\">as</span> PagedCollectionView;\n                        PropertyGroupDescription <span style=\"color:Blue;\">group</span> = ColumnGroups.Where(c =&gt; c.PropertyName == optionCtrl.FilterColumnInfo.PropertyPath).FirstOrDefault();\n                        <span style=\"color:Blue;\">if</span> (<span style=\"color:Blue;\">group</span> != <span style=\"color:Blue;\">null</span>)\n                        {\n                            ColumnGroups.Remove(<span style=\"color:Blue;\">group</span>);\n                            view.GroupDescriptions.Remove(<span style=\"color:Blue;\">group</span>);\n                        }\n                        <span style=\"color:Blue;\">break</span>;\r\n</pre></div><br /> <br />\n<h1>Freezing</h1>\rThe Silverlight DataGrid supports Freezing Columns. This is done by setting the FrozenColumnCount. When the user selects a column to freeze, the grid changes the display index to 0 and increments the FrozenColumnCount.<br /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n                    <span style=\"color:Blue;\">case</span> Enums.ColumnOption.PinColumn:\n                        optionCtrl.IsPinned = <span style=\"color:Blue;\">true</span>;\n                        <span style=\"color:Blue;\">int</span> frozenCount = <span style=\"color:Blue;\">this</span>.FrozenColumnCount;\n                        <span style=\"color:Blue;\">if</span> (optionCtrl.Column.DisplayIndex &gt;= <span style=\"color:Blue;\">this</span>.FrozenColumnCount)\n                            frozenCount++;\n                        optionCtrl.Column.DisplayIndex = 0;\n                        <span style=\"color:Blue;\">this</span>.FrozenColumnCount = frozenCount;\n                        <span style=\"color:Blue;\">break</span>;\n                    <span style=\"color:Blue;\">case</span> Enums.ColumnOption.UnpinColumn:\n                        optionCtrl.IsPinned = <span style=\"color:Blue;\">false</span>;\n                        optionCtrl.Column.DisplayIndex = <span style=\"color:Blue;\">this</span>.FrozenColumnCount - 1;\n                        <span style=\"color:Blue;\">this</span>.FrozenColumnCount = <span style=\"color:Blue;\">this</span>.FrozenColumnCount - 1;\n                        <span style=\"color:Blue;\">break</span>;\r\n</pre></div>\n<h1>Limitations</h1>\r<ol><li>The header content must be set for each column and be unique. </li>\n<li>The grid does not support property paths with a depth greater than one. ie {Binding Path=Contact.Address.City} </li>\n<li>While the grid supports converters, it does not support StringFormating </li></ol></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-11-29T19:36:59.903-08:00"
}