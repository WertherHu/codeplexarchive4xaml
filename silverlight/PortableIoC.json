{
  "ProjectName": "PortableIoC",
  "Title": "Portable IoC",
  "Description": "Portable IOC is a tiny thread-safe Inversion of Control container that is portable between Windows Phone, Windows Store (Windows 8), Silverlight, and .NET apps.",
  "MovedLink": "https://github.com/JeremyLikness/PortableIoC",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Portable IOC is a tiny thread-safe Inversion of Control container that is portable between Windows Phone, Windows Store &#40;Windows 8&#41;, Silverlight, and .NET apps.<br /><br />Current version of Universal Windows Apps is on GitHub at <a href=\"https://github.com/JeremyLikness/PortableIoC\">https://github.com/JeremyLikness/PortableIoC</a><br /><br />Portable IOC is a tiny (less than 200 lines of code) thread-safe and portable Inversion of Control container. It is designed to make it simple and easy to wire dependencies for client projects include various versions of the Windows Phone, the new Windows 8 Store apps, Silverlight, and will support the desktop as well. Features include:<br />\n<ul><li>Dependency resolution</li>\n<li>Lifetime management (shared and non-shared copies) </li>\n<li>Supports both constructor and property injection </li>\n<li>Full control over registration - delete registrations and destroy shared copies as needed</li>\n<li>Multiple resolution support through a simple label</li></ul>\n<br />Portable IOC is available as a NuGet package:<br /><br /><a href=\"https://nuget.org/packages/PortableIoC\">https://nuget.org/packages/PortableIoC</a><br /><br />To create an instance of the master container simply new it: <br /><br /><span class=\"codeInline\"> IPortableIoC ioc = new PortableIoc(); </span><br /><br />The container will automatically register itself, so this is possible: <br /><br /><span class=\"codeInline\"> IPortableIoC anotherIoCReference = ioc.Resolve&lt;IPortableIoC&gt;(); </span><br /><br />To register an instance of IFoo that is implemented as Foo:<br /><br /><span class=\"codeInline\"> ioc.Register&lt;IFoo&gt;(ioc =&gt; new Foo()); </span><br /><br />To register a specific instance of IFoo in a container called &quot;container2&quot; that is implemented as FooExtended:<br /><br /><span class=\"codeInline\"> ioc.Register&lt;IFoo&gt;(ioc =&gt; new FooExtended(), &quot;Container2&quot;); </span> <br /><br />To register an instance of IBar that depends on IFoo: <br /><br /><span class=\"codeInline\"> ioc.Register&lt;IBar&gt;(ioc =&gt; new Bar(ioc.Resolve&lt;IFoo&gt;()); </span><br /><br />If you are using property injection: <br /><br /><span class=\"codeInline\"> ioc.Register&lt;IBar&gt;(ioc =&gt; new Bar { Foo = ioc.Resolve&lt;IFoo&gt;() }); </span><br /><br />To resolve bar: <br /><br /><span class=\"codeInline\"> IBar bar = ioc.Resolve&lt;IBar&gt;(); </span><br /><br />To resolve bar from a named container: <br /><br /><span class=\"codeInline\"> IBar bar = ioc.Resolve&lt;IBar&gt;(&quot;Container2&quot;); </span><br /><br />To resolve a non-shared copy of bar: <br /><br /><span class=\"codeInline\"> IBar bar = ioc.Resolve&lt;IBar&gt;(true); </span><br /><br />You can also unregister and destroy copies of objects.</div><div class=\"ClearBoth\"></div>",
  "TagList": "ioc,IoC/DI,Inversion of Control,dependency injection,ioc container,Windows Phone 7,Windows 8,Silverlight,silverlight 4,silverlight 5,.NET 4.0,.NET 4.5,",
  "LastEdited": "2016-05-02T05:48:29.39-07:00"
}