{
  "ProjectName": "Silverlight4SqlLib",
  "Title": "Silverlight 4.0 Com Library for SQL Server Access",
  "Description": "This project contains a library for Silverlight 4.0 that enables a Silverlight 4 client that is installed with elevevated rights to talk directly to an SQL Database, local or Azure.  It requires the user to register a library locally using RegAsm",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">This project is designed to provide local SQL Server database access for Silverlight 4.o applications.  In other words, you will be able to talk directly from Silverlight application to an SQL Server database instead of having to go the usual service route.<br />The library is written in .NET 4.0, but must be deployed on a client as a COM component.  So, you have to run RegAsm on the compiled .NET DLL  (COMSQLClient.DLL) on a client machine.  This will register the assembly for COM access.  The COM Library is uing the latest .NET framework - SqlCleint namespace to tbe specific.  As a result, the client machine is required to have .NET framework installed, but nothing else is required.  The library is built to target .NET Framework version 4, although I could easily add support for version 2.0 - 3.5 as well quite easily.<br />This library is using new feature in Silverlight 4.0 that has ability to invoke COM components when installed with eleveted rights.<br />This library works for local SQL Server and SQL Server Azure since the DLL is just using SqlClient components.<br /><br />Look into the test project - SilverlightSQLServer\\MainPage.xaml/cs for unit test cases and sample usage.  They include the following:\n<ol><li> NonQuery with parameters</li>\n<li> NonQuery without parameters</li>\n<li> Query with parameters</li>\n<li> Query without parameters</li>\n<li> Scalar with parameters</li>\n<li> Scalar without parameters</li></ol>\n<br />Road map - next release will include methods that will provide asynchronous execution for all the methods.<br /><br />When you are using ExecuteQueryMethod, you have to provide a type that will match a row of returned data.  As a result, when you run ExecuteNonQuery&lt;T&gt;, the return value will be ObservableCollection&lt;T&gt; with makes it super easy to consume the results of the query.  For ExecuteNonQuery you just need a command text and parameters.  It returns a number of rows affected which is helpfull for concurrency handling.  Both simulate standard SqlClient.SqlCommand behavior.<br /><br />Please email me your suggestions as well as any feedback.  Also let me know if I need to provide more documentation.<br />Thank you.<br /><br />Sergey Barskiy</div><div class=\"ClearBoth\"></div>",
  "TagList": "Silverlight,silverlight 4,SQL Server,Database,Data Access Layer,Data Access,Azure,",
  "LastEdited": "2010-02-25T18:16:57.07-08:00"
}