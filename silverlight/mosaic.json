{
  "ProjectName": "mosaic",
  "Title": "Mosaic",
  "Description": "Mosaic is an application development framework, with a particular emphasis on Silverlight.  It provides an extra layer on top of the popular Prism toolkit, with the goal of improving productivity, improving code quality, and assisting developers with the proper use of Prism.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Mosaic is an application development framework, with a particular emphasis on Silverlight.  It provides an extra layer on top of the popular Prism toolkit, with the goal of improving productivity, improving code quality, and assisting developers with the proper use of Prism.<br /><br />\n<h1>Read First</h1>\r\nMosaic is still in development.  We will be uploading source code over the next few months, building out the framework described below.<br /><br />\n<h1>Draft Description</h1>\r\n<b>Knowledge of Prism, Dependency Injection, and the MVVM design pattern are required to effectively use the Mosaic platform.</b><br /><br />Building enterprise applications is hard.  It&#39;s slowly getting easier, but it&#39;s still not easy.<br /><br />Silverlight and the .NET framework is a great start for developers: it&#39;s an excellent development platform that reduces the number of skills required to create good software.  But sometimes... just sitting a developer down in front of &quot;Silverlight&quot; and the &quot;.NET framework&quot; can feel like this:<br /><br />&quot;Here&#39;s a hammer, a hand saw, and a screwdriver.  Build me a house.&quot;<br /><br />...uh... well, most people could probably put together something that looks like a wall, and maybe attach it to another wall to make a room... but it&#39;s probably going to look terrible and collapse when the first storm hits.<br /><br />In comes Prism and modern design patterns like MVVM.  These are great... but they&#39;re really just a better set of tools.  It&#39;s like:<br /><br />&quot;Here&#39;s a nail gun, a state-of-the-art table saw, and an electric screwdriver.  Build me a house.&quot;<br /><br />...well, that&#39;s better... but it still doesn&#39;t get me very far.  A lot of developers read about Prism and download it and expect it to be this:<br /><br />&quot;Here&#39;s all your tools, and directions on how to build a house.&quot;<br /><br />...but that&#39;s not what Prism is.  There are no directions.<br />\n<h2>Mosaic</h2>\r\nIn comes Mosaic.  Mosaic has three main parts:<br /><br /><b>1. A set of tools that layer on top of Prism and the MVVM pattern.</b><br /><br /> Some of the Prism stuff is a bit &quot;raw&quot;... difficult for the average developer to grasp.  The Mosaic tools attempt to alleviate some of this.  Think of it as:<br /><br />&quot;Here&#39;s a guide for your table saw to let you make perfect 45 and 90-degree cuts.&quot;<br /><br />... well, now my table saw is a lot easier to use.  Thanks Mosaic!<br /><br /><br /><b>2. An abstraction layer for your Model that helps decouple your code from ORM implementations, and addresses their weaknesses.</b>  <br /><br />ORM tools are great and all... but do I really want to spray entity framework references all over my UI code?  Or NHibernate references?  Or DevForce references?  What if EF starts to suck and I want to switch to DevForce?  If I&#39;ve bound directly to EF objects on my UI, it&#39;s gonna be a lot of work to rip that out.<br /><br />That aside, most ORM-generated objects just don&#39;t have the flexibility that you need in a real-world UI.  Some of them try... but they are usually clunky if you want to add custom properties, or do special formatting, or whatever.<br /><br />But most importantly, you rarely if ever want to expose your data model as an API to your application developers.  They are invariably clunky in comparison to the conceptual operations you are trying to perform.  Mosaic gives you a way to use a robust object model in your code, similar to one that an ORM would generate, but tailor it to be easy to use.<br /><br /><br /><b>3. A suggested pattern for putting together a complete application that uses Prism and MVVM, along with code snippets and supporting libraries.</b><br /><br />Prism alone will not get you a complete, working application.  Nor will MVVM.  Nor will an ORM tool.  You need to know how to put them together.  The examples and documentation out there are not that great... they don&#39;t give you an overall picture of what you need to do.<br /><br />Mosaic shows you how all of these pieces work together, and provides code snippets and documentation to make common tasks easy.<br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2010-08-12T10:05:17.903-07:00"
}