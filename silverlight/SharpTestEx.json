{
  "ProjectName": "SharpTestEx",
  "Title": "Sharp Tests Ex",
  "Description": "SharpTestsEx (Sharp Tests Extensions) is a set of extensible extensions. The main target is write short assertions where the Visual Studio IDE intellisense is your guide. #TestsEx can be used with NUnit, MsTests, xUnit, MbUnit... even in Silverlight.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />SharpTestsEx &#40;Sharp Tests Extensions&#41; is a set of extensible extensions. The main target is write short assertions where the Visual Studio IDE intellisense is your guide. &#35;TestsEx can be used with NUnit, MsTests, xUnit, MbUnit... even in Silverlight.<br /><br />Have a look to the <b><a href=\"https://sharptestex.codeplex.com/documentation?referringTitle=Home\">Syntax Overview</a></b>.<br /><br /><b>The Origin</b><br />The origin of SharpTestsEx is my dear NUnitEx. The motivation of its born is described in  <a href=\"http://fabiomaulo.blogspot.com.ar/2009/03/nunitex-actualshouldequaltoexpected.html\">this old post</a> and the  <a href=\"https://code.google.com/archive/p/nunitex/\">original repository is still available on Google Code Archive</a>.<br /><br /><b>Strongly typed Assertions</b> <i>few examples</i><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">true</span>.Should().Be.True();\n<span style=\"color:Blue;\">false</span>.Should().Be.False();\n\n<span style=\"color:Blue;\">const</span> <span style=\"color:Blue;\">string</span> something = <span style=\"color:#A31515;\">&quot;something&quot;</span>;\nsomething.Should().Contain(<span style=\"color:#A31515;\">&quot;some&quot;</span>);\nsomething.Should().Not.Contain(<span style=\"color:#A31515;\">&quot;also&quot;</span>);\nsomething.ToUpperInvariant().Should().Not.Contain(<span style=\"color:#A31515;\">&quot;some&quot;</span>);\n\nsomething.Should()\n    .StartWith(<span style=\"color:#A31515;\">&quot;so&quot;</span>)\n    .And\n    .EndWith(<span style=\"color:#A31515;\">&quot;ing&quot;</span>)\n    .And\n    .Contain(<span style=\"color:#A31515;\">&quot;meth&quot;</span>);\n\nsomething.Should()\n    .Not.StartWith(<span style=\"color:#A31515;\">&quot;ing&quot;</span>)\n    .And\n    .Not.EndWith(<span style=\"color:#A31515;\">&quot;so&quot;</span>)\n    .And\n    .Not.Contain(<span style=\"color:#A31515;\">&quot;body&quot;</span>);\n\n<span style=\"color:Blue;\">var</span> ints = <span style=\"color:Blue;\">new</span>[] { 1, 2, 3 };\nints.Should().Have.SameSequenceAs(<span style=\"color:Blue;\">new</span>[] { 1, 2, 3 });\nints.Should().Not.Have.SameSequenceAs(<span style=\"color:Blue;\">new</span>[] { 3, 2, 1 });\nints.Should().Not.Be.Null();\nints.Should().Not.Be.Empty();\n\nints.Should()\n    .Contain(2)\n    .And\n    .Not.Contain(4);\n\n(<span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">int</span>[0]).Should().Be.Empty();\r\n</pre></div><br /><a href=\"http://fabiomaulo.blogspot.com/search/label/SharpTestEx\">Blog posts of the author</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "Testing,MSTest,Unit Testing,nunit,xUnit,mbunit,Silverlight,TDD,",
  "LastEdited": "2016-11-14T06:25:01.043-08:00"
}