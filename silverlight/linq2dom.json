{
  "ProjectName": "linq2dom",
  "Title": "Linq to DOM",
  "Description": "Linq to DOM aims to merge the ease of maintenance and development of managed and strong typed code running in a .Net Silverlight environment with the ability to interact with existing presentation code either HTML/JavaScript",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Linq to DOM aims to merge the ease of maintenance and development of managed and strong typed code running in a .Net Silverlight environment with the ability to interact with existing presentation code either HTML&#47;JavaScript<br /><br /><b>Project Goals</b>\n<ul><li>brings jQuery syntax into Silverlight to query the DOM that is hosting the Silverlight object.\n<ul><li>Allows results of jQuery queries to be interacted with in Silverlight using strong typed objects that will use jQuery to get/set properties to ensure cross browser compatibility.</li></ul></li>\n<li>Create easy to use/understand extension methods for DOM interactivity\n<ul><li>set/get style attributes</li>\n<li>register/unregister DOM event callbacks </li></ul></li>\n<li>Create native .net events that fire off for standard DOM events that at least encompasses the following\n<ul><li>onmouseover</li>\n<li>onmouseout</li>\n<li>onmousemove</li>\n<li>onfocus</li>\n<li>onblur</li>\n<li>onclick</li></ul></li>\n<li>Create a simple Xml data caching system taking advantage of Silverlight&#39;s Isolated Storage. Primary goal here is to make a solution to save load time on items that are use all over an application and need to be downloaded each page load (Drop Down Lists)\n<ul><li>Means to invalidate cache based on hash code of data or expiration date or last key perhaps other methods</li>\n<li>Add a DOM event ReadyForReplace - this event would fire in a synchronous page load just like body.onload or in asynchronous load when the AJAX operation is completed and any resulting DOM changes have been made. It signals the client side Silverlight Cache to begin looking (with jQuery) for any node that is tagged for replacement or modification. Example your site is heavily dependent on user interaction and there are over 200 users for the site, basic info about users would be cached ie username,email address,role,first name,last name client side and when ever something needed to display a dropdown of users you could query the cache an build based on a placeholder tag</li></ul></li></ul>\n<br />\n<h1>Current Status</h1>\rThe project that is posted here is in Alpha Status detailed documentation to come shortly<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2009-12-02T06:21:59.297-08:00"
}