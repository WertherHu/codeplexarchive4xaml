{
  "ProjectName": "springtail",
  "Title": "SpringTail",
  "Description": "SpringTail is a simple Logging Framework Abstraction library for Silverlight 2 and .net. It provides a separation of your logging code from a logging framework. This enables you to select a logging backend most suitable for your type of application without modifying your source.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />SpringTail is a simple Logging Framework Abstraction library for Silverlight 2 and .net. It provides a separation of your logging code from a logging framework. This enables you to select a logging backend most suitable for your type of application without modifying your source.<br /><br /><b>When is SpringTail useful?</b><br />The choice of which log sink to use is dependant on the type of application to be deployed. A console app will commonly log to the console window, desktop app to file, and a server app possibly to a database. The many .net logging frameworks available all offer similar sinks and functionality so you may ask why is logging framework abstraction useful? If you develop class libraries which could be used by <u>any</u> type of application, then ideally you should log to a logging framework common across the application, so logs are centrally located. But what is that logging framework? You could decide and ship your library with a dependency on one of the frameworks, but that won&#39;t be attractive to an application developer who wants to use a different one. Also consider your library could be used in a console or Silverlight application where an over featured logging framework is not necessary. This is where a logging framework abstraction like SpringTail is useful. It&#39;s very small and is only focussed on forwarding logging calls from your code to a target specified by the application developer. This could be their favourite logging framework or simply Console.Out.<br /><br /><b>Integration</b><br />Integrating SpringTail is very simple and requires no configuration. Logging is performed by calling one of the Log functions on instances of SpringTail.Logger. A LogMessage is constructed and passed to the static Logger.LogAction. This is a property of type Action&lt;LogMessage&gt; and should be set with bridging code to the logging system of your choice.<br /><br /><b>Logger construction</b><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// construct a Logger with a name and optionally its hosting object</span>\nLogger logger = <span style=\"color:Blue;\">new</span> Logger(<span style=\"color:#A31515;\">&quot;Address Book&quot;</span>);\r\n</pre></div><b>Log</b><br /><div style=\"color:Black;background-color:White;\"><pre>\r\nlogger.Log(LogLevel.Info, <span style=\"color:#A31515;\">&quot;connection opened&quot;</span>);\n\n<span style=\"color:Green;\">// explicitly log Debug/Info/Warn/Error/Fatal</span>\nlogger.Debug(<span style=\"color:#A31515;\">&quot;connection opened&quot;</span>);\n\n<span style=\"color:Green;\">// optionally pass an object</span>\nlogger.Warn(<span style=\"color:#A31515;\">&quot;connection opened&quot;</span>, someData);\n\n<span style=\"color:Green;\">// log an exception</span>\nlogger.ErrorException(<span style=\"color:#A31515;\">&quot;connection failed&quot;</span>, theException);\r\n</pre></div><b>Logging integration</b><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// bridge to one or more logging systems</span>\n<span style=\"color:Green;\">// m is an instance of SpringTail.LogMessage</span>\nLogger.LogAction = m =&gt; myLogSystem.Log(m.LoggerName, Convert(m.Level), m.Message);\r\n</pre></div></div><div class=\"ClearBoth\"></div>",
  "TagList": "logging,logging abstraction,logger,Silverlight,.NET,log4net,.NET 3.5,log,NLog,Trace,Silverlight 2.0,",
  "LastEdited": "2008-11-03T12:50:08.123-08:00"
}