{
  "ProjectName": "XAMLLocalize",
  "Title": "XAML Localize",
  "Description": "The objective is to extract strings from xaml file and generate resx file. The tool is integrated in Visual Studio.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />The objective is to extract strings from xaml file and generate resx file. The tool is integrated in Visual Studio.<br /><br />Add ins for Visual Studio 2008 SP1 / Visual Studio 2010 Beta 2 (support C#, VB.Net, other ?)<br />\n<h1>Objective</h1>\r\nIn your XAML file, you have a lot control with text to localize, but in the actual version, Visual Studio do not export string to resx file (like Windows Forms/ASP.net).<br /><br />For example :<br />&lt;dataInput:Label Name=&quot;label1&quot;  Content=&quot;Epargne mensuelle&quot; /&gt;<br /><br />If you want to localize this (for WPF, there is another method), you need to create a .resx file and then create a binding, thus for example :<br />&lt;dataInput:Label Name=&quot;label1&quot;  Content=&quot;{Binding label1_Content, Source={StaticResource Epargneres}}&quot; /&gt; (and other plumbing to create Epargneres).<br /><br />This tools does the work for you, it parses the XAML file, create the resx file and adapt the XAML file.<br />The process can be incremental, if you add new strings, you relaunch the tools, it adds the new strings in resx and adapt XAML file.<br />\n<h1>How (by binding)</h1>\rYou install the add-ins in visual studio (close VS and launch the setup).<br />Open your solution (make a backup before testing for the first time), select one or more XAML file in solution explorer, go to the menu Tools, and choose Generate XAML Resource. <br />The tools creates a new Directory App_Resource (if it does not exist) and a .resx file, if you have a correct Custom Tool Resx Generator, the .designer is created too.<br />The tools modify the XAML file.<br /><br />If you select a project, the tools scan all XAML file in the project.<br />\n<h1>Other method (by code)</h1>\rI implement the method with binding because this method is described in many blog. But for my use :<br />- the xaml file is less readable ;)<br />- the public resx class  is useless for programmation and need another tools.<br />because of that, i create another approach.<br /><br />The resx files are still generated, but the XAML is not modified, i create a new file ....xaml.translat.cs/vb with lines like<br />this.label1.Content = ResourceManager.GetString(&quot;label1_Content&quot;);<br />Do not forget to modify the code of xaml.cs/vb to call Translate after InitializeComponent in the constructor.<br />\n<h1>External Dependencies</h1>\r\n<h1>Limitation</h1>\rThe tools need a unique identifier, then it chooses x:Uid if present, if not it use Name or x:Name.<br />If you element has no Uid and no Name, nothing happens.<br /><br />You can use the option to create Name automatically, but this adds member field for each element, and do not work for template.<br />You can use the option to create Uid too.<br /><br />For the method by code, only control with a Name are localized (&lt;telerikNavigation:RadMenuItem  Header=&quot;Plan Financier&quot; /&gt; is not extracted but (&lt;telerikNavigation:RadMenuItem  Name=&quot;MenuPlanFin&quot; Header=&quot;Plan Financier&quot; /&gt; is good). <br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "xaml,Silverlight,wpf,localization,resx,addin,",
  "LastEdited": "2009-12-27T17:40:38.387-08:00"
}