{
  "ProjectName": "scannertwainwiadotnet",
  "Title": "C# VB.NET Scan JPG PDF from TWAIN WIA Scanners in WinForms and WPF 64bit 32bit",
  "Description": "C# VB.NET scan documents into memory, files or update to server from TWAIN WIA flatbed or ADF scanners in JPEG or PDF formats for 64bit and 32bit WinForms WPF.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1>Features</h1>\r\n<p><strong>Supports Almost All Scanners</strong>: Acer, AGFA, Brother, Canon, Dell, Epson, Fujitsu, HP, IBM, Kodak, Konica Minolta, Lexmark, NEC, Nikon, Olympus, Panasonic, Ricoh, Samsung, Xerox and many more TWAIN WIA scanners and cameras;</p>\r\n<p><strong>Supports Both 64bit &amp; 32bit Apps</strong>: probably the only scanning library that works for both 64bit and 32bit applications thanks to our innovative patent pending technology and quality implementation</p>\r\n<p><strong>JPG, PDF, PDF/A, TIFF, CCITT G4</strong>:&nbsp;Regardless the scanner's native output formats, Asprise Scan supports a wide range of output formats such as BMP, PNG, JPEG and multi-page PDF, PDF/A (to meet compliance requirements), TIFF with CCITT\r\n G4 compression.</p>\r\n<p><strong>HIPPA, HITECH Privacy Compliant</strong>:&nbsp;empowers you to scan entirely in memory, with zero temporary file. Many government agencies also rely on Asprise to simplify the complexity of&nbsp;<a href=\"http://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act\" target=\"_blank\">HIPPA</a>&nbsp;and&nbsp;<a href=\"http://en.wikipedia.org/wiki/HITECH_Act\" target=\"_blank\">HITECH</a>'s\r\n technical requirements</p>\r\n<p><strong>Fast Flatbed And ADF Scanning</strong>: high speed scanning from flatbed devices and automatic document feeder (ADF) scanners to increase the user's productivity effortless. Advanced features of scanners are supported: imprinter, endorser, barcode\r\n and patchcode;</p>\r\n<p><strong>Generates Thumbnails &amp; Upload To Web Servers Directly</strong>:&nbsp;generate thumbnails when scanning. Additionally, regardless of your server side technology (C# ASP.NET, Java JSP, PHP, Python, Ruby on Rails), Asprise Scanning SDK allows you\r\n to upload scanned images to web servers;</p>\r\n<p><strong>Barcode Reading &amp; Blank Page Detection</strong>:&nbsp;Reads barcode (CODE 128, EAN 8/13, UPC, Code 3 of 9, QR, etc.) from scanned documents - even if the scanner doesn't support it. Configurable blank page detection is available for you to discard\r\n blank pages.</p>\r\n<h1>Introduction</h1>\r\n<p>This code sample demostrates how to <a href=\"http://asprise.com/c%23-vb.net-scanner-api/twain-wia-scan-pdf-library-overview.html\" target=\"_blank\">\r\nscan documents from TWAIN WIA scanners in JPEG or PDF formats for Windows Forms and WPF applications</a>.</p>\r\n<h1>Building the Sample</h1>\r\n<p>Download and unzip the sample project. Open it with Visual Studio 2013 or higher. Press F5 to run it.</p>\r\n<p><img src=\"http://asprise.com/scan2/img/demo-screen-dotnet.png\" alt=\"\" width=\"700\"></p>\r\n<p><span style=\"font-size:20px; font-weight:bold\">Description</span></p>\r\n<p>Suppose that we need to scan color US letter documents and save the result in JPEG files. The following code demonstrates how to use Asprise .NET Scanning API to achieve that:</p>\r\n<div>\r\n<pre>using asprise_imaging_api;\n\nResult result = new AspriseImaging().Scan(new Request()\n    .SetTwainCap(TwainConstants.ICAP_PIXELTYPE, TwainConstants.TWPT_RGB)\n    .SetTwainCap(TwainConstants.ICAP_SUPPORTEDSIZES, TwainConstants.TWSS_USLETTER)\n    .SetPromptScanMore(true) // prompt to scan more pages\n    .AddOutputItem(new RequestOutputItem(AspriseImaging.OUTPUT_SAVE, AspriseImaging.FORMAT_JPG)\n      .SetSavePath(&quot;.\\\\${TMS}${EXT}&quot;)), // Environment variables in path will be expanded\n  &quot;select&quot;, true, true); // &quot;select&quot; prompts device selection dialog.\n\nList&lt;string&gt; files = result == null ? null : result.GetImageFiles();\nConsole.WriteLine(&quot;Scanned: &quot; &#43; string.Join(&quot;, &quot;, files == null ? new string[0] : files.ToArray()));</pre>\r\n<pre>Imports asprise_imaging_api\n\nDim result As Result = New AspriseImaging().Scan(New Request()\n   .SetTwainCap(TwainConstants.ICAP_PIXELTYPE, TwainConstants.TWPT_RGB)\n   .SetTwainCap(TwainConstants.ICAP_SUPPORTEDSIZES, TwainConstants.TWSS_USLETTER)\n   .SetPromptScanMore(True) ' prompt to scan more pages\n   .AddOutputItem(New RequestOutputItem(AspriseImaging.OUTPUT_SAVE, AspriseImaging.FORMAT_JPG)\n      .SetSavePath(&quot;.\\${TMS}${EXT}&quot;)), ' Environment variables in path will be expanded\n  &quot;select&quot;, True, True) ' &quot;select&quot; prompts device selection dialog.\n\nDim files As List(Of String) = If(result Is Nothing, Nothing, result.GetImageFiles())\nConsole.WriteLine(&quot;Scanned: &quot; &amp; String.Join(&quot;, &quot;, If(files Is Nothing, New String(-1) {}, files.ToArray())))</pre>\r\n</div>\r\n<p>Alternatively, Asprise C# VB.NET Scanning SDK also allows you to specify scan requests using JSON based scan DSL (please refer to&nbsp;<a href=\"http://asprise.com/scan2/docs/html/asprise-scan-sdk-api-request.html#scan-request\">Asprise Scanning Request DSL</a>&nbsp;for\r\n details). The code below is equivalent to the OO based code:</p>\r\n<div>\r\n<pre>Result result = new AspriseImaging().Scan(&quot;{&quot; &#43;\n    &quot;  \\&quot;twain_cap_setting\\&quot; : {&quot; &#43;\n    &quot;    \\&quot;ICAP_PIXEXELTYPE\\&quot; : \\&quot;TWPT_RGB\\&quot;,&quot; &#43;\n    &quot;    \\&quot;ICAP_SUPPORPORTEDSIZES\\&quot; : \\&quot;TWSS_USLESLETTER\\&quot;&quot; &#43;\n    &quot;  },&quot; &#43;\n    &quot;  \\&quot;prompt_scan_more\\&quot; : true,&quot; &#43;\n    &quot;  \\&quot;output_settings\\&quot; : [ {&quot; &#43;\n    &quot;    \\&quot;type\\&quot; : \\&quot;save\\&quot;,&quot; &#43;\n    &quot;    \\&quot;format\\&quot; : \\&quot;jpg\\&quot;,&quot; &#43;\n    &quot;    \\&quot;save_path\\&quot; : \\&quot;.\\\\\\\\${TMS}${EXT}\\&quot;&quot; &#43;\n    &quot;  } ]&quot; &#43;\n    &quot;}&quot;, &quot;select&quot;, true, true);\n\nList&lt;string&gt; files = result == null ? null : result.GetImageFiles();\nConsole.WriteLine(&quot;Scanned: &quot; &#43; string.Join(&quot;, &quot;, files == null ? new string[0] : files.ToArray()));</pre>\r\n</div>\r\n<h1>More Scanning Scenarios</h1>\r\n<h2>Scan And Upload To Server</h2>\r\n<p>It&rsquo;s easy to allow the user to <a href=\"http://asprise.com/c%23-vb.net-scanner-api/twain-wia-scan-pdf-library-overview.html\" target=\"_blank\">\r\nscan from TWAIN WIA scanners in JPG or PDF and upload to the server</a>. The server side script to handle the upload can be written in any programming language, ASP.NET, Java, PHP, Python, Ruby, etc. You handle the upload from Asprise Scanning SDK in the same\r\n way as you handle a simple HTML form upload.</p>\r\n<div>\r\n<pre>Result result = new AspriseImaging().Scan(new Request().AddOutputItem(\n  new RequestOutputItem(AspriseImaging.OUTPUT_UPLOAD, AspriseImaging.FORMAT_JPG).SetUploadSetting( // Upload\n    new UploadSetting(&quot;http://asprise.com/scan/applet/upload.php?action=dump&quot;)\n      .AddPostField(&quot;title&quot;, &quot;Test scan&quot;))) // Additional data to be passed to server: post fields, headers, etc.\n &quot;select&quot;, true, true);\n\nString response = result == null ? null : result.GetUploadResponse();\nConsole.WriteLine(&quot;From server: \\n&quot; &#43; response);\n\n// Alternatively, request can be specified using JSON\nResult result = new AspriseImaging().Scan(&quot;{&quot; &#43;\n  &quot;  \\&quot;output_settings\\&quot; : [ {&quot; &#43;\n  &quot;    \\&quot;type\\&quot; : \\&quot;upload\\&quot;,&quot; &#43;\n  &quot;    \\&quot;format\\&quot; : \\&quot;jpg\\&quot;,&quot; &#43;\n  &quot;    \\&quot;upload_target\\&quot; : {&quot; &#43;\n  &quot;      \\&quot;url\\&quot; : \\&quot;http://asprise.com/scan/applet/upload.php?action=dump\\&quot;,&quot; &#43;\n  &quot;      \\&quot;post_fields\\&quot; : {&quot; &#43;\n  &quot;        \\&quot;title\\&quot; : \\&quot;Test scan\\&quot;&quot; &#43;\n  &quot;      }&quot; &#43;\n  &quot;    }&quot; &#43;\n  &quot;  } ]&quot; &#43;\n &quot;}&quot;, &quot;select&quot;, true, true);</pre>\r\n</div>\r\n<h2>Scan Multiple Pages As PDF</h2>\r\n<p>Scanning multiple pages as a single PDF file simplifies organization. To do so, you need to set the format type to&nbsp;<code>AspriseImaging.FORMAT_PDF</code>. Additionally, you may add a text line to the bottom of the first page and set EXIF tags.</p>\r\n<div>\r\n<pre>Result result = new AspriseImaging().Scan(new Request().AddOutputItem(\n  new RequestOutputItem(AspriseImaging.OUTPUT_SAVE, AspriseImaging.FORMAT_PDF)\n    .SetPdfTextLine(&quot;Scanned on ${DATETIME} by user X&quot;) // Optional text line at the bottom of the 1st page\n    .AddExifTag(&quot;DocumentName&quot;, &quot;Scan to PDF by Asprise&quot;) // Optional PDF doc properties (metadata)\n    .SetSavePath(&quot;.\\\\${TMS}${EXT}&quot;)\n  ).SetPromptScanMore(true) // whether to prompt user to scan more pages\n , &quot;select&quot;, true, true);\n\nstring pdfFile = result == null ? null : result.GetPdfFile();\nConsole.WriteLine(&quot;Documents scanned as PDF: &quot; &#43; pdfFile);\n\n// Alternatively, request can be specified using the following JSON:\n{\n  &quot;output_settings&quot; : [ {\n    &quot;type&quot; : &quot;save&quot;,\n    &quot;format&quot; : &quot;pdf&quot;,\n    &quot;pdf_text_line&quot; : &quot;Scanned on ${DATETIME} by user X&quot;,\n    &quot;pdf_owner_password&quot; : &quot;&quot;,\n    &quot;pdf_user_password&quot; : &quot;&quot;,\n    &quot;exif&quot; : {\n      &quot;DocumentName&quot; : &quot;Scan to PDF by Asprise&quot;    },\n    &quot;save_path&quot; : &quot;.\\\\${TMS}${EXT}&quot;  } ],\n  &quot;prompt_scan_more&quot; : true\n}</pre>\r\n</div>\r\n<h2>ADF With Optional Blank Page Detection</h2>\r\n<p><a href=\"http://asprise.com/c%23-vb.net-scanner-api/twain-wia-document-scan-library-sdk-samples-docs.html\" target=\"_blank\">Automatic Document Feeder (ADF)</a> allows bulk scanning of multiple pages in a single session. Optionally, you may choose to automatically\r\n discard blank page.</p>\r\n<div>\r\n<pre>Result result = new AspriseImaging().Scan(new Request()\n  .SetTwainCap(TwainConstants.CAP_FEEDERENABLED, true) // select feeder instead of flatbed\n  .SetTwainCap(TwainConstants.CAP_AUTOFEED, true)\n  .SetTwainCap(TwainConstants.CAP_DUPLEXENABLED, true)\n  .SetDiscardBlankPages(true)\n  .SetBlankPageThreshold(0.02m) // Discard pages with ink coverage &lt; 2%\n  .AddOutputItem(new RequestOutputItem(AspriseImaging.OUTPUT_SAVE, AspriseImaging.FORMAT_PDF).SetSavePath(&quot;.\\\\${TMS}${EXT}&quot;)),\n &quot;select&quot;, true, true);\n\nstring pdfFile = result == null ? null : result.GetPdfFile();\nConsole.WriteLine(&quot;Documents scanned as PDF: &quot; &#43; pdfFile);\n\n// Alternatively, request can be specified using the following JSON:\n{\n    &quot;twain_cap_setting&quot; : {\n      &quot;CAP_FEEDERENABLED&quot; : true,\n      &quot;CAP_AUTOFEED&quot; : true,\n      &quot;CAP_DUPLEXENABLED&quot; : true\n    },\n    &quot;discard_blank_pages&quot; : true,\n     // pages with ink coverage below the threshold will be discarded\n    &quot;blank_page_threshold&quot; : &quot;0.02&quot;, // default value is 0.02\n    &quot;output_settings&quot; : [ {\n      &quot;type&quot; : &quot;save&quot;,\n      &quot;format&quot; : &quot;pdf&quot;,\n      &quot;save_path&quot; : &quot;.\\\\${TMS}${EXT}&quot;    } ]\n }</pre>\r\n</div>\r\n<div>&nbsp;</div>\r\n<h1>More Information</h1>\r\n<p style=\"font-size:15px; line-height:22px; margin-top:0px; color:#333333; font-family:proxima_nova_rgregular,'Droid Sans',sans-serif; font-style:normal; font-weight:normal; letter-spacing:normal; orphans:2; text-align:start; text-indent:0px; text-transform:none; white-space:normal; widows:2; word-spacing:0px; background-color:#ffffff\">\r\n<a href=\"http://asprise.com/c%23-vb.net-scanner-api/twain-wia-scan-pdf-library-overview.html\" target=\"_blank\" style=\"text-decoration:none; color:#0066aa\"><img src=\"http://asprise.com/res/img/icon-scan-32.png\" alt=\"\" width=\"28\" align=\"middle\" style=\"border:0px none; margin-right:8px\">Learn\r\n more about Asprise Scan C# VB.NET SDK for TWAIN WIA Scanners</a></p>\r\n<p style=\"font-size:15px; line-height:22px; margin-top:0px; color:#333333; font-family:proxima_nova_rgregular,'Droid Sans',sans-serif; font-style:normal; font-weight:normal; letter-spacing:normal; orphans:2; text-align:start; text-indent:0px; text-transform:none; white-space:normal; widows:2; word-spacing:0px; background-color:#ffffff\">\r\n<a href=\"http://asprise.com/c%23-vb.net-scanner-api/twain-wia-document-scan-library-sdk-samples-docs.html\" target=\"_blank\" style=\"text-decoration:none; color:#0066aa\"><img src=\"http://asprise.com/res/img/icon-book-32.png\" alt=\"\" width=\"28\" align=\"middle\" style=\"border:0px none; margin-right:8px\">Access\r\n to Asprise Scan C# VB.NET Developer's Guide</a></p>\r\n<p style=\"font-size:15px; line-height:22px; color:#333333; font-family:proxima_nova_rgregular,'Droid Sans',sans-serif; font-style:normal; font-weight:normal; letter-spacing:normal; orphans:2; text-align:start; text-indent:0px; text-transform:none; white-space:normal; widows:2; word-spacing:0px; background-color:#ffffff\">\r\n<a href=\"http://asprise.com/scan2/docs/Help/index.html\" target=\"_blank\" style=\"text-decoration:none; color:#0066aa\"><img src=\"http://asprise.com/res/img/icon-code-32.png\" alt=\"\" width=\"28\" align=\"middle\" style=\"border:0px none; margin-right:8px\">Browse API\r\n (MSDN style) online</a></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "TWAIN,WIA,Document Scanning,Scanner,C# VB.NET Scanner,Scanning API,64bit TWAIN,",
  "LastEdited": "2016-08-19T00:28:32.27-07:00"
}