{
  "ProjectName": "WPFCompositesContrib",
  "Title": "WPF Composites Contrib",
  "Description": "WPF Composites Contrib is a supporting project to WPF Composites (WPF-CPS) to allow exploring/building out new controls and techniques which leverage WPF-CPS.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>3/19/2014: latest check-in has been updated for Version 5.0 of WPF Composites (at least in the basics.) Note that this is NOT the latest download. To navigate to the latest check-in, go to Source Code - History . . . </b><br /><br /><b>UPDATE:</b> in progress of including a &quot;Prism-like&quot; guidance for WPF Composites here containing a new <b>ActionAggregator</b> (similar to event aggregator but simpler with no DI container, merely leveraging WPF&#39;s default global Application.Current.Properties container) and <b>UserControlRegions</b> to add/remove UserControls to.<br />     There is even a <b>Model-View-Presenter (MVP)</b> example with an NUnit test or two, even testing directly against the WPF UI Object graphs, merely indirecting &quot;commands&quot; thru Actions in the Presenter (to allow firing the Actions directly from the unit test, similar to Commands. I just prefer Actions, lighter weight!)<br /><br /><b>WPF Composites Contrib</b> is a supporting project to WPF Composites (WPF-CPS) to allow exploring/building out new controls and techniques which leverage this existing code library.<br /><br /><b>WPF Composites (WPF-CPS)</b>  provides an alternative, concise, C# (or IronPython or F#) code-behind approach to managing WPF UI Framework Element composites. WPF Composites are normally managed via XAML and DataTemplates but this library uses <u>ID&#39;s and X-Y Coordinates</u> instead to position elements on the screen. This is currently for synchronous apps only. It is not designed to be thread-safe. I welcome volunteers!<br /><br />WPF-CPS works via <b>100% code-behind</b>, zero XAML, has CSS-like Selectors, has Generators to generate multiple Framework Elements based on a single Prototype Element&#39;s properties (e.g. create a button and automatically clone it 5 times), and supports 26 different WPF controls. Just added sorting to the panels too to allow sorting Grid, StackPanel, DockPanel, WrapPanel, TreeView, and DataGrid. <br /><br /><b>Squares Navigator</b><br />Link to screenshot: <a href=\"https://wpfcompositescontrib.codeplex.com/wikipage?title=Squares%20Navigator&referringTitle=Home\">Squares Navigator</a><br />The first contribution I am making to WPF Composites Contrib is an exploration of the concept of a Squares Navigator, a kind of data visualization similar to paging. Each square represents <b>1/400th</b> of a very large dataset. In this example, I leverage a dataset of around <b>39,000 mutual fund records</b> provided by the SEC for free at data.gov here:<br />http://catalog.data.gov/dataset/investment-company-series-and-class-information<br /><br /><b>Information on the DataSet from Data.Gov</b><br />&quot;Securities and ExceInvestment Company Series and Class Information<br /><br />The Series and Class Report provides basic identification information for all active registered investment company series and classes that have been issued IDs by the Commission. Beginning on February 6, 2006, all open-end mutual funds (Form N-1A filers), insurance separate accounts organized as mutual funds (Form N-3 filers), insurance separate accounts organized as unit investment trusts (Form N-4 and Form N-6 filers). Investment companies (see adopting release http://www.sec.gov/rules/final/33-8590.pdf) have been required to use these IDs when making their electronic filings with the Commission. Since February 6, 2006, series and class IDs have also been issued to a few closed-end funds (Form N-2 filers) and unit investment trusts that are not used to fund separate accounts (S-6 filers).&quot;<br />SOURCE: data.gov<br /><br /><b>Paging Control - now with Page Recycling!</b><br />Link to screenshot: <a href=\"https://wpfcompositescontrib.codeplex.com/wikipage?title=Paging%20Control&referringTitle=Home\">Paging Control</a><br />The second contribution I am making is a basic paging control. The example shown is of paging in a DataGrid, but I imagine that it could be adapted to support paging other controls such as TreeView or ListBox? This example could also likely be expanded to support modified datasets as well with Insertions and Deletions. For now, I just showed paging through the fixed set of mutual fund records from the Squares Navigator example above.<br />The performance was a bit disappointing initially . . . until I added Page Recycling. The Paging Control can now likely handle a few hundred records per page with relative ease. Therefore, a total dataset of 3500 records would likely be quite manageable. <br />However, for larger datasets, there are alternative options that are also compatible with WPF-CPS including the <b>Squares Navigator</b> above for potentially thousands of records, or the <b>Extended WPF Toolkitâ„¢ Community Edition DataGrid</b> offered open-source here <a href=\"https://wpftoolkit.codeplex.com/\">https://wpftoolkit.codeplex.com/</a> by Xceed <a href=\"http://xceed.com\">http://xceed.com</a><br />Moreover, Searching and/or Filtering could likely readily be added to this basic paging control.<br /><br />If I have time, I may explore Categorization solutions in this Contrib project too . . .<br /><br /><b>SQLite</b><br />The file-based data access code that I am using is SQLite, a free, open-source SQL database engine available here: <br />http://sqlite.org/<br />http://sqlite.org/copyright.html<br /><br />Additional information on starting a new project is available here: <a href=\"http://codeplex.codeplex.com/wikipage?title=Start%20a%20Project\">Project Startup Guide</a>.</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF Composites,WPF,SQLite,DataSet,Data Visualization,",
  "LastEdited": "2014-04-02T21:48:03.627-07:00"
}