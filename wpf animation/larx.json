{
  "ProjectName": "larx",
  "Title": "LarX - XNA Game Engine",
  "Description": "LarX is an XNA Game Engine, 2D and 3D, that uses SunBurn for Rendering, sgMotion for animations, and BEPU for Physics. It enables developers to write quicly AAA games.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />LarX is an XNA Game Engine, 2D and 3D, that uses SunBurn for Rendering, sgMotion for animations, and BEPU for Physics. It enables developers to write quicly AAA games.<br /><br />Part of the Functions the LarX Currently have(31/05/2011):<br />•    Vegetation System – Trees etc, with Wind. The wind have Direction, MaxDistance and MaxStrenghtDistance, Strenght and etc. <br />•    2D Sprites – Easilly Render Text/Texture.<br />•    Automatic SpriteFont Loader – Loads all fonts in the Engine//Fonts folder, and Stores them on the Engine’s FontManager. This way, when you Draw Text, you don’t have to pass a SpriteFont, you need only to pass the SpriteFont name(like “Kootenay”).<br />•    Language System<br />o    Language Editor – Used for making LanguageFiles. With it, you can easily Translate Language Files to another languages, or make your game Language Files.<br />o    Automatic Languages – On your game, you just have to create a folder for every language your game has, with the Language Initials(like “en-us”). Then, the Engine will look automatically in your games folder(Usually, something like “Content//Game//Languages”) and see the initials that works better with your language. Then, when you call LanguageSystem.LoadLanguage(…) you can load automatically the Language File for the correct language.<br />•    Automatically Resize Sprites to a different Resolution.<br />•    Automatic StorageDevice. Automatically picks a StorageDevice to save from an Xbox 360/Windows PC(picks a folder automatically on Windows). So, saving the game is easy. When you Load the Engine, it will automatically get an Storage Device.<br />•    Input Manager<br />o    If you are making a game with only 1-Player(or part of the game is 1-Player), you can check for Input using Engine.Input.IsPlayingPlayer…(…) so you check for the Current Controller. If another Person press any button on other controller index, the Engine will automatically shows a “Press <a href=\"https://larx.codeplex.com/wikipage?title=%28START%29&referringTitle=Home\">&#40;START&#41;</a>(button image here) to change the Index to Controller (ControllerIndex)”. With this, the Player can use ANY controller to play the game, and should easily pass some rules for Peer Review.<br />•    2D Camera System<br />•    Literally Lots of Util Classes<br />•    KeyFrame Animation – Animate ANY in-game object using the Editor(or even by code), automatics interpolated it If you want to. The variables that can be animated are Position, Rotation or Scale. This can be used to animate SunBurn Lights too.<br />•    Automatically Render Buttons by using the Buttons Name with a <a href=\"https://larx.codeplex.com/wikipage?title=%28%20on%20the%20start%20and%20%29&referringTitle=Home\">&#40; on the start and &#41;</a> in the End. It’s like “Press <a href=\"https://larx.codeplex.com/wikipage?title=%28START%29&referringTitle=Home\">&#40;START&#41;</a> to begin” and the Engine will replace the <a href=\"https://larx.codeplex.com/wikipage?title=%28START%29&referringTitle=Home\">&#40;START&#41;</a> with the Start button’s image.<br />•    AnimationHelper System. Animates easily any variable(supports float, Vector2, Vector3, Vector4, Rectangle and Color).<br />•    Custom Content Manager, that manages content and erase unused content after some time(if setted to).<br />•    Guide Like Components: Components that work like the Xbox 360 Guide, sometimes pausing the Engine. SquaredMessageBox and DownMessage are Guide Like Components.<br />•    Console – Console System, that can easily be modified(on your game start, you can just add some new commands, and it works pretty well).<br />•    Custom Keyboard – The Xbox 360 Keyboard takes A LOT to Open. And it takes a LOT to type ANYTHING. So, the LarX has a CustomKeyboard class, that can be easily modified, and it enables quick and easy typying on the Xbox 360.<br />•    Custom Image Format – Image format that can be used to Serialize a Picture on the Xbox 360(like a Snapshot from the game).<br />•    ParticleSystem – The Creators Club Sample, with a lot of improvements. <br />•    Simple 2D Physics – REALLY simple 2D Physics.<br />•    Picking System – Automatic Picking Classes. By Triangle(WIP) or by Color(unique Model Color, it’s the Most Exactly picking method.). You can make more classes, just inherit from the Picking class.<br />•    Triggers<br />•    Works on Windows Phone 7 (only part of the Engine. Exclude ParticleSystem and sgMotion Animated Actors, but these are being worked on to make it work).<br />•    Button (works on WP7 and Windows).<br />•    Video Player – Automatically Reproduces a Video. Easily applys it to the entirely Screen.<br />•    TextScript(WIP, but works) – Create Components and make things using Script.<br />•    VisualScript – Connecting Visual Scripts you can create handles for the Scene, like entering a Trigger would turn off a light and etc.<br />•    The Engine Serializes itself.<br />•    MenuSystem – Easy to make MenuSystem, using the 2D render system.<br />•    ScreenManager – Easily change through screens, fading one to another, scrolling or whatever effect you want to use.<br />•    Wave Reader (*.wav) – Only Wave Reader, not Player. Used to make a realllyyy quick way of LipSync, using the wav Waves.<br />•    Automatic Avatar Rendering – Easy pick the Player’s Avatar, or a Random Avatar.<br />•    Cameras – Multiple Cameras ready for duty. From TargetCameras to Free, there’s a lot of them.<br />•    Physics 3D – The LarX uses bEPU Physics for the 3D Physics, but you can easily use another PhysicsSystem. It’s an OpenSource project.</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-06-09T12:24:47.927-07:00"
}