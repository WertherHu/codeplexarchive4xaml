{
  "ProjectName": "wpfinstanceawareapp",
  "Title": "WPF instance aware application (for single instance applications)",
  "Description": "This C# project helps in the creation of single instance applications (either per user session or per host) using WPF.\nIt does not use the Micrsoft.VisualBasic.WindowsFormApplicationBase approach, relying instead on the usage of synchronization objects and WCF.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This C&#35; project helps in the creation of single instance applications &#40;either per user session or per host&#41; using WPF.<br />It does not use the Micrsoft.VisualBasic.WindowsFormApplicationBase approach, relying instead on the usage of synchronization objects and WCF.<br /><br /><b>Introduction</b><br />To create a single instance application, two prerequisites must be matched:<br />- The application should be aware of other instances of itself already running<br />- If another instance of the application is started, the main one (tipically the first one) should be notified and handle the situation instead<br /><br />There are many ways to create an application matching such requisites, using WPF:\n<ol><li>Using <a href=\"http://msdn.microsoft.com/en-us/library/ms771662.aspx\">Microsoft.VisualBasic.WindowsFormsApplicationBase</a> (which matches both requisites) to create a manager to be attached to the application (examples can be found <a href=\"http://blogs.microsoft.co.il/blogs/tamir/archive/2007/03/06/Single-instance-application_2C00_-screen-saver-and-power-management-disabling-and-battery-meter.aspx\">here</a>, <a href=\"http://www.switchonthecode.com/tutorials/wpf-writing-a-single-instance-application\">here</a>, <a href=\"http://thefiles.macadamian.com/2009/03/single-instance-applications-in-wpf.html\">here</a>, <a href=\"http://yogesh.jagotagroup.com/blog/post/2008/07/03/Ways-of-making-a-WPF-application-Single-Instance.aspx\">here</a> and <a href=\"http://pietschsoft.com/post/2009/01/Single-Instance-WPF-Application-in-NET-3.aspx\">here</a>)</li>\n<li>Using a synchronization object to check for already running instances, and a way to deal with inter-process communication (using Interop services and memory mapped files like <a href=\"http://social.msdn.microsoft.com/forums/en/wpf/thread/e321cc4b-e2f3-474e-9575-bacbd2e83a60/\">here</a>, or <a href=\"http://msdn.microsoft.com/en-us/library/system.io.isolatedstorage.isolatedstoragefile(VS.96).aspx\">IsolatedStorageFile</a> like <a href=\"http://www.codeplex.com/WpfSingleInstance\">here</a>)</li>\n<li>Using WCF and named pipes to create a service and deal with both multiple instance identification and inter-process communication (using the source code provided <a href=\"http://johnmelville.spaces.live.com/blog/cns!79D76793F7B6D5AD!122.entry\">here</a>)</li></ol>\nThere is an even simpler solution: enumerating among ruinning process... unfortunally this approach is pretty weak (what if two different applications share the same name?) and does not deal with the inter-process communication issue. Moreover, it is so ugly that I don&#39;t even consider it a real solution! :)<br /><br /><b>The project</b><br />Since there are so many solutions, you could argue that there was no need for another one... true, but I like doing things my own way, and each of the previous solutions had something I didn&#39;t like: some of them required to get rid of the App.xaml file, others rely on an language specific assembly (Microsoft.VisualBasic) and feel like a hack (avoiding the WindowsFormApplicationBase message pump to start, using the object just to deal with instance check and notification), others do not take into account the possibility of having a single instance of the application, either in the user session or globally per host (moreover use method hiding, since the application Run method is not virtual).<br />So, the solution proposed in this project was mostly inspired by the approaches from <a href=\"http://social.msdn.microsoft.com/forums/en/wpf/thread/e321cc4b-e2f3-474e-9575-bacbd2e83a60/\">Marco Zhou</a> and <a href=\"http://johnmelville.spaces.live.com/blog/cns!79D76793F7B6D5AD!122.entry\">John Melville</a>: it uses a named synchronization object to deal with instance identification (this way it can be aware of both applications running in the same session or different ones), and WCF with named pipes to perform inter-process communication. It does not hide methods, using only method overriding (in particular OnStartup and OnExit), and provides a way to notify &#39;next&#39; instances about main application receive of &#39;next instance startup&#39; signal.<br />With this approach the default App.xaml and App.cs have to be slightly modified (like in the <a href=\"http://social.msdn.microsoft.com/forums/en/wpf/thread/e321cc4b-e2f3-474e-9575-bacbd2e83a60/\">Marco Zhou</a> solution), since InstanceAwareApplication inherits from System.Windows.Application, but there is no need for a manager or explicit Main method definition.<br /><br />In a few words, it is a clean and simple solution, which tries to summarize the best from the solutions proposed until now.</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,Single Instance,WCF,Application,",
  "LastEdited": "2010-07-07T07:03:19.52-07:00"
}