{
  "ProjectName": "Simon",
  "Title": "Silverlight Simon",
  "Description": "Composite Surface/WPF/Silverlight 3/Silverlight 3 OOB project for fun and for demo-ing going from Silverlight to WPF and the use or resources in both kinds of projects and then again going from WPF to Surface allowing users to show the differences between all 3.5 environments.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Composite Surface&#47;WPF&#47;Silverlight 3&#47;Silverlight 3 OOB project for fun and for demo-ing going from Silverlight to WPF and the use or resources in both kinds of projects and then again going from WPF to Surface allowing users to show the differences between all 3.5 environments.<br /><br /><b>Silverlight Simon has been ported to Windows Phone 7 and is available free in the market place at: <a href=\"http://social.zune.net/redirect?type=phoneApp&amp;id=65c23c5b-73e9-df11-9264-00237de2db9e\">http://social.zune.net/redirect?type=phoneApp&amp;id=65c23c5b-73e9-df11-9264-00237de2db9e</a></b><br /><br /> this requires the WPF toolkit and Silverlight 3 installed.  and uses http://code.msdn.microsoft.com/WindowsTouch in the WPF Simon for Multitouch support care of Davide Zordan.  The multitouch library is governed by http://code.msdn.microsoft.com/WindowsTouch/Project/License.aspx <br /><br /><b>Want to just play the game?</b>  <i>Select one of the links just below the warning.</i><br /><br />WARNING: To view the Silverlight 3 version, you must have Silverlight 3 runtime or no silverlight software installed at all.  If you have a prior version of Silverlight runtime installed, you will be redirected to install Silverlight 2 which will load Silverlight 3 properly.  If you have Silverlight 2 installed, you may need to uninstall it entirely before attempting to install the Silverlight 3 runtime - or - go to the official Silverlight 3 website and install the Silverlight 3 runtime directly from there - Silverlight 2 and Silverlight 3 <i>can run</i> concurrently on one system successfully.  To run or work with Azure Simon you will need the Azure SDK <a href=\"http://www.microsoft.com/azure/default.mspx\">http://www.microsoft.com/azure/default.mspx</a>.<br /><br /><b>Silverlight 3 version</b>: <a href=\"http://www.hackingsilverlight.net/Simon.html\">http://www.hackingsilverlight.net/Simon.html</a><br /><b>Azure Version</b>: <a href=\"http://azuretestapp.cloudapp.net/\">http://azuretestapp.cloudapp.net/</a><br /><b>Silverlight 2 version</b>: <a href=\"http://www.facingblend.com/SimonInSilverlight/index.html\">http://www.facingblend.com/SimonInSilverlight/index.html</a><br /><br />you can get Silverlight 3 installed for testing and dev purposes at: <br /><br /><a href=\"http://silverlight.net/getstarted/silverlight3/default.aspx\">http://silverlight.net/getstarted/silverlight3/default.aspx</a><br /><br />Currently there are 2 changes you need todo to move the &#39;Simon&#39; user control from the Silverlight world to the WPF version.  To try it, remove the Simon control from the WPF solution.  Copy the Silverlight Simon user control from the Simon project to the WPF.  in the code behind remove the #define Silverlight from the top of the file.  in the XAML change the VSM name space to: <br /><br />xmlns:vsm=&quot;clr-namespace:System.Windows;assembly=WPFToolkit&quot; <br /><br />rememeber you will need to make sure the WPF tool kit is installed or the vsm stuff will not work since WPF doesn&#39;t have a VSM yet.<br /><br />Also note that come code can be used straight up for example the FX class can as long as the generic.xaml is updated with the VSM PresentControlTitle<br /><br /><b>Demoable Features</b><br /><br />There are features that Simon can be used to demo or teach.<br /><br />-Silverlight to WPF composite developement<br />-Silverlight Out of Browser (OOB)<br />-WPF Chromeless Window<br />-Surface Developement<br />-Basic Silverlight 3 Developement<br />-Designer Developer Workflow<br />-Basic WPF/Surface Developement<br />-Control Template Sytling in Blend<br /><br /><b>Simon Inspiration</b><br /><br />Ariel Leroux was initially inspired to create simon primarily as an icon which was XAML based to represent a section of her site called &quot;The ToyBox&quot;.  When it was seen by David Kelley, he instantly decided that it needed to be done larger, and made to come alive and they both worked together to make that happen.  <br /><br />Having had one of the electronic versions as a kid they both thought it would be fun to make the Silverlight version for doing demos and to showcase different Silverlight features.  Ariel did the initial comp in Silverlight using Expression Blend 2.  David made the first version work in a pre-release version of Silverlight 3 and Ariel ported it back to Silverlight 2.  It was then released in both versions and posted to codeplex for everyone to use and have fun with.  <br /><br />For those who haven&#39;t seen the old toy from the 70&#39;s take a look at <a href=\"http://www.granneman.com/images/miltonBradleySimon.jpg\">http://www.granneman.com/images/miltonBradleySimon.jpg</a><br />There is a very similarly looking application for the Mac called Extreme Simon which can be found at: <a href=\"http://www.digitalrendezvous.net/2006/05/25/simon-says/\">http://www.digitalrendezvous.net/2006/05/25/simon-says/</a>.  <br /><br />Anyway we hope you have fun with Simon and feel free to ping us with comments and questions or ideas for adding to Simon but remember any ideas might get used... :) <br /><br /><br /><b>WPF/Silverlight Differences</b><br />\n<ul><li>VSM namespace (see above note)</li>\n<li>calling animations see difference in following block: </li></ul>\n<br />            #if Silverlight<br />                PrefsBtnPressed.Begin();<br />            #else<br />                Storyboard foobar = TopSimonGrid.FindResource(&quot;PrefsBtnPressedKey&quot;) as Storyboard;<br />                foobar.Begin();<br />            #endif <br />\n<ul><li>Media Element AutoPlay on the media element is not supported in WPF however WPF supports LoadedBehavior this is how Simon deals with this issue:</li></ul>\n<br />            #if !Silverlight <br />                SimonSounds.LoadedBehavior = MediaState.Manual;  <br />            #else<br />                SimonSounds.AutoPlay = true;<br />            #endif<br />\n<ul><li>remember to use keys on resources that you would use as named values in WPF specifically animations.</li></ul>\n<br />also note that I might have done something specifically knowing I was going to have it in Silverlight and WPF that I may have forgotten about by the time I did this.  I did so a post at the time at: http://hackingsilverlight.blogspot.com/2009/05/converting-silverlight-apps-to-wpf.html<br /><br />but some of the points from that conversion process/post besides the above include: no 2.5 SL3 stuff works in WPF.  although WPF has real 3d.  <br /><br /><b>WPF/Surface Simon Differences</b><br /><br />Going from WPF to Surface turns out to be a bit more in the line of code changes expecially in XAML then going from Silverlight to WPF.  WPF Simon will run straight up in/on Surface the problem is all the click events are castrated by the Surface Framework as Suface focus&#39;s on &#39;Contacts&#39;.  In order these are the kinds of changes I had to make to make &#39;Surface Simon&#39; playable.  <br /><br />First we couldn&#39;t just reference WPF Simon to make the chagnes we needed so I had to copy the code base.  Then started with converting the &#39;Simon&#39; user control to a &#39;Surface User control&#39; something to the effect of: <br /><br />&lt;s:SurfaceUserControl x:Class=&quot;Simon.Simon&quot; <br />    xmlns:s=&quot;http://schemas.microsoft.com/surface/2008&quot;<br /><br />and in the code behind: <br /><br /><br />using Microsoft.Surface.Presentation.Controls;<br />using Microsoft.Surface.Presentation;<br /><br />and <br /><br />public partial class Simon : SurfaceUserControl<br /><br />then next thing I needed todo was swap out the button controls with surface button controls so I could get the contact events like this: <br /><br />    &lt;s:SurfaceButton x:Name=&quot;ScoresBtn&quot; Click=&quot;ScoresBtn<i>Click&quot; ContactUp=&quot;ScoresBtn</i>ContactUp&quot; Style=&quot;{StaticResource ScoresBtnStyle}&quot; Height=&quot;41&quot; Width=&quot;34&quot; Content=&quot;&quot; Canvas.Left=&quot;98.407&quot; Canvas.Top=&quot;-6&quot; /&gt;<br />                               <br />note I could leave the click even there and the new &#39;ContactUp&#39; event basically just calls the click event like this: <br /><br /><br />        private void NewBtn_ContactUp(object sender, Microsoft.Surface.Presentation.ContactEventArgs e)<br />        {<br />            NewBtn_Click(sender, null);<br />        }<br /><br />from here I still have the 4 game pad buttons which were not &#39;buttons&#39; in the first place and there is no Surface Canvas so I had to use a static helper class to assign contact events and handlers to them like this: <br /><br /><br />Contacts.AddContactUpHandler(GreenBtn, GreenBtn_ContactUp);<br /><br />now granted I could have used this approach all along and have only one place and I can probably make a WPF Version that would run in Surface and WPF but this is what I did on this cut.  The big thing is to show the difference between the rich multi touch environent of surface vs straight WPF.  Keep in mind that Surface is in fact a subset of WPF.                    <br /><br />Note: the current &#39;Surface&#39; Simon has been even further altered to run in a scatterview so the code there is different some what then shown above in the Simon control itself.</div><div class=\"ClearBoth\"></div>",
  "TagList": "ASP.NET,C#,game,games,WPF,Toolkit,patterns &amp; practices,xaml,Silverlight,Composite,hack,Hacking Silverlight,UX,CompositeWPF,Silverlight 3,Simon,best practices,Surface,Simon in Silverlight,Simon on Surface,MS Surface App,Simon Says,Simon on Windows 7,Simon in WPF,MS Surface Games,MS Surface,demo,azure,Silverlight 2,chromeless,Basic,blend,Projects,",
  "LastEdited": "2010-12-15T07:07:34.61-08:00"
}