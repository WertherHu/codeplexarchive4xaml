{
  "ProjectName": "LocalL",
  "Title": "LocalL",
  "Description": "LocalL is A localization library designed to be extremely flexible and fit multiple use paradigms. LocalL has direct bindings to TextWriter Objects and WinForms controls. It also has indirect bindings that allow it to work with WPF, while still being compatible with Mono.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\rLocalL is A localization library designed to be extremely flexible and fit multiple use paradigms. LocalL has direct bindings to TextWriter Objects and WinForms controls. It also has indirect bindings that allow it to work with WPF, while still being compatible with Mono.<br />\n<h2>Status</h2>\r\nLocalL is in very early alpha stages. So far the primary features are coded in, and it compiles, but it is untested. It requires the <a href=\"http://configfilemanager.codeplex.com/\">http://configfilemanager.codeplex.com/</a> library to work. A copy is enclosed in the repository to save some potential headaches.<br /><br /><b>Current Features</b><br /><table><tr><th>Feature </th><th> Description </th><th> <sup>*</sup>Status</th></tr>\n<tr><td> Translate </td><td> Translate whole internationalized strings to local strings </td><td> <b>Testing</b> </td></tr>\n<tr><td> Don&#39;t Translate </td><td> Allow strings to specified as &#39;do not translate&#39;, so the algorithm will pass them through without translation </td><td> <b>Testing</b> </td></tr>\n<tr><td> TextWriter Bindings </td><td> Write to a targeted or encased text writer object </td><td> <b>Testing</b> </td></tr>\n<tr><td> GDI<u> </td><td> Write to a GDI</u> control presenting a &#39;String Text&#39; property </td><td> <b>Testing</b> </td></tr>\n<tr><td> Dynamic Targets </td><td> Write to any target exposing certain methods/properties, regardless of inheritance </td><td> <b>Coded</b> </td></tr>\n<tr><td> Dynamic Translators </td><td> Use of abstract classes to allow changing the functionality without having to re-write all &#39;write&#39; functions. </td><td> <b>Coded</b> </td></tr>\n<tr><td> Overrideable Dynamic Targets </td><td> Dynamic Target code is abstract in the base class, allowing alternative implementations </td><td> <b>Testing</b> </td></tr>\n<tr><td> Compiles in Visual Studio </td><td> The project compiles in Visual Studio 2010 </td><td> <b>Complete</b> </td></tr></table><br /><sup>*</sup> May be &quot;Coded&quot;, &quot;Testing&quot;, &quot;Complete&quot;<br /><br /><b>To Do</b><br /><table><tr><th> Task </th><th> Description </th><th> Priority </th></tr>\n<tr><td> Do Translate </td><td> Add a DoTranslate prefix, so DoNotTranslates don&#39;t need to be mangled </td><td> very high </td></tr>\n<tr><td> Search and Replace </td><td> Search for internationalized strings in a large block of text, and replace with localized strings </td><td> high </td></tr>\n<tr><td> Compiles in Mono </td><td> The project compiles in Mono 2.10.x or higher, and can run in Mono. This should be possible now, but it is not tested. </td><td> high </td></tr>\n<tr><td> Tie-in to online translators </td><td> Use babelfish, google translate, etc. to dynamically translate text. Low priority because, while useful, this is not a good practice </td><td> low </td></tr></table><br />\n<h2>FAQ</h2>\r\n<b>Why not use another localization tool?</b><br /><br />There are a lot of localization tools out there. Many of them are simple, easy to use, and may fit your project better than this too. Also at the time of writing this, this tool is in it&#39;s alpha stages. If a tool fits better, or is better tested, then that&#39;s a good reason to use it over this tool. However, this tool is geared towards flexibility. You should use this tool over others if the flexibility and ease of use it provides, outweighs that available from the other tools. In particular:\n<ul><li>A variety of API specific outputs, including TextWriter objects and Windows Forms.</li>\n<li>Generic Access - A generic output API, compatible with things like WPF and other custom targets. No need to inherit from any specific class/interface.</li>\n<li>Generic Access - If you want to make it even easier to output to something, you can write a TextWriter derived class to output to that target, making localization to that type of object even easier (you save one argument in most function calls).</li>\n<li>Extensibility - you can replace the translator functionality without having to re-write the whole library, to match your specifications.</li>\n<li>Familiarity - The API is based off of TextWriter (in fact, this is a TextWriter implementation), with extensions that add functionality, while remaining similar to TextWriter in convention.</li></ul>\n\n<h2>Changelog</h2>\r\n<b>Version 0.1.3</b>\n<ul><li>Translation Builder / Test tool  built.</li>\n<li>Access of individual localized strings in a dictionary-like manner</li></ul>\n<br /><br /><b>Version 0.1.1</b>\n<ul><li>Version 0.1.2 included here</li>\n<li>Primary interface classes LocalL.ALocalizer, LocalL.Localizer, LocalL.Quick.L</li>\n<li><u>DefaultLocalization</u> string property - get/set the default localization to use in Write/WriteLine functions</li>\n<li><u>Output</u> TextWriter property - get/set the default output TextWriter</li>\n<li><u>string[][] Load(params string[] files)</u> - load localizations from the listed file paths</li>\n<li><u>void Save(string file, string localization)</u> - save the specified localization to a particular file path</li>\n<li><u>bool requires_translate(ref string s)</u> - check if s requires translation, if not, remove the do not translate prefix.</li>\n<li><u>void Translate(...)</u> and <u>void Translate_(...)</u> - which can be overwritten to change how localization is executed</li>\n<li><u>Write(...)</u> and <u>WriteLine(...)</u> - which write to a user defined TextWriter</li>\n<li><u>Write(TextWriter, ...)</u> and <u>WriteLine(TextWriter, ...)</u> - which write to a targeted text writer</li>\n<li><u>Write(System.Windows.Forms.Control, ...)</u> and <u>WriteLine(System.Windows.Forms.Control, ...)</u> - which write to a targeted WinForms control</li>\n<li><u>void WriteToGeneric(object o, string s)</u> - write to a generic object, checking for specific methods/properties/etc in the object, can be overridden</li>\n<li><u>void WriteGeneric(object c, ...)</u> <u>void WriteLineGeneric(object c, ...)</u> - use WriteToGeneric to implement TextWriter like functions to a generic object</li></ul>\n\n<h2>Copyright</h2>\r\nNote: Codeplex only displays the standard 3 clause BSD license. This library does not require the third clause.<br /><br />COPYRIGHT NOTICE<br /><pre>\nCopyright (c) 2011, S James S Stapleton\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-12-17T18:01:16.2-08:00"
}