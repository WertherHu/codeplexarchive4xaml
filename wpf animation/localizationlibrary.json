{
  "ProjectName": "localizationlibrary",
  "Title": "LocalizationLibrary",
  "Description": "The Localization Library is a collection of reusable software component that provide support for localization. This library enables you to localize WPF (Windows Presentation Foundation), Silverlight and WP7 (Windows Phone 7) applications.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1>Welcome to the Localization Library project</h1>\r\n<p>The Localization Library is a collection of reusable software components that provide support for localization. This library enables you to localize WPF (Windows Presentation Foundation), Silverlight and WP7 (Windows Phone 7) applications.</p>\r\n<p><em>Author: Nicola Gallo (Email: <a href=\"mailto:nicolagmt@hotmail.it\">nicolagmt@hotmail.it</a>, Web site:\r\n<a href=\"http://www.nicola.gallo.name\" target=\"_blank\">www.nicola.gallo.name</a>, Blog:\r\n<a href=\"http://dotnetslang.wordpress.com\" target=\"_blank\">dotnetslang.wordpress.com</a>)</em></p>\r\n<table border=\"0\" width=\"100%\">\r\n<tbody>\r\n</tbody>\r\n</table>\r\n<table border=\"0\" width=\"100%\">\r\n<tbody>\r\n<tr>\r\n<td><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=198285\"><img title=\"M$Logos\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=198286\" border=\"0\" alt=\"M$Logos\" width=\"446\" height=\"113\" align=\"left\" style=\"padding-left:0px; padding-right:0px; display:inline; float:left; padding-top:0px; border-width:0px\"></a></td>\r\n</tr>\r\n<tr>\r\n<td><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=184738\"><img title=\"wp7Runtime\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=184739\" border=\"0\" alt=\"wp7Runtime\" width=\"952\" height=\"583\" align=\"left\" style=\"padding-left:0px; padding-right:0px; display:inline; float:left; padding-top:0px; border-width:0px\"></a></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>Quickstart: Hello World</h2>\r\n<h3><strong>LocalizationLibrary for WPF</strong></h3>\r\n<p>In the the solution &ldquo;<strong>HelloWorld.Desktop.sln</strong>&rdquo; you can find a simple example of how to use the Localization Library.</p>\r\n<p><em><strong>NOTE:</strong> The solution&rsquo;s path is &ldquo;&hellip;\\LocalizationLibrary\\Quickstarts\\HelloWorld\\HelloWorld.Desktop&rdquo;.</em></p>\r\n<h3><strong>LocalizationLibrary for Silverlight</strong></h3>\r\n<p>In the the solution &ldquo;<strong>HelloWorld.Silverlight.sln</strong>&rdquo; you can find a simple example of how to use the Localization Library.</p>\r\n<p><em><strong>NOTE:</strong> The solution&rsquo;s path is &ldquo;&hellip;\\LocalizationLibrary\\Quickstarts\\HelloWorld\\HelloWorld.Silverlight&rdquo;.</em></p>\r\n<h3><strong>LocalizationLibrary for WP7</strong></h3>\r\n<p>In the the solution &ldquo;<strong>HelloWorld.WP7.sln</strong>&rdquo; you can find a simple example of how to use the Localization Library.</p>\r\n<p><em><strong>NOTE:</strong> The solution&rsquo;s path is &ldquo;&hellip;\\LocalizationLibrary\\Quickstarts\\HelloWorld\\HelloWorld.WP7&rdquo;.</em></p>\r\n<h2>Localization Library overview</h2>\r\n<p>WPF and Silverlight represent a big step forward in the user interface development. MVVM (Model-View-ViewModel) pattern has born with WPF and Silverlight.</p>\r\n<p>MVVM is an architectural pattern that enables you to develop modern UI and allows the separation of roles. When you use MVVM you can develop in multiple work streams each single layers of your application.</p>\r\n<p>MVVM pattern is composed of:</p>\r\n<ul>\r\n<li>\r\n<div><strong>Model</strong>: <em>Represents the model and refers either to an object model (object oriented approach) or the data access layer (data centric approach)\r\n</em></div>\r\n</li><li>\r\n<div><strong>ViewModel</strong>: <em>Provides a specialization of the Model that the View can use for the data binding and also an abstraction of the view. The ViewModel contains data-transformers that convert Model types in View types and also could contains\r\n Commands that the View can use to interact with the model</em></div>\r\n</li><li>\r\n<div><strong>View</strong>: <em>Consists of all visual elements displayed by the GUI such as ListBoxes, Buttons, TextBlocks etc.</em></div>\r\n</li></ul>\r\n<p>By using MVVM and other framework such as CAL (Composite Application Library), MEF (Managed Extensibility Framework) etc. you can develop dynamic application, but if you want to localize your application you have to define it within the view.</p>\r\n<p>The Localization Library extends the MVVM pattern and implements the <strong><em>MVVM and LocalizationModel (MVVM-L)</em></strong> pattern.</p>\r\n<p>MVVM-L introduces the concept of LocalizationModel that allows the separation of the localization role in the same way as the Model of MVVM allows the separation of the roles (View, ViewModel and Model).</p>\r\n<p><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174020\"><img title=\"MVVM-L_Pattern_LocalizationLibrary\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174021\" border=\"0\" alt=\"MVVM-L_Pattern_LocalizationLibrary\" width=\"456\" height=\"356\" style=\"padding-left:0px; padding-right:0px; display:block; float:none; margin-left:auto; margin-right:auto; padding-top:0px; border-width:0px\"></a></p>\r\n<p>The LocalizationModel is a localization abstract layer which can implements a collection of localized properties that the View should use for the localization.&nbsp; The LocalizationModel is an abstract concept. You can create a LocalizationModel integrated\r\n in a ViewModel or as a single component.</p>\r\n<p>The Localization Library introduces the following concepts:</p>\r\n<ul>\r\n<li>\r\n<div><strong>StaticResource</strong>: It&rsquo;<em>s a static resource that is implemented as a resource file</em></div>\r\n</li><li>\r\n<div><strong>DynamicResource</strong>: <em>It&rsquo;<em>s</em> a dynamic resource as the localization is provided through the use of a LocalizationProvider</em></div>\r\n</li><li>\r\n<div><strong>LocalizatedProvider</strong>: <em>It&rsquo;<em>s</em> a component that provides dynamically the resource&rsquo;s localization and any application can implements custom LocalizationProvider (for example you can create a LocalizationProvider that\r\n uses the Microsoft Translator Service to localize the resource on the fly)</em></div>\r\n</li><li>\r\n<div><strong>Localized</strong> <strong>Property</strong>: <em>These properties by means of attributes can instruct the localization&rsquo;s engine and bind the property&rsquo;s value to a localized resource value.</em></div>\r\n</li></ul>\r\n<h2>Localized properties: StaticResource and DynamicResource</h2>\r\n<p>A localized property value can depends on either a StaticResource or a DynamicResource. Localization Library defines some attributes in order to instruct the localization&rsquo;s engine. Using this attributes you can decorate either the LocalizationModel&rsquo;s\r\n properties or the assembly.</p>\r\n<p>There are three types of attributes:</p>\r\n<p>a) <strong>LocalizeAttribute</strong>: <em>An attribute that can be applied to a property and indicates that the target property should be localized using a StaticResource. It&rsquo;s not allowed to apply more than one instance to the same target property.</em></p>\r\n<p><em>b) </em><strong>LocalizeDynamicallyAttribute</strong>: An a<em>ttribute that can be applied to a property and indicates that the target property should be localized using a DynamicResource. It&rsquo;s allowed to apply more than one instance to the same\r\n target property</em></p>\r\n<p><em>c) </em><strong>DynamicResourcePartAttribute</strong>: An a<em>ttribute that can be applied to an assembly. It defines a dynamic resource part and provides directives, for the localization&rsquo;s engine, in case of version conflict</em></p>\r\n<p><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174351\"><img title=\"LLSRDR\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174352\" border=\"0\" alt=\"LLSRDR\" width=\"845\" height=\"310\" style=\"padding-left:0px; padding-right:0px; display:block; float:none; margin-left:auto; margin-right:auto; padding-top:0px; border-width:0px\"></a></p>\r\n<p>The base concept that you have to keep in mind about the dynamic resources, is that at runtime the resources are identified univocally by the ResourceID. So if you define a DynamicResource with the same ResourceID in either property or assembly, at runtime\r\n will be created only one resource&rsquo;s instance. So it is easy to understand that at runtime we might have version conflict if you provide many different localizations for the same language. The solution to avoid this conflict is to define a version&rsquo;s\r\n conflict policy.</p>\r\n<p>There are two kinds of policies:</p>\r\n<ul>\r\n<li>\r\n<div><strong>KeepExisting</strong>: <em>Keeps existing version</em>.</div>\r\n</li><li>\r\n<div><strong>OverrideExisting</strong>: <em>Overrides existing version</em></div>\r\n</li></ul>\r\n<p>the default value for the version conflict is KeepExisting.</p>\r\n<p><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=186590\"><img title=\"LLRuntimeDynamicResource\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=186591\" border=\"0\" alt=\"LLRuntimeDynamicResource\" width=\"801\" height=\"518\" style=\"padding-left:0px; padding-right:0px; display:block; float:none; margin-left:auto; margin-right:auto; padding-top:0px; border-width:0px\"></a></p>\r\n<p>Following some examples with regards the use of the above attributes:</p>\r\n<p>a) <strong>LocalizeAttribute</strong></p>\r\n<p><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174554\"><img title=\"StaticResourceHomeSample\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174555\" border=\"0\" alt=\"StaticResourceHomeSample\" width=\"513\" height=\"83\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a></p>\r\n<p>In this particular case the property named &ldquo;MyProperty&rdquo; is bound to the localized Value that belongs to the resource defined in the attribute (Resource of type &ldquo;Resources.AccountResource&rdquo;) with Name equals to &ldquo;MyPropertyKey&rdquo;.</p>\r\n<p>b) <strong>LocalizeDynamicallyAttribute</strong></p>\r\n<p><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174567\"><img title=\"DynamicResourceHomeSample\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174568\" border=\"0\" alt=\"DynamicResourceHomeSample\" width=\"561\" height=\"77\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a></p>\r\n<p>In this particular case the property named &ldquo;MyDynamicProperty&rdquo; is bound to the localized&nbsp; value of the resource wich is identified by ResourceID equals to &ldquo;MyDynamicPropertyKey&rdquo;.&nbsp; In addition, in this case, the resource&rsquo;s\r\n localization (for English language) has been provided in the attributes definition. The resource&rsquo;s localization for all the other languages, if not already existing, will provided by the LocalizationProvider.</p>\r\n<p>c) <strong>DynamicResourcePartAttribute</strong></p>\r\n<p><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=186592\"><img title=\"ResourceLocalizedHomeSample\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=186593\" border=\"0\" alt=\"ResourceLocalizedHomeSample\" width=\"999\" height=\"50\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a></p>\r\n<p>In this particular case the resource&rsquo;s localization, identified by ResourceID equals to &ldquo;MyDynamicPropertyKey&rdquo;, has been provided for the Italian language.&nbsp; In addition has been provided a policy of type &ldquo;KeepExisting&rdquo;.</p>\r\n<h2>MVVM and LocalizationModel (MVVM-L) pattern overview</h2>\r\n<p>MVVM-L is an architectural pattern that enables you to develop modern UI and allows the separation of roles.</p>\r\n<ul>\r\n<li>\r\n<div><strong>Model</strong>: <em>Represents the model and refers either to an object model (object oriented approach) or the data access layer (data centric approach)\r\n</em></div>\r\n</li><li>\r\n<div><strong>ViewModel</strong>: <em>Provides a specialization of the Model that the View can use for the data binding and also an abstraction of the view. The ViewModel contains data-transformers that convert Model types in View types and also could contain\r\n Commands that the View can use to interact with the model</em></div>\r\n</li><li>\r\n<div><strong>LocalizationModel: </strong><em>Represents a localization abstract layer which can implements a collection of localized properties that the View should use for the localization (The ViewModel could be used also&nbsp; as LocalizationModel and therefore,\r\n in this case, you have to define the localized properties within the ViewModel).</em></div>\r\n</li><li>\r\n<div><strong>View</strong>: <em>Consists of all visual elements displayed by the GUI such as ListBoxes, Buttons, TextBlocks etc.</em></div>\r\n</li></ul>\r\n<p>The implementation of MVVM-L is the same as MVVM, the only difference consisting in the fact that you have to implement the LocalizationModel (If you don&rsquo;t know how to implement the MVVM you can find more information at\r\n<a href=\"http://msdn.microsoft.com/en-us/magazine/dd419663.aspx\" target=\"_blank\">\r\nWPF Apps With The Model-View-ViewModel Design Pattern</a>).</p>\r\n<p>The best way to understand how a&nbsp; LocalizationModel is implemented is to jump right in the implementation. Let&rsquo;s suppose we need to implement a use case to&nbsp; create a new Account.</p>\r\n<p><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174067\"><img title=\"AccountView\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174068\" border=\"0\" alt=\"AccountView\" width=\"376\" height=\"260\" style=\"padding-left:0px; padding-right:0px; display:block; float:none; margin-left:auto; margin-right:auto; padding-top:0px; border-width:0px\"></a></p>\r\n<p>The first step is to create the LocalizationModel and derive it from the LocalizationModel class (<em>namespace LocalizationLibrary</em>). A good name would be AccountLM (<strong><em>Account</em></strong><em>\r\n<strong>L</strong>ocalization<strong>M</strong>odel</em>).</p>\r\n<p>Once you have created it, we have to add a property for each label that we want to localize in the view. Below you can see the AccountLM code implementation.</p>\r\n<div>\r\n<pre class=\"csharpcode\">    <span class=\"rem\">/// &lt;summary&gt;</span>\r\n    <span class=\"rem\">/// Defines the account's &lt;see cref=&quot;LocalizationModel&quot;/&gt;.</span>\r\n    <span class=\"rem\">/// &lt;/summary&gt;</span>\r\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> AccountLM : LocalizationModel\r\n    {\r\n        <span class=\"rem\">//Properties</span>\r\n\r\n        <span class=\"kwrd\">public</span> String FirstName { get; set; }\r\n        <span class=\"kwrd\">public</span> String LastName { get; set; }\r\n        <span class=\"kwrd\">public</span> String Address { get; set; }\r\n        <span class=\"kwrd\">public</span> String Town { get; set; }\r\n        <span class=\"kwrd\">public</span> String Postcode { get; set; }\r\n        <span class=\"kwrd\">public</span> String Birthday { get; set; }\r\n    }</pre>\r\n</div>\r\n<p>As we have no resource that contains our properties&rsquo; localization, it could be a good idea to use the dynamic localization by implementing a custom LocalizationProvider. The custom&nbsp; LocalizationProvider enables the localization on the fly by means\r\n of Microsoft Translator Service (You can find the code implementation in the Localization Library&rsquo;s quickstart).</p>\r\n<p>Next step is to decorate the properties with the attribute for dynamic localization. Below you can see the implementation.</p>\r\n<div>\r\n<pre class=\"csharpcode\">    <span class=\"rem\">/// &lt;summary&gt;</span>\r\n    <span class=\"rem\">/// Defines the account's &lt;see cref=&quot;LocalizationModel&quot;/&gt;.</span>\r\n    <span class=\"rem\">/// &lt;/summary&gt;</span>\r\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> AccountLM : LocalizationModel\r\n    {\r\n        <span class=\"rem\">//Properties</span>\r\n\r\n        [LocalizeDynamically(<span class=\"str\">&quot;FirstNameKey&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;en&quot;</span>, Value = <span class=\"str\">&quot;First name&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;it&quot;</span>, Value = <span class=\"str\">&quot;Nome&quot;</span>)]\r\n        <span class=\"kwrd\">public</span> String FirstName { get; set; }\r\n\r\n        [LocalizeDynamically(<span class=\"str\">&quot;LastNameKey&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;en&quot;</span>, Value = <span class=\"str\">&quot;Last name&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;it&quot;</span>, Value = <span class=\"str\">&quot;Cognome&quot;</span>)]\r\n        <span class=\"kwrd\">public</span> String LastName { get; set; }\r\n\r\n        [LocalizeDynamically(<span class=\"str\">&quot;AddressKey&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;en&quot;</span>, Value = <span class=\"str\">&quot;Address&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;it&quot;</span>, Value = <span class=\"str\">&quot;Indirizzo&quot;</span>)]\r\n        <span class=\"kwrd\">public</span> String Address { get; set; }\r\n\r\n        [LocalizeDynamically(<span class=\"str\">&quot;TownKey&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;en&quot;</span>, Value = <span class=\"str\">&quot;Town&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;it&quot;</span>, Value = <span class=\"str\">&quot;Citt&agrave;&quot;</span>)]\r\n        <span class=\"kwrd\">public</span> String Town { get; set; }\r\n\r\n        [LocalizeDynamically(<span class=\"str\">&quot;PostcodeKey&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;en&quot;</span>, Value = <span class=\"str\">&quot;Postcode&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;it&quot;</span>, Value = <span class=\"str\">&quot;Codice postale&quot;</span>)]\r\n        <span class=\"kwrd\">public</span> String Postcode { get; set; }\r\n\r\n        [LocalizeDynamically(<span class=\"str\">&quot;BirthdayKey&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;en&quot;</span>, Value = <span class=\"str\">&quot;Birthday&quot;</span>)]\r\n        [LocalizeDynamically(Language = <span class=\"str\">&quot;it&quot;</span>, Value = <span class=\"str\">&quot;Data di nascita&quot;</span>)]\r\n        <span class=\"kwrd\">public</span> String Birthday { get; set; }\r\n    }</pre>\r\n</div>\r\n<p>The AccountLM defines the English and Italian localizations for our property whilst the&nbsp; localization for the other languages will be provided by the custom LocalizationProvider. In this way we have completed the LocalizationModel&rsquo;s implementation.</p>\r\n<p>Finally&nbsp; we should only define the bindings among the properties and localized properties and enjoy the localization.</p>\r\n<pre class=\"csharpcode\"><span class=\"kwrd\">&lt;</span><span class=\"html\">TextBlock</span> <span class=\"attr\">Text</span><span class=\"kwrd\">=&quot;<span style=\"background-color:#ffff00\">{Binding ElementName=view, Path=LocalizationModel.FirstName}</span>&quot;</span><span class=\"kwrd\">/&gt;</span>\r\n<span class=\"kwrd\">&lt;</span><span class=\"html\">TextBlock</span> <span class=\"attr\">Text</span><span class=\"kwrd\">=&quot;<span style=\"background-color:#ffff00\">{Binding ElementName=view, Path=LocalizationModel.LastName}</span>&quot;</span><span class=\"kwrd\">/&gt;</span>\r\n<span class=\"kwrd\">&lt;</span><span class=\"html\">TextBlock</span> <span class=\"attr\">Text</span><span class=\"kwrd\">=&quot;<span style=\"background-color:#ffff00\">{Binding ElementName=view, Path=LocalizationModel.Address}</span>&quot;</span><span class=\"kwrd\">/&gt;</span>\r\n<span class=\"kwrd\">&lt;</span><span class=\"html\">TextBlock</span> <span class=\"attr\">Text</span><span class=\"kwrd\">=&quot;<span style=\"background-color:#ffff00\">{Binding ElementName=view, Path=LocalizationModel.Town}</span>&quot;</span><span class=\"kwrd\">/&gt;</span>\r\n<span class=\"kwrd\">&lt;</span><span class=\"html\">TextBlock</span> <span class=\"attr\">Text</span><span class=\"kwrd\">=&quot;<span style=\"background-color:#ffff00\">{Binding ElementName=view, Path=LocalizationModel.Postcode}</span>&quot;</span><span class=\"kwrd\">/&gt;</span>\r\n<span class=\"kwrd\">&lt;</span><span class=\"html\">TextBlock</span> <span class=\"attr\">Text</span><span class=\"kwrd\">=&quot;<span style=\"background-color:#ffff00\">{Binding ElementName=view, Path=LocalizationModel.Birthday}</span>&quot;</span><span class=\"kwrd\">/&gt;</span></pre>\r\n<div>If you want to use a ViewModel as LocalizationModel, the only restriction is that the ViewModel have to implements the INotifyPropertyChanged interface.</div>\r\n<div><a href=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174366\"><img title=\"AccountPMLM\" src=\"http://download.codeplex.com/download?ProjectName=localizationlibrary&DownloadId=174367\" border=\"0\" alt=\"AccountPMLM\" width=\"467\" height=\"146\" style=\"padding-left:0px; padding-right:0px; display:inline; padding-top:0px; border-width:0px\"></a></div>\r\n<div>&nbsp;</div>\r\n<div><strong><em>NOTE:</em></strong><em> This is only a simple sample, all the features provided by the Localization Library will be described in detail in the documentation.</em></div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,localization,Silverlight,MVVM,Windows Phone 7,WP7,Localization Library,Dynamic localization,MVVM-L,Net 3.5,Net 4.0,Mirshahreza,",
  "LastEdited": "2011-09-28T16:03:27.973-07:00"
}