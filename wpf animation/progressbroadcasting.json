{
  "ProjectName": "progressbroadcasting",
  "Title": "Progress Broadcasting Component",
  "Description": "To communicate progress-iteration simply and quickly using a two-part component design.",
  "MovedLink": "https://github.com/TemporalWars/ProgressBroadcaster",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Progress Broadcasting Library and Animated Progress-Bar Control</strong><br>\r\n<a href=\"http://temporalwars.com/CodeHelpers/ProgressBroadcaster\">http://temporalwars.com/CodeHelpers/ProgressBroadcaster</a><br>\r\n<br>\r\nTo communicate progress-iteration simply and quickly using a two-part component design.<br>\r\n<br>\r\nThe first component called the <u>progress-broadcaster</u> is used to communicate progress iteration information during some common collection iteration operation. The information communicated via events is comprised of three pieces of information; count, total\r\n and header. <br>\r\n<br>\r\nThe second component will be a WPF user-control assembly. This WPF user-control is separate from the broadcasting assembly. This separation allows using the broadcasting assembly in other projects, while the WPF user-control can relay this information, in real-time,\r\n on some WPF application's window. <br>\r\n<br>\r\nThe two components are then connected to allow progress information to flow from the\r\n<u>progress-broadcaster</u> directly to the WPF progress-bar user-control.<br>\r\n<br>\r\n<img title=\"ProgressBroadcastingComponentsDiagramPic2_887x512.png\" src=\"/projects/progressbroadcasting/2675f46e-91ba-454a-b07a-60dbd8053d43\" alt=\"ProgressBroadcastingComponentsDiagramPic2_887x512.png\"><br>\r\n<br>\r\nWithin the WPF user-control, a progress-animation algorithm is included. The progress-animation algorithm uses an averaging timer to track the rate of updates sent from the broadcasting component. This information is used to update the progress-bar's animation\r\n over time, which is reflected in the rate of movement for the progress-bar's animation.<br>\r\n<br>\r\nFor my first check-in, only the broadcasting component assembly code is available, which I extracted from my internal 'Common' library. My future check-ins will contain code for the progress-animation class and WPF user-control.<br>\r\n<br>\r\nBen Scharbach<br>\r\n<br>\r\n<br>\r\n<br>\r\n</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,code,component,Diagram,Progress Bar,progress,iteration,broadcaster,progress receiver,progress broadcaster,presentation,animation,ben scharbach,ben,scharbach,temporal wars,",
  "LastEdited": "2017-11-22T10:45:26.663-08:00"
}