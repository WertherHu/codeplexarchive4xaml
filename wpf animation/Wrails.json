{
  "ProjectName": "Wrails",
  "Title": "WPF MVC - Wrails !",
  "Description": "an Implementation of the MVC UI design in WPF - let's call it Wrails....\n\nImplemented by Yonatan Betzer - Bacchus Software Design",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />an Implementation of the MVC UI design in WPF - let&#39;s call it Wrails....<br /><br />Implemented by Yonatan Betzer - Bacchus Software Design<br /><br />This project tries to implement in WPF a framework similar to the one originally developed by the good people of Adobe, for the Flex environments - the Adobe framework was named &quot;Cairngorm&quot;.<br /><br />WPF MVC is a combination of several design patterns, used here to create a great UI implementation framework - both flexible and robust.<br /><br />you can search the web for extensive documentation of the Cairngorm microarchitecture - to learn more about its benefits and architecture. the general principle is explained below :<br /><br />The UI is devided into 3 parts : Model, View, Control<br /><br /><b>Model</b> - represented by all state variables, grouped in a single, singleton, class. (ModelLocator.cs)<br /><b>View</b> - The visible parts of the UI - &quot;Drawings&quot; only - no logic is implemented here ! all the UI controls do is raise special &quot;Cairngorm events&quot; - that are captured and handled by the Control mechanisms.<br />UI object&#39;s properties are bound to the Model&#39;s state variables.<br /><b>Control</b> - the Control consists of four parts :<br />                  <i>Events</i> - several classes of events are created, each class representing a group of related events. each  <br />                                      event has a unique Name.<br />                  <i>Controller</i> -events are registered on the (singleton) controller class : a link is made between an event and the  <br />                                           Command class that handles it.<br />                  <i>Command</i> - each Command class corresponds to an &quot;Event&quot; class - and handles all its events.<br />                                             the command classes contain the UI logic - they can change Model variables, call delegates<br />                                             and handle delegate call results. they can also Dispatch new events for the Controller to catch.<br />                 <i>Delegate</i> - Classes that are used to communicate with lower layers of the Application - calling a web service,<br />                                          using the DAL, BL.... Delegates call methods on the class that called them using the IResponder<br />                                          interface.<br /><br />How do I add a feature on this kind of UI ?<br /><br />a. add a delegate that calles the required logic from &quot;outside&quot; the UI.<br />b. add an Event class, or a new string name to an existing kind. inherit CairngormEvent<br />c. add a command class, implement ICommand and IResponder<br />d. Connect the event and the command - use addCommand(...) on Controller.cs<br />e. create the UI required for your new feature - bind it to state variables on the model. don&#39;t forget to set DataContext = ModelLocator.Singleton !<br />f. have the UI raise your new event, using the static CairngormEventDispatcher.dispatchEvent() command.<br />g. That&#39;s All !<br /><br />I know it seems a bit lengthy at first - but you are gonna thank yourself for using this framework when your app grows !<br /><br />As usual - you don&#39;t really know what it is until you try for yourself...</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,MVC,",
  "LastEdited": "2008-09-07T03:04:49.017-07:00"
}