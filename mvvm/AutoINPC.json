{
  "ProjectName": "AutoINPC",
  "Title": "Computed Fields Auto INPC for Mvvm Light and UWP/UAP",
  "Description": "This very small library is bringing INPC to computed fields with just a single attributes.\r\nIt works with Mvvm Light 5.1.1+ but can be adapted for other versions",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Computed fields AUTO INPC for Mvvm Light</h1>\r\nThis <b>very small</b> library is bringing <b>INPC</b> to <b>computed fields</b> with just a <b>single attribute</b>.<br />It works with Mvvm Light 5.1.1+ but can be adapted for other versions. <br />Current lib has been tested for VS 2015 and UWP/UAP (Windows 10).<br /><br />Auto INPC works against <b>ObservableObject</b> and children classes like <i>ViewModelBase</i> or any class based on ObservableObject (Model classes are often based on the latter).<br />\n<h2>USAGE</h2>\r\n<ol><li>Add the <i>DotBlog.MvvmTools</i> library to your project references</li>\n<li>Add in the constructor a call to <i>AutoInpc.Initialize(this)</i></li>\n<li>Add the <i>ComputedFieldAttribute</i> to all computed fields, specifying the name(s) of &quot;trigger&quot; fields</li></ol>\n\n<h2>SAMPLE</h2>\r\nGiving a Mvvm Light ViewModel declaring the two following properties :<br /><br /><pre>public string FirstName { .... }\npublic string LastName { .... } </pre><br /><br />Now you can create the following property using the special <b>ComputedFieldAttribute</b> and it will automically send an INPC (mostly for the UI) when any trigger field will be modified:<br /><br /><pre>[ComputedField(new []{&quot;FirstName&quot;,&quot;LastName&quot;})]\npublic string FullName =&gt; FirstName + &quot; &quot; + LastName; </pre><br /><br /><i>Do not forget to add in the class constructor a call to AutoInpc.Initialize(this). Keep a token on the returned instance so you can use the suspended mode.</i><br /><br /><pre>public MainViewModel()\n        {\n            token = AutoInpc.Initialize(this);\n            .... }\n</pre><br />\n<h2>BONUS</h2>\r\nAuto INPC library is offering a <b>&quot;suspended mode&quot;</b>. While in this mode no INPC are sent for computed fields, they are all recorded in a waiting list and grouped to avoid double calls.<br />This is very usefull when you have to <i>modify multiple fields at the same time</i> and just want one final INPC for the computed fields, saving CPU and avoiding incomplete data problem in computed fields.<br />\n<h2>What&#39;s in the bag</h2>\r\n<ol><li>The source code of the DLL project</li>\n<li>A test project showing how to use the lib</li></ol>\n\n<h2>Editor</h2>\r\nThis lib has been writen by Olivier Dahan, Microsoft MVP &quot;Windows Platform Dev&quot;, MVP since 7 years.<br />The project is edited by <a href=\"http://www.e-naxos.com\">http://www.e-naxos.com</a> a French company.<br />More doc will be soon available on <a href=\"http://www.e-naxos.com/blog\">http://www.e-naxos.com/blog</a> &quot;Dot.Blog&quot; (in French but Google translator is making a not so bad job ir you&#39;re not speaking French). Just search for &quot;autoinpc&quot;.<br />\n<h2>What next</h2>\r\nIt will be cool to create a Nuget package for example. <br />The lib can also be adapted for other MVVM frameworks.<br /><br />If you want to help and join the project, be welcome!<br />\n<h2>Visual Demo</h2>\r\n<img src=\"http://www.e-naxos.com/download/DemoAutoInpc.gif\" /></div><div class=\"ClearBoth\"></div>",
  "TagList": "mvvm,mvvmlight,computedFields,windows10,uwp,uap,",
  "LastEdited": "2015-08-23T09:21:44.14-07:00"
}