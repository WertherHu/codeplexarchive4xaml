{
  "ProjectName": "Liphofra",
  "Title": "Liphofra",
  "Description": "Liphofra is a collection of all sorts of helpers and supporting types for Windows Phone to aid with creating MVVM projects on the platform.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1>Project Description</h1>\r\n<p>Liphofra is short for &quot;Little Phone Framework&quot; because I'm really bad at thinking of fancy names for my projects. It is an extract and reworked collection of all sorts of helpers and supporting types I used over the years in projects for Windows Phone to\r\n help with creating MVVM projects on the platform.</p>\r\n<p>What's in the package?</p>\r\n<ul>\r\n<li>A basic IoC container implementation </li><li>A lean abstraction of the isolated storage file system </li><li>An event aggregation mechanism </li><li>A PhoneApplicationPage derived base type to aid typical MVVM requirements </li><li>View model base types with fundamental navigation feature support </li><li>An flexible and extensible view model locator mechanism </li><li>Basic value converters and behaviors</li></ul>\r\n<p>I'm open to suggestions and will extend the framework with useful things when I come across them.</p>\r\n<h1>News</h1>\r\n<p><strong><em>2013-11-06: </em></strong></p>\r\n<p>Liphofra version 2.2.1 is now available as NuGet package (package id is &quot;<a href=\"https://www.nuget.org/packages/liphofra\">liphofra</a>&quot;).</p>\r\n<h1>Background</h1>\r\n<p>A lot of people ask me about what frameworks and components I recommend on Windows Phone, and they often are surprised when they learn I don't use an out-of-the-box MVVM framework. Naturally the next question is: why? The truth is that there are a lot of\r\n very good and popular frameworks out there, and without providing a list of them, I still recommend that you check out what's available before you make a decision. My personal choice to not use any of them mostly is based on the following reasons:</p>\r\n<ul>\r\n<li>Some projects I tested over-simplify certain aspects I expect from such a framework, for example view model lifetime. While suitable for simple apps, these details were not sufficient for some professional apps I was working on that became quite complex\r\n with loads and loads of functionality and requirements. </li><li>Other projects took it too far. I've also seen frameworks that require that you deeply integrate them into each and every detail of your app, that introduce rather obscure automatism and convention-based stuff that is e.g. hard to learn for new team members,\r\n and easy to forget if you pause working on a project for some weeks or months. Â´\r\n</li><li>Most projects try to target multiple platforms at the same time, i.e. by providing different builds for Windows Phone, Windows 8 Store Apps and Silverlight, maybe even .NET, all with a similar or identical API. It's a laudable and legitimate goal, for example\r\n to maximize re-use of code and to avoid the necessity to learn different frameworks for different platforms. However, I typically don't aim for things like view model sharing across platforms, and I also think that peculiarities of the Windows Phone platform\r\n (lifetime details, user experience and navigation concepts etc.) don't particularily scream &quot;one size fits all&quot; and should be treated as they are: platform-specific. Most frameworks that don't do this have a somewhat weak feeling to me when I use them on the\r\n phone.</li></ul>\r\n<p>So, if you are looking for maximum code reuse and a multi-platform framework, Liphofra is not for you. If you want to have a highly specialized framework for Windows Phone, give it a try.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-11-06T04:38:09.297-08:00"
}