{
  "ProjectName": "aspnetmvvm",
  "Title": "ASP.NET MVVM",
  "Description": "ASP.NET MVVM provides a framework to implement the Model-View-ViewModel pattern, a.k.a. the Presentation Model pattern in ASP.NET projects. Developers can take advantages of Dependency Injection and Event Broker to write concise, elegant and business focused code.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br /><br />ASP.NET MVVM provides a framework to implement the Model-View-ViewModel pattern, a.k.a. the Presentation Model pattern in ASP.NET projects. Developers can take advantages of Dependency Injection and Event Broker to write concise, elegant and business focused code.<br /><br />The ASP.NET MVVM offers the following benefits:\n<ul><li>Leverage ASP.NET functions, such as web form, user control and data binding</li>\n<li>Achieve a clear separation of concerns </li>\n<li>Facilitate test driven development (TDD)</li>\n<li>Write and maintain simpler code using the attribute annotations</li></ul>\n<br /><b>Details</b>\n<ul><li><a href=\"https://aspnetmvvm.codeplex.com/wikipage?title=How%20does%20it%20do%20Dependency%20Injection&referringTitle=Home\">How does it do Dependency Injection</a></li>\n<li><a href=\"https://aspnetmvvm.codeplex.com/wikipage?title=How%20does%20it%20do%20Event%20Broker&referringTitle=Home\">How does it do Event Broker</a></li>\n<li><a href=\"https://aspnetmvvm.codeplex.com/wikipage?title=How%20does%20it%20compare%20to%20other%20frameworks&referringTitle=Home\">How does it compare to other frameworks</a></li></ul>\n<br /><b>Code Sample</b><br /><br /><b>1. Create ViewModel in aspx</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> _Default : System.Web.UI.Page\n    {\n        [Create]\n        <span style=\"color:Blue;\">public</span> CustomerController controller { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n    }\r\n</pre></div><br /><b>2. Reference ViewModel in ascx</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> CustomerList : System.Web.UI.UserControl\n    {\n        [Inject]\n        <span style=\"color:Blue;\">public</span> ICustomerListcontroller {<span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>;}\n    }\r\n</pre></div><br /><b>3. Subsbribe to events of ViewModel</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> CustomerList : System.Web.UI.UserControl\n    {\n        [Inject]\n        <span style=\"color:Blue;\">public</span> ICustomerList controller {<span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>;}\n\n        [EventSubscription]\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> CustomerListChanged(<span style=\"color:Blue;\">object</span> sender, EventArgs e)\n        {\n            <span style=\"color:Blue;\">this</span>.CustomerGridView.DataSource = controller.Customers;\n            <span style=\"color:Blue;\">this</span>.CustomerGridView.DataBind();\n        }\n    }\r\n</pre></div><br /><b>4. ViewModel is POCO</b><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> CustomerController : ICustomerList\n    {\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">event</span> EventHandler CustomerListChanged= <span style=\"color:Blue;\">delegate</span> {};\n        <span style=\"color:Blue;\">public</span> IEnumerable&lt;Customer&gt; Customers {<span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>;}\n    }\r\n</pre></div><br /><b>Read More about the Design Patterns</b>\n<ul><li><a href=\"http://msdn.microsoft.com/en-us/magazine/dd458800.aspx\">Silverlight Patterns: Model-View-ViewModel In Silverlight 2 Apps</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/dd419663.aspx\">Patterns: WPF Apps With The Model-View-ViewModel Design Pattern</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/cc785479.aspx\">Patterns For Building Composite Applications With WPF</a></li>\n<li><a href=\"http://martinfowler.com/eaaDev/PresentationModel.html\">Presentation Model</a></li>\n<li><a href=\"http://www.codeproject.com/KB/smart/PMinAction.aspx\">Presentation Model in Action</a></li></ul>\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "HintonBR,ASP.NET,MVVM,Presentation Model,",
  "LastEdited": "2010-03-21T07:40:22.417-07:00"
}