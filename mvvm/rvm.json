{
  "ProjectName": "rvm",
  "Title": "RemotableViewModel",
  "Description": "The RemotableViewModel (RVM) library allows sharing of ViewModels accross process boundaries following the Model-View-ViewModel (MVVM) pattern.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>RemotableViewModel</h1>\r\nThe RemotableViewModel (RVM) library allows sharing of ViewModels accross process boundaries following the Model-View-ViewModel (MVVM) pattern. An exported ViewModel can have no, one or several importers. The exporting application itself can still bind onto the ViewModel directly. That is to say, it can be a local and remote ViewModel at the same time, depending on the point of view.<br /><br />The core was initially developed by Siemens Corporate Technology in the course of a proof-of-concept for re-engineering parts of an internal forensic analysis tool at Siemens Corporate Finance, called SInvestigate. Instead of having multiple instances of long-running preprocessing clients, one single user interface should manage several console-based workers. This allows starting the preprocessing clients even via terminal, while viewing and manipulating these on demand through an administration and monitoring application.<br /><br />As the library grew, we realized it has uses beyond our own original application. We decided to spend some of our spare time and to release the library under Apache 2.0 license to the public. <br /><br />The RVM library is not officially maintained by Siemens. But we intend to continue using this public build within SInvestigate, where it completely satisfied our needs. We plan to use it to replace the complete preprocessing client in the near future.<br /><br />The current implementation targets Windows Presentation Foundation (WPF) only, but having different or even mixed technologies for exporting and importing clients is imaginable.<br />\n<h2>Possible fields of application:</h2>\r<ul><li>User Interfaces for console-based executables</li>\n<li>User Interfaces for interaction with Windows Services (having a view outside of session-0-isolation)</li>\n<li>Sharing ViewModels across arbitrary applications, e.g. docking to another UI-application</li>\n<li>User Interfaces for (headless) network computers/devices</li></ul>\n\n<h2>Main Features:</h2>\r<ul><li>Export ViewModels (e.g. from console processes or Windows services) accross process boundaries\n<ul><li>ViewModels derived from base class RemotableViewModel</li>\n<li>Classical ViewModels implementing INotifyPropertyChanged via proxy (lower performance)</li></ul></li>\n<li>Multiple consumers possible (n-to-n, export to many and import from many)</li>\n<li>Nested ViewModels</li>\n<li>ViewModels can contain primitives (strings, integers, â€¦), commands, collections, further  ViewModels</li>\n<li>Discovery of ViewModels</li>\n<li>Configurable communication channel</li></ul>\n\n<h2>Possible Extensions:</h2>\r<ul><li>Annotations for Properties which must not be exported to external processes</li>\n<li>Annotations for Commands which shall be executed locally and not on the exporting ViewModel</li>\n<li>Further implementations, e.g. for Silverlight or even non-c#/non-.NET environments</li>\n<li>Join us and contribute your features!</li></ul>\n<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-11-08T00:21:47.137-08:00"
}