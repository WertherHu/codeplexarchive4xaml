{
  "ProjectName": "fsflow",
  "Title": "F# Dataflow for ViewModels",
  "Description": "F# library for creating bindable variables and dataflow computations. Computed variables can be ordered in a way that prevents unnecessary recomputations.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />F&#35; library for creating bindable variables and dataflow computations. Computed variables can be ordered in a way that prevents unnecessary recomputations.<br /><br /><a href=\"https://fsflow.codeplex.com/wikipage?title=Overview%20of%20functions&referringTitle=Home\">Overview of functions</a><br /><br />WORK IN PROGRESS<br /><br />From the sample:<br /><br /><pre>\n    let resComp =\n        comp {\n            let! a1, a2 = arg1num, arg2num \n            match a1, a2 with\n            | None, None -&gt; return ErrorMessage &quot;Arguments 1 and 2 are not valid integers.&quot;\n            | None, _ -&gt; return ErrorMessage &quot;Argument 1 is not a valid integer.&quot;\n            | _, None -&gt; return ErrorMessage &quot;Argument 2 is not a valid integer.&quot;\n            | Some a1v, Some a2v -&gt;\n                let! o = op\n                match o with\n                | Operation.Add -&gt; return Result (a1v + a2v)\n                | Operation.Subs -&gt; return Result (a1v - a2v)\n                | Operation.Mult -&gt; return Result (a1v * a2v)\n                | Operation.Div -&gt; return if a2v = 0I then ErrorMessage &quot;Cannot divide by 0.&quot; else DivResult (a1v / a2v, a1v % a2v)\n                | _ -&gt; ()\n        } \n</pre>This computation expression creates a bound variable which does not react to changes in <span class=\"codeInline\">op</span> (the variable containing the selected operation) by automatic desubscribing if one of the arguments is currently invalid.<br />FsFlow is not event-based like Rx but uses a breadth-first traversal if computations are defined in the correct order, so there are no multiple updates from a single change or batch of changes (you can delay refresh using  <span class=\"codeInline\">Flow.defer()</span>).<br /><br />Current state: ALPHA<br />Planned: Reactive collections, optimalization, documentation</div><div class=\"ClearBoth\"></div>",
  "TagList": "f#,dataflow,reactive,viewmodel,mvvm,",
  "LastEdited": "2013-05-19T12:30:38.883-07:00"
}