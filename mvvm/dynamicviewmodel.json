{
  "ProjectName": "dynamicviewmodel",
  "Title": "DynamicViewModel: MVVM using POCOs with .NET 4.0",
  "Description": "This project aims to provide a way to implement the Model View ViewModel (MVVM) architectural pattern using Plain Old CLR Objects (POCOs) while taking full advantage of .NET 4.0 DynamicObject Class.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1>Project Description</h1>\r\n<p>This project aims to provide a way to implement the Model View ViewModel (MVVM) architectural pattern using Plain Old CLR Objects (POCOs) while taking full advantage of .NET 4.0 DynamicObject Class.</p>\r\n<p>Taking advantage of the .NET 4.0 and the&nbsp;<a title=\"Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.\" href=\"http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.aspx\" target=\"_blank\">DynamicObject</a>&nbsp;Class,\r\n we can create a type deriving from the DynamicObject Class and&nbsp;specify dynamic behavior at run time. Furthermore, we can implement the&nbsp;<a title=\"Notifies clients that a property value has changed.\" href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx\" target=\"_blank\">INotifyPropertyChanged</a>&nbsp;Interface\r\n on the derived type making it a good candidate for Data Binding.</p>\r\n<h1>Binding to properties</h1>\r\n<p>There is no difference in binding. You define the property name as below:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBox</span>\n     <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Path=FirstName, UpdateSourceTrigger=PropertyChanged}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span></pre>\r\n</div>\r\n<h1>Binding to methods</h1>\r\n<p>There is no difference in binding. For methods you need to bind to an ICommand Interface and since the DynamicViewModel can invoke methods on the model (with or withour args) you can use CommandBindings.</p>\r\n<div>Adding CommandBindings from XAML:\r\n<div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">StackPanel.CommandBindings</span><span style=\"color:blue\">&gt;</span>\n     <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">CommandBinding</span>\n         <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Static m:ContactView.ClearNamesCommand}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\n     <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">CommandBinding</span>\n         <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Static m:ContactView.NavigateUriCommand}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\n <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">StackPanel.CommandBindings</span><span style=\"color:blue\">&gt;</span></pre>\r\n</div>\r\n<div>Binding a button click to a method with no arguments:</div>\r\n<div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Button</span>\n     <span style=\"color:red\">Content</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Clear Names</span><span style=\"color:black\">&quot;</span>\n     <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Static m:ContactView.ClearNamesCommand}</span><span style=\"color:black\">&quot; </span><span style=\"color:blue\">/&gt;</span></pre>\r\n</div>\r\n</div>\r\n<div>Binding a hyperlink to a method passing the an argument via CommandParameter:</div>\r\n<div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Hyperlink</span>\n    <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{x:Static m:ContactView.NavigateUriCommand}</span><span style=\"color:black\">&quot;</span>\n    <span style=\"color:red\">CommandParameter</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://nikosbaxevanis.com</span><span style=\"color:black\">&quot;</span>\n    <span style=\"color:red\">NavigateUri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">nikosbaxevanis.com</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>nikosbaxevanis.com<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Hyperlink</span><span style=\"color:blue\">&gt;</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<h1>Wiring view commands with methods of the model</h1>\r\n<p>Here is how the View's DataContext is initialized properly to accept the DynamicViewModel(Of TModel) Class wrapper around the model class:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">internal</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> ContactView : UserControl\n{\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> RoutedCommand ClearNamesCommand  = <span style=\"color:blue\">new</span> RoutedCommand();\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> RoutedCommand NavigateUriCommand = <span style=\"color:blue\">new</span> RoutedCommand();\n \n    <span style=\"color:blue\">public</span> ContactView()\n    {\n        InitializeComponent();\n \n        <span style=\"color:green\">// Create a new instance. Once created</span>\n        <span style=\"color:green\">// do not call methods directly on this</span>\n        <span style=\"color:green\">// object. (Use the dynamic viewModel).</span>\n        <span style=\"color:blue\">var</span> instance  = <span style=\"color:blue\">new</span> ContactDetails() {\n            FirstName = <span style=\"color:#a31515\">&quot;Nikos&quot;</span>,\n            LastName  = <span style=\"color:#a31515\">&quot;Baxevanis&quot;</span>\n        };\n \n        <strong><span style=\"color:blue\">dynamic</span> viewModel</strong> = <span style=\"color:blue\">new</span> DynamicViewModel&lt;ContactDetails&gt;(instance);\n \n        <span style=\"color:green\">// Wire the ClearNamesCommand from the view to the viewModel.</span>\n        CommandManager.RegisterClassCommandBinding(<span style=\"color:blue\">typeof</span>(ContactView),\n            <span style=\"color:blue\">new</span> CommandBinding(\n                ClearNamesCommand,\n                (sender, e) =&gt; { viewModel.ClearFullName(); },\n                (sender, e) =&gt; { e.CanExecute = !String.IsNullOrWhiteSpace(viewModel.FullName); }));\n \n        <span style=\"color:green\">// Wire the NavigateUriCommand from the view to the viewModel.</span>\n        CommandManager.RegisterClassCommandBinding(<span style=\"color:blue\">typeof</span>(ContactView),\n            <span style=\"color:blue\">new</span> CommandBinding(\n                NavigateUriCommand,\n                (sender, e) =&gt; { viewModel.NavigateTo(e.Parameter); },\n                (sender, e) =&gt; { e.CanExecute = String.IsNullOrWhiteSpace(viewModel.FullName); }));\n \n        <strong>DataContext = viewModel;</strong>\n    }\n}</pre>\r\n</div>\r\n<h1>The Model (POCO)</h1>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\n\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">sealed</span> <span style=\"color:blue\">class</span> Customer\n{\n    <span style=\"color:blue\">public</span> String FirstName\n    {\n        <span style=\"color:blue\">get</span>\n        {\n            <span style=\"color:blue\">return</span> firstName;\n        }\n\n        <span style=\"color:blue\">set</span>\n        {\n            firstName = value;\n            SetFullName();\n        }\n    }\n\n    <span style=\"color:blue\">public</span> String LastName\n    {\n        <span style=\"color:blue\">get</span>\n        {\n            <span style=\"color:blue\">return</span> lastName;\n        }\n\n        <span style=\"color:blue\">set</span>\n        {\n            lastName = value;\n            SetFullName();\n        }\n    }\n\n    <span style=\"color:blue\">public</span> String FullName\n    {\n        <span style=\"color:blue\">get</span>;\n        <span style=\"color:blue\">set</span>;\n    }\n}</pre>\r\n</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Dynamic,MVVM,.NET 4.0,POCO,Dynamics,",
  "LastEdited": "2012-05-22T07:35:11.63-07:00"
}