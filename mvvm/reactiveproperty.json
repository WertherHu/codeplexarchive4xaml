{
  "ProjectName": "reactiveproperty",
  "Title": "ReactiveProperty - MVVM Extensions for Rx",
  "Description": "ReactiveProperty is MVVM and Asynchronous Extensions for Reactive Extensions. Target Framework is .NET 4.0 Client Profile, Silverlight 4, Windows Phone 7.1.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Important information</h1>\r<b><u>This project has been moved to <a href=\"https://github.com/runceel/ReactiveProperty\">github</a>.</u></b><br /><br /><img src=\"/projects/reactiveproperty/bfe42aa4-06fb-495d-b4ba-a6ecdf67a84c\" alt=\"RxMVVMLoop.jpg\" title=\"RxMVVMLoop.jpg\" /><br />ReactiveProperty is MVVM and Asynchronous Extensions for <a href=\"http://msdn.microsoft.com/en-us/data/gg577609\">Reactive Extensions</a>.<br />Target Framework is .NET 4.0 Client Profile, Silverlight 4, Silverlight 5, Windows Phone 7.1.<br /><br /><b>Features</b>\n<ul><li>ReactiveProperty - Two-way bindable IObservable, from V to VM and VM to V</li>\n<li>ReactiveCommand - Convert observable condition sequence to ICommand</li>\n<li>Easy to use asynchronous extension for WebClient/WebRequest/WebResponse/Stream</li>\n<li>Typesafe convert INotifyPropertyChanged to ReactiveProperty</li>\n<li>Event to ReactiveProperty Blend trigger</li>\n<li>There means V -&gt; VM -&gt; M -&gt; VM -&gt; V completely connected in reactive, everything is asynchronous.</li>\n<li>NuGet Installation support.</li>\n<li><a href=\"http://nuget.org/List/Packages/ReactiveProperty\">PM&gt; ReactiveProperty</a>(NET40, SL4, SL5, WP7.Rx-Main - for Rx Stable)</li>\n<li><a href=\"http://nuget.org/List/Packages/ReactiveProperty-Experimental\">PM&gt; ReactiveProperty-Experimental</a>(NET40, SL4, SL5, WP7.Rx-Main - for Rx Experimental)</li>\n<li><a href=\"http://nuget.org/List/Packages/ReactiveProperty-WP7\">PM&gt; ReactiveProperty-WP7</a>(Microsoft.Phone.Reactive)</li></ul>\n\n<ul><li><b>ReactiveProperty makes viewmodel extremely clean</b></li></ul>\n<br /><b>Note:</b><br />ReactiveProperty is not replace existing MVVM Framework.<br />ReactiveProperty no provides ViewModelBase, Messenger, etc.<br />I recommend that use MVVM Framework together.<br />\n<h2>ReactiveProperty &amp; ReactiveCommand Basics</h2>\r<img src=\"/projects/reactiveproperty/b730c56c-845d-43d0-a1ad-1847cc073dfd\" alt=\"HelloRP.jpg\" title=\"HelloRP.jpg\" /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">StackPanel</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock</span><span style=\"color:Blue;\">&gt;</span>Appears chracter after 1 second.<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TextBlock</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Green;\">&lt;!-- ReactiveProperty binding &quot;.Value&quot; --&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBox</span> <span style=\"color:Red;\">Text</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding InputText.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock</span> <span style=\"color:Red;\">Text</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding DisplayText.Value}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Button</span> <span style=\"color:Red;\">Command</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding ReplaceTextCommand}</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>Is TextBox empty or not?<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Button</span><span style=\"color:Blue;\">&gt;</span>\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">StackPanel</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> MainWindowViewModel\n{\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; InputText { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; DisplayText { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Blue;\">public</span> ReactiveCommand ReplaceTextCommand { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n\n    <span style=\"color:Blue;\">public</span> MainWindowViewModel()\n    {\n        InputText = <span style=\"color:Blue;\">new</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt;(); <span style=\"color:Green;\">// binding from UI</span>\n\n        DisplayText = InputText             <span style=\"color:Green;\">// from UI to UI value routing</span>\n            .Select(s =&gt; s.ToUpper())       <span style=\"color:Green;\">// rx query1</span>\n            .Delay(TimeSpan.FromSeconds(1)) <span style=\"color:Green;\">// rx query2</span>\n            .ToReactiveProperty();          <span style=\"color:Green;\">// convert to ReactiveProperty</span>\n\n        ReplaceTextCommand = InputText             <span style=\"color:Green;\">// declarative set canexecute</span>\n            .Select(s =&gt; !<span style=\"color:Blue;\">string</span>.IsNullOrEmpty(s)) <span style=\"color:Green;\">// condition sequence of CanExecute</span>\n            .ToReactiveCommand();                  <span style=\"color:Green;\">// convert to ReactiveCommand</span>\n\n        <span style=\"color:Green;\">// ReactiveCommand&#39;s Subscribe is set ICommand&#39;s Execute</span>\n        <span style=\"color:Green;\">// ReactiveProperty.Value set is push(&amp; set) value</span>\n        ReplaceTextCommand.Subscribe(_ =&gt; InputText.Value = <span style=\"color:#A31515;\">&quot;Hello, ReactiveProperty!&quot;</span>);\n    }\n}\r\n</pre></div>ReactiveProperty&#39;s direct binding is very simple and clear syntax.<br />\n<h2>Event to ReactiveProperty</h2>\r<img src=\"/projects/reactiveproperty/65a186b1-36d4-4dba-b655-2d067209ce56\" alt=\"EventToReactive.jpg\" title=\"EventToReactive.jpg\" /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Grid</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Green;\">&lt;!-- Use Blend SDK&#39;s Interaction Trigger --&gt;</span>\n    <span style=\"color:Green;\">&lt;!-- Event binding to ReactiveProperty --&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">i</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Interaction.Triggers</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">i</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">EventTrigger</span> <span style=\"color:Red;\">EventName</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">MouseMove</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n            <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">r</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">EventToReactive</span> <span style=\"color:Red;\">ReactiveProperty</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding MouseMove}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n        <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">i</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">EventTrigger</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">i</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Interaction.Triggers</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock</span> <span style=\"color:Red;\">Text</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding CurrentPoint.Value}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Grid</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> EventToReactiveViewModel\n{\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;MouseEventArgs&gt; MouseMove { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; CurrentPoint { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n\n    <span style=\"color:Blue;\">public</span> EventToReactiveViewModel()\n    {\n       <span style=\"color:Green;\">// event binding from UI</span>\n        MouseMove = <span style=\"color:Blue;\">new</span> ReactiveProperty&lt;MouseEventArgs&gt;(mode: ReactivePropertyMode.None);\n\n        CurrentPoint = MouseMove\n            .Select(m =&gt; m.GetPosition(<span style=\"color:Blue;\">null</span>))\n            .Select(p =&gt; <span style=\"color:Blue;\">string</span>.Format(<span style=\"color:#A31515;\">&quot;X:{0} Y:{1}&quot;</span>, p.X, p.Y))\n            .ToReactiveProperty();\n    }\n}\r\n</pre></div><br />other feature, Bindable Func&lt;object, object&gt; Converter and IgnoreEventArgs property for improve testability.<br />more details, see Sample/EventToReactive<br />\n<h2>Asynchronous Operation</h2>\r\n<img src=\"/projects/reactiveproperty/52707b7e-34fa-436c-b90a-295ad058074f\" alt=\"Asynchronous.jpg\" title=\"Asynchronous.jpg\" /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">StackPanel</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Button</span> <span style=\"color:Red;\">Command</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding DownloadCommand}</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>Download Start<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Button</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock</span> <span style=\"color:Red;\">Text</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding ProgressText.Value}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBlock</span> <span style=\"color:Red;\">Text</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding DisplayText.Value}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">FontSize</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">10</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">StackPanel</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// using Codeplex.Reactive.Asynchronous; // appear Asynchronous Extension Methods</span>\n<span style=\"color:Green;\">// using Codeplex.Reactive.Extensions;   // appear Utility Extension Methods</span>\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> AsynchronousViewModel\n{\n    <span style=\"color:Blue;\">public</span> ReactiveCommand DownloadCommand { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; } <span style=\"color:Green;\">// a search button</span>\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; DisplayText { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; ProgressText { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n\n    <span style=\"color:Blue;\">public</span> AsynchronousViewModel()\n    {\n        <span style=\"color:Green;\">// two kinds of notifier(Codeplex.Reactive.Notifiers)</span>\n        <span style=\"color:Blue;\">var</span> network = <span style=\"color:Blue;\">new</span> CountNotifier();\n        <span style=\"color:Blue;\">var</span> progress = <span style=\"color:Blue;\">new</span> ScheduledNotifier&lt;DownloadProgressChangedEventArgs&gt;();\n\n        <span style=\"color:Green;\">// when downloading, buttons IsEnabled == false</span>\n        DownloadCommand = network.Select(x =&gt; x == CountChangedStatus.Empty)\n            .ToReactiveCommand();\n\n        <span style=\"color:Green;\">// ***ObservableAsync is easy asynchrnous operator for Rx</span>\n        DisplayText = DownloadCommand\n            .SelectMany(_ =&gt;\n            {\n                network.Increment(); <span style=\"color:Green;\">// connect start</span>\n                <span style=\"color:Blue;\">return</span> <span style=\"color:Blue;\">new</span> WebClient().DownloadStringObservableAsync(<span style=\"color:Blue;\">new</span> Uri(<span style=\"color:#A31515;\">&quot;http://bing.com/&quot;</span>), progress)\n                    .Finally(() =&gt; network.Decrement()); <span style=\"color:Green;\">// connect end</span>\n            })\n            .OnErrorRetry((WebException e) =&gt; DisplayText.Value = <span style=\"color:#A31515;\">&quot;ERROR&quot;</span>) <span style=\"color:Green;\">//  error handling and resubscripte</span>\n            .ToReactiveProperty();\n\n        ProgressText = progress\n            .Select(e =&gt; <span style=\"color:Blue;\">string</span>.Format(<span style=\"color:#A31515;\">&quot;{0}/{1} {2}%&quot;</span>,\n                e.BytesReceived, e.TotalBytesToReceive, e.ProgressPercentage))\n            .ToReactiveProperty();\n    }\n}\r\n</pre></div><br />WebClient/WebRequest/WebResponse/Stream &#39;s Extension Methods return IObserable&lt;T&gt;.<br />If passing ScheduledNotifier, report to notifier.<br />SignalNotifier makes easy manage to network connection status.<br />more details, see Samples/Asynchronous<br />\n<h2>Validation</h2>\r<img src=\"/projects/reactiveproperty/660c132f-cf79-4999-b8ad-dc286a0f6e26\" alt=\"ReactivePropertyValidation.jpg\" title=\"ReactivePropertyValidation.jpg\" /><br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n[Required]\n[Range(0, 100)]\n<span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; ValidationAttr { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n<span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; ValidationData { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n<span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; ValidationNotify { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n\n<span style=\"color:Blue;\">public</span> ValidationViewModel()\n{\n    <span style=\"color:Green;\">// DataAnnotation Attribute, call SetValidateAttribute and select self property</span>\n    <span style=\"color:Green;\">// Note:error result dispatch to IDataErrorInfo, not exception. Therefore, XAML is ValidatesOnDataErrors=True</span>\n    ValidationAttr = <span style=\"color:Blue;\">new</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt;()\n        .SetValidateAttribute(() =&gt; ValidationAttr);\n\n    <span style=\"color:Green;\">// IDataErrorInfo, call SetValidateError and set validate condition</span>\n    <span style=\"color:Green;\">// null is success(have no error), string is error message</span>\n    ValidationData = <span style=\"color:Blue;\">new</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt;()\n        .SetValidateError(s =&gt; s.All(Char.IsUpper) ? <span style=\"color:Blue;\">null</span> : <span style=\"color:#A31515;\">&quot;not all uppercase&quot;</span>);\n\n    <span style=\"color:Green;\">// INotifyDataErrorInfo, call SetValidateNotifyErro and set validate condition</span>\n    <span style=\"color:Green;\">// first argument is self observable sequence</span>\n    <span style=\"color:Green;\">// null is success(have no error), IEnumerable is error messages</span>\n    ValidationNotify = <span style=\"color:Blue;\">new</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt;()\n        .SetValidateNotifyError(self =&gt; self\n            .Delay(TimeSpan.FromSeconds(3)) <span style=\"color:Green;\">// asynchronous validation</span>\n            .Select(s =&gt; <span style=\"color:Blue;\">string</span>.IsNullOrEmpty(s) ? <span style=\"color:Blue;\">null</span> : <span style=\"color:Blue;\">new</span>[] { <span style=\"color:#A31515;\">&quot;not empty string&quot;</span> }));\n}\r\n</pre></div><br />Supporting three types validation.<br />more details, see Sample/Validation.<br />\n<h2>Synchronize existing models</h2>\r\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// model...</span>\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> ObservableObject : INotifyPropertyChanged\n{\n    <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span> name;\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> name; }\n        <span style=\"color:Blue;\">set</span>\n        {\n            name = value;\n            PropertyChanged(<span style=\"color:Blue;\">this</span>, <span style=\"color:Blue;\">new</span> PropertyChangedEventArgs(<span style=\"color:#A31515;\">&quot;Name&quot;</span>));\n        }\n    }\n\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">event</span> PropertyChangedEventHandler PropertyChanged = (_, __) =&gt; { };\n}\n\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> PlainObject\n{\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n}\n\n<span style=\"color:Green;\">// Synchroinize exsiting models.</span>\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> SynchronizeObjectViewModel\n{\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; TwoWay { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; OneWay { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">string</span>&gt; OneWayToSource { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    \n    <span style=\"color:Blue;\">public</span> SynchronizeObjectViewModel()\n    {\n        <span style=\"color:Blue;\">var</span> inpc = <span style=\"color:Blue;\">new</span> ObservableObject { Name = <span style=\"color:#A31515;\">&quot;Bill&quot;</span> };\n        <span style=\"color:Blue;\">var</span> poco = <span style=\"color:Blue;\">new</span> PlainObject { Name = <span style=\"color:#A31515;\">&quot;Steve&quot;</span> };\n\n        <span style=\"color:Green;\">// TwoWay synchronize</span>\n        TwoWay = inpc.ToReactivePropertyAsSynchronized(x =&gt; x.Name);\n\n        <span style=\"color:Green;\">// OneWay synchronize (ObserveProperty converts INotifyPropertyChanged to IObservable)</span>\n        OneWay = inpc.ObserveProperty(x =&gt; x.Name).ToReactiveProperty();\n\n        <span style=\"color:Green;\">// OneWayToSource synchronize</span>\n        OneWayToSource = ReactiveProperty.FromObject(poco, x =&gt; x.Name);\n    }\n}\r\n</pre></div><br />using with existing MVVM Framework, auto generated models, etc.<br />more details see sample/SynchronizeObject<br />\n<h2>Serialization</h2>\r<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">// a ViewModel</span>\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> SerializationViewModel\n{\n    <span style=\"color:Green;\">// no attribute, simply serialize/deserialize</span>\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">bool</span>&gt; IsChecked { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    [IgnoreDataMember] <span style=\"color:Green;\">// ignore serialize target</span>\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">int</span>&gt; SelectedIndex { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n    [DataMember(Order = 3)] <span style=\"color:Green;\">// deserialize order</span>\n    <span style=\"color:Blue;\">public</span> ReactiveProperty&lt;<span style=\"color:Blue;\">int</span>&gt; SliderPosition { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">set</span>; }\n}\n\n<span style=\"color:Green;\">// case Windows Phone 7 TombStone</span>\n<span style=\"color:Blue;\">private</span> SerializationViewModel viewmodel = <span style=\"color:Blue;\">new</span> SerializationViewModel();\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">string</span> viewmodelData = <span style=\"color:Blue;\">null</span>;\n\n<span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> OnNavigatingFrom(System.Windows.Navigation.NavigationEventArgs e)\n{\n    viewmodelData = SerializeHelper.PackReactivePropertyValue(viewmodel);\n}\n\n<span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)\n{\n    SerializeHelper.UnpackReactivePropertyValue(viewmodel, viewmodelData);\n}\r\n</pre></div><br />Supporting serialize ignore and deserialize order by DataAnnotations.<br />more details, see Sample/Serialization.<br />\n<h2>Author info</h2>\rYoshifumi Kawai a.k.a. neuecc is software developer in Tokyo, Japan.<br />Awarded Microsoft MVP for Visual C# since April, 2011.<br />I am interested in Linq and Reactive Extensions very well.<br />Representative of my created library is <a href=\"http://linqjs.codeplex.com/\">linq.js - LINQ to Objects for JavaScript.</a><br />And other many libraries see -&gt; <a href=\"http://www.codeplex.com/site/users/view/neuecc\">Codeplex users/neuecc</a><br /><br />Blog : <a href=\"http://neue.cc\">http://neue.cc</a> (JPN)<br />Twitter : <a href=\"http://twitter.com/neuecc\">http://twitter.com/neuecc</a> (JPN)</div><div class=\"ClearBoth\"></div>",
  "TagList": "Rx,Reactive Extensions,MVVM,",
  "LastEdited": "2014-10-05T13:08:48.777-07:00"
}