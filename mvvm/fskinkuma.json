{
  "ProjectName": "fskinkuma",
  "Title": "Kinkuma Framework F# (Prism based F# MVVM Support Library)",
  "Description": "Kinkuma FrameworkをベースにF#でViewModelやModelを記述することを前提にした補助ライブラリです。",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>概要</h1>\rKinkuma FrameworkをベースにF&#35;でViewModelやModelを記述することを前提にした補助ライブラリです&#12290;<br />\n<h1>特徴</h1>\rF#向けに作られているため、C#向けに作られたライブラリと違い違和感なく使えるように目指しています。<br />例として以下のようにプロパティやコマンドを定義したクラスを作成できます。また、InteractionRequest&lt;T&gt;.Raiseメソッドを拡張したRaiseAsyncを使うことで非同期ワークフロー内で同期的にViewModelからViewへリクエストを投げてレスポンスを受け取ることが出来ます。<br /><br /><pre>\n// ソースコード内のサンプルプロジェクトから抜粋\nnamespace KinkumaFramework.FSharp.HelloWorld.ViewModel\n\nopen System\nopen System.Windows\nopen System.ComponentModel.DataAnnotations\nopen Microsoft.Practices.Prism.Interactivity.InteractionRequest\nopen Microsoft.Practices.Prism.Commands\nopen Okazuki.MVVM.PrismSupport.Interactivity\nopen Okazuki.MVVM.PrismSupport.FSharp\nopen KinkumaFramework.FSharp.HelloWorld.Model\n\n/// MainWindow用のViewModel\ntype MainViewModel() as x =\n    inherit FsValidatableViewModelBase()\n\n    let mutable name = Unchecked.defaultof&lt;string&gt;\n\n    let mutable selected = Unchecked.defaultof&lt;string&gt;\n\n    let mutable alertCommand = Unchecked.defaultof&lt;DelegateCommand&gt;\n\n    let alertRequest = InteractionRequest&lt;ShowMessageBoxConfirmation&gt;()\n\n    do\n        x.ValidateObject()\n\n    /// 名前(必須入力項目)\n    [&lt;Required(ErrorMessage = &quot;名前を入力してください&quot;)&gt;]\n    member x.Name\n        with get() = name\n        and set v = x.set(&amp;name, v, &lt;@ x.Name @&gt;)\n\n    /// 選択結果を表すメッセージ\n    member x.Selected\n        with get() = selected\n        and set v = x.set(&amp;selected, v, &lt;@ x.Selected @&gt;)\n\n    /// Viewへ通知を行うためのInteractionRequest\n    member x.AlertRequest = alertRequest\n\n    /// ボタンが押された時のコマンド\n    member x.AlertCommad = x.command(&amp;alertCommand, x.AlertExecute, x.CanAlertExecute)\n\n    /// コマンドの処理\n    member private x.AlertExecute() =\n        async {\n            let message = greet x.Name\n            let! result = x.AlertRequest.RaiseAsync(\n                            ShowMessageBoxConfirmation(\n                                Title = &quot;確認&quot;, \n                                Content = greet x.Name, \n                                Button = Nullable&lt;MessageBoxButton&gt;(MessageBoxButton.OKCancel)))\n            x.Selected &lt;- match result.Confirmed with\n                            | true -&gt; &quot;OKが押されました&quot;\n                            | false -&gt; &quot;Cancelが押されました&quot;\n        } |&gt; Async.StartImmediate\n\n    /// AlertCommandの実行可否判定\n    member private x.CanAlertExecute() = not (x.HasErrors)\n</pre><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2011-06-28T06:27:09.307-07:00"
}