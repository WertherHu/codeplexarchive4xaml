{
  "ProjectName": "polymod",
  "Title": "Polymod.NET",
  "Description": "Polymod.NET is an non-intrusive framework written in C# that gives you excel-like ability to add 'Formulas' to existing domain objects. Polymod.NET will wrap POCO into self-updating and self-validating models so you don't have to wire up INotifyPropertyChanged or IDataErrorInfo manually.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Polymod.NET is an non-intrusive framework written in C&#35; that gives you excel-like ability to add &#39;Formulas&#39; to existing domain objects. Polymod.NET will wrap POCO into self-updating and self-validating models so you don&#39;t have to wire up INotifyPropertyChanged or IDataErrorInfo manually.<br /><br /><b>How does it work?</b><br />Polymod.NET creates a dynamic wrapper for a given type. The wrapper exposes all properties of the wrapped object and can also contain formulas that interrogate the wrapped object&#39;s properties. The formulas are self-notifying, so that defining formula C = A + B means that C will change if either A or B changes. You do not have to wire up INotifyPropertyChanged and fire up PropertyChanged, the wrapper handles that for you very elegantly.<br /><br /><b>Validation</b><br />Polymod.NET uses <a href=\"http://rulesengine.codeplex.com/\">RulesEngine</a> project to add validation to the wrappers. The wrapper implements IDataErrorInfo, which interrogates the rules for validity.<br /><br /><b>Samples</b><br /><a href=\"/projects/polymod/5228b276-5e33-4c5c-ac9a-ca16d5a6d5f7\">Sample 1</a>: Shows how you can have POCO Order, OrderItem domain objects, use Polymod.NET to add metadata, and result in a self-updating, self-validating WPF UI.</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,Model View Presenter,Modeling,notification,IDataErrorInfo,validation,Rules Engine,.NET,C#,DLR,MVC,Fluent Interface,INotifyPropertyChang,MVVM,Binding,Policy Injection,",
  "LastEdited": "2012-04-25T21:57:40.993-07:00"
}