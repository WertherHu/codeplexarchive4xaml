{
  "ProjectName": "jsmapper",
  "Title": "JsMapper",
  "Description": "JsMapper creates Javascript MVVM-Code (support for Backbone and KnockoutJs atm) from your (Domain-) Classes with support of DataAnnotations",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>JsMapper</h1>\rJsMapper creates Javascript ViewModel-Code (support for Backbone and KnockoutJs atm) from your<br />(Domain-) Classes with support of DataAnnotations.<br /><br /><img src=\"http://10art.ch/jsmapper.png\" /><br />\n<h2>Why?</h2>\rPeople who are writing backend-systems with ASP.NET Web API and/or SignalR have very cool possibilities to serve rich web-frontends.<br />Thanks to ViewModel-libraries like Backbone.JS, you can easily manipulate data-records with client-side validations, included GET/POST/PUT/DELETE-operations and much more.<br /><br />JsMapper allows you to create these viewModels with almost no effort.<br />Currently you can choose between Backbone and KnockoutJS as output.<br />\n<h2>What&#39;s new in Version 0.2?</h2>\rVersion 0.2 comes with a Standalone-Exporter, as well as support for TypeScript.<br />\n<h2>Simple Usage-Exapmle</h2>\rHere&#39;s an example of a simple class:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n[JsModel(<span style=\"color:#A31515;\">&quot;api/employee&quot;</span>)]\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> Employee\n{\n    [Key]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> Id { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n    [Required, MaxLength(30)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Name { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n    [MinLength(2), DefaultValue(<span style=\"color:#A31515;\">&quot;Mr.&quot;</span>)]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Salutation { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n\n    [EmailAddress]\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> EmailAddress { <span style=\"color:Blue;\">get</span>; <span style=\"color:Blue;\">set</span>; }\n}\r\n</pre></div>As you can see, all you need to do is to add the JsModelAttribute to your class.<br />If you&#39;re already using ValidationAttributes, you&#39;ll get client-side ViewModel-validation for free :)<br /><br />On your server-initialisation (for exapmle Global.asax.cs), you need to configurate the JsModelManager.<br />You can use the Fluent-Interface to do so:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\nJsModelManager.ConfigMngr.Configurate(\n    <span style=\"color:Blue;\">new</span> JsModelFluentConfig()\n        .UseDefaultNamespace(<span style=\"color:#A31515;\">&quot;app.models&quot;</span>)\n        .ScanForViewModels()\n        .AndCacheOutput()\n);\r\n</pre></div><br />Next step is to get the output.<br />In this exapmle, I am using ASP.NET MVC and I create a JsController, which returns the MVVM as Backbone-Model:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> ActionResult Models()\n{\n    <span style=\"color:Blue;\">var</span> m = JsModelManager.GetAllJsOutput&lt;Backbone&gt;();\n    <span style=\"color:Blue;\">return</span> JavaScript(m);\n}\r\n</pre></div><br /><b>Done!</b><br />Just reference the javascript-libs (in this case backbone.js) and the Js-output. <br />That&#39;s it... Now you just need to create a nice frontend around the VMs. </div><div class=\"ClearBoth\"></div>",
  "TagList": "javascript,Mapper,MVVM,Backbone,KnockoutJs,mapping,web development,",
  "LastEdited": "2014-04-02T06:24:30.897-07:00"
}