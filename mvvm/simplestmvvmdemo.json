{
  "ProjectName": "simplestmvvmdemo",
  "Title": "The simplest demo for MVVM",
  "Description": "This project is setup for MVVM newbie. You could build your own simplest demo just in seconds following this project.\r\n\r\nHope it will help you. Thanks!",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Project Description</h1>\r\n<br />This project just give us a very simple demo that could be used while learning mvvm. <br /><br />It looks like below...<br /><br /><img src=\"/projects/simplestmvvmdemo/2ea1e708-81f2-4a6e-b010-8488290a2248\" alt=\"1.jpg\" title=\"1.jpg\" /><br /><br /><i>You could visit <a href=\"http://blog.chenxu.me/post/detail?id=773989fc-9404-4186-a627-5dec1d989e43\">here</a> for more detailed description of this demo if you can read in Chinese.</i><br /><br /><br /><br />\n<h1>Guide</h1>\r\n\n<h2>Step 1. Code preparation</h2>\r<b>a.  Prepare ViewModelBase</b><br /><pre>\npublic abstract class ViewModelBase : INotifyPropertyChanged{\n \n    public event PropertyChangedEventHandler PropertyChanged;\n  \n    \n    //Send a msg to client while the property is changed\n    public void RaisePropertyChanged(string propertyName)\n    {\n        PropertyChangedEventHandler handler = PropertyChanged;\n  \n        if (handler != null)\n        {\n            handler(this, new PropertyChangedEventArgs(propertyName));\n        }\n    }\n}\n</pre><br /><br /><br /><b>Prepare DelegateCommand</b><br /><pre>\npublic class DelegateCommand : ICommand{\n    readonly Action&lt;object&gt; _execute;\n    readonly Predicate&lt;object&gt; _canExecute;\n  \n    public DelegateCommand(Action&lt;object&gt; execute)\n        : this(execute, null)\n    {\n    }\n  \n    public DelegateCommand(Action&lt;object&gt; execute, Predicate&lt;object&gt; canExecute)\n    {\n        if (execute == null)\n            throw new ArgumentNullException(&quot;execute&quot;);\n  \n        _execute = execute;\n        _canExecute = canExecute;\n    }\n  \n    public void Execute(object parameter)\n    {\n        _execute(parameter);\n    }\n  \n    public bool CanExecute(object parameter)\n    {\n        return _canExecute == null ? true : _canExecute(parameter);\n    }\n  \n    public event EventHandler CanExecuteChanged\n    {\n        add { CommandManager.RequerySuggested += value; }\n        remove { CommandManager.RequerySuggested -= value; }\n    }\n}\n</pre><br /><br />\n<h2>Step 2. Create MainWindowViewModel</h2>\r\n<br />Let the MainWindowViewModel inherit from ViewModelBase.<br /><br /><pre>\npublic class MainWindowViewModel : ViewModelBase{\n    private string _input;\n    public string Input\n    {\n        get        {\n            return _input;\n        }\n        set        {\n            _input = value;\n            RaisePropertyChanged(&quot;Input&quot;);\n        }\n    }\n  \n    private string _display;\n    public string Display\n    {\n        get        {\n            return _display;\n        }\n        set        {\n            _display = value;\n            RaisePropertyChanged(&quot;Display&quot;);\n        }\n    }\n  \n    public DelegateCommand SetTextCommand { get; set; }\n  \n    private void SetText(object obj)\n    {\n        Display = Input;\n    }\n  \n    public MainWindowViewModel()\n    {\n        SetTextCommand = new DelegateCommand(new Action&lt;object&gt;(SetText));\n    }\n}\n</pre><br /><br />\n<h2>Step 3. Create View</h2>\r\nJust need three elements.<br /><pre>\n&lt;Window x:Class=&quot;WpfApplication1.MainWindow&quot;  \n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;  \n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;  \n        xmlns:local=&quot;clr-namespace:WpfApplication1.ViewModel&quot;        \n        Title=&quot;MainWindow&quot; Height=&quot;237&quot; Width=&quot;215&quot;&gt;\n            &lt;Grid&gt;\n                    &lt;Button Content=&quot;Submit&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;37,137,0,0&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;75&quot;/&gt;\n                    &lt;TextBox x:Name=&quot;tb&quot; HorizontalAlignment=&quot;Left&quot; Height=&quot;23&quot; Margin=&quot;37,30,0,0&quot; TextWrapping=&quot;Wrap&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;120&quot;/&gt;\n                    &lt;Label HorizontalAlignment=&quot;Left&quot; Margin=&quot;37,76,0,0&quot; VerticalAlignment=&quot;Top&quot; /&gt;    \n            &lt;/Grid&gt;\n&lt;/Window&gt;\n</pre><br /><br />\n<h2>Step 4. Bind ViewModel to View</h2>\r<pre>\n&lt;Grid&gt;\n        &lt;Button Content=&quot;Submit&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;37,137,0,0&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;75&quot; Command=&quot;{Binding SetTextCommand}&quot;/&gt;\n        &lt;TextBox x:Name=&quot;tb&quot; HorizontalAlignment=&quot;Left&quot; Height=&quot;23&quot; Margin=&quot;37,30,0,0&quot; TextWrapping=&quot;Wrap&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;120&quot; Text=&quot;{Binding Input}&quot; /&gt;\n        &lt;Label HorizontalAlignment=&quot;Left&quot; Margin=&quot;37,76,0,0&quot; VerticalAlignment=&quot;Top&quot; Content=&quot;{Binding Display}&quot; /&gt;    \n&lt;/Grid&gt;\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2014-04-15T06:48:04.287-07:00"
}