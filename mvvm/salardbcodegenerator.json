{
  "ProjectName": "salardbcodegenerator",
  "Title": "SalarDbCodeGenerator",
  "Description": "This application is aimed to generate .NET class and methods for databases and model them based on customizable patterns.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p><strong>Project Description</strong><br>\r\nThis application is aimed to generate .NET class and methods for databases and model them based on customizable patterns.<br>\r\n<br>\r\nSalarDbCodeGenerator is a database first, code generator. It uses customizable patterns to generate different codes and models for applications. The generator engine is mostly optimized for C# but it can be used to generate any other programming language code.</p>\r\n<p><strong>New Requests</strong></p>\r\n<p>Is there anything you want to be supported? <a href=\"https://salardbcodegenerator.codeplex.com/discussions\">\r\nGet over here.</a></p>\r\n<p><strong>Supported Databases</strong></p>\r\n<ul>\r\n<li>Micorsoft SQL Server (2000/.../2014) <br>\r\n(Supports columns description) </li><li>SQL Server Compact Edition 4 </li><li>Oracle Database (8i/9i/10g/11g) </li><li>SQLite (v3 and above) </li></ul>\r\n<p><strong>Features</strong></p>\r\n<ul>\r\n<li>Customizable patterns </li><li>Tables foreign key relations </li><li>Tables constraint keys </li><li>Columns description </li><li>Ignored prefixes / Ignored suffixes </li><li>Prefix for tables / Suffix for tables </li><li>Prefix for views / Suffix for views </li><li>Renaming Options (Remove underline / Case Change / Underline is word delimiter)\r\n</li><li>Default Namespace </li><li>Ability to generate code for any programming language </li></ul>\r\n<p><strong>Patterns List (Installed by default)</strong></p>\r\n<ul>\r\n<li>Entity Framework Code First </li><li>NHibernate Mapping By Code </li><li>NHibernate Castle ActiveRecord </li><li>LinqToSql </li><li>Entity Framework 4 POCO </li><li>Dapper </li><li>Dapper&#43;SQLinq </li><li>3Tier </li></ul>\r\n<p><strong>About Patterns</strong></p>\r\n<p><span style=\"color:#0000ff\"><strong>Entity Framework Code First</strong></span></p>\r\n<ul>\r\n<li>EF4 CodeFirst<br>\r\n(with data annotations) </li><li>EF4 CodeFirst MVVM </li><li>(with data annotations and property change notifications) </li><li>EF4 CodeFirst Simple<br>\r\n(plain simple classes) </li></ul>\r\n<p>Generates database model for Entity Framework 4.2 Code First along side the ORM base classes. These patterns also come with additional methods and helpers which are useful for CodeFirst programming.</p>\r\n<p>Data annotations and change notifications are separated in different patterns. All generated models are customizable through partial classes.</p>\r\n<ul>\r\n<li>Renaming options are supported </li><li>Multiply database model in app is supported (No same table name) </li><li>Many to many relation is not supported by default </li></ul>\r\n<p><span style=\"color:#0000ff\"><strong>NHibernate Mapping By Code</strong><span style=\"color:#000000\">&nbsp;</span></span></p>\r\n<ul>\r\n<li>NH Mapping By Code<br>\r\n(with data annotations) </li><li>NH Mapping By Code MVVM </li><li>(with data annotations and property change notifications) </li><li>NH Mapping By Code Simple<br>\r\n(plain simple classes) </li></ul>\r\n<p>Generates database models for NHibernate 3.2 Mapping by Code along side the ORM base classes. These pattern also come with a default session manager and customizable object mapper for mapping by code.</p>\r\n<p>Data annotations and change notifications are separated in different patterns. All generated models are customizable through partial classes.</p>\r\n<ul>\r\n<li>Renaming options are supported </li><li>Multiply database model in app is supported </li><li>Many to many relation is not supported by default </li></ul>\r\n<p><span style=\"color:#0000ff\"><strong>NHibernate ActiveRecord</strong></span></p>\r\n<ul>\r\n<li>NHibernate ActiveRecord </li><li>NHibernate ActiveRecord WCF </li></ul>\r\n<p>Generates database models which can be used with Castle ActiveRecord 2.2 or 3. This pattern also comes with additional methods and helpers which are essential for Castle ActiveRecord programming.</p>\r\n<p>The &quot;NHibernate ActiveRecord WCF&quot; pattern generates non-standard/unused table IDs, which are useful only when transferring classes through WCF. Of course these IDs should be filled manually.</p>\r\n<ul>\r\n<li>Renaming options are supported </li><li>Multiply database model in app is supported (No same table name) </li></ul>\r\n<p><span style=\"color:#0000ff\"><strong>LinqToSql C#</strong></span></p>\r\n<p>Generates database models for LinqToSql in 3Tier model (Only two layer is generated including Business and DAL). CRUD operations and custom method call should be used like 3Tier method.</p>\r\n<p>Sample usage:</p>\r\n<p>using (var bll = new UsersBLL())<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; return bll.GetAll().OrderBy(x =&gt; x.UserName);<br>\r\n}</p>\r\n<ul>\r\n<li>Renaming options are NOT supported </li><li>Multiply database model in app is NOT supported </li></ul>\r\n<p><strong><span style=\"color:#0000ff\">Entity Framework 4 POCO</span><br>\r\n</strong></p>\r\n<ul>\r\n<li>EF4 POCO C# </li><li>EF4 POCO LINQ C# </li></ul>\r\n<p>Generates database POCO models for Entity Framework 4. The &quot;EF4 POCO LINQ&quot; pattern also generates 3Tier method additional classes which both are usable.</p>\r\n<p>These two pattern can not work without model file in application. The model file name should be same as database name (e.g. TestDbEntities.edmx and TestDbEntities class name).</p>\r\n<p>When creating the model &quot;Pluralize or singularize generated object names&quot; should be\r\n<span style=\"text-decoration:underline\">unchecked</span>. Afterward in model designer the &quot;Code Generation Strategy&quot; property should be changed to &quot;None&quot;. These two steps are required to get the POCO classes work fine.</p>\r\n<ul>\r\n<li>Renaming options are NOT supported </li><li>Multiply database model in app is supported </li><li>Many to Many is NOT supported </li></ul>\r\n<p><span style=\"color:#0000ff\"><strong>DapperAccess</strong></span></p>\r\n<ul>\r\n<li>DapperAccess </li><li>DapperContext </li><li>Dapper&#43;SQLinq </li></ul>\r\n<p>Generates database model and entity access wrapper for <a href=\"http://dapper-dot-net.googlecode.com/\" target=\"_blank\">\r\nDapper</a> mini ORM. Dapper basically is a simple object mapper which maps query results to entity objects. It has one big benefit, Performance. To see the differences read the performance benchmarks in the\r\n<a href=\"http://code.google.com/p/dapper-dot-net/\" target=\"_blank\">Dapper</a> page.</p>\r\n<p>This pattern generates Dapper Access wrapper which includes connection management and default CRUD operations. As usual some query methods are generated too. Generated model classes are not necessary for this pattern so other ORMs generated entity models\r\n can be used.</p>\r\n<p>Dapper&#43;SQLinq is also another pattern based on DapperAccess pattern which uses\r\n<a href=\"http://sqlinq.codeplex.com/\" target=\"_blank\">SQLinq</a> to generate queries. It only works correctly with sql server.</p>\r\n<ul>\r\n<li>Renaming options are NOT supported </li><li>Multiply database model in app can be used (with some considerations) </li><li>Many to Many is NOT supported </li><li>One to One is NOT supported </li></ul>\r\n<p><span style=\"color:#0000ff\"><strong>3Tier</strong></span></p>\r\n<ul>\r\n<li>3Tier C# </li><li>3Tier VB.NET </li></ul>\r\n<p>Generates database models for classic 3Tier applications. Uses base ADO.Net classes to apply the operations. These patterns uses Stored procedures to do the operations. For all tables and views default CRUD operations are created.</p>\r\n<p>These patterns are optimized for speed, in a case that application requires low latency access to large amount of data. C# pattern uses additional column order caching while reading data, which gains extra optimization in large bunch of records.</p>\r\n<p>The bad part of these patterns is every new query should be done manually.</p>\r\n<p>Sample usage:</p>\r\n<p>using (var bll = new UsersBLL())<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; return bll.GetByUserId(10);<br>\r\n}</p>\r\n<ul>\r\n<li>Renaming options are NOT supported </li><li>Multiply database model in app is NOT supported </li><li>binary and ntext columns in one table together is not supported. </li><li>SQL Server only. </li><li>LINQ is not supported. </li></ul>\r\n<p>&nbsp;</p>\r\n<ul>\r\n<li><strong>Main Window</strong> </li></ul>\r\n<p><img src=\"https://salarblogsources.svn.codeplex.com/svn/PostImages/SalarDbCodeGenerator/MainWindow.png\" alt=\"\"></p>\r\n<ul>\r\n<li><strong>Project Options</strong> </li></ul>\r\n<p><img src=\"https://salarblogsources.svn.codeplex.com/svn/PostImages/SalarDbCodeGenerator/ProjectOptions.png\" alt=\"\"></p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px; top:1098px; width:1px; height:1px; overflow:hidden\">\r\nEF4 POCO LIN</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "Code Generator,Code Generation,Code First,Entity Framework,SQLite,NHibernate,ActiveRecord,Dapper,MVVM,LinqToSQL,SQL Server CE,",
  "LastEdited": "2014-07-19T07:55:42.227-07:00"
}