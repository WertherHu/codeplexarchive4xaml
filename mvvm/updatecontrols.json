{
  "ProjectName": "updatecontrols",
  "Title": "Update Controls .NET",
  "Description": "WPF and Silverlight data binding without INotifyPropertyChanged. It discovers dependencies automatically so you don't have to manage them in your View Model.\n\nAnd it works with Winforms. Bind through code using events.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>This project has moved</b><br /><br /><a href=\"https://github.com/michaellperry/updatecontrols\">https://github.com/michaellperry/updatecontrols</a><br /><br /><b>More information</b><br /><br /><a href=\"http://updatecontrols.net/\">http://updatecontrols.net/</a><br />\n<h2>Project Description</h2>\rWPF and Silverlight data binding without INotifyPropertyChanged. It discovers dependencies automatically so you don&#39;t have to manage them in your View Model.<br /><br />And it works with Winforms. Bind through code using events.<br />\n<h2>NuGet</h2>\rInstall-Package updatecontrols<br />\n<h2>Support for Winforms, WPF, Silverlight 3 4 and 5, and Windows Phone 7 and 7.1</h2>\rThis project compiles for all current .NET client platforms.<br />\n<h2>Example</h2>\rWrap your object before giving it to the DataContext:<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> Window1 : Window\n{\n    <span style=\"color:Blue;\">public</span> Window1()\n    {\n        InitializeComponent();\n        DataContext = ForView.Wrap(<span style=\"color:Blue;\">new</span> PersonViewModel(<span style=\"color:Blue;\">new</span> Person()));\n    }\n}\r\n</pre></div><br />The wrapped object given to DataContext is a plain-old-CLR-object.<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> PersonViewModel\n{\n    <span style=\"color:Blue;\">private</span> Person _person;\n\n    <span style=\"color:Blue;\">public</span> PersonViewModel(Person person)\n    {\n        _person = person;\n    }\n\n    <span style=\"color:Blue;\">public</span> Person Person\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _person; }\n    }\n\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> FirstLast\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _person.FirstName + <span style=\"color:#A31515;\">&quot; &quot;</span> + _person.LastName; }\n    }\n\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> LastFirst\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _person.LastName + <span style=\"color:#A31515;\">&quot;, &quot;</span> + _person.FirstName; }\n    }\n\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> Title\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> <span style=\"color:#A31515;\">&quot;Person - &quot;</span> + (_person.DisplayStrategy == 0 ? FirstLast : LastFirst); }\n    }\n}\r\n</pre></div><br />The underlying data object uses Independent properties to keep track of gets and sets. The wrapper can see these properties through layers of code, and automatically wires up property change notifications.<br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> Person\n{\n    <span style=\"color:Blue;\">private</span> Independent&lt;<span style=\"color:Blue;\">string</span>&gt; _firstName = <span style=\"color:Blue;\">new</span> Independent&lt;<span style=\"color:Blue;\">string</span>&gt;();\n    <span style=\"color:Blue;\">private</span> Independent&lt;<span style=\"color:Blue;\">string</span>&gt; _lastName = <span style=\"color:Blue;\">new</span> Independent&lt;<span style=\"color:Blue;\">string</span>&gt;();\n    <span style=\"color:Blue;\">private</span> Independent&lt;<span style=\"color:Blue;\">int</span>&gt; _displayStrategy = <span style=\"color:Blue;\">new</span> Independent&lt;<span style=\"color:Blue;\">int</span>&gt;();\n\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> FirstName\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _firstName; }\n        <span style=\"color:Blue;\">set</span> { _firstName.Value = value; }\n    }\n\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">string</span> LastName\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _lastName; }\n        <span style=\"color:Blue;\">set</span> { _lastName.Value = value; }\n    }\n\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">int</span> DisplayStrategy\n    {\n        <span style=\"color:Blue;\">get</span> { <span style=\"color:Blue;\">return</span> _displayStrategy; }\n        <span style=\"color:Blue;\">set</span> { _displayStrategy.Value = value; }\n    }\n}\r\n</pre></div>You can data bind to any property, even the ones that calculate their value based on independent properties. When the independent property is changed, the dependent ones are updated, too.<br /><br /><b>What just happened?</b><br />ForView.Wrap just created a wrapper object for you. This wrapper object has all of the properties of the object you passed in, but they are now bindable. The Silverlight version creates DependencyProperties for you. The WPF version implements INotifyPropertyChanged.<br /><br />What&#39;s more, Update Controls is watching what your properties do. If they call OnGet(), or call anything that calls OnGet(), it sets up a dependency. Later, when something calls OnSet(), that DependencyProperty is updated with the new value.</div><div class=\"ClearBoth\"></div>",
  "TagList": "winforms,Controls,WPF,Windows Forms,xaml,control,WinForms Controls,Data Binding,MVVM,markup extension,Silverlight,",
  "LastEdited": "2016-01-12T14:54:24.217-08:00"
}