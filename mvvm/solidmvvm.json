{
  "ProjectName": "solidmvvm",
  "Title": "S.O.L.I.D. MVVM for WPF",
  "Description": "An MVVM starting architecture based on bottom-up design principles for maximum modularity and reusability.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<h1><a href=\"/projects/solidmvvm/a0b80ede-ec15-4aee-b8ff-e0759b904c23\"><font size=\"3\"><img title=\"page\" border=\"0\" alt=\"page\" src=\"/projects/solidmvvm/fbce827d-7370-4069-8ac2-98926bad0239\" width=\"244\" align=\"right\" height=\"244\" style=\"border-left-width:0px; border-right-width:0px; border-bottom-width:0px; float:right; padding-top:0px; padding-left:0px; display:inline; padding-right:0px; border-top-width:0px\"></font></a></h1>\r\n<h2><font size=\"3\"><font size=\"5\">GETTING STARTED</font></font></h2>\r\n<p><font size=\"3\">Make a copy of the entire SolidMvvm folder that contains the README.txt file, rename it and the Visual Studio project in it to the name of your application. Rename the namespaces to match your company’s information.\r\n<em>This is not a framework</em>—it is intended to be copy/pasted and then modified.</font></p>\r\n<h2>THIS ARCHITECTURE CONCEPT</h2>\r\n<p><font size=\"3\">Most <em>other </em>MVVM frameworks encourage top-down implementation. SolidMvvm promotes a bottom-up approach.</font></p>\r\n<p><font size=\"3\">In a nutshell, top-down implementation means starting with the high-level objects and implementing your way down. Another word for top-down implementation is\r\n<em>hard-coded</em> implementation. Hard coded means that you implement the current business requirements, and when the requirements change, you rework it for the new requirements.</font></p>\r\n<p><font size=\"3\">Bottom-up implementation means starting with low-level objects and working your way toward higher-level objects until they eventually coalesce to fulfill the business requirements.</font></p>\r\n<p><font size=\"3\">I use both top-down and bottom-up approaches at the same time, though I always favor bottom-up for most of the implementation.</font></p>\r\n<p><font size=\"3\">An analysis of the different approaches can be seen here: </font>\r\n<a href=\"http://en.wikipedia.org/wiki/Top-down_and_bottom-up_design\"><font size=\"3\">http://en.wikipedia.org/wiki/Top-down_and_bottom-up_design</font></a><font size=\"3\">.</font></p>\r\n<p><font size=\"3\">A dialog of pros and cons can be found here: </font><a href=\"http://stackoverflow.com/questions/130933/design-coding-top-to-bottom-or-bottom-to-top\"><font size=\"3\">http://stackoverflow.com/questions/130933/design-coding-top-to-bottom-or-bottom-to-top</font></a><font size=\"3\">.</font></p>\r\n<p><font size=\"3\">If you have studied the S.O.L.I.D. principles (see </font><a href=\"http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)\" target=\"_blank\"><font size=\"3\">http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)</font></a><font size=\"3\">),\r\n then you are probably interested in a bottom-up approach.</font></p>\r\n<p><font size=\"3\">In a SOLID MVVM for WPF architecture, the view/view-model pairs are typically either top-down or bottom-up, but not both at the same time. The more bottom-up view/view-model pairs you create, the more self-contained building blocks you have,\r\n and thus the more resilient you are to unforeseen changes in business requirements.</font></p>\r\n<h2>IT DOES NOT</h2>\r\n<ul>\r\n<font size=\"3\"></font></ul>\r\n<p><font size=\"3\">- <em>rely on any MVVM frameworks</em>. Most MVVM frameworks support primarily top-down development, not primarily S.O.L.I.D. principles.</font></p>\r\n<p><font size=\"3\">- <em>rely on any inversion-of-control (IoC) containers</em>. There are absolutely no global (public static) variables in the entire solution.</font></p>\r\n<p><font size=\"3\">- <em>use WPF commands.</em> Views instead call view-model methods with the CallMethodAction.</font></p>\r\n<h2>NOTABLE FEATURES</h2>\r\n<p><font size=\"3\">- <em>View model constructors take parameters</em>. All of the models that the view model relies on are provided to it through the constructor, methods, and properties. Because of this, the views do not create the view models. View models\r\n are created independently of the view and they are joined by one of two simple mechanisms. See the documentation for details. [???need to provide a link here]</font></p>\r\n<p><font size=\"3\">- <em>The ViewModels project has no reference to the Models project, only to the Interfaces project</em>. This forces interfaces to be used in place of hard-coded models to provide a layer of indirection (decoupling). A simple factory is used\r\n to create concrete models to provide the interfaces. The factory itself is also decoupled with an interface and can be swapped out for unit testing.</font></p>\r\n<p><font size=\"3\">- <em>All view/view-model pairs are self-contained</em>. They do not reference\r\n<em>any</em> global (public static) variables. This keeps the code flow easy to follow because model information flows only through parameters, methods, and properties, never through reaching for global (public static) variables.</font></p>\r\n<h2>TO DO</h2>\r\n<p><font size=\"3\">- Add theming support by default.</font></p>\r\n<p><font size=\"3\">- Add a built-in way of saving settings for all view models (and other business classes).</font></p>\r\n<p><font size=\"3\">- Add view/view models that show how to pop open dialog boxes, contain other view/view model pairs, or provide snap-in points.</font></p>\r\n<ul>\r\n<font size=\"3\"></font></ul>\r\n<h2 align=\"left\">THANKS TO</h2>\r\n<ul>\r\n<font size=\"3\"></font></ul>\r\n<p><a href=\"http://dryicons.com/\"><font size=\"3\">http://dryicons.com/</font></a><font size=\"3\"> for the App.ico and the blueprint picture on this page.</font></p>\r\n<p><font size=\"3\"></font></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><font size=\"3\">For any questions, or to provide feedback, please post to </font>\r\n<a href=\"http://solidmvvm.codeplex.com/discussions\"><font size=\"3\">http://solidmvvm.codeplex.com/discussions</font></a><font size=\"3\">.</font></p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-11-18T09:01:47.84-08:00"
}