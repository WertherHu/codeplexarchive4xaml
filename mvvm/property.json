{
  "ProjectName": "property",
  "Title": "Property Framework",
  "Description": "Unite your properties and the logic of their population. Use predefined property patterns. Create your own patterns effortlessly. Make async loading simple.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><img src=\"http://download-codeplex.sec.s-msft.com/Download?ProjectName=property&amp;DownloadId=737778\" /><br />Property Framework allows you to make your entire presentation logic declarative by composing properties, their loading logic, their interaction with the user and with one another. <br /><br />A typical description would look as follows:<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> property = Reloadable&lt;<span style=\"color:Blue;\">int</span>&gt;.On()\n              .Delayed(TimeSpan.FromMilliseconds(200))\n              .Conditional(() =&gt; canReact)\n              .ValidationInput(o =&gt; o &lt; 0 ? \n                  <span style=\"color:Blue;\">new</span>[] { <span style=\"color:#A31515;\">&quot;Negative values not supported.&quot;</span> } \n                : <span style=\"color:Blue;\">null</span>)\n              .Create();\r\n</pre></div><br />The above property will reload on input (like <span class=\"codeInline\">property.Input = 1;</span>) if <span class=\"codeInline\">canReact</span> is <span class=\"codeInline\">true</span>, when no new input comes after the last one for 200 ms. <br /><br />Sample applications illustrating how properties work together to solve typical tasks of business application development are shipped with the  <a href=\"https://property.codeplex.com/SourceControl/latest#\">source code</a>. <br /><br />The respective projects are included with each platform-specific solution. <br /><br /><img src=\"http://download-codeplex.sec.s-msft.com/Download?ProjectName=property&amp;DownloadId=737790\" /><br /><br />On each platform ranging from .Net 4.0 to Windows Phone 8 the abovementioned sample projects solve the following tasks:<br />\n<ul><li><b>Showcase.LoadAsYouScroll</b> - Automatically load items to a list when the user scrolls it to the end. </li>\n<li><b>Showcase.LoadByWire</b> - Gather data from textboxes, validate input, load data from db + send to textboxes. </li>\n<li><b>Showcase.ProgressCounter</b> - Track progress of some activity and display it with a progress bar.</li></ul>\nOn different platforms the problems are solved a bit differently. They use MVVM or Windows Forms, Reactive Extensions or event subscriptions showcasing different approaches, serving as a source of inspiration or a bank of readymade solutions.  You might want to check them out.<br /><br />There is a number of ways in which Property Framework enhances the experience of creating presentation logic. Here are some of them.<br /><br />\n<h1>Read It Aloud.</h1>\r\nThe XML documentation of Property Framework 3.0 has been specifically designed to help you understand the algorithms you put into the properties you describe. Moving a mouse pointer from one word to another and reading the comments that pop up is no different from reciting the algorithm in a real language.<br /><br /><img src=\"http://download-codeplex.sec.s-msft.com/Download?ProjectName=property&amp;DownloadId=737801\" /><br /><br />\n<h1>You Don&#39;t Use It, You Don&#39;t Have It.</h1>\r\nThe features you didn&#39;t mention will not just stay switched off; they won&#39;t be there. You don&#39;t need complex features of Reactive Extensions plugged in, don&#39;t reference Property.Reactive assembly, and forget about them. <br /><br />Property Framework provides a high level of scalability by keeping universally applicable words in Reactive.Core assembly and all the words of limited applicability grouped by the area of concern in the respective assemblies. <br />\n<ul><li><b>Property.Core</b> - Contains the minimal usable subset of Property Framework features,</li>\n<li><b>Property.Callbacks</b> - Contains <span class=\"codeInline\">BackgroundWorker</span>-related  Property Framework features,</li>\n<li><b>Property.Chains</b> - Contains features that enable declarative subscriptions to property events,</li>\n<li><b>Property.Reactive</b> - Contains features that allow using Rx features with properties,</li>\n<li><b>Property.Windows</b> - Contains features that allow using interfaces introduced in late versions of .Net and Silverlight, </li>\n<li><b>Property.Windows.Legacy</b> - Contains features that allow using interfaces introduced in obsolete versions of .Net and Silverlight.</li></ul>\nNamespaces span across different assemblies and separate different worlds thus being another axis of scalability.<br />\n<ul><li><b>Property</b> - Contains words that are invariant to the world of use,</li>\n<li><b>Property.Windows</b> - Contains variants of words applicable to the world of WPF/Silverlight,</li>\n<li><b>Property.Windows.Forms</b> - Contains variants of words applicable to the world of Windows Forms,</li>\n<li><b>Property.Windows.Legacy</b> - Contains variants of words applicable to the world of legacy interfaces.</li></ul>\n<br />\n<h1>Describe Once. Create When Needed.</h1>\r\nLazy instantiation is one of the concepts at the heart of Property Framework. Description is separated from creation, thus, enabling us to reuse property patterns again and again without ever specifying them twice.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> namePattern = Reloadable&lt;<span style=\"color:Blue;\">string</span>&gt;.On()\n              .Delayed(TimeSpan.FromMilliseconds(200))\n              .ValidationInput(o =&gt; \n                   ValidationService.CheckName(o));\n              \n<span style=\"color:Blue;\">var</span> firstName = namePattern.Create();\n<span style=\"color:Blue;\">var</span> middleName = namePattern.Create();\n<span style=\"color:Blue;\">var</span> lastName = namePattern.Create();\n<span style=\"color:Blue;\">var</span> nickName = namePattern.Create();\r\n</pre></div><br />\n<h1>Remove the Borders.</h1>\r\nProperty Framework 3.0 supports BackgroungWorker-based asynchronicity and subscription-based chaining of properties on all platforms. Not only that means you can bring the power of declarative presentation logic development to the world of .Net 3.5; that means you can develop applications with any degree of portability you want.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> auth = Reloadable&lt;<span style=\"color:Blue;\">bool</span>&gt;.On()\n              .Worker()\n              .Call(_ =&gt; \n               AuthService.Authorize(curUser))\n              .Create(<span style=\"color:Blue;\">false</span>);\n\n<span style=\"color:Blue;\">var</span> organizations = Reloadable&lt;IEnumerable&lt;Organization&gt;&gt;.On()\n              .Worker()\n              .Call(_ =&gt; \n               OrgService.GetOrganizations(curUser))\n              .Create(Enumerable.Empty&lt;Organization&gt;());\n\n<span style=\"color:Blue;\">var</span> authToOrgs = auth.OnChanged(() =&gt; organizations);\r\n</pre></div><br />\n<h1>Harness the Interfaces.</h1>\r\nEverything you create with Property Framework is an instance of some interface. That means, everything you create with PF is mockable, which is valuable. <br /><br />More than that, the hierarchy of interfaces used in Property Framework gives you control over the accessibility of properties you create. <br />\n<ul><li><b><span class=\"codeInline\">IProperty&lt;T&gt;</span></b> - Read-only access to the property&#39;s value, loading status and side-effects-free debug value. </li>\n<li><b><span class=\"codeInline\">ICallProperty&lt;T&gt;</span></b> -The operation trigger method <span class=\"codeInline\">Go()</span> is accessible.</li>\n<li><b><span class=\"codeInline\">IInputProperty&lt;T&gt;</span></b> -The property&#39;s input is accessible for reading and writing.</li>\n<li><b><span class=\"codeInline\">IValidateProperty&lt;T&gt;/ICheckProperty</span></b> -The validation features of the property are accessible.</li></ul>\n<br />See the detailed picture below.  <br /><br /><img src=\"http://download-codeplex.sec.s-msft.com/Download?ProjectName=property&amp;DownloadId=737842\" /><br /><br />\n<h1>Testable and Tested.</h1>\r\nThe components included with Property Framework 3.0 are 100% covered by unit tests. The unit tests serve as an additional form of the library&#39;s specification as well as a good proof of the library&#39;s compliance with the specified requirements. <br /><br />If test coverage matters, then testability matters too. This is why Property Framework allows ignoring test-unfriendly words in property descriptions in test scenarios. For instance, the word <span class=\"codeInline\">Worker</span> is considered test-unfriendly because it specifies asynchronous operation and we want all code in our unit tests to be strictly synchronous. All the words that are considered test-unfriendly are equipped with an on/off switch that can be used for creating testable code without preprocessor directives.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">var</span> organizations = Reloadable&lt;IEnumerable&lt;Organization&gt;&gt;.On()\n              .Worker(testMode)\n              .Call(_ =&gt; \n               OrgService.GetOrganizations(curUser))\n              .Create(Enumerable.Empty&lt;Organization&gt;());\r\n</pre></div><br />\n<h1>Leave It To the Reloader.</h1>\r\nEvery property created with Property Framework has a broker called reloader inside of it, which does the loading and setting of the pproperty&#39;s state for us.  Though we don&#39;t see the reloader work we certainly experience it. By not setting the property&#39;s state from outside the property and letting just one object deal with it, we eliminate possible race conditions, thus having one problem less to worry about.<br /><br />\n<h1>And Now on Nuget.</h1>\r\nInstalling Property Framework has never been easier.<br /><br />Just open Package Manager Console ...<br /><br /><img src=\"http://download-codeplex.sec.s-msft.com/Download?ProjectName=property&amp;DownloadId=738626\" /><br /><br />... enter &#39;<b>Install-Package PropertyFramework</b>&#39; ...<br /><br /><img src=\"http://download-codeplex.sec.s-msft.com/Download?ProjectName=property&amp;DownloadId=738627\" /><br /><br />... and you&#39;re done!  The right version of Property Framework will be automatically downloaded and added to your project.<br /><br />\n<h5>Explore the <a href=\"https://property.codeplex.com/SourceControl/latest#\">code</a>; leave your feedback;</h5>\r<h5>write me an <a href=\"mailto:vitaly_kamiansky@hotmail.com\">e-mail</a>;  or reach me via <a href=\"http://myskype.info/vitaly_kamiansky@hotmail.com\">Skype</a>.</h5>\r\n<br />l&#39;m always thrilled to hear from you. <br /><br />Thanks for your interest in whatever you are interested in.<br /><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "property,declarative,functional,phone 8,MVVM,functional UI declar,",
  "LastEdited": "2013-10-09T01:00:34.827-07:00"
}