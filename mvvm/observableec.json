{
  "ProjectName": "observableec",
  "Title": "ObservableEntityCollection",
  "Description": "Observable Entity Collection class that overcome limitations of EntityCollection when binding in MVVM applications.\r\n\r\nOverview on this link: ",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<div dir=\"ltr\" style=\"text-align:left\">\r\n<div dir=\"ltr\">For more information (<a title=\"Here\" href=\"http://www.maherali.net/search/label/ObservableEntityCollection\" target=\"_blank\">here</a>)</div>\r\n<div dir=\"ltr\"><a title=\"Video 1 - Extending Parent to support ObservableEntityCollection\" href=\"http://observableec.codeplex.com/wikipage?title=Video%20-%20Extend%20Parent%20Entity%20to%20support%20Observable%20Collections\">Video 1 - Extending Parent to support\r\n ObservableEntityCollection</a></div>\r\n<br>\r\n<div dir=\"ltr\">\r\n<hr>\r\n</div>\r\n<div dir=\"ltr\">When it comes to extending the entity classes and adding some features not supported (yet) by RIA services, I had to add a lot of boilerplate code, this is because it&rsquo;s impossible to change the behaviour of the base class (Entity), so the\r\n only way was to add interfaces to support the required behaviour. Hence, in ObservableCollection library you&rsquo;ll find ICollectionChanged interface, which should be implemented by any Entity that would expose some ObservableEntityCollection(s).</div>\r\n&lt;!--more--&gt;\r\n<div dir=\"ltr\">This is of course a huge burden in this solution, for example to wrap few entity collections with ObservableEntityCollection which supports tracking of child changes, the developer should repeat the same task of writing the same code over and\r\n over again, sometimes the cost will be hundreds of lines of code!! <br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\">Then I came up with this idea of code snippets, let's ship the library with some code snippets to generate the required code, the generated code of course will be the default implementation of some interfaces. Certainly it&rsquo;s better than\r\n writing the same code every time, but it is still not elegant and it&rsquo;s beyond the usual purpose of code snippets, we usually write snippets for simple tasks like: generating a template for dependency properties, but code snippets are not suitable for\r\n generating the default implementation of some interfaces. <br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\">This problem was a result of the single inheritance model in C#, while in C&#43;&#43; the solution would be simpler by creating a new base class with default implementation, but unfortunately the multiple-inheritance is not supported in C #. This problem\r\n made me appreciate for the first time in my life the MI model used in C&#43;&#43;. <br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\">It seemed like there is no way to avoid the most difficult option, creating a Visual studio add-in, that will enumerate the entities in Silverlight class library, the user then would be able to mark some entities as Observable Collection aware\r\n or duplicate aware entities, with one click the boilerplate code (most of it) would be generated automatically through some T4 templates.<br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\"><span style=\"text-align:left\">Creating this add-in wasn&rsquo;t an easy task, it should be smart enough to read the mapping file (which entities support which interfaces), and should be able to load the assemblies in new AppDomain and clear it\r\n when the plug in is closed, this particular feature was very difficult to implement and it still requires further enhancements.</span><br>\r\n<span style=\"text-align:left\"><br>\r\n</span></div>\r\n<div dir=\"ltr\">So let's see how to put everything together &hellip;<span style=\"text-align:left\">&nbsp;</span></div>\r\n<h2>What is provided in the OEC (ObservableEntityCollection)</h2>\r\n<div dir=\"ltr\">For more information why this project was created in the first place, make sure to read this article (<a href=\"http://www.maherali.net/2012/11/observableentitycollectionwrapping.html\" target=\"_blank\">Here</a>)</div>\r\n<div dir=\"ltr\">The main feature is to: wrap the EntityCollection class generated by RIA services with ObservableEntityCollection class, which can be used in MVVM models, let&rsquo;s define some terms:</div>\r\n<div dir=\"ltr\"><br>\r\n<ol style=\"text-align:left\">\r\n<li>OEC -Parent: An entity hosting ObservableEntityCollection(s), like Person entity hosting ObservableContacts collection.\r\n</li><li>OEC -Child: an ObservableEntityCollection, like ObservableContacts that wraps Contacts EntityCollection.\r\n</li></ol>\r\n</div>\r\nCurrent features of OEC: <br>\r\n<ol dir=\"ltr\">\r\n<li>\r\n<div>No need to use composition attribute, which means that the EntitySets would be generated for both parent and children entities.</div>\r\n</li><li>\r\n<div>ObservableEntityCollection would track changes in OEC-Parent and OEC-Child entities, any change (change parent attribute, change child attribute, adding child, removing child) would cause the parent to be marked as dirty, this state is represented by a\r\n new property (IsEntityChanged in the OEC-Parent).</div>\r\n</li><li>\r\n<div>ObservableEntityCollection can undo all changes reverting both OEC-Parent and OEC-Child to their original state, the restore operation includes deleting the new added rows and restoring the removed ones.</div>\r\n</li><li>\r\n<div>ObservableEntityCollection can clear the dirty status through (ClearDirty() in OEC-Parent), which comes in handy after a successful save operation.</div>\r\n</li><li>\r\n<div>OEC-Child can be marked as Duplicate aware, by defining a general comparer function. This feature is very useful when the entity should be unique but based on some business rules not implemented in the database (for example the business rule requires both\r\n fields sender and receiver to be unique) but not implemented in the database for reason like old database or changed business rules. The comparer function also allows complicated scenarios that are difficult to be implemented in the database.</div>\r\n</li><li>\r\n<div>OEC-Child duplicate aware entity provides IsDuplicate property that could be used in MVVM and Prism applications to give the user a visual alert, such as changing the row background.</div>\r\n</li><li>\r\n<div>ObservableEntityCollection has IsDuplicate property which returns true if any OEC-Child entity has a duplicate.</div>\r\n</li><li>\r\n<div>OEC-Child duplicate aware entity provides Duplicates properties, which returns an ObservableCollection of matched entities according to the user-defined comparer function; this also can be useful in designing the UX in business applications.</div>\r\n</li><li>\r\n<div>The Visual studio plugin is called OECModeler, to generate the boilerplate code in OCE_GenerateCode folder in the solution, this plugin would save mapping (which parent contains wrapped collection) in a XML file given the name: project.ocemap.</div>\r\n</li><li>\r\n<div>Some extensions are provided to facilitate the serialization operation; this feature is covered in this article (<a href=\"http://www.maherali.net/2012/12/wcf-ria-serializing-entitycollection.html\" target=\"_blank\">here</a>). Briefly, when an Entity is passed\r\n as a parameter in RIA Invoke operation, the child entities are not serialized as well, so I came up with a solution (although it&rsquo;s a mechanical) to serialize the ObservableEntityCollections with the help of some extension methods as illustrated in the\r\n mentioned article.</div>\r\n</li></ol>\r\n<div dir=\"ltr\">&nbsp;</div>\r\n<h2>How to install OEC through nuget</h2>\r\n<div dir=\"ltr\">I&rsquo;ve created a nuget package for installing the OEC library, to install it in your solution in the package manager console, hit the following command:\r\n<br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\"><img title=\"image\" src=\"http://lh6.ggpht.com/-u6-mCRBueGc/URb55yk4NJI/AAAAAAAABQQ/wXI1DaNYzMM/image_thumb1.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"410\" height=\"60\" style=\"display:inline; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px; border:0; vertical-align:middle\"></div>\r\n<div dir=\"ltr\"><br>\r\nOr you can install it through NUGet packages manager in Visual studio by searching for ObservableEntityCollection:<br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\"><a href=\"http://lh3.ggpht.com/-G448PBZb2Zg/URb56TpzkzI/AAAAAAAABQY/RxepvxALyPo/s1600-h/image%25255B5%25255D.png\"><img title=\"image\" src=\"http://lh6.ggpht.com/-fJK0Pwuc88U/URb56yokUoI/AAAAAAAABQg/1nELe0-dfng/image_thumb%25255B2%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"534\" height=\"385\" style=\"display:inline; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px; border:0; vertical-align:middle\"></a></div>\r\n<h2>How to install Add-in</h2>\r\n<div dir=\"ltr\">Installing the add-in is a straightforward process, download the add in from (<a href=\"http://observableec.codeplex.com/releases/view/101540\" target=\"_blank\">here</a>)</div>\r\n<div dir=\"ltr\">Copy all files to the following path: ..\\Documents\\<span style=\"color:red\">Visual Studio 2012\\Addins</span></div>\r\n<div dir=\"ltr\">Then you should see the addin loaded in Visual studio 2012 Add-in manager:\r\n<br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\"><img title=\"image\" src=\"http://lh6.ggpht.com/-oBOgTtP8COY/URb58EOz3DI/AAAAAAAABQw/mlOL_wj7bLk/image_thumb3.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"373\" height=\"256\" style=\"display:inline; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></div>\r\n<div dir=\"ltr\"><br>\r\nCheck the startup option, restart VS and the addin will be available in the Tools menu:\r\n<br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\"><img title=\"image\" src=\"http://lh4.ggpht.com/-ColSPGkwcsY/URb586tm25I/AAAAAAAABRA/VNarZ-EjUMw/image_thumb5.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"412\" height=\"121\" style=\"display:inline; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></div>\r\n<h2>Simple Example step-by-step</h2>\r\n<h3>1. Database</h3>\r\n<div dir=\"ltr\">Let&rsquo;s keep it simple, in the database there are two tables, the master table represents a person entity, while the details table represents the contacts.<br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\"><img title=\"image\" src=\"http://lh3.ggpht.com/-O5MXssjNTHg/URb59_lRoWI/AAAAAAAABRQ/BY9jP9XaEsU/image_thumb%25255B4%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"216\" height=\"323\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></div>\r\n<h3>2. Solution structure</h3>\r\n<div dir=\"ltr\">Create a silverlight application, don&rsquo;t forget to uncheck (Enable WCF RIA Service):<br>\r\n<br>\r\n</div>\r\n<div dir=\"ltr\"><img title=\"image\" src=\"http://lh6.ggpht.com/-H1OxAvForto/URb5-ioB32I/AAAAAAAABRg/H2BfltL3gOI/image_thumb%25255B125%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"364\" height=\"290\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></div>\r\n<div dir=\"ltr\"><br>\r\nthe solution structure is very simple:</div>\r\n<ol dir=\"ltr\">\r\n<li>\r\n<div>Solution name is Demo</div>\r\n</li><li>\r\n<div>Silverlight application name is DemoShell</div>\r\n</li><li>\r\n<div>ASP.NET website name is DemoShell.Web</div>\r\n</li><li>\r\n<div>Business layer solution (Class library project) name is DBServer</div>\r\n</li><li>\r\n<div>RIA generated entities would be in (Silverlight class library) called DBClient</div>\r\n</li></ol>\r\n<img title=\"image\" src=\"http://lh6.ggpht.com/-WCEMWGh5RZw/URb5_pFBdpI/AAAAAAAABRw/EO-g8WkD7y4/image_thumb%25255B127%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"304\" height=\"217\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"><br>\r\n<h3>3. Create EF (ORM) file</h3>\r\nin DBServer solution add a new ADO.NET EntityFramework Model:<br>\r\n<br>\r\n<img title=\"image\" src=\"http://lh5.ggpht.com/-4jJnOkor-x8/URb6AexhoPI/AAAAAAAABSA/m9F6JOUCivk/image_thumb%25255B129%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"304\" height=\"314\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"><br>\r\n<br>\r\nin DemoShell.Web add a reference to DBServer library.<br>\r\n<h3>4. Generate RIA proxy classes</h3>\r\nIn DBClient add RIA Link to the website:<br>\r\n<br>\r\n<a href=\"http://lh4.ggpht.com/-7Jtskf_hses/URb6AwfOZpI/AAAAAAAABSI/L5POiHvumuo/s1600-h/image%25255B145%25255D.png\" target=\"_blank\"><img title=\"image\" src=\"http://lh4.ggpht.com/-G-tE28DC7JI/URb6BWhsX4I/AAAAAAAABSM/6dwVXbii1HI/image_thumb%25255B132%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"404\" height=\"169\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></a><br>\r\n<br>\r\nThis will generate the WCF RIA classes in the client library.<br>\r\n<h3>5. Add Domain services</h3>\r\nBuild the solution, and in the DemoShell.Web create a folder with the name (Services), then add a new Domain service with the name (DemoService), you should be able to see the Entities generated in DBServer library.<br>\r\nIf you didn&rsquo;t see the generated entities (which is a known problem): go to DBServer project and delete *.tt files in Model.edmx, assign the code generation strategy to (Default).<br>\r\n<br>\r\n<a href=\"http://lh5.ggpht.com/-a8ejWblncig/URb6B3xXYCI/AAAAAAAABSY/lWPHmRkoFqA/s1600-h/image%25255B149%25255D.png\" target=\"_blank\"><img title=\"image\" src=\"http://lh5.ggpht.com/-HSpwPFEJ0Y8/URb6CRKVM5I/AAAAAAAABSg/lb7OQuemW5o/image_thumb%25255B134%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"304\" height=\"304\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></a><br>\r\n<br>\r\nthe web solution structure should like the following:<br>\r\n<br>\r\n<img title=\"image\" src=\"http://lh4.ggpht.com/-Gfv3j-IlFVc/URb6Die767I/AAAAAAAABSw/Rb70Glp2rF4/image_thumb%25255B135%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"212\" height=\"196\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"><br>\r\n<br>\r\nRebuild the solution, this will generate the RIA proxy classes in the DBClient.<br>\r\n<h3>6. Wrap the Contacts entities with ObservableEntityCollection</h3>\r\nChecking the generated code in DBClient reveals the following Person Entity:<br>\r\n<br>\r\n<img title=\"image\" src=\"http://lh3.ggpht.com/-mTxUyH-Gwjw/URb6EU_36GI/AAAAAAAABTA/7Djosu2XqRI/image_thumb%25255B136%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"207\" height=\"244\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"><br>\r\n<br>\r\nContacts is of type EntityCollection:<br>\r\n<br>\r\n<a href=\"http://lh4.ggpht.com/-GFow5m4j6b4/URb6E5EqARI/AAAAAAAABTI/EYBJBWJUDmY/s1600-h/image%25255B160%25255D.png\" target=\"_blank\"><img title=\"image\" src=\"http://lh4.ggpht.com/-GwqslGeoFiM/URb6FR1U-pI/AAAAAAAABTQ/jx6KgVoKx0Q/image_thumb%25255B139%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"504\" height=\"152\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></a><br>\r\n<br>\r\nto wrap this collection with ObservableEntityCollection follow these steps:<br>\r\n<br>\r\n<strong>(1) Search in NUget for ObservableEntityCollection and install it in DBClient project</strong><br>\r\n<strong><br>\r\n</strong><a href=\"http://lh4.ggpht.com/-HBvqYCYpths/URb6F0yyNcI/AAAAAAAABTY/iPRj3RPikqo/s1600-h/image%25255B164%25255D.png\" target=\"_blank\"><img title=\"image\" src=\"http://lh4.ggpht.com/-x2jiNyf99hk/URb6GTs8IeI/AAAAAAAABTg/kfjkX3BXq-0/image_thumb%25255B140%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"534\" height=\"385\" style=\"border-width:0px; display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px\"></a><br>\r\n<br>\r\nthis will install the required library in the references section:<br>\r\n<br>\r\n<img title=\"image\" src=\"http://lh4.ggpht.com/-SJOUsn2-8XU/URb6HHmBndI/AAAAAAAABTw/ru24FGB-Mfc/image_thumb%25255B142%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"404\" height=\"314\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"><br>\r\n<strong><br>\r\n</strong><strong>(2) Use the OEC Modeler tool</strong><br>\r\nLaunch the OEC Modeler tool in VS and select DBClient project, then press (Load Entities From Assembly):<br>\r\n<br>\r\n<img title=\"image\" src=\"http://lh6.ggpht.com/-83DVCjgSGsQ/URb6IO0r2MI/AAAAAAAABUA/mLiPWv9lQ5Q/image_thumb%25255B144%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"404\" height=\"304\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"><br>\r\n<br>\r\nBecause Person Entity will contain ObservableEntityCollection we mark it as ObservableCollection:<br>\r\n<br>\r\n<img title=\"image\" src=\"http://lh5.ggpht.com/-d4PoX_oq4y8/URb6I3LvViI/AAAAAAAABUQ/iHLNcZTFq1I/image_thumb%25255B146%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"404\" height=\"49\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"><br>\r\n<br>\r\nWe choose Generate Mapping, the result would be the following files generated in DBClient:<br>\r\n<br>\r\n<br>\r\n<img title=\"image\" src=\"http://lh4.ggpht.com/-uPBJwRdnuSI/URb6JrRzGEI/AAAAAAAABUg/X5rdxNKntQc/image_thumb%25255B147%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"223\" height=\"150\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"><br>\r\n<br>\r\nChecking the file oce_boilerplate.cs you will see that the entity Person is implementing some interfaces, that you don&rsquo;t have to write manually. And in the first few lines it asks you to define some partial methods.<br>\r\n<strong>(3) Implement the partial method</strong><br>\r\nNow the client should now implement some partial methods, which are very easy and self-explanatory.<br>\r\nWe create file Person_Extender.cs and implement the following partial methods:<br>\r\n<pre class=\"csharpcode\"><span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnResetObservableCollections();\n<span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnCreateObservableCollections();\n<span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnUndoObservableCollections();\n<span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnCreateValidationResults();\n<span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnSerializingStart();\n<span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnMarkDirty();\n<span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnClearDirty();</pre>\r\n<br>\r\nFor this simple example we need only to declare the observable collection, in this case it&rsquo;s only one (ObservableContacts) and implement two partial methods (the other methods would be explained in upcoming articles):<br>\r\n<pre class=\"csharpcode\"><span class=\"kwrd\">namespace</span> DBServer\n{\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">partial</span> <span class=\"kwrd\">class</span> Person \n    {\n        <span class=\"kwrd\">public</span> ObservableCollections.ObservableEntityCollection&lt;Contact&gt; ObservableContacts { get; set; }\n\n        \n        <span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnCreateObservableCollections()\n        {\n            <span class=\"kwrd\">this</span>.ObservableContacts = <span class=\"kwrd\">new</span> ObservableCollections.ObservableEntityCollection&lt;Contact&gt;(<span class=\"kwrd\">this</span>.Contacts, <span class=\"kwrd\">this</span>);\n        }\n        <span class=\"kwrd\">partial</span> <span class=\"kwrd\">void</span> OnUndoObservableCollections()\n        {\n            <span class=\"kwrd\">this</span>.ObservableContacts.Undo();\n        }\n       \n    }\n}</pre>\r\n<br>\r\nthat&rsquo;s all you need to get observable collection that wraps the EntityCollection. I&rsquo;m thinking to generate this code in future versions of this addin.<br>\r\n<br>\r\n<h3>7. Using the ObservableEntityCollection</h3>\r\nIn DemoShell project add a reference to DBClient project.<br>\r\n<br>\r\nIt&rsquo;s worth to mention that, the any time you invoke OECModeler in Visual studio, you can always load the same mapping generated previously, because this tool creates a XML file to store your mapping settings.<br>\r\n<br>\r\n<a href=\"http://lh5.ggpht.com/-d92w_fgoAUY/URb6K6If9GI/AAAAAAAABUo/wL9UcqTYPlM/s1600-h/image%25255B183%25255D.png\" target=\"_blank\"><img title=\"image\" src=\"http://lh5.ggpht.com/-FJvVpmrtzyA/URb6LTGV9hI/AAAAAAAABUw/97KJxqwkv98/image_thumb%25255B149%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"404\" height=\"272\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></a><br>\r\n<br>\r\nI&rsquo;m not going to explain how to create MVVM in DemoShell, you can download the example from CodePlex (<a href=\"http://observableec.codeplex.com/releases/view/101540\" target=\"_blank\">here</a>)<br>\r\n<br>\r\nIn nutshell I&rsquo;m using the MVVM Light framework, to create the ViewModel.<br>\r\n<br>\r\nThe XAML file contains two grids one for the parent and the other one is for related contacts.<br>\r\n<br>\r\nWe bind the first grid to the People collection, while the second grid to the CurrentPerson.ObservableContacts:<br>\r\n<br>\r\n<a href=\"http://lh3.ggpht.com/-1zWQmXQSaJs/URb6Lr3WIWI/AAAAAAAABU4/U3AyFzZI0OQ/s1600-h/image%25255B187%25255D.png\" target=\"_blank\"><img title=\"image\" src=\"http://lh4.ggpht.com/-pOgXmigOXsg/URb6MJ8FqeI/AAAAAAAABVA/e6m3tg2yedY/image_thumb%25255B151%25255D.png?imgmax=800\" border=\"0\" alt=\"image\" width=\"404\" height=\"322\" style=\"display:block; float:none; margin-left:auto; margin-right:auto; padding-left:0px; padding-right:0px; padding-top:0px; border-width:0px\"></a><br>\r\n<br>\r\n<br>\r\n<br>\r\nTo download the full example check this link (<a href=\"http://observableec.codeplex.com/releases/view/101540\" target=\"_blank\">Here</a>).<br>\r\n<br>\r\nthe MVVM model is very simple:<br>\r\n<pre class=\"csharpcode\"><span class=\"kwrd\">using</span> DemoShell.Web.Services;\n<span class=\"kwrd\">using</span> GalaSoft.MvvmLight;\n<span class=\"kwrd\">using</span> System.Windows;\n<span class=\"kwrd\">using</span> System.Linq;\n<span class=\"kwrd\">using</span> System.ServiceModel.DomainServices.Client;\n<span class=\"kwrd\">using</span> DBServer;\n<span class=\"kwrd\">using</span> GalaSoft.MvvmLight.Command;\n\n<span class=\"kwrd\">namespace</span> DemoShell.ViewModel\n{\n    <span class=\"rem\">/// &lt;summary&gt;</span>\n    <span class=\"rem\">/// This class contains properties that the main View can data bind to.</span>\n    <span class=\"rem\">/// &lt;para&gt;</span>\n    <span class=\"rem\">/// Use the &lt;strong&gt;mvvminpc&lt;/strong&gt; snippet to add bindable properties to this ViewModel.</span>\n    <span class=\"rem\">/// &lt;/para&gt;</span>\n    <span class=\"rem\">/// &lt;para&gt;</span>\n    <span class=\"rem\">/// You can also use Blend to data bind with the tool's support.</span>\n    <span class=\"rem\">/// &lt;/para&gt;</span>\n    <span class=\"rem\">/// &lt;para&gt;</span>\n    <span class=\"rem\">/// See http://www.galasoft.ch/mvvm</span>\n    <span class=\"rem\">/// &lt;/para&gt;</span>\n    <span class=\"rem\">/// &lt;/summary&gt;</span>\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> MainViewModel : ViewModelBase\n    {\n        <span class=\"kwrd\">private</span> DemoContext _context=<span class=\"kwrd\">new</span> DemoContext();\n        <span class=\"rem\">/// &lt;summary&gt;</span>\n        <span class=\"rem\">/// Initializes a new instance of the MainViewModel class.</span>\n        <span class=\"rem\">/// &lt;/summary&gt;</span>\n        <span class=\"kwrd\">public</span> MainViewModel()\n        {\n            <span class=\"kwrd\">if</span> (IsInDesignMode)\n            {\n                <span class=\"rem\">// Code runs in Blend --&gt; create design time data.</span>\n            }\n            <span class=\"kwrd\">else</span>\n            {\n                <span class=\"rem\">// Code runs &quot;for real&quot;</span>\n                _context.Load(_context.GetPeopleQuery(), operation =&gt;\n                    {\n                       \n                    }, <span class=\"kwrd\">null</span>);\n            }\n\n            \n        }\n\n        <span class=\"rem\">/// &lt;summary&gt;</span>\n        <span class=\"rem\">/// The &lt;see cref=&quot;People&quot; /&gt; property's name.</span>\n        <span class=\"rem\">/// &lt;/summary&gt;</span>\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">const</span> <span class=\"kwrd\">string</span> PeoplePropertyName = <span class=\"str\">&quot;People&quot;</span>;\n\n        <span class=\"kwrd\">private</span> EntitySet&lt;Person&gt; _People = <span class=\"kwrd\">new</span> EntitySet&lt;Person&gt;();\n        <span class=\"kwrd\">private</span> EntitySet&lt;Person&gt; _sampleData = <span class=\"kwrd\">new</span> EntitySet&lt;Person&gt;();\n\n        <span class=\"rem\">/// &lt;summary&gt;</span>\n        <span class=\"rem\">/// Sets and gets the People property.</span>\n        <span class=\"rem\">/// Changes to that property's value raise the PropertyChanged event. </span>\n        <span class=\"rem\">/// &lt;/summary&gt;</span>\n        <span class=\"kwrd\">public</span> EntitySet&lt;Person&gt; People\n        {\n            get\n            {\n                <span class=\"kwrd\">if</span> (!IsInDesignMode)\n                    <span class=\"kwrd\">return</span> _context.Persons;\n                <span class=\"kwrd\">else</span>\n                {\n                    <span class=\"kwrd\">for</span> (<span class=\"kwrd\">int</span> i = 0; i &lt; 100; i&#43;&#43;)\n                    {\n                        var person = <span class=\"kwrd\">new</span> Person() { FirstName = <span class=\"kwrd\">string</span>.Format(<span class=\"str\">&quot;FirstName{0}&quot;</span>, i), LastName = <span class=\"kwrd\">string</span>.Format(<span class=\"str\">&quot;LastName{0}&quot;</span>, i), Id = i };\n                        person.Contacts.Add(<span class=\"kwrd\">new</span> Contact() { Address = <span class=\"str\">&quot;Address in canada&quot;</span> });\n                        _sampleData.Add(person);\n                    }\n                    <span class=\"kwrd\">return</span> _sampleData;\n                }\n            }\n\n            set\n            {               \n                RaisePropertyChanged(PeoplePropertyName);\n            }\n        }\n\n        <span class=\"rem\">/// &lt;summary&gt;</span>\n        <span class=\"rem\">/// The &lt;see cref=&quot;SelectedPerson&quot; /&gt; property's name.</span>\n        <span class=\"rem\">/// &lt;/summary&gt;</span>\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">const</span> <span class=\"kwrd\">string</span> SelectedPersonPropertyName = <span class=\"str\">&quot;SelectedPerson&quot;</span>;\n\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">int</span> _selectedPerson = -1;\n\n        <span class=\"rem\">/// &lt;summary&gt;</span>\n        <span class=\"rem\">/// Sets and gets the SelectedPerson property.</span>\n        <span class=\"rem\">/// Changes to that property's value raise the PropertyChanged event. </span>\n        <span class=\"rem\">/// &lt;/summary&gt;</span>\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">int</span> SelectedPerson\n        {\n            get\n            {\n                <span class=\"kwrd\">return</span> _selectedPerson;\n            }\n\n            set\n            {\n                <span class=\"kwrd\">if</span> (_selectedPerson == <span class=\"kwrd\">value</span>)\n                {\n                    <span class=\"kwrd\">return</span>;\n                }\n\n                RaisePropertyChanging(SelectedPersonPropertyName);\n                _selectedPerson = <span class=\"kwrd\">value</span>;\n                RaisePropertyChanged(SelectedPersonPropertyName);\n                RaisePropertyChanged(CurrentPersonPropertyName);\n            }\n        }\n\n        <span class=\"rem\">/// &lt;summary&gt;</span>\n        <span class=\"rem\">/// The &lt;see cref=&quot;CurrentPerson&quot; /&gt; property's name.</span>\n        <span class=\"rem\">/// &lt;/summary&gt;</span>\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">const</span> <span class=\"kwrd\">string</span> CurrentPersonPropertyName = <span class=\"str\">&quot;CurrentPerson&quot;</span>;\n\n       \n\n        <span class=\"rem\">/// &lt;summary&gt;</span>\n        <span class=\"rem\">/// Sets and gets the CurrentPerson property.</span>\n        <span class=\"rem\">/// Changes to that property's value raise the PropertyChanged event. </span>\n        <span class=\"rem\">/// &lt;/summary&gt;</span>\n        <span class=\"kwrd\">public</span> Person CurrentPerson\n        {\n            get\n            {\n                <span class=\"kwrd\">if</span> (SelectedPerson &gt; -1) <span class=\"kwrd\">return</span> People.ElementAt(SelectedPerson);\n                <span class=\"kwrd\">return</span> <span class=\"kwrd\">null</span>;\n            }\n\n            set\n            {              \n              \n                RaisePropertyChanged(CurrentPersonPropertyName);\n            }\n        }\n\n        <span class=\"kwrd\">private</span> RelayCommand _undoPerson;\n\n        <span class=\"rem\">/// &lt;summary&gt;</span>\n        <span class=\"rem\">/// Gets the UndoPerson.</span>\n        <span class=\"rem\">/// &lt;/summary&gt;</span>\n        <span class=\"kwrd\">public</span> RelayCommand UndoPerson\n        {\n            get\n            {\n                <span class=\"kwrd\">return</span> _undoPerson\n                    ?? (_undoPerson = <span class=\"kwrd\">new</span> RelayCommand(\n                                          () =&gt;\n                                          {\n                                              <span class=\"kwrd\">if</span> (CurrentPerson != <span class=\"kwrd\">null</span>)\n                                                  CurrentPerson.Undo();\n                                          }));\n            }\n        }\n       \n    }\n}</pre>\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br>\r\nAs we note there is a binding to command undo the changes in the parent and child collections with one line of code:<br>\r\n<pre class=\"csharpcode\"><span class=\"kwrd\">if</span> (CurrentPerson != <span class=\"kwrd\">null</span>)\n                     CurrentPerson.Undo();</pre>\r\n<br>\r\nThis will revert the ObservableEntityCollection to its original state, although It&rsquo;s not included in the example, these changes include adding or removing child row.</div>\r\n<div dir=\"ltr\" style=\"text-align:left\"><a href=\"http://www.screencast.com/t/K9MconYWHG\" target=\"_blank\">Video illustrating the example</a></div>\r\n<div dir=\"ltr\" style=\"text-align:left\">\r\n<h2>How can you help?</h2>\r\n<div dir=\"ltr\">This solution including the add-in is an open source project hosted on CodePlex, so feel free to review the code, and modify it.</div>\r\n<div dir=\"ltr\">Enhancements that could be done are:</div>\r\n<ol dir=\"ltr\">\r\n<li>OEC-Modeler: it could be improved further to provide a more professional designer surface similar to EntityFramework designer that is integrated in Visual studio 2012 IDE.\r\n</li><li>Loading the Silverlight assembly (which contains the Entities) in OECModeler is still buggy, some dependencies (Silverlight and RIA libraries) should be loaded automatically from predefined paths, and should be generalized to support future Silverlight\r\n releases. </li><li>The OEC-Modeler could be extended to enumerate the EntityCollections in each Entity, with the option to specify it as Wrapped.\r\n</li><li>Wrapped EntityCollection requires the modification of the T4 template to automatically generate OEC wrappers. This would be another step to minimize the work to be done by the developer.\r\n</li><li>typos mistakes :) </li></ol>\r\n<div dir=\"ltr\">Reporting bugs and features' requests are welcome through codeplex.</div>\r\n</div>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2013-02-16T22:47:20.08-08:00"
}