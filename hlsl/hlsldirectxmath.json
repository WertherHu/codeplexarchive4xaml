{
  "ProjectName": "hlsldirectxmath",
  "Title": "DirectXMath-based HLSL-like C++ library",
  "Description": "This is a little hlsl-style C++ 11 (VS2012) library that makes use of DirectXMath.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<p>This is a little hlsl-style C&#43;&#43; 11 (VS2012) library that makes use of DirectXMath.<br>\r\n<br>\r\nCustom traits combined with a lot of std::enabled_if&lt;&gt; are employed to route the compiler to the optimal operators/functions.<br>\r\n<br>\r\nThe purpose is to go from:<br>\r\n<br>\r\n</p>\r\n<div id=\"codeSnippetWrapper\">\r\n<pre id=\"codeSnippet\" style=\"overflow:visible; font-size:8pt; font-family:'Courier New',courier,monospace; color:black; direction:ltr; text-align:left; margin:0em; line-height:12pt; width:100%; background-color:#f4f4f4; border-style:none; padding:0px\"><span style=\"color:#0000ff\">float</span> blinn_phong_xm( <span style=\"color:#0000ff\">const</span> XMFLOAT3A &amp;normal, <span style=\"color:#0000ff\">const</span> XMFLOAT3A &amp;view, <span style=\"color:#0000ff\">const</span> XMFLOAT3A &amp;light )<br>{    <br>  <span style=\"color:#0000ff\">return</span> XMVectorGetX( XMVector3Dot( XMVector3Normalize( XMVectorAdd( XMLoadFloat3A(&amp;view ), XMLoadFloat3A( &amp;light ) ) ), XMLoadFloat3A( &amp;normal ) ) );    <br>}<br></pre>\r\n</div>\r\n<p><br>\r\n<br>\r\nWith the generated x86-SSE code (VS2012):<br>\r\n<br>\r\n</p>\r\n<pre>mov\teax, DWORD PTR _light$[esp-4]\nmovaps\txmm4, XMMWORD PTR ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B\nmovaps\txmm5, XMMWORD PTR [edx]\nmovaps\txmm0, XMMWORD PTR [eax]\nandps\txmm5, xmm4\nandps\txmm0, xmm4\naddps\txmm5, xmm0\nmovaps\txmm2, XMMWORD PTR ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B\nmovaps\txmm3, xmm5\nmulps\txmm3, xmm5\nmovaps\txmm0, xmm3\nshufps\txmm0, xmm3, 153\t\t\t\t; 00000099H\naddss\txmm3, xmm0\nshufps\txmm0, xmm0, 85\t\t\t\t; 00000055H\naddss\txmm3, xmm0\nxorps\txmm0, xmm0\nshufps\txmm3, xmm3, 0\nsqrtps\txmm1, xmm3\ncmpneqps xmm2, xmm3\ndivps\txmm5, xmm1\ncmpneqps xmm1, xmm0\nmovaps\txmm0, XMMWORD PTR [ecx]\nandps\txmm5, xmm1\nandps\txmm5, xmm2\nandnps\txmm2, XMMWORD PTR ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B\norps\txmm5, xmm2\nandps\txmm0, xmm4\nmulps\txmm5, xmm0\nmovaps\txmm1, xmm5\nshufps\txmm1, xmm5, 153\t\t\t\t; 00000099H\naddss\txmm5, xmm1\nshufps\txmm1, xmm1, 85\t\t\t\t; 00000055H\naddss\txmm5, xmm1\nmovaps\txmm0, xmm5\n</pre>\r\n<p><br>\r\n<br>\r\nTo:<br>\r\n<br>\r\n</p>\r\n<div id=\"codeSnippetWrapper\">\r\n<pre id=\"codeSnippet\" style=\"overflow:visible; font-size:8pt; font-family:'Courier New',courier,monospace; color:black; direction:ltr; text-align:left; margin:0em; line-height:12pt; width:100%; background-color:#f4f4f4; border-style:none; padding:0px\"><span style=\"color:#0000ff\">float</span> blinn_phong( <span style=\"color:#0000ff\">const</span> float3a &amp;normal, <span style=\"color:#0000ff\">const</span> float3a &amp;view, <span style=\"color:#0000ff\">const</span> float3a &amp;light )<br>{<br>  <span style=\"color:#0000ff\">auto</span> h = normalize( view &#43; light );<br>  <span style=\"color:#0000ff\">return</span> dot( h, normal );<br>}<br></pre>\r\n</div>\r\n<p><br>\r\n<br>\r\nGenerating:<br>\r\n<br>\r\n</p>\r\n<pre>mov\teax, DWORD PTR _light$[esp-4]\nmovaps\txmm3, XMMWORD PTR ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B\nmovaps\txmm4, XMMWORD PTR [edx]\nmovaps\txmm0, XMMWORD PTR [eax]\nandps\txmm4, xmm3\nandps\txmm0, xmm3\naddps\txmm4, xmm0\nmovaps\txmm2, xmm4\nmulps\txmm2, xmm4\nmovaps\txmm0, xmm2\nshufps\txmm0, xmm2, 153\t\t\t\t; 00000099H\naddss\txmm2, xmm0\nshufps\txmm0, xmm0, 85\t\t\t\t; 00000055H\naddss\txmm2, xmm0\nxorps\txmm0, xmm0\nshufps\txmm2, xmm2, 0\nsqrtps\txmm1, xmm2\ncmpneqps xmm2, XMMWORD PTR ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B\ndivps\txmm4, xmm1\ncmpneqps xmm1, xmm0\nmovaps\txmm0, XMMWORD PTR [ecx]\nandps\txmm4, xmm1\nandps\txmm4, xmm2\nandnps\txmm2, XMMWORD PTR ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B\norps\txmm4, xmm2\nandps\txmm0, xmm3\nmulps\txmm4, xmm0\nmovaps\txmm1, xmm4\nshufps\txmm1, xmm4, 153\t\t\t\t; 00000099H\naddss\txmm4, xmm1\nshufps\txmm1, xmm1, 85\t\t\t\t; 00000055H\naddss\txmm4, xmm1\nmovaps\txmm0, xmm4\n</pre>\r\n<p><br>\r\n<br>\r\nSo, mostly the same asm code.<br>\r\n<br>\r\nIn fact this might be interpretable as a push to make DirectXMath evolve into these kind of C&#43;&#43; 11 HLSL-style lib. (plain DirectXMath is a pain to work with)<br>\r\n<br>\r\nWe (realtime 3D developers) need an efficient and straightforward HLSL/GLSL-like C&#43;&#43; lib (Boost or MIT).</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "HLSL,DirectXMath,C++,3D,",
  "LastEdited": "2013-10-03T06:13:35.67-07:00"
}