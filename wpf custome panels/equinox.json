{
  "ProjectName": "equinox",
  "Title": "Crystalbyte Equinox",
  "Description": "Equinox is a state of the art email messaging library targeting the .NET Framework and the Mono Runtime.\r\nThe library contains full implementations for the IMAP, SMTP and POP3 protocols.\r\nIn addition the library offers a unique and fully integrated LINQ provider for the IMAP protocol, in short LINQ to IMAP.\r\nThe project is written in C#, fully managed and licenced under the Ms-PL.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">\r\n<div style=\"float:right\">\r\n<h2>LINQ to IMAP syntax example</h2>\r\n<p>In this example the envelopes and uids of all messages are being fetched.<br>\r\nNo IMAP syntax knowledge is necessary to create dynamic queries.</p>\r\n<p><img src=\"http://download.codeplex.com/download?ProjectName=equinox&DownloadId=222139\" alt=\"LINQ example syntax\" width=\"396\" height=\"183\" style=\"float:left; margin-bottom:10px\"></p>\r\n</div>\r\n<p><span style=\"font-size:27px; font-weight:bold\">Welcome to the Equinox Community Site</span></p>\r\n<p>Equinox is a state of the art email messaging library targeting&nbsp;the .NET Framework and the Mono Runtime.<br>\r\nThe library contains full implementations for the IMAP, SMTP and POP3 protocols.<br>\r\nIn addition the library offers a unique and fully integrated LINQ provider for the IMAP protocol, in short LINQ to IMAP.<br>\r\nThe project is written in C#, fully managed and licenced under the Ms-PL.</p>\r\n<p>You can read more about the project inside the&nbsp;<a href=\"http://equinox.codeplex.com/documentation\">Documentation</a> section.<br>\r\nIf you find issues or have questions drop us a note, infact we welcome any <a href=\"http://equinox.codeplex.com/discussions\" target=\"_self\">\r\nfeedback</a>&nbsp;you have on your experience.</p>\r\n<h2>Release 0.4.0.0 is out</h2>\r\n<p>The current release is online and we've come a full circle.</p>\r\n<ol>\r\n<li>In addition to some bug fixes, we now fully support the <strong>POP3</strong> protocol.\r\n</li><li>We totally redesigned the handling of embedded content, embedded files are now attached to the view they belong to and are no longer added to the general attachments property.\r\n</li><li>Further more it is now possible to not just receive but also send embedded content by simply attaching an attachment it to its associated view and setting the Content-Id for identification, matching the placeholder inside the view.\r\n</li><li>We improved the IDLE command to work asynchronously under the hood making it possible to reuse the active connection to respond to propagated status updates and resume the session afterwards, no extra connections are necessary anymore.\r\n</li><li>We now support all status updates from an IMAP server making it possible to even respond to message status changes, i.E. message was marked as seen or deleted by another client.\r\n</li></ol>\r\n<p>There are still open requests and some rails that need polishing, but for now we will concentrate on updating the documentation and fixing critical issues if any arise.<br>\r\nWe are currently retrofitting the documentation which should go online next week.<br>\r\nThe new docu will contain a FAQ section as well as examples and solution to question like, how the hell does Outlook/Thunderbird do that and why does Lotus Notes $!%&gt; so hard as well as examples to the more exotic features of the IMAP protocol, a list of\r\n do's and dont's and many examples on how to use the LINQ engine to minimize queries, thus speeding up response times.</p>\r\n</div><div class=\"ClearBoth\"></div>",
  "TagList": "IMAP,SMTP,C#,MIME,EMAIL,WPF,.NET 3.5,mono,Client,socket,Equinox,LINQ to IMAP,LINQ,",
  "LastEdited": "2012-07-01T09:43:48.173-07:00"
}