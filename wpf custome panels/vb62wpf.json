{
  "ProjectName": "vb62wpf",
  "Title": "VB6 To WPF Project Migration Aid Tool",
  "Description": "The VB6 To WPF Project Migration Aid Tool will read classes, modules, forms, user controls, and even ActiveX documents created in Visual Basic 6, and map them to recognizable XAML & code-behind files for Windows Presentation Foundation, for Visual Studio 2008 (or later).",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\">Jumpstart your VB6-to-WPF migration efforts with this tool. <br /><br />The VB6 To WPF Project Migration Aid Tool will read classes, modules, forms, user controls, and even ActiveX documents created in Visual Basic 6, and map them to recognizable XAML &amp; code-behind files for Windows Presentation Foundation, for Visual Studio 2008 (or later).<br /><br />This tool should be seen as just the first step for a serious, carefully well-planned migration project; it will create source files that, then, will require some additional work to be fully compilable as WPF applications.<br /><br />New in Release 3:<br /><br />- Fixed a bug where, if your Form / User Control / ActiveX Document does not contain any external resources (in the form of .frx, .ctx or .dox files), context menus were not being created at all. This now works as expected. Context Menus are always added to the Window / User Control as Resources.<br /><br />- Status Bar panels are now being recognized &amp; created, at least with some basic information. As always, elements that are not recognized of them are placed as comments in the XAML for further perusal.<br /><br />- ActiveX controls&#39; WindowsFormsHost tags were inserted with no width/height/margin info, instead leaving it to the hosted control. This caused WindowsFormsHost tags to cover <b>all</b> of the container&#39;s area (GroupBoxes, or even the Grids that define the inner contents of the whole Window / User Control), making it very difficult to work with the other controls in the WPF designer, and obscuring every other control in the area when finally being run. This has been fixed; now, width/height/margin info is applied to the WindowsFormsHost tag, instead of the control (the hosted control will occupy, by default, the whole area of the WindowsFormsHost container), giving it the dimensions they were supposed to have all the time in the new Window / User Control.<br /><br />- Minor changes to generated code-behind, to recognize better some variables with names now tagged as &quot;reserved&quot; in the language, names, and some &quot;As Variant&quot; and &quot;As Any&quot; occurrences in it.<br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "VisualBasic,WindowsPresentationF,VB6,WPF,Migrate,Convert,",
  "LastEdited": "2009-11-09T10:08:19.037-08:00"
}