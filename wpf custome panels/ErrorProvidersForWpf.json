{
  "ProjectName": "ErrorProvidersForWpf",
  "Title": "ErrorProviders for WPF",
  "Description": "Ce projet propose des contrôles container basé sur le contrôle Grid et StackPanel (pour le moment ) qui permettent de valider les contrôles enfants.\n\nDe la même manière que le contrôle ErrorProvider des Winform vous permet de modifier l'apparence des contrôles dont le contenu est jugé non valide, les contrôles (Grid/StackPanel)ErrorProvider vous permettent de définir quelle propriété doit être modifié et quelle valeur il faut lui appliquer. Cela peut-être aussi bien une propriété \"simple\" ( comme Background ) qu'une propriété complexe ( comme Style ). De plus vous pouvez appliquer les paramètres de validation au niveau du container afin que tout les enfants les utilisent mais vous pouvez également redéfinir par nœud enfant ces paramètres afin de les personnaliser.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Ce projet propose des contr&#244;les container bas&#233; sur le contr&#244;le Grid et StackPanel (pour le moment ) qui permettent de valider les contr&#244;les enfants.<br /><br />De la m&#234;me mani&#232;re que le contr&#244;le ErrorProvider des Winform vous permet de modifier l&#39;apparence des contr&#244;les dont le contenu est jug&#233; non valide, les contr&#244;les (Grid/StackPanel)ErrorProvider vous permettent de d&#233;finir quelle propri&#233;t&#233; doit &#234;tre modifi&#233; et quelle valeur il faut lui appliquer. Cela peut-&#234;tre aussi bien une propri&#233;t&#233; &quot;simple&quot; ( comme Background ) qu&#39;une propri&#233;t&#233; complexe ( comme Style ). De plus vous pouvez appliquer les param&#232;tres de validation au niveau du container afin que tout les enfants les utilisent mais vous pouvez &#233;galement red&#233;finir par nœud enfant ces param&#232;tres afin de les personnaliser.<br /><br />Exemple d&#39;utilisation : <br /><pre>\n&lt;Window x:Class=&quot;DemoApp.Window1&quot;\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;\n\n    &lt;StackPanelErrorProvider x:Name=&quot;errorProvider&quot; ErrorMessage=&quot;Invalid data&quot; ErrorPropertyModified=&quot;Background&quot; ErrorValue=&quot;Red&quot; &gt;\n        &lt;TextBlock Text=&quot;Password&quot;  /&gt;\n        &lt;PasswordBox x:Name=&quot;passwordBox&quot; /&gt;\n\n    &lt;/StackPanelErrorProvider&gt;\n&lt;/Window&gt;\n</pre><br /><br />et cot&#233; code C#<br /><br />Dans le constructeur  apr&#232;s le InitializeComponent();<br /><pre>\n  this.errorProvider.ValidateMethod = new ErrorProviders.ValidateDataCallback(ValidateMethodCollection.GenericValidateMethod);\n</pre><br /><br />et la m&#233;thode de validation de donn&#233;es :<br /><pre>\n  public static bool GenericValidateMethod(UIElement element)\n        {\n            if (element is TextBox)\n            {\n                return !string.IsNullOrEmpty(((TextBox)element).Text);\n            }\n            else if (element is ComboBox)\n            {\n                return ((ComboBox)element).SelectedItem != null;\n            }\n\n\n            //Return true as default\n            return true;\n        }\n</pre></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2008-06-11T07:34:06.13-07:00"
}