{
  "ProjectName": "PhantomMvvmToolKit",
  "Title": "Phantom MVVM ToolKit",
  "Description": "This project is an attempt to make a very noninvasive framework to assist in MVVM application design for Silverlight and WPF.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This project is an attempt to make a very noninvasive framework to assist in MVVM application design for Silverlight and WPF.<br /><br /><b>Objective</b><br />If you look at most of the MVVM took kits out there you will see that most of them force you to inherit from a base class or an abstract class.  This framework is an attempt to make a MVVM toolkit that works off of interfaces and extensions while also making a limited impact to the code base that implements this.<br /><br /><b>Functional Ability</b><br />Version 1.0<br />1. Extensions will allow a cross thread safe way to invoke the firing of PropertyChanged and/or CanExecuteChanged events.<br />2. Extensions will allow a Delay firing of PropertyChanged and/or CanExecuteChanged.<br /><br />Add Version 1.1<br />3. &quot;ToVisibility&quot; Converter that converts most primitive data types to a Visibility value.<br />4. &quot;ToOpacity&quot; Converter that converts most primitive data types to a float value from 0 to 1 for Opacity.<br /><br /><b>Benifit</b><br />1. WPF and Silverlight UI threads do not allow any updates by code outside of it&#39;s thread.  This toolkit will allow you to mark any PropertyChanged and/or CanExecuteChanged event to be thread safe so you do not have to make events prompt the view to add a dispatcher call to update the bindings.  In effect it will prevent a &quot;System.UnauthorizedAccessException: Invalid cross-thread access.&quot; error when using threading in a very clean way for MVVM.<br />2. By using this toolkit, you will be able to delay the the PropertyChanged and/or CanExecuteChanged by using the &quot;DelayNotifyEvents&quot; or &quot;DelayPropertyChangedEvents&quot;.  This will allow a consolidation of PropertyChanged event processing on large model or view model calculations.<br />3. Two very common types of data converters to use in XAML to eliminate unneeded conversions inside ViewModel designs.<br /><br /><b>Implementation Example</b><br />In the downloads section, the source code has a silverlight testing application.  There is a Example.cs file that can be used to see the basic implemention of this TooKit as well as a basic functional silverlight App that can be used to test the ToolKit.</div><div class=\"ClearBoth\"></div>",
  "TagList": "Invalid cross-thread,WPF MVVM,Silverlight MVVM,INotifyPropertyChang,ICommand,MVVM,Toolkit,",
  "LastEdited": "2011-11-26T13:51:50.987-08:00"
}