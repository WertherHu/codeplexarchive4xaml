{
  "ProjectName": "PizzaManiacUI2",
  "Title": "PizzaManiac 2 - Remote Comms and Realistic Feature Set",
  "Description": "Second iteration in a series of demos on the use of WPF to service non-trivial UI requirements",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h3><u>Overview</u></h3>\r\nThis is part 2 in a series of demos to accompany an <a href=\"http://www.codeplex.com/pizzamania\">East Bay .Net User&#39;s Group project</a>.  While the User&#39;s Group project takes a &quot;software-as-service&quot; approach, our series will focus primarily on the presentation layer, applying WPF to a set of non-trivial interface requirements, while paying special attention to the need for clean, maintainable, extensible code.  The project consists of an OrderEntry application, used to generate and track walk-in and phone-in customer orders, with a separate OrderMonitor application to display open pizza orders to the kitchen staff.  We are NOT trying to suggest that this particular UI (or the use of WPF, for that matter), would represent an appropriate solution for a similar set of <a href=\"http://www.micros.com/NR/rdonlyres/49A20E3E-02EC-4E0E-9986-72B0511B0DF5/0/PizzaHutUK.pdf\">real-world business requirements</a>, but it enables us to discuss many real-world project concerns while exercising a broad range of WPF features.<br />\n<ul><li><a href=\"http://www.codeplex.com/pizzamaniacUI1\">PizzaManiac 1</a> :  Simplistic WPF layout to support basic application structure and behavior</li>\n<li><b>PizzaManiac 2 : Realistic feature set, real-time WCF communications, and some UI customization</b></li>\n<li><a href=\"http://www.codeplex.com/pizzamaniacUI3\">PizzaManiac 3</a> :  Significant increase in complexity, to support multiple product types</li>\n<li>PizzaManiac 4 :  Robust communications and data management, .Net 3.5 updates, and a more polished UI</li></ul>\n<br />\n<h3><u>What&#39;s New?</u></h3>\r\nThe application now supports a much more realistic level of user interactivity, uses WCF to communicate between the OrderEntry and OrderMonitor clients in real-time, and makes some initial progress toward a more aesthetically pleasing UI.<br /><br />Explicit &quot;Add/Edit/Delete&quot; buttons in the OrderEntry client have been eliminated, in favor of support for clicking directly on list elements, with each element able to summarize a large amount of order status information.<br /><br /><img src=\"/projects/PizzaManiacUI2/85479d8a-1d5e-4808-b85f-1f3656469b75\" alt=\"smallOrderEntry.png\" title=\"smallOrderEntry.png\" /><br /><br /><br />The OrderMonitor marks orders that have been cancelled (or edited) with a red &quot;Cancelled&quot; overlay, and displays them at 50% opacity.  Both clients use colored borders to highlight overdue orders (yellow as a warning, and red for those which are already late, with time limits currently set to one and two minutes, for demo purposes).<br /><br /><img src=\"/projects/PizzaManiacUI2/8225cf77-6532-4adf-bd99-c2df3106d950\" alt=\"smallOrderMonitor.png\" title=\"smallOrderMonitor.png\" /><br /><br /><br />Controls in the Add/Edit view present a much more customized appearance compared with the <a href=\"http://www.codeplex.com/pizzamaniacUI1\">earlier version</a> of our project.  New features include the ability to schedule an order, and to assign delivery to an authorized driver after receiving notification (from OrderMonitor) that all pizzas in the current order have been processed.  Marking an order &quot;complete&quot; causes it to become locked, preventing any further changes.<br /><br />Note that pizza options and pricing, processing time limits, and other aspects of the application can be configured through .xml files located in the output directory.<br /><br /><img src=\"/projects/PizzaManiacUI2/443b76de-60ee-4194-ab0a-9baf26e495c2\" alt=\"smallOrderEdit.png\" title=\"smallOrderEdit.png\" />    <img src=\"/projects/PizzaManiacUI2/fdd1b483-4e1b-4008-b85b-cfedf87b1918\" alt=\"smallOrderEditCustomer.png\" title=\"smallOrderEditCustomer.png\" /><br /><br />\n<h3><u>Basic User&#39;s Guide</u></h3>\r\n<ul><li>Launch &quot;SimpleServiceHost.exe&quot; in the _Output\\Debug directory</li>\n<li>Launch OrderEntryUI.exe and OrderMonitorUI.exe</li>\n<li>In the OrderEntry client, click the &quot;Add New Order&quot; button, add at least one pizza, and click &quot;Save Changes&quot;</li>\n<li>To simulate that a Pizza is finished cooking, click on the Pizza in the OrderMonitor client, and click the round &quot;X&quot; button</li>\n<li>To edit an existing order, or to assign delivery or mark an order completed, click on the order in the OrderEntry client.</li>\n<li>Scheduled orders are started automatically, when the current time is within 30 minutes of the scheduled time for that order.</li>\n<li>Changes to orders already in progress will cause the original order to be cancelled, and a new order to be started.</li></ul>\n\n<h3><u>UI Implementation Notes</u></h3>\r\nThe &quot;Add New Order&quot; button is an ordinary Button placed above a transparent ListBox, with list items and the button sharing the same underlying visual style, to make the button appear to be part of the list.<br /><br />Order and Pizza lists have been customized simply by placing them on a styled background, while the more complex requirements of the TabControl required actually editing a local copy of the associated ControlTemplate.<br /><br />The &quot;Expected&quot; order completion field is actually a Windows Forms &quot;DateTimePicker&quot; control.  We must temporarily HIDE the interop host each time we display the Add/Edit view, since embedded Windows Forms controls are unable to participate in any animation performed by their WPF container.<br /><br />Preferring markup to code wherever possible throughout the presentation layer greatly simplifies our implementation, but requires continuous refactoring to keep the Xaml clean and maintainable.  We continue to separate color definitions from the code which references them, but it is usually easier to keep Style definitions in the same file with the code which references them, until a large volume of inter-related styles starts to interfere with our ability to read the associated layout, and makes it more convenient to move the styles into their own ResourceDictionary.  Grouping files using prefixes such as &quot;convert...&quot;, &quot;res...&quot;, and &quot;view...&quot; makes it easier to navigate the source, especially after you&#39;ve been away from the project for awhile.<br /><br />One interesting use of ValueConverter in the current implementation is to auto-size the Item/Size/Price column widths to fill the available grid area.<br /><br />\n<h3><u>Remote Communications Implementation Notes</u></h3>\r\nTo handle communication between the clients, we are currently relying on simple &quot;OneWay&quot; messaging with callbacks, over WCF named pipes, with two services hosted inside a single console app., &quot;SimpleServiceHost.exe&quot;, which must be launched manually before starting either of the UI clients.  We will probably transition to use WAS extensions to IIS, and replace LINQ queries to XML files with data pulled from an actual database in a future iteration of our project.<br /><br /><img src=\"/projects/PizzaManiacUI2/26d7db3b-8b91-4560-b3ec-10830fea7554\" alt=\"smallWCFArchitecture.png\" title=\"smallWCFArchitecture.png\" /><br /><br />Although there&#39;s no benefit in a project this small, we&#39;ve followed recommended WCF best practices in separating data contracts from service contracts and service implementations, and we&#39;ve taken the additional step of creating a separate &quot;ServiceAbstraction&quot; class to isolate proxy references from WPF presentation code in the client.<br /><br />One very convenient (and unexpected) technique involves EXTENDING local data references generated via the &quot;Add Service Reference&quot; option, enabling each WPF client to create bindings to whatever interpretation of a &quot;Pizza&quot; (for example) is most convenient to meet its own specific display requirements.  Note that we can define constructors for our extended classes in the OrderEntry client, but must override deserialization to extend classes in OrderMonitor, because OrderMonitor just receives Pizzas which were instantiated in the OrderEntry application.<br /><br /><b>Generating a local service reference involves a few extra steps in the OrderEntry client...</b><br />\n<ol><li>Launch SimpleServiceHost.exe manually (NOT from inside Visual Studio&#39;s debug environment)</li>\n<li>Right-click on the client project, select &quot;Add Service Reference&quot;, and enter information shown in the dialogs below</li>\n<li>Set the &quot;Show All Files&quot; option for the project, and change the two &quot;Collection&quot; references to &quot;ObservableCollection&quot; in the file <i>&quot;Service References\\OrderProcessing\\Reference.svmap\\References.cs&quot;</i></li></ol>\n<br /><img src=\"/projects/PizzaManiacUI2/8e491c1c-f663-48f0-ba9f-9254dac06043\" alt=\"smallAddServiceRef.png\" title=\"smallAddServiceRef.png\" /><br /><br /><img src=\"/projects/PizzaManiacUI2/bd9a3e50-ebbb-4abc-8668-0e44069b4f77\" alt=\"smallAddServiceRefAdvanced.png\" title=\"smallAddServiceRefAdvanced.png\" /><br />\n<ul><li>Note that, in order to set a breakpoint inside our extended objects, we must first comment-out the attribute <i>&quot;System.Diagnotics.DebuggerStepThroughAttribute&quot;</i> for that object, in References.cs.</li></ul>\n<br />\n<h3><u>What&#39;s Next?</u></h3>\r\nEven with our attention to code maintenance concerns, the volume of files in our projects is starting to interfere with our ability to navigate the source.  We&#39;ll need to address this in our next iteration, especially with the increased complexity that will come when we add support for order items other than just Pizzas.<br /><br />\n<h3><u>Other projects by Andy L.</u></h3>\r\n<ul><li><a href=\"http://www.codeproject.com/KB/WPF/XSButton.aspx\">WPF Custom Controls - Without the Pain</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/CustomFrames.aspx\">WPF Non-Client Area Design Techniques For Custom Window Frames</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/AlarmBar.aspx\">An Animated AlarmBar Custom Control in WPF</a></li>\n<li><a href=\"http://www.codeproject.com/KB/WPF/WatermarkTextBox.aspx\">A WatermarkTextBox in 3 Lines of XAML</a></li></ul>\n<br /><br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "C#,Xaml,PizzaMania,WPF,WCF,",
  "LastEdited": "2008-10-13T20:39:19.367-07:00"
}