{
  "ProjectName": "DynamicMVVM",
  "Title": "DynamicMVVM",
  "Description": "Dynamic MVVM  enables you to quickly build a functional MVVM application, based on WPF without ICommand and XAML and viewmodel  Validation.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />Dynamic MVVM  enables you to quickly build a functional MVVM application, based on WPF without ICommand and XAML and viewmodel  Validation.<br /><br /><br /><b>**Quick start **</b><br /><br />The <b>DynamicMVVM</b> is a set of classes which help developer to get started in the Model - View - ViewModel pattern WPF (not supported on Silverlight). It is a small framework that contains only Dynamic ViewModel  and Dynamic Model.<br />The <b>DynamicViewModel</b> Allows developer to create the Command’s Execute method and CanExecute method without the ICommand property.<br />e.g.  In standard fashion way your ViewModel as below<br /><br />public class PersonDetailsViewModel : INotifyPropertyChanged<br />{<br />        public ICommand SaveCommand { get; set; }<br />        public ICommand CancelCommand { get; set; }<br /><br />        public PersonDetailsViewModel()<br />        {<br />            Model = new PersonModel{<br />                                      Id = 1,<br />                                      FName = &quot;Abc&quot;,<br />                                      LName = &quot;Xyz&quot;,<br />                                      Dob = new DateTime(2011, 1, 1),<br />                                      Active = true,<br />                                      Salary = 12345<br />                                    };<br /><br />            SaveCommand = new RelayCommand((object obj) =&gt;<br />                                               {<br />                                                   //your code...<br />                                               }, (object obj) =&gt; Model.IsDirty);<br />            CancelCommand = new RelayCommand((object obj) =&gt;<br />                                                 {<br />                                                     //your code...<br />                                                 }, (object obj) =&gt; Model.IsDirty);<br />        }<br />        public PersonModel Model { get; set; }<br />... your rest of code<br />}<br /><br />Instead of above demonstrated code, you can write as below code with the DynamicMVVM<br /><br />public class PersonDetailsViewModel : DynamicViewModel<br />    {<br />        public PersonDetailsViewModel()<br />        {<br />                        Model = new PersonModel{<br />                                      Id = 1,<br />                                      FName = &quot;Abc&quot;,<br />                                      LName = &quot;Xyz&quot;,<br />                                      Dob = new DateTime(2011, 1, 1),<br />                                      Active = true,<br />                                      Salary = 12345<br />                                    };<br />        }<br />        public PersonModel Model { get; set; }<br /><br />        public bool CanExecuteCancel(object o)<br />        {<br />            return Model.IsDirty;<br />        }<br />        public void ExecuteCancel(object o)<br />        {<br />            ;;//your code...<br />        }<br />        public bool CanExecuteSave(object o)<br />        {<br />            return Model.IsDirty; ;//your code...<br />        }<br />        public void ExecuteSave(object o)<br />        {<br />            ;//your code...<br />        }<br />    }<br /><br />The <b>DynamicModel</b> Allows developer to create the model without INotifyPropertyChanged implementation and   the medal’s  properties without PropertyChanged<br />Event and it’s allows developer to add DataAnnotations’s attributes to add validation.<br />e.g.  Model example as below <br />    public class Person<br />    {<br />        [Display(Name = &quot;Employee Id&quot;)]<br />        [Required]<br />        public int Id { get; set; }<br /><br />        [Display(Name = &quot;First Name&quot;)]<br />        [Required]<br />        [StringLength(25)]<br />        public string FName { get; set; }<br /><br />        [Display(Name = &quot;SurName&quot;)]<br />        [Required]<br />        [StringLength(25)]<br />        public string LName { get; set; }<br /><br />        public DateTime Dob { get; set; }<br /><br />        [Display(Name = &quot;Salary PM&quot;)]<br />        [Required]<br />        public decimal Salary { get; set; }<br /><br />        public bool Active { get; set; }<br />    }<br />Then pass the Person Model into DynamicModel as below<br />            Model = new DynamicMVVM.DynamicModel(new Person<br />                                         {<br />                                             Id = 1,<br />                                             FName = &quot;Abc&quot;,<br />                                             LName = &quot;Xyz&quot;,<br />                                             Dob = new DateTime(2011, 1, 1),<br />                                             Active = true,<br />                                             Salary = 12345<br /><br />                                         }<br /><br /></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2012-03-04T10:31:41.423-08:00"
}