{
  "ProjectName": "opensearchclient",
  "Title": "OpenSearch Client",
  "Description": "A WPF control and IE Toolbar capable of using any OpenSearch-compatible search engines.\n\nThe toolbar is a replacement for the missing SearchBox in IE 9.  \n\nThe control currently relies on IE's list of registered search engines, but the API allows others to be plugged in",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />A WPF control and IE Toolbar capable of using any OpenSearch-compatible search engines.<br /><br />The toolbar is a replacement for the missing SearchBox in IE 9.  <br /><br />The control currently relies on IE&#39;s list of registered search engines, but the API allows others to be plugged in<br /><br />The code is checked-in and in mostly-working shape.  There are a few outstanding TODO&#39;s though:\n<ul><li>Implement reading search configuration from the registry</li>\n<li>Share state across instances (each IE tab creates its own instance in a separate proc).  The nessesary state includes the currently selected engine and the current terms.</li>\n<li>Create an installer</li>\n<li>Investigate per-user COM to not require Admin for installing.</li>\n<li>Investigate issue where toolbar disappears from IE</li>\n<li>Support JSON responses (Google)</li>\n<li>Detect/support the various OpenSearch URI&#39;s (Microsoft, OpenSearch 2.0, OpenSearch 1.1, etc)</li></ul>\n\n<h3>To debug the IE Toolbar:</h3>\rSet OpenSearch.Bho as the startup project and use iexplore.exe as the startup exe.  You can set about:blank or about:tabs as the startup parameters.<br /><br />One pain point in this is debugging.  As IE appears to create an owner and child process, the instance of IE that gets started does not appear have the code running in it.  Instead, you need to create a new tab, then attach to process and in the dialog, you&#39;ll see Managed (.net 4) next ot the process.<br /><br />Another pain point -- you need to close all IE instances before you can rebuild as the libraries will be loaded otherwise.  I recommend using another browser while debugging/testing the addin.<br />\n<h3>To debug the Search Control:</h3>\rSet OpenSearch.TestApp as the startup project.  I&#39;ve also included an alternate debug solution configuration that doesn&#39;t build the COM projects (which auto-registers them).  <br />\n<h3>To build:</h3>\rYou&#39;ll need the latest Code Contracts from DevLabs and the Visual Studio Asyc CTP (with the C# 5.0) compiler installed.  The resulting code has no dependencies other than the regular .NET 4 client profile as we&#39;re using compile-time features.<br /><br />Building the BHO project will perform COM regisration.  As such, you must run Visual Studio as Administrator.  If not, the build will not succeed as COM registration will fail.  If anyone knows of a way to get per-user COM working easily, then this can be made far easier with a post-build step.<br /><br />A solution Clean will unregister the COM add-in, and is the best thing do on a shared machine so other users don&#39;t get exceptions when they use IE (as the dll&#39;s won&#39;t likely be in a location they have access to).<br /><br />If anyone would like to help, please just let me know.<br />\n<h3>Update Re: IE9 RC</h3>\rThe Release Candidate has made some improvements w.r.t. searching and while not as good as the old search box was, you can now click the search icon or Ctrl+E and it will go to your last search term.  That being the case, it&#39;s unlikely work on the OpenSearch client will continue, at least as an IE add-in.  It may still be useful for adding custom search auto-complete within a standalone application, however.</div><div class=\"ClearBoth\"></div>",
  "TagList": "IE,IE9,C# 5.0,WPF,Toolbar,SpicIE,BHO,",
  "LastEdited": "2011-02-12T12:52:45.38-08:00"
}