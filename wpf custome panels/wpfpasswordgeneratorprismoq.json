{
  "ProjectName": "wpfpasswordgeneratorprismoq",
  "Title": "WPF Password Generator with Prism 5 and Moq (2014)",
  "Description": "This is a  WPF reference implementation for developing an MVVM application that uses Prism (5) and Moq.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This is a  WPF reference implementation for developing an MVVM application that uses Prism &#40;5&#41; and Moq.<br /><br /><img src=\"/projects/wpfpasswordgeneratorprismoq/be753e83-5a09-4c31-9ef0-f514abac77a1\" alt=\"CropperCapture&#91;1&#93;.jpg\" title=\"CropperCapture&#91;1&#93;.jpg\" /><br /><img src=\"/projects/wpfpasswordgeneratorprismoq/4c718f70-34d2-4155-9070-d4cb900fd508\" alt=\"CropperCapture&#91;2&#93;.jpg\" title=\"CropperCapture&#91;2&#93;.jpg\" /><br />\n<h2>Purpose</h2>\rThe application provides a point of reference for developing an MVVM application that solves a real world problem (i.e., generate a strong password that adheres to a set of rules) which is universally easy to understand.  Technologies used are...\n<ul><li>Prism (Version 5)</li>\n<li>NUnit (Version 2.6.3)</li>\n<li>Moq (Version 4.2.*)</li></ul>\n\n<h2>Design Patterns </h2>\r\n<ul><li> <b>Model View View Model</b>  The Model View ViewModel (MVVM) is an architectural pattern used in software engineering that originated from Microsoft as a specialization of the Presentation Model design pattern introduced by Martin Fowler.<a href=\"https://wpfpasswordgeneratorprismoq.codeplex.com/wikipage?title=1&referringTitle=Home\">1</a> Largely based on the model–view–controller pattern (MVC), MVVM is a specific implementation targeted at UI development platforms which support the event-driven programming in Windows Presentation Foundation (WPF) and Silverlight on the .NET platforms using XAML and .NET languages. Technically different, but similar, Presentation Model design patterns are available in HTML5 through AngularJS,<a href=\"https://wpfpasswordgeneratorprismoq.codeplex.com/wikipage?title=2&referringTitle=Home\">2</a><a href=\"https://wpfpasswordgeneratorprismoq.codeplex.com/wikipage?title=3&referringTitle=Home\">3</a> KnockoutJS,<a href=\"https://wpfpasswordgeneratorprismoq.codeplex.com/wikipage?title=4&referringTitle=Home\">4</a> Ext JS,<a href=\"https://wpfpasswordgeneratorprismoq.codeplex.com/wikipage?title=5&referringTitle=Home\">5</a> Vue.js, and for Java the ZK framework (Model-View-Binder). (source: <a href=\"http://en.wikipedia.org/wiki/Model_View_ViewModel\">http://en.wikipedia.org/wiki/Model_View_ViewModel</a>)</li></ul>\n\n<ul><li><b>Dependency Injection</b>  Dependency injection (DI) is a prime technique for building loosely coupled applications. It provides opportunities to simplify code, abstract and handle dependencies between objects, and automatically generate dependent object instances. Dependency injection describes the process of designing applications so that, rather than specifying concrete dependencies within the application at design time and creating the required objects in the code, the application decides at run time what objects it needs, and generates and injects these into the application. (source <a href=\"http://msdn.microsoft.com/en-us/library/ff953186(v=pandp.50).aspx\">http://msdn.microsoft.com/en-us/library/ff953186(v=pandp.50).aspx</a></li></ul>\n\n<ul><li> <b>Command Pattern</b>  In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to represent and encapsulate all the information needed to call a method at a later time. This information includes the method name, the object that owns the method and values for the method parameters. (source <a href=\"http://en.wikipedia.org/wiki/Command_pattern\">http://en.wikipedia.org/wiki/Command_pattern</a>  )</li></ul>\n\n<ul><li><b>Module Discovery</b>  This is the process of populating a module catalog. Frequently, this is done directly or by sweeping a directory, but your application may need to do this some other way, such as from a database. In these cases, you can create a custom catalog that populates itself from an appropriate source. (source:  <a href=\"http://msdn.microsoft.com/en-us/library/gg430866(v=pandp.40).aspx\">http://msdn.microsoft.com/en-us/library/gg430866(v=pandp.40).aspx</a>)</li></ul>\n\n<ul><li><b>Event Aggregator</b>  The EventAggregator service is primarily a container for events that allow decoupling of publishers and subscribers so they can evolve independently. This decoupling is useful in modularized applications because new modules can be added that respond to events defined by the shell or, more likely, other modules. (source <a href=\"http://msdn.microsoft.com/en-us/library/ff921122.aspx\">http://msdn.microsoft.com/en-us/library/ff921122.aspx</a>)</li></ul>\n\n<ul><li><b>Loose Coupling</b> In computing and systems design a loosely coupled system is one in which each of its components has, or makes use of, little or no knowledge of the definitions of other separate components. The notion was introduced into organizational studies by Karl Weick. Sub-areas include the coupling of classes, interfaces, data, and services. (source: <a href=\"http://en.wikipedia.org/wiki/Loose_coupling\">http://en.wikipedia.org/wiki/Loose_coupling</a>)</li></ul>\n<br />\n<h2>Test Driven Development</h2>\r\nThe project contains a suite of unit tests that use the <i>NUnit</i> (<a href=\"http://www.nunit.org/\">http://www.nunit.org/</a>) and <i>MOQ</i> (<a href=\"https://www.nuget.org/packages/moq/\">https://www.nuget.org/packages/moq/</a>) libraries. <br />\n<h2>Themes</h2>\r\nThe application uses the &#39;Shiny Blue&#39; theme, which is available here on Codeplex.  Visit <a href=\"https://wpf.codeplex.com/wikipage?title=WPF%20Themes\">https://wpf.codeplex.com/wikipage?title=WPF%20Themes</a> to download other themes.<br />\n<h2>Component Assemblies</h2>\r\n<b>Infrastructure</b> (logging, events, constants, and base classes)<br /><b>ViewsAndViewModels</b> (The UI and its data context)<br /><b>Model</b> (calculations)<br /><b>TciPasswordGenerator</b> (bootstrap, shell, and resources)<br />\n<h2>Build Information</h2>\rThe application is written in C# and is targeted for the .NET 4.5 Framework.<br />\n<h2>NOTES</h2>\rNote: in order to build this application, NuGet must be installed.  See <a href=\"http://docs.nuget.org/docs/start-here/installing-nuget\">http://docs.nuget.org/docs/start-here/installing-nuget</a> for information on how to install NuGet<br /><br />Note: in order to run this program, NuGet may need to check the version of Prism and Moq, this requires that the app config contain...<br />  &lt;runtime&gt;<br />    &lt;loadFromRemoteSources enabled=&quot;true&quot;/&gt;<br />  &lt;/runtime&gt;<br />for more information see <a href=\"http://msdn.microsoft.com/en-us/library/dd409252(v=vs.110).aspx\">http://msdn.microsoft.com/en-us/library/dd409252(v=vs.110).aspx</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2014-05-19T05:47:54.64-07:00"
}