{
  "ProjectName": "ConsoleRedirect",
  "Title": "Redirect System.Console to Streams and WPF controls, UI, and streams",
  "Description": "This project shows how to intercept the console text and redirect it to other streams and WPF UI elements such as a Textbox, while still writing to the standard console. This project presents classes to perform this task, and gives an example debug console window.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><b>Project Description</b><br />This project shows how to intercept the console text and redirect it to other streams and WPF UI elements such as a Textbox, while still writing to the standard console. This project presents classes to perform this task, and gives an example debug console window.<br /><br /><br /><img src=\"/projects/ConsoleRedirect/9b923c56-5ec6-49f8-8074-ceaf4006ca4d\" alt=\"debugconsole.png\" title=\"debugconsole.png\" /><br /><br /><br /><b>Multicast Redirect TextWriter</b><br />First we inherit a TextWriter and overriding its write(...) and writeline(...) methods. I inherit from the String writer to save myself the trouble of implementing all the TextWriter methods. Feel free to override any another additional methods you may need.<br /><br />Some key things I will point is the use of generics to make the code more concise. The generic method allows for you to easily modify the behavior or set of methods with the same behavior, but different signatures.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n     <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> RedirectWriter : StringWriter\n    {\n       \n        <span style=\"color:Blue;\">public</span> Action&lt;String&gt; OnWrite;\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> WriteGeneric&lt;T&gt;(T value) {  <span style=\"color:Blue;\">if</span> (OnWrite != <span style=\"color:Blue;\">null</span>) OnWrite(value.ToString()); }\n\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> Write(<span style=\"color:Blue;\">char</span> value) { WriteGeneric&lt;<span style=\"color:Blue;\">char</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> Write(<span style=\"color:Blue;\">string</span> value) { WriteGeneric&lt;<span style=\"color:Blue;\">string</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> Write(<span style=\"color:Blue;\">bool</span> value) { WriteGeneric&lt;<span style=\"color:Blue;\">bool</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> Write(<span style=\"color:Blue;\">int</span> value) { WriteGeneric&lt;<span style=\"color:Blue;\">int</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> Write(<span style=\"color:Blue;\">double</span> value) { WriteGeneric&lt;<span style=\"color:Blue;\">double</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> Write(<span style=\"color:Blue;\">long</span> value) { WriteGeneric&lt;<span style=\"color:Blue;\">long</span>&gt;(value); }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> WriteLineGeneric&lt;T&gt;(T value) { <span style=\"color:Blue;\">if</span> (OnWrite != <span style=\"color:Blue;\">null</span>) OnWrite(value.ToString() + <span style=\"color:#A31515;\">&quot;\\n&quot;</span>); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> WriteLine(<span style=\"color:Blue;\">char</span> value) { WriteLineGeneric&lt;<span style=\"color:Blue;\">char</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> WriteLine(<span style=\"color:Blue;\">string</span> value) { WriteLineGeneric&lt;<span style=\"color:Blue;\">string</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> WriteLine(<span style=\"color:Blue;\">bool</span> value) { WriteLineGeneric&lt;<span style=\"color:Blue;\">bool</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> WriteLine(<span style=\"color:Blue;\">int</span> value) { WriteLineGeneric&lt;<span style=\"color:Blue;\">int</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> WriteLine(<span style=\"color:Blue;\">double</span> value) { WriteLineGeneric&lt;<span style=\"color:Blue;\">double</span>&gt;(value); }\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> WriteLine(<span style=\"color:Blue;\">long</span> value) { WriteLineGeneric&lt;<span style=\"color:Blue;\">long</span>&gt;(value); }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> Write(<span style=\"color:Blue;\">char</span>[] buffer, <span style=\"color:Blue;\">int</span> index, <span style=\"color:Blue;\">int</span> count)\n        {           \n            <span style=\"color:Blue;\">base</span>.Write(buffer,index,count);\n            <span style=\"color:Blue;\">char</span>[] buffer2 = <span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">char</span>[count]; <span style=\"color:Green;\">//Ensures large buffers are not a problem</span>\n            <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; count; i++) buffer2[i] = buffer[index + i];\n            WriteGeneric&lt;<span style=\"color:Blue;\">char</span>[]&gt;(buffer2);\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> WriteLine(<span style=\"color:Blue;\">char</span>[] buffer, <span style=\"color:Blue;\">int</span> index, <span style=\"color:Blue;\">int</span> count)\n        {\n            <span style=\"color:Blue;\">base</span>.Write(buffer, index, count);\n            <span style=\"color:Blue;\">char</span>[] buffer2 = <span style=\"color:Blue;\">new</span> <span style=\"color:Blue;\">char</span>[count]; <span style=\"color:Green;\">//Ensures large buffers are not a problem</span>\n            <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; count; i++) buffer2[i] = buffer[index + i];\n            WriteLineGeneric&lt;<span style=\"color:Blue;\">char</span>[]&gt;(buffer2);\n        }\n    }\n\r\n</pre></div><br /><br /><b>Console Redirect</b><br />Next we create a class for redirecting the console stream to all registered delegates while still writing to the initial console.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> ConsoleRedirectWriter : RedirectWriter\n    {\n        TextWriter consoleTextWriter; <span style=\"color:Green;\">//keeps Visual Studio console in scope.</span>\n\n        <span style=\"color:Blue;\">public</span> ConsoleRedirectWriter()\n        {\n            consoleTextWriter = Console.Out;\n            <span style=\"color:Blue;\">this</span>.OnWrite += <span style=\"color:Blue;\">delegate</span>(<span style=\"color:Blue;\">string</span> text) { consoleTextWriter.Write(text); };\n            Console.SetOut(<span style=\"color:Blue;\">this</span>);\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Release()\n        {\n            Console.SetOut(consoleTextWriter);\n        }\n    }\r\n</pre></div><br /><br /><b>Example Application</b><br />Next we declare this in your window, and register our UIelements or other streams. Its advisable to use the ConsoleRedirectWriter like a singleton. Multiple declarations have not been tested.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> WindowDebugConsole : Window\n    {\n        \n        ConsoleRedirectWriter consoleRedirectWriter = <span style=\"color:Blue;\">new</span> ConsoleRedirectWriter(); \n        String LastConsoleString;\n\n        <span style=\"color:Blue;\">public</span> WindowDebugConsole()\n        {         \n            InitializeComponent();\n            <span style=\"color:Blue;\">this</span>.Closed += <span style=\"color:Blue;\">delegate</span>(Object o, EventArgs e) { consoleRedirectWriter.Release(); };  <span style=\"color:Green;\">//sets releases console when window closes.</span>\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> textBoxDebug_Initialized(<span style=\"color:Blue;\">object</span> sender, EventArgs e)\n        {\n            <span style=\"color:Green;\">// Use this for thread safe objects or UIElements in a single thread program</span>\n            consoleRedirectWriter.OnWrite += <span style=\"color:Blue;\">delegate</span>(<span style=\"color:Blue;\">string</span> value) { LastConsoleString = value; };\n            \n            <span style=\"color:Green;\">// Multithread operation - Use the dispatcher to write to WPF UIElements if there is more than 1 thread.</span>\n            consoleRedirectWriter.OnWrite +=  Dispatcher.BeginInvoke(DispatcherPriority.Normal, \n                (Action&lt;<span style=\"color:Blue;\">string</span>&gt;) <span style=\"color:Blue;\">delegate</span>(<span style=\"color:Blue;\">string</span> value){ textBoxDebug.AppendText(value); textBoxDebug.ScrollToEnd();}, text );\n        }\n    \n    }\r\n</pre></div><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Window</span> <span style=\"color:Red;\">x:Class</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Application.WindowDebugConsole</span><span style=\"color:Black;\">&quot;</span>\n        <span style=\"color:Red;\">xmlns</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:Black;\">&quot;</span>\n        <span style=\"color:Red;\">xmlns:x</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:Black;\">&quot;</span>\n        <span style=\"color:Red;\">Title</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Debug Console</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Height</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">300</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Width</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">300</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">WindowStyle</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">ToolWindow</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Grid</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBox</span> <span style=\"color:Red;\">Name</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">textBoxDebug</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">ScrollViewer.VerticalScrollBarVisibility</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Visible</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">TextWrapping</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Wrap</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">Initialized</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">textBoxDebug_Initialized</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Blue;\">/&gt;</span>\n    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Grid</span><span style=\"color:Blue;\">&gt;</span>\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Window</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div><br />Your console window is now ready to open! <br /><br />I like to bind mine to a debug MenuItem as shown below.<br /><br /><div style=\"color:Black;background-color:White;\"><pre>\r\n         <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> menuItemDebugConsole_Checked(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n        {\n            UtilityPattern.MultithreadWindowLaunchPattern(<span style=\"color:Blue;\">this</span>, windowDebugConsole, <span style=\"color:Blue;\">delegate</span>() { menuItemDebugConsole.IsChecked = <span style=\"color:Blue;\">false</span>; });\n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> menuItemDebugConsole_Unchecked(<span style=\"color:Blue;\">object</span> sender, RoutedEventArgs e)\n        {\n            <span style=\"color:Blue;\">if</span> (windowDebugConsole != <span style=\"color:Blue;\">null</span>) windowDebugConsole.Dispatcher.BeginInvoke(DispatcherPriority.Normal, (Action)<span style=\"color:Blue;\">delegate</span>() { windowDebugConsole.Close(); });       \n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">static</span> <span style=\"color:Blue;\">void</span> MultithreadWindowLaunchPattern(Window parent, Window child, Action OnChildCloseParentAction )\n        {\n            Thread thread = <span style=\"color:Blue;\">new</span> Thread( () =&gt; {\n                child = <span style=\"color:Blue;\">new</span> WindowDebugConsole();\n                child.Topmost = <span style=\"color:Blue;\">true</span>;\n\n                child.Closed += (sender2, e2) =&gt;\n                {\n                    child.Dispatcher.InvokeShutdown();\n                    parent.Dispatcher.BeginInvoke(DispatcherPriority.Normal, OnChildCloseParentAction);\n                };      \n                child.Show();                \n                System.Windows.Threading.Dispatcher.Run();\n            });\n            \n            parent.Closed += <span style=\"color:Blue;\">delegate</span>(<span style=\"color:Blue;\">object</span> a, EventArgs ev) { child.Dispatcher.BeginInvoke(DispatcherPriority.Normal, (Action)<span style=\"color:Blue;\">delegate</span>() { child.Close(); });};\n            thread.SetApartmentState(ApartmentState.STA);\n            thread.Start();\n        }\n    }\n\n\r\n</pre></div><br />And there you have it, a method for redirecting the console, and a WPF example of its application.</div><div class=\"ClearBoth\"></div>",
  "TagList": "",
  "LastEdited": "2010-10-01T20:37:50.417-07:00"
}