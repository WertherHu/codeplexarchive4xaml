{
  "ProjectName": "EventAbstractionAPI",
  "Title": "Event Abstraction API for .NET",
  "Description": "An event abstraction framework for .NET written in C# using R2ML. The Framework helps decouple event handling and event declarations from the User Interface. It also handles Complex/Composite Events (such as mouse gestures or triple click) the same way as a primitive events. Complex Events are events that are made from many primitive events; an example would be double click (as it can be made from two click events). The project has Visual Studio plug-ins provided to complement the VS UI designer. This project is the result of a Masterate of Science entitled: \"A Rule Based User Interface Builder for Visual Studio .NET\". This project uses R2ML as a way of storing reaction rules that conform to the concepts of ECA rules. Reaction Rules are rules that are executed upon an event occurring.",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>Event Abstraction API for .NET</h1>\r\n<b>Project Description</b><br /><br />An event abstraction framework for .NET written in C&#35; using R2ML. The Framework helps decouple event handling and event declarations from the User Interface. It also handles Complex&#47;Composite Events &#40;such as mouse gestures or triple click&#41; the same way as a primitive events. Complex Events are events that are made from many primitive events&#59; an example would be double click &#40;as it can be made from two click events&#41;. The project has Visual Studio plug-ins provided to complement the VS UI designer. This project is the result of a Masterate of Science entitled&#58; &#34;A Rule Based User Interface Builder for Visual Studio .NET&#34;. This project uses R2ML as a way of storing reaction rules that conform to the concepts of ECA rules. Reaction Rules are rules that are executed upon an event occurring.<br /><br />If you strive for better Object Oriented software design then this framework will be of interest to you. It treats User Interfaces as a query-able item, and allows for the manipulation of events to suit a use case rather than the way the .NET framework prefers to handle events.  The implementation currently is experimental however.<br />\n<ul><li><a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Who%20should%20use%20this%20API%20and%20Why&referringTitle=Home\">Who should use this API and Why</a></li>\n<li><a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Concepts&referringTitle=Home\">Concepts</a></li>\n<li><a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Getting%20Started&referringTitle=Home\">Getting Started</a></li>\n<li><a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Advanced&referringTitle=Home\">Advanced</a></li></ul>\n<br />Update: 8 October 2008<br /><br />I am considering an update for this project in the following areas:<br />1 Upgrade to VS 2008 (yet to upload but done).<br /><b>2 Investigate WPF Routed Commands as a way of specifying rule contracts. Also investigate WPF Command Gestures</b><br />3 Refactor design &amp; possibly implement Inversion of Control such as Ninjector &amp; attempt to refactor with the strategy pattern in mind<br />4 Start proper unit testing strategy<br />5 Rethinking approach of implementation to address performance, better API design and think about minimizing code generation or make it optional, and think about View Model View/Model pattern implications and silverlight.<br /><br /><br /><a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Concepts&referringTitle=Home\">Concepts</a> | <a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Getting%20Started&referringTitle=Home\">Getting Started</a> | <a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Performance&referringTitle=Home\">Performance</a> | <a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Technologies%20Used&referringTitle=Home\">Technologies Used</a> | <a href=\"https://eventabstractionapi.codeplex.com/wikipage?title=Credits&referringTitle=Home\">Credits</a></div><div class=\"ClearBoth\"></div>",
  "TagList": "API,Events,MVP,Model View Presenter,Abstraction,ECA,R2ML,xpath,MVC,Library,event systems,routing,research,event algebra,GUI,vs2005,rules,reaction rules,event correlation,complex event,wpf,",
  "LastEdited": "2008-10-07T14:02:05.893-07:00"
}