{
  "ProjectName": "BindingEngine",
  "Title": "BindingEngine",
  "Description": "Custom Binding Engine that support WinFrom. WPF, Web and Mono.\r\nIt support Property, Collection, Command and Method binding. \r\nOne ViewModel support mutilple View",
  "MovedLink": "",
  "HomeWiki": "<div class=\"wikidoc\"><h1>BindingEngine</h1>\r\nCustom BindingEngine that support all .net environment : Winform, WPF, Web, Mono, Xamarin. etc.<br />The goal of BindingEngine is making your ViewModel everywhere.<br /><br /><b>Mark</b> : <b>Fully Refactor and Add Unit Test, will add the detail documentation later.</b><br /><br />The original implementation of Winform binding is heavy and not powerful enough than WPF.<br />It does not support ICommand, Recursive Binding, etc.<br />\n<h3>Analyze the binding:</h3>\r1. <b>When</b><br />What trigger the binding update? Usually the binding is updated via INotifyPropertyChanged&#39;s PropertyChanged event in ViewModel scenario.<br />2. <b>Direction</b><br />Direction of the Data Flow. OneWay, TwoWay, OneWayToSource, OneTime?<br />3. <b>Update</b><br />After binding is triggered, the detail update strategy for different binding. The binding can work on pure Property, Collection, ICommand and Method.<br />\n<h3>The use of BindingEngine:</h3>\r\n<pre>\nBindingEngine.SetXXXBinding( source, sourceProp, target, targetProp )\n</pre><br />, XXX can be Property, Collection, Command and Method.<br /><pre>\nBindingEngine.SetPropertyBinding(nameTextbox, i =&gt; i.Text, DataWarehouse.Instance, o =&gt; o.MainViewModel.CurrentPerson.Name)    \n             .SetMode(BindMode.TwoWay)    \n             .AttachSourceEvent(&quot;TextChanged&quot;);\n</pre><br />SetPropertyBinding indicates it&#39;s a Property Binding;<br />SetMode indicates it&#39;s a TwoWay binding;<br />AttactSourceEvent indicates the binding is triggered when TextChanged event occured on the source--&gt;<b>nameTextbox</b>.<br /><br /><pre>\nBindingEngine.SetMethodBinding(viewModelLabel, i =&gt; i.Text, DataWarehouse.Instance, o =&gt; o.MainViewModel)    \n             .AttachTargetMethod(o =&gt; o.MainViewModel, &quot;GetHashCode&quot;);\n</pre><br />This binding means the Label--&gt;<b>viewModelLabel</b>.Text is bind to the MainViewModel GetHashCode method.<br /><br /><br /><br />Have fun with it. ^_^</div><div class=\"ClearBoth\"></div>",
  "TagList": "WPF,Winform,MVVM,Binding,Emit,Xamarin,Mono,",
  "LastEdited": "2014-11-21T23:05:24.643-08:00"
}